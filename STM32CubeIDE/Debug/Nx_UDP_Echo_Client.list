
Nx_UDP_Echo_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014fbc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0801516c  0801516c  0001616c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157bc  080157bc  000170f8  2**0
                  CONTENTS
  4 .ARM          00000008  080157bc  080157bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157c4  080157c4  000170f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080157c4  080157c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157c8  080157c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080157cc  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000170f8  2**0
                  CONTENTS
 10 .bss          0000b474  200000f8  200000f8  000170f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b56c  2000b56c  000170f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000170f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000ec906  00000000  00000000  00017128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00014349  00000000  00000000  00103a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a8  00000000  00000000  00117d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cc4  00000000  00000000  0011a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003cbed  00000000  00000000  0011c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00062201  00000000  00000000  00158fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001011e9  00000000  00000000  001bb1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  002bc3bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083c8  00000000  00000000  002bc400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000017a  00000000  00000000  002c47c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f8 	.word	0x200000f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015154 	.word	0x08015154

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000fc 	.word	0x200000fc
 80001ec:	08015154 	.word	0x08015154

080001f0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001f0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001f2:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001f6:	4919      	ldr	r1, [pc, #100]	@ (800025c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001f8:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001fc:	4818      	ldr	r0, [pc, #96]	@ (8000260 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001fe:	4917      	ldr	r1, [pc, #92]	@ (800025c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000200:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000202:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000204:	4817      	ldr	r0, [pc, #92]	@ (8000264 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000206:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000208:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800020c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800020e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000212:	4915      	ldr	r1, [pc, #84]	@ (8000268 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000214:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000216:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800021a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800021c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000220:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000224:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000228:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800022c:	490f      	ldr	r1, [pc, #60]	@ (800026c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800022e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000232:	4770      	bx	lr

08000234 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000234:	f7ff bffe 	b.w	8000234 <__tx_BadHandler>

08000238 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000238:	f7ff bffe 	b.w	8000238 <__tx_HardfaultHandler>

0800023c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800023c:	f7ff bffe 	b.w	800023c <__tx_SVCallHandler>

08000240 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000240:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000242:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000246:	4770      	bx	lr

08000248 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000248:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800024a:	f000 f891 	bl	8000370 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800024e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000252:	4770      	bx	lr

08000254 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000254:	f7ff bffe 	b.w	8000254 <__tx_NMIHandler>

08000258 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000258:	f7ff bffe 	b.w	8000258 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800025c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000260:	2000ae10 	.word	0x2000ae10
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000264:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000268:	001b773f 	.word	0x001b773f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800026c:	40ff0000 	.word	0x40ff0000

08000270 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000270:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000274:	4a2a      	ldr	r2, [pc, #168]	@ (8000320 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000276:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000278:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800027c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000280:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000284:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000286:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800028a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800028e:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000292:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000296:	f3bf 8f6f 	isb	sy

0800029a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800029a:	e7fe      	b.n	800029a <__tx_wait_here>

0800029c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800029c:	4821      	ldr	r0, [pc, #132]	@ (8000324 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800029e:	4a22      	ldr	r2, [pc, #136]	@ (8000328 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002a0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002a4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002a6:	b191      	cbz	r1, 80002ce <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002a8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002aa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002ae:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002b2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002b6:	d101      	bne.n	80002bc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002b8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002bc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002bc:	4c1b      	ldr	r4, [pc, #108]	@ (800032c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002be:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002c2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002c4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002c8:	b10d      	cbz	r5, 80002ce <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ca:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002cc:	6023      	str	r3, [r4, #0]

080002ce <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002ce:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002d0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002d2:	b1b1      	cbz	r1, 8000302 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002d4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002d6:	b662      	cpsie	i

080002d8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002d8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002da:	4c14      	ldr	r4, [pc, #80]	@ (800032c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002dc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002de:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002e2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002e4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002e6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002ea:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002ee:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002f2:	d101      	bne.n	80002f8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002f4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002f8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002f8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002fc:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000300:	4770      	bx	lr

08000302 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000302:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000304:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000306:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000308:	b909      	cbnz	r1, 800030e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800030c:	e7f9      	b.n	8000302 <__tx_ts_wait>

0800030e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800030e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000312:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000316:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800031a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800031c:	e7dc      	b.n	80002d8 <__tx_ts_restore>

0800031e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800031e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000320:	2000aeac 	.word	0x2000aeac
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000324:	2000ae14 	.word	0x2000ae14
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000328:	2000ae18 	.word	0x2000ae18
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032c:	2000b41c 	.word	0x2000b41c

08000330 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000330:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000332:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000336:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800033a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800033e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000340:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000344:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000346:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000348:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800034a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800034c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800034e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000350:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000352:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000354:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000356:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000358:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800035c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800035e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000362:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000364:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800036a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800036c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800036e:	4770      	bx	lr

08000370 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000370:	4922      	ldr	r1, [pc, #136]	@ (80003fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000372:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000374:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000378:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800037a:	4b21      	ldr	r3, [pc, #132]	@ (8000400 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800037c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800037e:	b13a      	cbz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000380:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000384:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000386:	b91a      	cbnz	r2, 8000390 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000388:	4b1e      	ldr	r3, [pc, #120]	@ (8000404 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800038a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800038e:	6018      	str	r0, [r3, #0]

08000390 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000390:	491d      	ldr	r1, [pc, #116]	@ (8000408 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000392:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000394:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000396:	b122      	cbz	r2, 80003a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000398:	4b1c      	ldr	r3, [pc, #112]	@ (800040c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800039a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800039e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003a0:	e008      	b.n	80003b4 <__tx_timer_done>

080003a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003ac:	d101      	bne.n	80003b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003ae:	4b19      	ldr	r3, [pc, #100]	@ (8000414 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003b0:	6818      	ldr	r0, [r3, #0]

080003b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003b2:	6008      	str	r0, [r1, #0]

080003b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003b4:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003b8:	b912      	cbnz	r2, 80003c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ba:	4914      	ldr	r1, [pc, #80]	@ (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003be:	b1d0      	cbz	r0, 80003f6 <__tx_timer_nothing_expired>

080003c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003c4:	4911      	ldr	r1, [pc, #68]	@ (800040c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003c8:	b108      	cbz	r0, 80003ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ca:	f012 fc05 	bl	8012bd8 <_tx_timer_expiration_process>

080003ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003d2:	b172      	cbz	r2, 80003f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003d4:	f012 f9f0 	bl	80127b8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003d8:	480f      	ldr	r0, [pc, #60]	@ (8000418 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003dc:	b949      	cbnz	r1, 80003f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003de:	480f      	ldr	r0, [pc, #60]	@ (800041c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000420 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003e6:	480f      	ldr	r0, [pc, #60]	@ (8000424 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003ee:	d000      	beq.n	80003f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003f0:	6002      	str	r2, [r0, #0]

080003f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	2000aeb8 	.word	0x2000aeb8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000400:	2000b41c 	.word	0x2000b41c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000404:	2000aebc 	.word	0x2000aebc
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000408:	2000af48 	.word	0x2000af48
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800040c:	2000af4c 	.word	0x2000af4c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000410:	2000af44 	.word	0x2000af44
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000414:	2000af40 	.word	0x2000af40
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000418:	2000aeac 	.word	0x2000aeac
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800041c:	2000ae14 	.word	0x2000ae14
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000420:	2000ae18 	.word	0x2000ae18
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000424:	e000ed04 	.word	0xe000ed04

08000428 <strlen>:
 8000428:	4603      	mov	r3, r0
 800042a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800042e:	2a00      	cmp	r2, #0
 8000430:	d1fb      	bne.n	800042a <strlen+0x2>
 8000432:	1a18      	subs	r0, r3, r0
 8000434:	3801      	subs	r0, #1
 8000436:	4770      	bx	lr
	...

08000440 <memchr>:
 8000440:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000444:	2a10      	cmp	r2, #16
 8000446:	db2b      	blt.n	80004a0 <memchr+0x60>
 8000448:	f010 0f07 	tst.w	r0, #7
 800044c:	d008      	beq.n	8000460 <memchr+0x20>
 800044e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000452:	3a01      	subs	r2, #1
 8000454:	428b      	cmp	r3, r1
 8000456:	d02d      	beq.n	80004b4 <memchr+0x74>
 8000458:	f010 0f07 	tst.w	r0, #7
 800045c:	b342      	cbz	r2, 80004b0 <memchr+0x70>
 800045e:	d1f6      	bne.n	800044e <memchr+0xe>
 8000460:	b4f0      	push	{r4, r5, r6, r7}
 8000462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800046a:	f022 0407 	bic.w	r4, r2, #7
 800046e:	f07f 0700 	mvns.w	r7, #0
 8000472:	2300      	movs	r3, #0
 8000474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000478:	3c08      	subs	r4, #8
 800047a:	ea85 0501 	eor.w	r5, r5, r1
 800047e:	ea86 0601 	eor.w	r6, r6, r1
 8000482:	fa85 f547 	uadd8	r5, r5, r7
 8000486:	faa3 f587 	sel	r5, r3, r7
 800048a:	fa86 f647 	uadd8	r6, r6, r7
 800048e:	faa5 f687 	sel	r6, r5, r7
 8000492:	b98e      	cbnz	r6, 80004b8 <memchr+0x78>
 8000494:	d1ee      	bne.n	8000474 <memchr+0x34>
 8000496:	bcf0      	pop	{r4, r5, r6, r7}
 8000498:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800049c:	f002 0207 	and.w	r2, r2, #7
 80004a0:	b132      	cbz	r2, 80004b0 <memchr+0x70>
 80004a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004a6:	3a01      	subs	r2, #1
 80004a8:	ea83 0301 	eor.w	r3, r3, r1
 80004ac:	b113      	cbz	r3, 80004b4 <memchr+0x74>
 80004ae:	d1f8      	bne.n	80004a2 <memchr+0x62>
 80004b0:	2000      	movs	r0, #0
 80004b2:	4770      	bx	lr
 80004b4:	3801      	subs	r0, #1
 80004b6:	4770      	bx	lr
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	bf06      	itte	eq
 80004bc:	4635      	moveq	r5, r6
 80004be:	3803      	subeq	r0, #3
 80004c0:	3807      	subne	r0, #7
 80004c2:	f015 0f01 	tst.w	r5, #1
 80004c6:	d107      	bne.n	80004d8 <memchr+0x98>
 80004c8:	3001      	adds	r0, #1
 80004ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80004ce:	bf02      	ittt	eq
 80004d0:	3001      	addeq	r0, #1
 80004d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80004d6:	3001      	addeq	r0, #1
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	3801      	subs	r0, #1
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <__aeabi_uldivmod>:
 80004e0:	b953      	cbnz	r3, 80004f8 <__aeabi_uldivmod+0x18>
 80004e2:	b94a      	cbnz	r2, 80004f8 <__aeabi_uldivmod+0x18>
 80004e4:	2900      	cmp	r1, #0
 80004e6:	bf08      	it	eq
 80004e8:	2800      	cmpeq	r0, #0
 80004ea:	bf1c      	itt	ne
 80004ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80004f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80004f4:	f000 b96a 	b.w	80007cc <__aeabi_idiv0>
 80004f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80004fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000500:	f000 f806 	bl	8000510 <__udivmoddi4>
 8000504:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800050c:	b004      	add	sp, #16
 800050e:	4770      	bx	lr

08000510 <__udivmoddi4>:
 8000510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000514:	9d08      	ldr	r5, [sp, #32]
 8000516:	460c      	mov	r4, r1
 8000518:	2b00      	cmp	r3, #0
 800051a:	d14e      	bne.n	80005ba <__udivmoddi4+0xaa>
 800051c:	4694      	mov	ip, r2
 800051e:	458c      	cmp	ip, r1
 8000520:	4686      	mov	lr, r0
 8000522:	fab2 f282 	clz	r2, r2
 8000526:	d962      	bls.n	80005ee <__udivmoddi4+0xde>
 8000528:	b14a      	cbz	r2, 800053e <__udivmoddi4+0x2e>
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	4091      	lsls	r1, r2
 8000530:	fa20 f303 	lsr.w	r3, r0, r3
 8000534:	fa0c fc02 	lsl.w	ip, ip, r2
 8000538:	4319      	orrs	r1, r3
 800053a:	fa00 fe02 	lsl.w	lr, r0, r2
 800053e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000542:	fa1f f68c 	uxth.w	r6, ip
 8000546:	fbb1 f4f7 	udiv	r4, r1, r7
 800054a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4299      	cmp	r1, r3
 800055c:	d90a      	bls.n	8000574 <__udivmoddi4+0x64>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000566:	f080 8112 	bcs.w	800078e <__udivmoddi4+0x27e>
 800056a:	4299      	cmp	r1, r3
 800056c:	f240 810f 	bls.w	800078e <__udivmoddi4+0x27e>
 8000570:	3c02      	subs	r4, #2
 8000572:	4463      	add	r3, ip
 8000574:	1a59      	subs	r1, r3, r1
 8000576:	fa1f f38e 	uxth.w	r3, lr
 800057a:	fbb1 f0f7 	udiv	r0, r1, r7
 800057e:	fb07 1110 	mls	r1, r7, r0, r1
 8000582:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000586:	fb00 f606 	mul.w	r6, r0, r6
 800058a:	429e      	cmp	r6, r3
 800058c:	d90a      	bls.n	80005a4 <__udivmoddi4+0x94>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000596:	f080 80fc 	bcs.w	8000792 <__udivmoddi4+0x282>
 800059a:	429e      	cmp	r6, r3
 800059c:	f240 80f9 	bls.w	8000792 <__udivmoddi4+0x282>
 80005a0:	4463      	add	r3, ip
 80005a2:	3802      	subs	r0, #2
 80005a4:	1b9b      	subs	r3, r3, r6
 80005a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80005aa:	2100      	movs	r1, #0
 80005ac:	b11d      	cbz	r5, 80005b6 <__udivmoddi4+0xa6>
 80005ae:	40d3      	lsrs	r3, r2
 80005b0:	2200      	movs	r2, #0
 80005b2:	e9c5 3200 	strd	r3, r2, [r5]
 80005b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ba:	428b      	cmp	r3, r1
 80005bc:	d905      	bls.n	80005ca <__udivmoddi4+0xba>
 80005be:	b10d      	cbz	r5, 80005c4 <__udivmoddi4+0xb4>
 80005c0:	e9c5 0100 	strd	r0, r1, [r5]
 80005c4:	2100      	movs	r1, #0
 80005c6:	4608      	mov	r0, r1
 80005c8:	e7f5      	b.n	80005b6 <__udivmoddi4+0xa6>
 80005ca:	fab3 f183 	clz	r1, r3
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d146      	bne.n	8000660 <__udivmoddi4+0x150>
 80005d2:	42a3      	cmp	r3, r4
 80005d4:	d302      	bcc.n	80005dc <__udivmoddi4+0xcc>
 80005d6:	4290      	cmp	r0, r2
 80005d8:	f0c0 80f0 	bcc.w	80007bc <__udivmoddi4+0x2ac>
 80005dc:	1a86      	subs	r6, r0, r2
 80005de:	eb64 0303 	sbc.w	r3, r4, r3
 80005e2:	2001      	movs	r0, #1
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d0e6      	beq.n	80005b6 <__udivmoddi4+0xa6>
 80005e8:	e9c5 6300 	strd	r6, r3, [r5]
 80005ec:	e7e3      	b.n	80005b6 <__udivmoddi4+0xa6>
 80005ee:	2a00      	cmp	r2, #0
 80005f0:	f040 8090 	bne.w	8000714 <__udivmoddi4+0x204>
 80005f4:	eba1 040c 	sub.w	r4, r1, ip
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa1f f78c 	uxth.w	r7, ip
 8000600:	2101      	movs	r1, #1
 8000602:	fbb4 f6f8 	udiv	r6, r4, r8
 8000606:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800060a:	fb08 4416 	mls	r4, r8, r6, r4
 800060e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000612:	fb07 f006 	mul.w	r0, r7, r6
 8000616:	4298      	cmp	r0, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x11c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000622:	d202      	bcs.n	800062a <__udivmoddi4+0x11a>
 8000624:	4298      	cmp	r0, r3
 8000626:	f200 80cd 	bhi.w	80007c4 <__udivmoddi4+0x2b4>
 800062a:	4626      	mov	r6, r4
 800062c:	1a1c      	subs	r4, r3, r0
 800062e:	fa1f f38e 	uxth.w	r3, lr
 8000632:	fbb4 f0f8 	udiv	r0, r4, r8
 8000636:	fb08 4410 	mls	r4, r8, r0, r4
 800063a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800063e:	fb00 f707 	mul.w	r7, r0, r7
 8000642:	429f      	cmp	r7, r3
 8000644:	d908      	bls.n	8000658 <__udivmoddi4+0x148>
 8000646:	eb1c 0303 	adds.w	r3, ip, r3
 800064a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800064e:	d202      	bcs.n	8000656 <__udivmoddi4+0x146>
 8000650:	429f      	cmp	r7, r3
 8000652:	f200 80b0 	bhi.w	80007b6 <__udivmoddi4+0x2a6>
 8000656:	4620      	mov	r0, r4
 8000658:	1bdb      	subs	r3, r3, r7
 800065a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800065e:	e7a5      	b.n	80005ac <__udivmoddi4+0x9c>
 8000660:	f1c1 0620 	rsb	r6, r1, #32
 8000664:	408b      	lsls	r3, r1
 8000666:	fa22 f706 	lsr.w	r7, r2, r6
 800066a:	431f      	orrs	r7, r3
 800066c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000670:	fa04 f301 	lsl.w	r3, r4, r1
 8000674:	ea43 030c 	orr.w	r3, r3, ip
 8000678:	40f4      	lsrs	r4, r6
 800067a:	fa00 f801 	lsl.w	r8, r0, r1
 800067e:	0c38      	lsrs	r0, r7, #16
 8000680:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000684:	fbb4 fef0 	udiv	lr, r4, r0
 8000688:	fa1f fc87 	uxth.w	ip, r7
 800068c:	fb00 441e 	mls	r4, r0, lr, r4
 8000690:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000694:	fb0e f90c 	mul.w	r9, lr, ip
 8000698:	45a1      	cmp	r9, r4
 800069a:	fa02 f201 	lsl.w	r2, r2, r1
 800069e:	d90a      	bls.n	80006b6 <__udivmoddi4+0x1a6>
 80006a0:	193c      	adds	r4, r7, r4
 80006a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80006a6:	f080 8084 	bcs.w	80007b2 <__udivmoddi4+0x2a2>
 80006aa:	45a1      	cmp	r9, r4
 80006ac:	f240 8081 	bls.w	80007b2 <__udivmoddi4+0x2a2>
 80006b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80006b4:	443c      	add	r4, r7
 80006b6:	eba4 0409 	sub.w	r4, r4, r9
 80006ba:	fa1f f983 	uxth.w	r9, r3
 80006be:	fbb4 f3f0 	udiv	r3, r4, r0
 80006c2:	fb00 4413 	mls	r4, r0, r3, r4
 80006c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80006ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80006ce:	45a4      	cmp	ip, r4
 80006d0:	d907      	bls.n	80006e2 <__udivmoddi4+0x1d2>
 80006d2:	193c      	adds	r4, r7, r4
 80006d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80006d8:	d267      	bcs.n	80007aa <__udivmoddi4+0x29a>
 80006da:	45a4      	cmp	ip, r4
 80006dc:	d965      	bls.n	80007aa <__udivmoddi4+0x29a>
 80006de:	3b02      	subs	r3, #2
 80006e0:	443c      	add	r4, r7
 80006e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80006e6:	fba0 9302 	umull	r9, r3, r0, r2
 80006ea:	eba4 040c 	sub.w	r4, r4, ip
 80006ee:	429c      	cmp	r4, r3
 80006f0:	46ce      	mov	lr, r9
 80006f2:	469c      	mov	ip, r3
 80006f4:	d351      	bcc.n	800079a <__udivmoddi4+0x28a>
 80006f6:	d04e      	beq.n	8000796 <__udivmoddi4+0x286>
 80006f8:	b155      	cbz	r5, 8000710 <__udivmoddi4+0x200>
 80006fa:	ebb8 030e 	subs.w	r3, r8, lr
 80006fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000702:	fa04 f606 	lsl.w	r6, r4, r6
 8000706:	40cb      	lsrs	r3, r1
 8000708:	431e      	orrs	r6, r3
 800070a:	40cc      	lsrs	r4, r1
 800070c:	e9c5 6400 	strd	r6, r4, [r5]
 8000710:	2100      	movs	r1, #0
 8000712:	e750      	b.n	80005b6 <__udivmoddi4+0xa6>
 8000714:	f1c2 0320 	rsb	r3, r2, #32
 8000718:	fa20 f103 	lsr.w	r1, r0, r3
 800071c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000720:	fa24 f303 	lsr.w	r3, r4, r3
 8000724:	4094      	lsls	r4, r2
 8000726:	430c      	orrs	r4, r1
 8000728:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800072c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000730:	fa1f f78c 	uxth.w	r7, ip
 8000734:	fbb3 f0f8 	udiv	r0, r3, r8
 8000738:	fb08 3110 	mls	r1, r8, r0, r3
 800073c:	0c23      	lsrs	r3, r4, #16
 800073e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000742:	fb00 f107 	mul.w	r1, r0, r7
 8000746:	4299      	cmp	r1, r3
 8000748:	d908      	bls.n	800075c <__udivmoddi4+0x24c>
 800074a:	eb1c 0303 	adds.w	r3, ip, r3
 800074e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000752:	d22c      	bcs.n	80007ae <__udivmoddi4+0x29e>
 8000754:	4299      	cmp	r1, r3
 8000756:	d92a      	bls.n	80007ae <__udivmoddi4+0x29e>
 8000758:	3802      	subs	r0, #2
 800075a:	4463      	add	r3, ip
 800075c:	1a5b      	subs	r3, r3, r1
 800075e:	b2a4      	uxth	r4, r4
 8000760:	fbb3 f1f8 	udiv	r1, r3, r8
 8000764:	fb08 3311 	mls	r3, r8, r1, r3
 8000768:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800076c:	fb01 f307 	mul.w	r3, r1, r7
 8000770:	42a3      	cmp	r3, r4
 8000772:	d908      	bls.n	8000786 <__udivmoddi4+0x276>
 8000774:	eb1c 0404 	adds.w	r4, ip, r4
 8000778:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800077c:	d213      	bcs.n	80007a6 <__udivmoddi4+0x296>
 800077e:	42a3      	cmp	r3, r4
 8000780:	d911      	bls.n	80007a6 <__udivmoddi4+0x296>
 8000782:	3902      	subs	r1, #2
 8000784:	4464      	add	r4, ip
 8000786:	1ae4      	subs	r4, r4, r3
 8000788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800078c:	e739      	b.n	8000602 <__udivmoddi4+0xf2>
 800078e:	4604      	mov	r4, r0
 8000790:	e6f0      	b.n	8000574 <__udivmoddi4+0x64>
 8000792:	4608      	mov	r0, r1
 8000794:	e706      	b.n	80005a4 <__udivmoddi4+0x94>
 8000796:	45c8      	cmp	r8, r9
 8000798:	d2ae      	bcs.n	80006f8 <__udivmoddi4+0x1e8>
 800079a:	ebb9 0e02 	subs.w	lr, r9, r2
 800079e:	eb63 0c07 	sbc.w	ip, r3, r7
 80007a2:	3801      	subs	r0, #1
 80007a4:	e7a8      	b.n	80006f8 <__udivmoddi4+0x1e8>
 80007a6:	4631      	mov	r1, r6
 80007a8:	e7ed      	b.n	8000786 <__udivmoddi4+0x276>
 80007aa:	4603      	mov	r3, r0
 80007ac:	e799      	b.n	80006e2 <__udivmoddi4+0x1d2>
 80007ae:	4630      	mov	r0, r6
 80007b0:	e7d4      	b.n	800075c <__udivmoddi4+0x24c>
 80007b2:	46d6      	mov	lr, sl
 80007b4:	e77f      	b.n	80006b6 <__udivmoddi4+0x1a6>
 80007b6:	4463      	add	r3, ip
 80007b8:	3802      	subs	r0, #2
 80007ba:	e74d      	b.n	8000658 <__udivmoddi4+0x148>
 80007bc:	4606      	mov	r6, r0
 80007be:	4623      	mov	r3, r4
 80007c0:	4608      	mov	r0, r1
 80007c2:	e70f      	b.n	80005e4 <__udivmoddi4+0xd4>
 80007c4:	3e02      	subs	r6, #2
 80007c6:	4463      	add	r3, ip
 80007c8:	e730      	b.n	800062c <__udivmoddi4+0x11c>
 80007ca:	bf00      	nop

080007cc <__aeabi_idiv0>:
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop

080007d0 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80007d8:	2334      	movs	r3, #52	@ 0x34
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e0:	4a18      	ldr	r2, [pc, #96]	@ (8000844 <tx_application_define+0x74>)
 80007e2:	4919      	ldr	r1, [pc, #100]	@ (8000848 <tx_application_define+0x78>)
 80007e4:	4819      	ldr	r0, [pc, #100]	@ (800084c <tx_application_define+0x7c>)
 80007e6:	f012 fca1 	bl	801312c <_txe_byte_pool_create>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <tx_application_define+0x26>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Error */
    Error_Handler();
 80007f0:	f000 fd18 	bl	8001224 <Error_Handler>
 80007f4:	e009      	b.n	800080a <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80007f6:	4b15      	ldr	r3, [pc, #84]	@ (800084c <tx_application_define+0x7c>)
 80007f8:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 80007fa:	68f8      	ldr	r0, [r7, #12]
 80007fc:	f000 f82e 	bl	800085c <App_ThreadX_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      Error_Handler();
 8000806:	f000 fd0d 	bl	8001224 <Error_Handler>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800080a:	2334      	movs	r3, #52	@ 0x34
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000812:	4a0f      	ldr	r2, [pc, #60]	@ (8000850 <tx_application_define+0x80>)
 8000814:	490f      	ldr	r1, [pc, #60]	@ (8000854 <tx_application_define+0x84>)
 8000816:	4810      	ldr	r0, [pc, #64]	@ (8000858 <tx_application_define+0x88>)
 8000818:	f012 fc88 	bl	801312c <_txe_byte_pool_create>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <tx_application_define+0x58>
  {
    /* USER CODE BEGIN NX_Byte_Pool_Error */
    Error_Handler();
 8000822:	f000 fcff 	bl	8001224 <Error_Handler>

    /* USER CODE END MX_NetXDuo_Init_Success */

  }

}
 8000826:	e009      	b.n	800083c <tx_application_define+0x6c>
    memory_ptr = (VOID *)&nx_app_byte_pool;
 8000828:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <tx_application_define+0x88>)
 800082a:	60fb      	str	r3, [r7, #12]
    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f001 f883 	bl	8001938 <MX_NetXDuo_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <tx_application_define+0x6c>
      Error_Handler();
 8000838:	f000 fcf4 	bl	8001224 <Error_Handler>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000114 	.word	0x20000114
 8000848:	0801516c 	.word	0x0801516c
 800084c:	20000514 	.word	0x20000514
 8000850:	20000548 	.word	0x20000548
 8000854:	08015180 	.word	0x08015180
 8000858:	20007d48 	.word	0x20007d48

0800085c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN App_ThreadX_Init */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800086c:	68fb      	ldr	r3, [r7, #12]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800087e:	f010 f8ab 	bl	80109d8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b5b0      	push	{r4, r5, r7, lr}
 800088a:	b0f2      	sub	sp, #456	@ 0x1c8
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	Motor m[] = { { { Motor1_IN1_GPIO_Port, Motor1_IN1_Pin }, {
 800088e:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8000892:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8000896:	4a34      	ldr	r2, [pc, #208]	@ (8000968 <main+0xe0>)
 8000898:	4618      	mov	r0, r3
 800089a:	4611      	mov	r1, r2
 800089c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80008a0:	461a      	mov	r2, r3
 80008a2:	f013 fd9e 	bl	80143e2 <memcpy>
			Motor13_IN2_GPIO_Port, Motor13_IN2_Pin }, { Motor13_SW_GPIO_Port,
			Motor13_SW_Pin }, 0, 1 }, {
			{ Motor14_IN1_GPIO_Port, Motor14_IN1_Pin }, { Motor14_IN2_GPIO_Port,
					Motor14_IN2_Pin }, { Motor14_SW_GPIO_Port, Motor14_SW_Pin },
			0, 1 } };
	for (int i = 0; i < sizeof(motors) / sizeof(motors[0]); i++) {
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80008ac:	e019      	b.n	80008e2 <main+0x5a>
		motors[i] = m[i];
 80008ae:	4a2f      	ldr	r2, [pc, #188]	@ (800096c <main+0xe4>)
 80008b0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80008b4:	015b      	lsls	r3, r3, #5
 80008b6:	18d1      	adds	r1, r2, r3
 80008b8:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80008bc:	f5a3 72e4 	sub.w	r2, r3, #456	@ 0x1c8
 80008c0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80008c4:	015b      	lsls	r3, r3, #5
 80008c6:	4413      	add	r3, r2
 80008c8:	460c      	mov	r4, r1
 80008ca:	461d      	mov	r5, r3
 80008cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 0; i < sizeof(motors) / sizeof(motors[0]); i++) {
 80008d8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80008dc:	3301      	adds	r3, #1
 80008de:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80008e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80008e6:	2b0d      	cmp	r3, #13
 80008e8:	d9e1      	bls.n	80008ae <main+0x26>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ea:	f001 fda5 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ee:	f000 f845 	bl	800097c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	BSP_LED_Init(LED_GREEN);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f001 fd0a 	bl	800230c <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f001 fd07 	bl	800230c <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fe:	f000 fa51 	bl	8000da4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000902:	f000 f8ad 	bl	8000a60 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000906:	f000 fa23 	bl	8000d50 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800090a:	f000 f8f7 	bl	8000afc <MX_TIM1_Init>
  MX_TIM2_Init();
 800090e:	f000 f979 	bl	8000c04 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000912:	f000 f9c3 	bl	8000c9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000916:	2100      	movs	r1, #0
 8000918:	4815      	ldr	r0, [pc, #84]	@ (8000970 <main+0xe8>)
 800091a:	f004 f99b 	bl	8004c54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800091e:	2108      	movs	r1, #8
 8000920:	4814      	ldr	r0, [pc, #80]	@ (8000974 <main+0xec>)
 8000922:	f004 f997 	bl	8004c54 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000926:	4814      	ldr	r0, [pc, #80]	@ (8000978 <main+0xf0>)
 8000928:	f004 f8d4 	bl	8004ad4 <HAL_TIM_Base_Start_IT>
	// stop all motors
	for (int i = 0; i < (sizeof(motors) / sizeof(motors[0])); i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000932:	e010      	b.n	8000956 <main+0xce>
		stopMotor(i);
 8000934:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 8000938:	f000 fb84 	bl	8001044 <stopMotor>
		motors[i].swState = 1;
 800093c:	4a0b      	ldr	r2, [pc, #44]	@ (800096c <main+0xe4>)
 800093e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000942:	015b      	lsls	r3, r3, #5
 8000944:	4413      	add	r3, r2
 8000946:	331c      	adds	r3, #28
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < (sizeof(motors) / sizeof(motors[0])); i++) {
 800094c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000950:	3301      	adds	r3, #1
 8000952:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000956:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800095a:	2b0d      	cmp	r3, #13
 800095c:	d9ea      	bls.n	8000934 <main+0xac>
	}
//	resetCounter = 0;
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800095e:	f7ff ff8c 	bl	800087a <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000962:	bf00      	nop
 8000964:	e7fd      	b.n	8000962 <main+0xda>
 8000966:	bf00      	nop
 8000968:	08015194 	.word	0x08015194
 800096c:	200080c4 	.word	0x200080c4
 8000970:	20007fa4 	.word	0x20007fa4
 8000974:	20008034 	.word	0x20008034
 8000978:	20007fec 	.word	0x20007fec

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	@ 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	2230      	movs	r2, #48	@ 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f013 fcf4 	bl	8014378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a58 <SystemClock_Config+0xdc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a58 <SystemClock_Config+0xdc>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b0:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <SystemClock_Config+0xdc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <SystemClock_Config+0xe0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a25      	ldr	r2, [pc, #148]	@ (8000a5c <SystemClock_Config+0xe0>)
 80009c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <SystemClock_Config+0xe0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009ec:	2308      	movs	r3, #8
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 80009f0:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80009f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009fa:	2303      	movs	r3, #3
 80009fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 fb4c 	bl	80040a0 <HAL_RCC_OscConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a0e:	f000 fc09 	bl	8001224 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a12:	f003 faf5 	bl	8004000 <HAL_PWREx_EnableOverDrive>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000a1c:	f000 fc02 	bl	8001224 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
 8000a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a24:	2302      	movs	r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f003 fda6 	bl	8004590 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a4a:	f000 fbeb 	bl	8001224 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	@ 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_ETH_Init+0x84>)
 8000a66:	4a20      	ldr	r2, [pc, #128]	@ (8000ae8 <MX_ETH_Init+0x88>)
 8000a68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <MX_ETH_Init+0x8c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x11;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <MX_ETH_Init+0x8c>)
 8000a72:	2211      	movs	r2, #17
 8000a74:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0x83;
 8000a76:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_ETH_Init+0x8c>)
 8000a78:	2283      	movs	r2, #131	@ 0x83
 8000a7a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x45;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <MX_ETH_Init+0x8c>)
 8000a7e:	2245      	movs	r2, #69	@ 0x45
 8000a80:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x26;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_ETH_Init+0x8c>)
 8000a84:	2226      	movs	r2, #38	@ 0x26
 8000a86:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x20;
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_ETH_Init+0x8c>)
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <MX_ETH_Init+0x84>)
 8000a90:	4a16      	ldr	r2, [pc, #88]	@ (8000aec <MX_ETH_Init+0x8c>)
 8000a92:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_ETH_Init+0x84>)
 8000a96:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a9a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <MX_ETH_Init+0x84>)
 8000a9e:	4a14      	ldr	r2, [pc, #80]	@ (8000af0 <MX_ETH_Init+0x90>)
 8000aa0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <MX_ETH_Init+0x84>)
 8000aa4:	4a13      	ldr	r2, [pc, #76]	@ (8000af4 <MX_ETH_Init+0x94>)
 8000aa6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <MX_ETH_Init+0x84>)
 8000aaa:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000aae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ab0:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <MX_ETH_Init+0x84>)
 8000ab2:	f001 fe09 	bl	80026c8 <HAL_ETH_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000abc:	f000 fbb2 	bl	8001224 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ac0:	2238      	movs	r2, #56	@ 0x38
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <MX_ETH_Init+0x98>)
 8000ac6:	f013 fc57 	bl	8014378 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_ETH_Init+0x98>)
 8000acc:	2221      	movs	r2, #33	@ 0x21
 8000ace:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_ETH_Init+0x98>)
 8000ad2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000ad6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_ETH_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20007ef4 	.word	0x20007ef4
 8000ae8:	40028000 	.word	0x40028000
 8000aec:	20008284 	.word	0x20008284
 8000af0:	20007e54 	.word	0x20007e54
 8000af4:	20007db4 	.word	0x20007db4
 8000af8:	20007d7c 	.word	0x20007d7c

08000afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b092      	sub	sp, #72	@ 0x48
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2220      	movs	r2, #32
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f013 fc26 	bl	8014378 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2c:	4b33      	ldr	r3, [pc, #204]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b2e:	4a34      	ldr	r2, [pc, #208]	@ (8000c00 <MX_TIM1_Init+0x104>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b32:	4b32      	ldr	r3, [pc, #200]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b30      	ldr	r3, [pc, #192]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b58:	4828      	ldr	r0, [pc, #160]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b5a:	f004 f82b 	bl	8004bb4 <HAL_TIM_PWM_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b64:	f000 fb5e 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b70:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b74:	4619      	mov	r1, r3
 8000b76:	4821      	ldr	r0, [pc, #132]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000b78:	f004 fef2 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b82:	f000 fb4f 	bl	8001224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	@ 0x60
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 499;
 8000b8a:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba8:	2200      	movs	r2, #0
 8000baa:	4619      	mov	r1, r3
 8000bac:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000bae:	f004 fa09 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000bb8:	f000 fb34 	bl	8001224 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4807      	ldr	r0, [pc, #28]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000be0:	f004 ff3a 	bl	8005a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000bea:	f000 fb1b 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bee:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <MX_TIM1_Init+0x100>)
 8000bf0:	f000 fc7a 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8000bf4:	bf00      	nop
 8000bf6:	3748      	adds	r7, #72	@ 0x48
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20007fa4 	.word	0x20007fa4
 8000c00:	40010000 	.word	0x40010000

08000c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c2a:	2259      	movs	r2, #89	@ 0x59
 8000c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c48:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c4a:	f003 fef3 	bl	8004a34 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c54:	f000 fae6 	bl	8001224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4619      	mov	r1, r3
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c66:	f004 fa6f 	bl	8005148 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c70:	f000 fad8 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_TIM2_Init+0x94>)
 8000c82:	f004 fe6d 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c8c:	f000 faca 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20007fec 	.word	0x20007fec

08000c9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cc0:	4a22      	ldr	r2, [pc, #136]	@ (8000d4c <MX_TIM3_Init+0xb0>)
 8000cc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cd2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce4:	4818      	ldr	r0, [pc, #96]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000ce6:	f003 ff65 	bl	8004bb4 <HAL_TIM_PWM_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000cf0:	f000 fa98 	bl	8001224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	4619      	mov	r1, r3
 8000d02:	4811      	ldr	r0, [pc, #68]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000d04:	f004 fe2c 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d0e:	f000 fa89 	bl	8001224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d12:	2360      	movs	r3, #96	@ 0x60
 8000d14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8000d16:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2208      	movs	r2, #8
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000d2c:	f004 f94a 	bl	8004fc4 <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d36:	f000 fa75 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d3a:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000d3c:	f000 fbd4 	bl	80014e8 <HAL_TIM_MspPostInit>

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	@ 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20008034 	.word	0x20008034
 8000d4c:	40000400 	.word	0x40000400

08000d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d54:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <MX_USART3_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_USART3_UART_Init+0x4c>)
 8000d88:	f004 fecc 	bl	8005b24 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f000 fa47 	bl	8001224 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000807c 	.word	0x2000807c
 8000da0:	40004800 	.word	0x40004800

08000da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	@ 0x38
 8000da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	4b90      	ldr	r3, [pc, #576]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a8f      	ldr	r2, [pc, #572]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000dc4:	f043 0310 	orr.w	r3, r3, #16
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b8d      	ldr	r3, [pc, #564]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0310 	and.w	r3, r3, #16
 8000dd2:	623b      	str	r3, [r7, #32]
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	4b89      	ldr	r3, [pc, #548]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a88      	ldr	r2, [pc, #544]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000de0:	f043 0320 	orr.w	r3, r3, #32
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b86      	ldr	r3, [pc, #536]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0320 	and.w	r3, r3, #32
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4b82      	ldr	r3, [pc, #520]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a81      	ldr	r2, [pc, #516]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b7f      	ldr	r3, [pc, #508]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	4b7b      	ldr	r3, [pc, #492]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a7a      	ldr	r2, [pc, #488]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	4b78      	ldr	r3, [pc, #480]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b74      	ldr	r3, [pc, #464]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a73      	ldr	r2, [pc, #460]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b71      	ldr	r3, [pc, #452]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b6a      	ldr	r3, [pc, #424]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b66      	ldr	r3, [pc, #408]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a65      	ldr	r2, [pc, #404]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b63      	ldr	r3, [pc, #396]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b5f      	ldr	r3, [pc, #380]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a5e      	ldr	r2, [pc, #376]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b5c      	ldr	r3, [pc, #368]	@ (8001000 <MX_GPIO_Init+0x25c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Motor4_IN2_Pin|Motor13_IN1_Pin|Motor14_IN1_Pin|Motor14_IN2_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	216c      	movs	r1, #108	@ 0x6c
 8000e9e:	4859      	ldr	r0, [pc, #356]	@ (8001004 <MX_GPIO_Init+0x260>)
 8000ea0:	f003 f87a 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Motor5_IN2_Pin|Motor5_IN1_Pin|Motor2_IN1_Pin|Motor13_IN2_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f240 1113 	movw	r1, #275	@ 0x113
 8000eaa:	4857      	ldr	r0, [pc, #348]	@ (8001008 <MX_GPIO_Init+0x264>)
 8000eac:	f003 f874 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_IN2_Pin|Motor6_IN1_Pin|Motor8_IN2_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	21c4      	movs	r1, #196	@ 0xc4
 8000eb4:	4855      	ldr	r0, [pc, #340]	@ (800100c <MX_GPIO_Init+0x268>)
 8000eb6:	f003 f86f 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor10_IN1_Pin|Motor10_IN2_Pin|Motor8_IN1_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f248 0160 	movw	r1, #32864	@ 0x8060
 8000ec0:	4853      	ldr	r0, [pc, #332]	@ (8001010 <MX_GPIO_Init+0x26c>)
 8000ec2:	f003 f869 	bl	8003f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor1_IN1_Pin|Motor6_IN2_Pin|Motor2_IN2_Pin|Motor9_IN1_Pin
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f248 3142 	movw	r1, #33602	@ 0x8342
 8000ecc:	4851      	ldr	r0, [pc, #324]	@ (8001014 <MX_GPIO_Init+0x270>)
 8000ece:	f003 f863 	bl	8003f98 <HAL_GPIO_WritePin>
                          |Motor9_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Motor4_IN1_Pin|Motor3_IN2_Pin|Motor3_IN1_Pin|Motor7_IN1_Pin
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f643 01f3 	movw	r1, #14579	@ 0x38f3
 8000ed8:	484f      	ldr	r0, [pc, #316]	@ (8001018 <MX_GPIO_Init+0x274>)
 8000eda:	f003 f85d 	bl	8003f98 <HAL_GPIO_WritePin>
                          |Motor7_IN2_Pin|Motor12_IN2_Pin|Motor12_IN1_Pin|Motor11_IN2_Pin
                          |Motor11_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Motor4_IN2_Pin Motor13_IN1_Pin Motor14_IN1_Pin Motor14_IN2_Pin */
  GPIO_InitStruct.Pin = Motor4_IN2_Pin|Motor13_IN1_Pin|Motor14_IN1_Pin|Motor14_IN2_Pin;
 8000ede:	236c      	movs	r3, #108	@ 0x6c
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4843      	ldr	r0, [pc, #268]	@ (8001004 <MX_GPIO_Init+0x260>)
 8000ef6:	f002 fe8b 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor5_IN2_Pin Motor5_IN1_Pin Motor2_IN1_Pin Motor13_IN2_Pin */
  GPIO_InitStruct.Pin = Motor5_IN2_Pin|Motor5_IN1_Pin|Motor2_IN1_Pin|Motor13_IN2_Pin;
 8000efa:	f240 1313 	movw	r3, #275	@ 0x113
 8000efe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	483d      	ldr	r0, [pc, #244]	@ (8001008 <MX_GPIO_Init+0x264>)
 8000f14:	f002 fe7c 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1_IN2_Pin Motor6_IN1_Pin Motor8_IN2_Pin */
  GPIO_InitStruct.Pin = Motor1_IN2_Pin|Motor6_IN1_Pin|Motor8_IN2_Pin;
 8000f18:	23c4      	movs	r3, #196	@ 0xc4
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4837      	ldr	r0, [pc, #220]	@ (800100c <MX_GPIO_Init+0x268>)
 8000f30:	f002 fe6e 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor10_IN1_Pin Motor10_IN2_Pin Motor8_IN1_Pin */
  GPIO_InitStruct.Pin = Motor10_IN1_Pin|Motor10_IN2_Pin|Motor8_IN1_Pin;
 8000f34:	f248 0360 	movw	r3, #32864	@ 0x8060
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4830      	ldr	r0, [pc, #192]	@ (8001010 <MX_GPIO_Init+0x26c>)
 8000f4e:	f002 fe5f 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1_IN1_Pin Motor6_IN2_Pin Motor2_IN2_Pin Motor9_IN1_Pin
                           Motor9_IN2_Pin */
  GPIO_InitStruct.Pin = Motor1_IN1_Pin|Motor6_IN2_Pin|Motor2_IN2_Pin|Motor9_IN1_Pin
 8000f52:	f248 3342 	movw	r3, #33602	@ 0x8342
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Motor9_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	482a      	ldr	r0, [pc, #168]	@ (8001014 <MX_GPIO_Init+0x270>)
 8000f6c:	f002 fe50 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1_SW_Pin Motor3_SW_Pin Motor5_SW_Pin */
  GPIO_InitStruct.Pin = Motor1_SW_Pin|Motor3_SW_Pin|Motor5_SW_Pin;
 8000f70:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4820      	ldr	r0, [pc, #128]	@ (8001008 <MX_GPIO_Init+0x264>)
 8000f86:	f002 fe43 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor9_SW_Pin Motor8_SW_Pin Motor10_SW_Pin Motor2_SW_Pin
                           Motor11_SW_Pin Motor4_SW_Pin Motor12_SW_Pin Motor13_SW_Pin */
  GPIO_InitStruct.Pin = Motor9_SW_Pin|Motor8_SW_Pin|Motor10_SW_Pin|Motor2_SW_Pin
 8000f8a:	f64f 5380 	movw	r3, #64896	@ 0xfd80
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Motor11_SW_Pin|Motor4_SW_Pin|Motor12_SW_Pin|Motor13_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4819      	ldr	r0, [pc, #100]	@ (8001004 <MX_GPIO_Init+0x260>)
 8000fa0:	f002 fe36 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor14_SW_Pin */
  GPIO_InitStruct.Pin = Motor14_SW_Pin;
 8000fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Motor14_SW_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4816      	ldr	r0, [pc, #88]	@ (8001014 <MX_GPIO_Init+0x270>)
 8000fba:	f002 fe29 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor4_IN1_Pin Motor3_IN2_Pin Motor3_IN1_Pin Motor7_IN1_Pin
                           Motor7_IN2_Pin Motor12_IN2_Pin Motor12_IN1_Pin Motor11_IN2_Pin
                           Motor11_IN1_Pin */
  GPIO_InitStruct.Pin = Motor4_IN1_Pin|Motor3_IN2_Pin|Motor3_IN1_Pin|Motor7_IN1_Pin
 8000fbe:	f643 03f3 	movw	r3, #14579	@ 0x38f3
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |Motor7_IN2_Pin|Motor12_IN2_Pin|Motor12_IN1_Pin|Motor11_IN2_Pin
                          |Motor11_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4810      	ldr	r0, [pc, #64]	@ (8001018 <MX_GPIO_Init+0x274>)
 8000fd8:	f002 fe1a 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor7_SW_Pin Motor6_SW_Pin */
  GPIO_InitStruct.Pin = Motor7_SW_Pin|Motor6_SW_Pin;
 8000fdc:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480a      	ldr	r0, [pc, #40]	@ (800101c <MX_GPIO_Init+0x278>)
 8000ff2:	f002 fe0d 	bl	8003c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3738      	adds	r7, #56	@ 0x38
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40021000 	.word	0x40021000
 8001008:	40021400 	.word	0x40021400
 800100c:	40020800 	.word	0x40020800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021800 	.word	0x40021800

08001020 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8001028:	1d39      	adds	r1, r7, #4
 800102a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800102e:	2201      	movs	r2, #1
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <__io_putchar+0x20>)
 8001032:	f004 fdc7 	bl	8005bc4 <HAL_UART_Transmit>

	return ch;
 8001036:	687b      	ldr	r3, [r7, #4]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000807c 	.word	0x2000807c

08001044 <stopMotor>:
//    BSP_LED_Toggle(LED_GREEN);
//    tx_thread_sleep(50);
//  }
//  /* USER CODE END Success_Handler_Debug */
//}
void stopMotor(int motor_idx) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
//	printf("%d\n", motor_idx);
	HAL_GPIO_WritePin(motors[motor_idx].IN1.GPIO_Port,
 800104c:	4a18      	ldr	r2, [pc, #96]	@ (80010b0 <stopMotor+0x6c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	015b      	lsls	r3, r3, #5
 8001052:	4413      	add	r3, r2
 8001054:	6818      	ldr	r0, [r3, #0]
 8001056:	4a16      	ldr	r2, [pc, #88]	@ (80010b0 <stopMotor+0x6c>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	015b      	lsls	r3, r3, #5
 800105c:	4413      	add	r3, r2
 800105e:	3304      	adds	r3, #4
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	f002 ff97 	bl	8003f98 <HAL_GPIO_WritePin>
			motors[motor_idx].IN1.GPIO_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(motors[motor_idx].IN2.GPIO_Port,
 800106a:	4a11      	ldr	r2, [pc, #68]	@ (80010b0 <stopMotor+0x6c>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	4413      	add	r3, r2
 8001072:	3308      	adds	r3, #8
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <stopMotor+0x6c>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	015b      	lsls	r3, r3, #5
 800107c:	4413      	add	r3, r2
 800107e:	330c      	adds	r3, #12
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	f002 ff87 	bl	8003f98 <HAL_GPIO_WritePin>
			motors[motor_idx].IN2.GPIO_Pin, GPIO_PIN_RESET);
	motors[motor_idx].counter = 0;
 800108a:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <stopMotor+0x6c>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	015b      	lsls	r3, r3, #5
 8001090:	4413      	add	r3, r2
 8001092:	3318      	adds	r3, #24
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
	motors[motor_idx].swState = 1;
 8001098:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <stopMotor+0x6c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	015b      	lsls	r3, r3, #5
 800109e:	4413      	add	r3, r2
 80010a0:	331c      	adds	r3, #28
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200080c4 	.word	0x200080c4

080010b4 <controlMotor>:
void controlSpeed(float speed) {
	uint32_t sp = (int) (speed * htim1.Init.Period);
	TIM1->CCR1 = sp;
	TIM3->CCR3 = sp;
}
void controlMotor(int motor_idx, uint32_t duration, char direction) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	4613      	mov	r3, r2
 80010c0:	71fb      	strb	r3, [r7, #7]
	if (duration == 0) {
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d034      	beq.n	8001132 <controlMotor+0x7e>
		return;
	}
	GPIO_PinState in1_state = direction == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET;
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	bf14      	ite	ne
 80010ce:	2301      	movne	r3, #1
 80010d0:	2300      	moveq	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState in2_state = direction == 0 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	75bb      	strb	r3, [r7, #22]
	HAL_GPIO_WritePin(motors[motor_idx].IN1.GPIO_Port,
 80010e4:	4a15      	ldr	r2, [pc, #84]	@ (800113c <controlMotor+0x88>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	015b      	lsls	r3, r3, #5
 80010ea:	4413      	add	r3, r2
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	4a13      	ldr	r2, [pc, #76]	@ (800113c <controlMotor+0x88>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	4413      	add	r3, r2
 80010f6:	3304      	adds	r3, #4
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	7dfa      	ldrb	r2, [r7, #23]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f002 ff4b 	bl	8003f98 <HAL_GPIO_WritePin>
			motors[motor_idx].IN1.GPIO_Pin, in1_state);
	HAL_GPIO_WritePin(motors[motor_idx].IN2.GPIO_Port,
 8001102:	4a0e      	ldr	r2, [pc, #56]	@ (800113c <controlMotor+0x88>)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	4413      	add	r3, r2
 800110a:	3308      	adds	r3, #8
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <controlMotor+0x88>)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	015b      	lsls	r3, r3, #5
 8001114:	4413      	add	r3, r2
 8001116:	330c      	adds	r3, #12
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	7dba      	ldrb	r2, [r7, #22]
 800111c:	4619      	mov	r1, r3
 800111e:	f002 ff3b 	bl	8003f98 <HAL_GPIO_WritePin>
			motors[motor_idx].IN2.GPIO_Pin, in2_state);
//	printf("start motor %d\n", motor_idx);
	motors[motor_idx].counter = duration;
 8001122:	4a06      	ldr	r2, [pc, #24]	@ (800113c <controlMotor+0x88>)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	015b      	lsls	r3, r3, #5
 8001128:	4413      	add	r3, r2
 800112a:	3318      	adds	r3, #24
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	e000      	b.n	8001134 <controlMotor+0x80>
		return;
 8001132:	bf00      	nop
}
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200080c4 	.word	0x200080c4

08001140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a33      	ldr	r2, [pc, #204]	@ (800121c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001152:	f001 f993 	bl	800247c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM2) {
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800115e:	d159      	bne.n	8001214 <HAL_TIM_PeriodElapsedCallback+0xd4>

		for (int i = 0; i < MOTOR_COUNT; i++) {
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e053      	b.n	800120e <HAL_TIM_PeriodElapsedCallback+0xce>
			GPIO_PinState sw = HAL_GPIO_ReadPin(motors[i].SW.GPIO_Port,
 8001166:	4a2e      	ldr	r2, [pc, #184]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	015b      	lsls	r3, r3, #5
 800116c:	4413      	add	r3, r2
 800116e:	3310      	adds	r3, #16
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	492b      	ldr	r1, [pc, #172]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	440b      	add	r3, r1
 800117a:	3314      	adds	r3, #20
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	4610      	mov	r0, r2
 8001182:	f002 fef1 	bl	8003f68 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	72fb      	strb	r3, [r7, #11]
					motors[i].SW.GPIO_Pin);
			if (sw == GPIO_PIN_RESET && sw != motors[i].swState
 800118a:	7afb      	ldrb	r3, [r7, #11]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d114      	bne.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x7a>
 8001190:	7afa      	ldrb	r2, [r7, #11]
 8001192:	4923      	ldr	r1, [pc, #140]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	015b      	lsls	r3, r3, #5
 8001198:	440b      	add	r3, r1
 800119a:	331c      	adds	r3, #28
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d00b      	beq.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x7a>
					&& motors[i].counter) {
 80011a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	015b      	lsls	r3, r3, #5
 80011a8:	4413      	add	r3, r2
 80011aa:	3318      	adds	r3, #24
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x7a>
//				printf("stop motor %d\n", i);
				stopMotor(i);
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f7ff ff46 	bl	8001044 <stopMotor>
 80011b8:	e01f      	b.n	80011fa <HAL_TIM_PeriodElapsedCallback+0xba>
			} else {
				if (motors[i].counter == 1) {
 80011ba:	4a19      	ldr	r2, [pc, #100]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	015b      	lsls	r3, r3, #5
 80011c0:	4413      	add	r3, r2
 80011c2:	3318      	adds	r3, #24
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d102      	bne.n	80011d0 <HAL_TIM_PeriodElapsedCallback+0x90>
//					printf("stop motor %d\n", i);
					stopMotor(i);
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff ff3a 	bl	8001044 <stopMotor>
				}
				if (motors[i].counter) {
 80011d0:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	015b      	lsls	r3, r3, #5
 80011d6:	4413      	add	r3, r2
 80011d8:	3318      	adds	r3, #24
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00c      	beq.n	80011fa <HAL_TIM_PeriodElapsedCallback+0xba>
					motors[i].counter--;
 80011e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	015b      	lsls	r3, r3, #5
 80011e6:	4413      	add	r3, r2
 80011e8:	3318      	adds	r3, #24
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1e5a      	subs	r2, r3, #1
 80011ee:	490c      	ldr	r1, [pc, #48]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	440b      	add	r3, r1
 80011f6:	3318      	adds	r3, #24
 80011f8:	601a      	str	r2, [r3, #0]
				}
			}
			motors[i].swState = sw;
 80011fa:	7afa      	ldrb	r2, [r7, #11]
 80011fc:	4908      	ldr	r1, [pc, #32]	@ (8001220 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	015b      	lsls	r3, r3, #5
 8001202:	440b      	add	r3, r1
 8001204:	331c      	adds	r3, #28
 8001206:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < MOTOR_COUNT; i++) {
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2b0d      	cmp	r3, #13
 8001212:	dda8      	ble.n	8001166 <HAL_TIM_PeriodElapsedCallback+0x26>
//		}

//	printf("%d\n", result);
	}
  /* USER CODE END Callback 1 */
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40001000 	.word	0x40001000
 8001220:	200080c4 	.word	0x200080c4

08001224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	BSP_LED_Off(LED_GREEN);
 8001228:	2000      	movs	r0, #0
 800122a:	f001 f8bf 	bl	80023ac <BSP_LED_Off>
	while (1) {
		BSP_LED_Toggle(LED_RED);
 800122e:	2002      	movs	r0, #2
 8001230:	f001 f8d6 	bl	80023e0 <BSP_LED_Toggle>
		HAL_Delay(200);
 8001234:	20c8      	movs	r0, #200	@ 0xc8
 8001236:	f001 f941 	bl	80024bc <HAL_Delay>
		BSP_LED_Toggle(LED_RED);
 800123a:	bf00      	nop
 800123c:	e7f7      	b.n	800122e <Error_Handler+0xa>
	...

08001240 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a0f      	ldr	r2, [pc, #60]	@ (800128c <HAL_MspInit+0x4c>)
 8001250:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <HAL_MspInit+0x4c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <HAL_MspInit+0x4c>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	4a08      	ldr	r2, [pc, #32]	@ (800128c <HAL_MspInit+0x4c>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	@ 0x40
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_MspInit+0x4c>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40023800 	.word	0x40023800

08001290 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	@ 0x38
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a59      	ldr	r2, [pc, #356]	@ (8001414 <HAL_ETH_MspInit+0x184>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	f040 80ac 	bne.w	800140c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	4b57      	ldr	r3, [pc, #348]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a56      	ldr	r2, [pc, #344]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b54      	ldr	r3, [pc, #336]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012cc:	623b      	str	r3, [r7, #32]
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012de:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	4b49      	ldr	r3, [pc, #292]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	4a48      	ldr	r2, [pc, #288]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80012fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fc:	4b46      	ldr	r3, [pc, #280]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	4b42      	ldr	r3, [pc, #264]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001310:	4a41      	ldr	r2, [pc, #260]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6313      	str	r3, [r2, #48]	@ 0x30
 8001318:	4b3f      	ldr	r3, [pc, #252]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	4b3b      	ldr	r3, [pc, #236]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	4a3a      	ldr	r2, [pc, #232]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6313      	str	r3, [r2, #48]	@ 0x30
 8001334:	4b38      	ldr	r3, [pc, #224]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	4b34      	ldr	r3, [pc, #208]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	4a33      	ldr	r2, [pc, #204]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001350:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001364:	4a2c      	ldr	r2, [pc, #176]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 8001366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800136a:	6313      	str	r3, [r2, #48]	@ 0x30
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_ETH_MspInit+0x188>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001378:	2332      	movs	r3, #50	@ 0x32
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001388:	230b      	movs	r3, #11
 800138a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4822      	ldr	r0, [pc, #136]	@ (800141c <HAL_ETH_MspInit+0x18c>)
 8001394:	f002 fc3c 	bl	8003c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001398:	2386      	movs	r3, #134	@ 0x86
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a8:	230b      	movs	r3, #11
 80013aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	481b      	ldr	r0, [pc, #108]	@ (8001420 <HAL_ETH_MspInit+0x190>)
 80013b4:	f002 fc2c 	bl	8003c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ca:	230b      	movs	r3, #11
 80013cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	4813      	ldr	r0, [pc, #76]	@ (8001424 <HAL_ETH_MspInit+0x194>)
 80013d6:	f002 fc1b 	bl	8003c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80013da:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ec:	230b      	movs	r3, #11
 80013ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	480c      	ldr	r0, [pc, #48]	@ (8001428 <HAL_ETH_MspInit+0x198>)
 80013f8:	f002 fc0a 	bl	8003c10 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2107      	movs	r1, #7
 8001400:	203d      	movs	r0, #61	@ 0x3d
 8001402:	f001 f937 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001406:	203d      	movs	r0, #61	@ 0x3d
 8001408:	f001 f950 	bl	80026ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800140c:	bf00      	nop
 800140e:	3738      	adds	r7, #56	@ 0x38
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40028000 	.word	0x40028000
 8001418:	40023800 	.word	0x40023800
 800141c:	40020800 	.word	0x40020800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020400 	.word	0x40020400
 8001428:	40021800 	.word	0x40021800

0800142c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a15      	ldr	r2, [pc, #84]	@ (8001490 <HAL_TIM_PWM_MspInit+0x64>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d10e      	bne.n	800145c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b14      	ldr	r3, [pc, #80]	@ (8001494 <HAL_TIM_PWM_MspInit+0x68>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <HAL_TIM_PWM_MspInit+0x68>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6453      	str	r3, [r2, #68]	@ 0x44
 800144e:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <HAL_TIM_PWM_MspInit+0x68>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800145a:	e012      	b.n	8001482 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	@ (8001498 <HAL_TIM_PWM_MspInit+0x6c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10d      	bne.n	8001482 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b0a      	ldr	r3, [pc, #40]	@ (8001494 <HAL_TIM_PWM_MspInit+0x68>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146e:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <HAL_TIM_PWM_MspInit+0x68>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6413      	str	r3, [r2, #64]	@ 0x40
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <HAL_TIM_PWM_MspInit+0x68>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40010000 	.word	0x40010000
 8001494:	40023800 	.word	0x40023800
 8001498:	40000400 	.word	0x40000400

0800149c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014ac:	d115      	bne.n	80014da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <HAL_TIM_Base_MspInit+0x48>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a0b      	ldr	r2, [pc, #44]	@ (80014e4 <HAL_TIM_Base_MspInit+0x48>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_TIM_Base_MspInit+0x48>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	201c      	movs	r0, #28
 80014d0:	f001 f8d0 	bl	8002674 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014d4:	201c      	movs	r0, #28
 80014d6:	f001 f8e9 	bl	80026ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800

080014e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a25      	ldr	r2, [pc, #148]	@ (800159c <HAL_TIM_MspPostInit+0xb4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d11f      	bne.n	800154a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <HAL_TIM_MspPostInit+0xb8>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a23      	ldr	r2, [pc, #140]	@ (80015a0 <HAL_TIM_MspPostInit+0xb8>)
 8001514:	f043 0310 	orr.w	r3, r3, #16
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <HAL_TIM_MspPostInit+0xb8>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001526:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001538:	2301      	movs	r3, #1
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4818      	ldr	r0, [pc, #96]	@ (80015a4 <HAL_TIM_MspPostInit+0xbc>)
 8001544:	f002 fb64 	bl	8003c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001548:	e023      	b.n	8001592 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a16      	ldr	r2, [pc, #88]	@ (80015a8 <HAL_TIM_MspPostInit+0xc0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d11e      	bne.n	8001592 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_TIM_MspPostInit+0xb8>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155c:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <HAL_TIM_MspPostInit+0xb8>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6313      	str	r3, [r2, #48]	@ 0x30
 8001564:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <HAL_TIM_MspPostInit+0xb8>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001582:	2302      	movs	r3, #2
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4807      	ldr	r0, [pc, #28]	@ (80015ac <HAL_TIM_MspPostInit+0xc4>)
 800158e:	f002 fb3f 	bl	8003c10 <HAL_GPIO_Init>
}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40010000 	.word	0x40010000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40000400 	.word	0x40000400
 80015ac:	40020800 	.word	0x40020800

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12c      	bne.n	800162c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800161c:	2307      	movs	r3, #7
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_UART_MspInit+0x8c>)
 8001628:	f002 faf2 	bl	8003c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	@ 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40004800 	.word	0x40004800
 8001638:	40023800 	.word	0x40023800
 800163c:	40020c00 	.word	0x40020c00

08001640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08e      	sub	sp, #56	@ 0x38
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	4b33      	ldr	r3, [pc, #204]	@ (8001724 <HAL_InitTick+0xe4>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	4a32      	ldr	r2, [pc, #200]	@ (8001724 <HAL_InitTick+0xe4>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001660:	4b30      	ldr	r3, [pc, #192]	@ (8001724 <HAL_InitTick+0xe4>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800166c:	f107 0210 	add.w	r2, r7, #16
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f003 f9aa 	bl	80049d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001682:	2b00      	cmp	r3, #0
 8001684:	d103      	bne.n	800168e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001686:	f003 f97b 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 800168a:	6378      	str	r0, [r7, #52]	@ 0x34
 800168c:	e004      	b.n	8001698 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800168e:	f003 f977 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 8001692:	4603      	mov	r3, r0
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800169a:	4a23      	ldr	r2, [pc, #140]	@ (8001728 <HAL_InitTick+0xe8>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	0c9b      	lsrs	r3, r3, #18
 80016a2:	3b01      	subs	r3, #1
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016a6:	4b21      	ldr	r3, [pc, #132]	@ (800172c <HAL_InitTick+0xec>)
 80016a8:	4a21      	ldr	r2, [pc, #132]	@ (8001730 <HAL_InitTick+0xf0>)
 80016aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <HAL_InitTick+0xec>)
 80016ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016b4:	4a1d      	ldr	r2, [pc, #116]	@ (800172c <HAL_InitTick+0xec>)
 80016b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	@ (800172c <HAL_InitTick+0xec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	@ (800172c <HAL_InitTick+0xec>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b19      	ldr	r3, [pc, #100]	@ (800172c <HAL_InitTick+0xec>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016cc:	4817      	ldr	r0, [pc, #92]	@ (800172c <HAL_InitTick+0xec>)
 80016ce:	f003 f9b1 	bl	8004a34 <HAL_TIM_Base_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d11b      	bne.n	8001718 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016e0:	4812      	ldr	r0, [pc, #72]	@ (800172c <HAL_InitTick+0xec>)
 80016e2:	f003 f9f7 	bl	8004ad4 <HAL_TIM_Base_Start_IT>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d111      	bne.n	8001718 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016f4:	2036      	movs	r0, #54	@ 0x36
 80016f6:	f000 ffd9 	bl	80026ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d808      	bhi.n	8001712 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	2036      	movs	r0, #54	@ 0x36
 8001706:	f000 ffb5 	bl	8002674 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_InitTick+0xf4>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	e002      	b.n	8001718 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800171c:	4618      	mov	r0, r3
 800171e:	3738      	adds	r7, #56	@ 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	431bde83 	.word	0x431bde83
 800172c:	2000828c 	.word	0x2000828c
 8001730:	40001000 	.word	0x40001000
 8001734:	20000010 	.word	0x20000010

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <NMI_Handler+0x4>

08001740 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <MemManage_Handler+0x4>

08001750 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001754:	bf00      	nop
 8001756:	e7fd      	b.n	8001754 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <UsageFault_Handler+0x4>

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <TIM2_IRQHandler+0x10>)
 8001776:	f003 fb35 	bl	8004de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20007fec 	.word	0x20007fec

08001784 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <TIM6_DAC_IRQHandler+0x10>)
 800178a:	f003 fb2b 	bl	8004de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000828c 	.word	0x2000828c

08001798 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <ETH_IRQHandler+0x10>)
 800179e:	f001 faf3 	bl	8002d88 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20007ef4 	.word	0x20007ef4

080017ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
	return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_kill>:

int _kill(int pid, int sig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017c6:	f012 fddf 	bl	8014388 <__errno>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2216      	movs	r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
	return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_exit>:

void _exit (int status)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffe7 	bl	80017bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ee:	bf00      	nop
 80017f0:	e7fd      	b.n	80017ee <_exit+0x12>

080017f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e00a      	b.n	800181a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001804:	f3af 8000 	nop.w
 8001808:	4601      	mov	r1, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbf0      	blt.n	8001804 <_read+0x12>
	}

return len;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e009      	b.n	8001852 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fbea 	bl	8001020 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	dbf1      	blt.n	800183e <_write+0x12>
	}
	return len;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_close>:

int _close(int file)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	return -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800188c:	605a      	str	r2, [r3, #4]
	return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_isatty>:

int _isatty(int file)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
	return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f012 fd44 	bl	8014388 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20030000 	.word	0x20030000
 800192c:	00000400 	.word	0x00000400
 8001930:	200082d4 	.word	0x200082d4
 8001934:	2000b570 	.word	0x2000b570

08001938 <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	@ 0x30
 800193c:	af08      	add	r7, sp, #32
 800193e:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN MX_NetXDuo_MEM_POOL */

  /* USER CODE END MX_NetXDuo_MEM_POOL */

  /* USER CODE BEGIN MX_NetXDuo_Init */
 printf("Nx_UDP_Echo_Client application started..\n");
 8001948:	487e      	ldr	r0, [pc, #504]	@ (8001b44 <MX_NetXDuo_Init+0x20c>)
 800194a:	f012 fc97 	bl	801427c <puts>

  /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,  NX_PACKET_POOL_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800194e:	2300      	movs	r3, #0
 8001950:	f643 6258 	movw	r2, #15960	@ 0x3e58
 8001954:	497c      	ldr	r1, [pc, #496]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001956:	68b8      	ldr	r0, [r7, #8]
 8001958:	f011 fb74 	bl	8013044 <_txe_byte_allocate>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_NetXDuo_Init+0x2e>
  {
    return TX_POOL_ERROR;
 8001962:	2302      	movs	r3, #2
 8001964:	e0ea      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }
  /* Create the Packet pool to be used for packet allocation, it has the minimum required number of packet
   * to let this application work, if extra NX_PACKET are to be used the NX_PACKET_POOL_SIZE should be increased
   */
  ret = nx_packet_pool_create(&AppPool, "Main Packet Pool", PAYLOAD_SIZE, pointer, NX_PACKET_POOL_SIZE);
 8001966:	4b78      	ldr	r3, [pc, #480]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	223c      	movs	r2, #60	@ 0x3c
 800196c:	9201      	str	r2, [sp, #4]
 800196e:	f643 6258 	movw	r2, #15960	@ 0x3e58
 8001972:	9200      	str	r2, [sp, #0]
 8001974:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001978:	4974      	ldr	r1, [pc, #464]	@ (8001b4c <MX_NetXDuo_Init+0x214>)
 800197a:	4875      	ldr	r0, [pc, #468]	@ (8001b50 <MX_NetXDuo_Init+0x218>)
 800197c:	f00d fd5e 	bl	800f43c <_nxe_packet_pool_create>
 8001980:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_NetXDuo_Init+0x54>
  {
    return NX_NOT_ENABLED;
 8001988:	2314      	movs	r3, #20
 800198a:	e0d7      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Allocate the memory for Ip_Instance */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,   2 * DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 800198c:	2300      	movs	r3, #0
 800198e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001992:	496d      	ldr	r1, [pc, #436]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f011 fb55 	bl	8013044 <_txe_byte_allocate>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_NetXDuo_Init+0x6c>
  {
    return TX_POOL_ERROR;
 80019a0:	2302      	movs	r3, #2
 80019a2:	e0cb      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Create the main NX_IP instance */
  ret = nx_ip_create(&IpInstance, "Main Ip instance", NULL_ADDRESS, NULL_ADDRESS, &AppPool, nx_stm32_eth_driver,
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f240 72cc 	movw	r2, #1996	@ 0x7cc
 80019ac:	9205      	str	r2, [sp, #20]
 80019ae:	2205      	movs	r2, #5
 80019b0:	9204      	str	r2, [sp, #16]
 80019b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019b6:	9203      	str	r2, [sp, #12]
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	4b66      	ldr	r3, [pc, #408]	@ (8001b54 <MX_NetXDuo_Init+0x21c>)
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	4b64      	ldr	r3, [pc, #400]	@ (8001b50 <MX_NetXDuo_Init+0x218>)
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	2200      	movs	r2, #0
 80019c6:	4964      	ldr	r1, [pc, #400]	@ (8001b58 <MX_NetXDuo_Init+0x220>)
 80019c8:	4864      	ldr	r0, [pc, #400]	@ (8001b5c <MX_NetXDuo_Init+0x224>)
 80019ca:	f00d fb15 	bl	800eff8 <_nxe_ip_create>
 80019ce:	60f8      	str	r0, [r7, #12]
                     pointer, 2 * DEFAULT_MEMORY_SIZE, DEFAULT_PRIORITY);

  if (ret != NX_SUCCESS)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_NetXDuo_Init+0xa2>
  {
    return NX_NOT_ENABLED;
 80019d6:	2314      	movs	r3, #20
 80019d8:	e0b0      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Allocate the memory for ARP */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer, DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80019da:	2300      	movs	r3, #0
 80019dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e0:	4959      	ldr	r1, [pc, #356]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 80019e2:	68b8      	ldr	r0, [r7, #8]
 80019e4:	f011 fb2e 	bl	8013044 <_txe_byte_allocate>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_NetXDuo_Init+0xba>
  {
    return TX_POOL_ERROR;
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0a4      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Enable the ARP protocol and provide the ARP cache size for the IP instance */
  ret = nx_arp_enable(&IpInstance, (VOID *)pointer, DEFAULT_MEMORY_SIZE);
 80019f2:	4b55      	ldr	r3, [pc, #340]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019fa:	4619      	mov	r1, r3
 80019fc:	4857      	ldr	r0, [pc, #348]	@ (8001b5c <MX_NetXDuo_Init+0x224>)
 80019fe:	f00d f9ed 	bl	800eddc <_nxe_arp_enable>
 8001a02:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_NetXDuo_Init+0xd6>
  {
    return NX_NOT_ENABLED;
 8001a0a:	2314      	movs	r3, #20
 8001a0c:	e096      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Enable the ICMP */
  ret = nx_icmp_enable(&IpInstance);
 8001a0e:	4853      	ldr	r0, [pc, #332]	@ (8001b5c <MX_NetXDuo_Init+0x224>)
 8001a10:	f00d fa30 	bl	800ee74 <_nxe_icmp_enable>
 8001a14:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_NetXDuo_Init+0xe8>
  {
    return NX_NOT_ENABLED;
 8001a1c:	2314      	movs	r3, #20
 8001a1e:	e08d      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Enable the UDP protocol required for  DHCP communication */
  ret = nx_udp_enable(&IpInstance);
 8001a20:	484e      	ldr	r0, [pc, #312]	@ (8001b5c <MX_NetXDuo_Init+0x224>)
 8001a22:	f00d fe45 	bl	800f6b0 <_nxe_udp_enable>
 8001a26:	60f8      	str	r0, [r7, #12]

  /* Allocate the memory for main thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a2e:	4946      	ldr	r1, [pc, #280]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001a30:	68b8      	ldr	r0, [r7, #8]
 8001a32:	f011 fb07 	bl	8013044 <_txe_byte_allocate>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_NetXDuo_Init+0x108>
  {
    return TX_POOL_ERROR;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e07d      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Create the main thread */
  ret = tx_thread_create(&AppMainThread, "App Main thread", App_Main_Thread_Entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 8001a40:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	22b4      	movs	r2, #180	@ 0xb4
 8001a46:	9206      	str	r2, [sp, #24]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	9205      	str	r2, [sp, #20]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	9204      	str	r2, [sp, #16]
 8001a50:	220a      	movs	r2, #10
 8001a52:	9203      	str	r2, [sp, #12]
 8001a54:	220a      	movs	r2, #10
 8001a56:	9202      	str	r2, [sp, #8]
 8001a58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a5c:	9201      	str	r2, [sp, #4]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2300      	movs	r3, #0
 8001a62:	4a3f      	ldr	r2, [pc, #252]	@ (8001b60 <MX_NetXDuo_Init+0x228>)
 8001a64:	493f      	ldr	r1, [pc, #252]	@ (8001b64 <MX_NetXDuo_Init+0x22c>)
 8001a66:	4840      	ldr	r0, [pc, #256]	@ (8001b68 <MX_NetXDuo_Init+0x230>)
 8001a68:	f011 ff7c 	bl	8013964 <_txe_thread_create>
 8001a6c:	60f8      	str	r0, [r7, #12]
                         DEFAULT_MAIN_PRIORITY, DEFAULT_MAIN_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_NetXDuo_Init+0x140>
  {
    return NX_NOT_ENABLED;
 8001a74:	2314      	movs	r3, #20
 8001a76:	e061      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Allocate the memory for UDP client thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a7e:	4932      	ldr	r1, [pc, #200]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001a80:	68b8      	ldr	r0, [r7, #8]
 8001a82:	f011 fadf 	bl	8013044 <_txe_byte_allocate>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_NetXDuo_Init+0x158>
  {
    return TX_POOL_ERROR;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e055      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }
  /* create the UDP client thread */
  ret = tx_thread_create(&AppUDPThread, "App UDP Thread", App_UDP_Thread_Entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 8001a90:	4b2d      	ldr	r3, [pc, #180]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	22b4      	movs	r2, #180	@ 0xb4
 8001a96:	9206      	str	r2, [sp, #24]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	9205      	str	r2, [sp, #20]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	9204      	str	r2, [sp, #16]
 8001aa0:	2205      	movs	r2, #5
 8001aa2:	9203      	str	r2, [sp, #12]
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	9202      	str	r2, [sp, #8]
 8001aa8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aac:	9201      	str	r2, [sp, #4]
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8001b6c <MX_NetXDuo_Init+0x234>)
 8001ab4:	492e      	ldr	r1, [pc, #184]	@ (8001b70 <MX_NetXDuo_Init+0x238>)
 8001ab6:	482f      	ldr	r0, [pc, #188]	@ (8001b74 <MX_NetXDuo_Init+0x23c>)
 8001ab8:	f011 ff54 	bl	8013964 <_txe_thread_create>
 8001abc:	60f8      	str	r0, [r7, #12]
                         DEFAULT_PRIORITY, DEFAULT_PRIORITY, TX_NO_TIME_SLICE, TX_DONT_START);

  if (ret != TX_SUCCESS)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_NetXDuo_Init+0x190>
  {
    return NX_NOT_ENABLED;
 8001ac4:	2314      	movs	r3, #20
 8001ac6:	e039      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* Allocate the memory for Link thread   */
  if (tx_byte_allocate(byte_pool, (VOID **) &pointer,2 *  DEFAULT_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ace:	491e      	ldr	r1, [pc, #120]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001ad0:	68b8      	ldr	r0, [r7, #8]
 8001ad2:	f011 fab7 	bl	8013044 <_txe_byte_allocate>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_NetXDuo_Init+0x1a8>
  {
    return TX_POOL_ERROR;
 8001adc:	2302      	movs	r3, #2
 8001ade:	e02d      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* create the Link thread */
  ret = tx_thread_create(&AppLinkThread, "App Link Thread", App_Link_Thread_Entry, 0, pointer, 2 * DEFAULT_MEMORY_SIZE,
 8001ae0:	4b19      	ldr	r3, [pc, #100]	@ (8001b48 <MX_NetXDuo_Init+0x210>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	22b4      	movs	r2, #180	@ 0xb4
 8001ae6:	9206      	str	r2, [sp, #24]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	9205      	str	r2, [sp, #20]
 8001aec:	2200      	movs	r2, #0
 8001aee:	9204      	str	r2, [sp, #16]
 8001af0:	220b      	movs	r2, #11
 8001af2:	9203      	str	r2, [sp, #12]
 8001af4:	220b      	movs	r2, #11
 8001af6:	9202      	str	r2, [sp, #8]
 8001af8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2300      	movs	r3, #0
 8001b02:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <MX_NetXDuo_Init+0x240>)
 8001b04:	491d      	ldr	r1, [pc, #116]	@ (8001b7c <MX_NetXDuo_Init+0x244>)
 8001b06:	481e      	ldr	r0, [pc, #120]	@ (8001b80 <MX_NetXDuo_Init+0x248>)
 8001b08:	f011 ff2c 	bl	8013964 <_txe_thread_create>
 8001b0c:	60f8      	str	r0, [r7, #12]
                         LINK_PRIORITY, LINK_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);

  if (ret != TX_SUCCESS)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_NetXDuo_Init+0x1e0>
  {
    return NX_NOT_ENABLED;
 8001b14:	2314      	movs	r3, #20
 8001b16:	e011      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* create the DHCP client */
  ret = nx_dhcp_create(&DHCPClient, &IpInstance, "DHCP Client");
 8001b18:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <MX_NetXDuo_Init+0x24c>)
 8001b1a:	4910      	ldr	r1, [pc, #64]	@ (8001b5c <MX_NetXDuo_Init+0x224>)
 8001b1c:	481a      	ldr	r0, [pc, #104]	@ (8001b88 <MX_NetXDuo_Init+0x250>)
 8001b1e:	f005 fa39 	bl	8006f94 <_nxe_dhcp_create>
 8001b22:	60f8      	str	r0, [r7, #12]

  if (ret != NX_SUCCESS)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_NetXDuo_Init+0x1f6>
  {
    return NX_NOT_ENABLED;
 8001b2a:	2314      	movs	r3, #20
 8001b2c:	e006      	b.n	8001b3c <MX_NetXDuo_Init+0x204>
  }

  /* set DHCP notification callback  */

  tx_semaphore_create(&Semaphore, "DHCP Semaphore", 0);
 8001b2e:	2320      	movs	r3, #32
 8001b30:	2200      	movs	r2, #0
 8001b32:	4916      	ldr	r1, [pc, #88]	@ (8001b8c <MX_NetXDuo_Init+0x254>)
 8001b34:	4816      	ldr	r0, [pc, #88]	@ (8001b90 <MX_NetXDuo_Init+0x258>)
 8001b36:	f011 fe1f 	bl	8013778 <_txe_semaphore_create>

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	08015354 	.word	0x08015354
 8001b48:	2000acf8 	.word	0x2000acf8
 8001b4c:	08015380 	.word	0x08015380
 8001b50:	20008514 	.word	0x20008514
 8001b54:	0800633d 	.word	0x0800633d
 8001b58:	08015394 	.word	0x08015394
 8001b5c:	20008550 	.word	0x20008550
 8001b60:	08001bb1 	.word	0x08001bb1
 8001b64:	080153a8 	.word	0x080153a8
 8001b68:	200082d8 	.word	0x200082d8
 8001b6c:	08001c6d 	.word	0x08001c6d
 8001b70:	080153b8 	.word	0x080153b8
 8001b74:	2000838c 	.word	0x2000838c
 8001b78:	08001f4d 	.word	0x08001f4d
 8001b7c:	080153c8 	.word	0x080153c8
 8001b80:	20008440 	.word	0x20008440
 8001b84:	080153d8 	.word	0x080153d8
 8001b88:	20008d1c 	.word	0x20008d1c
 8001b8c:	080153e4 	.word	0x080153e4
 8001b90:	200084f4 	.word	0x200084f4

08001b94 <ip_address_change_notify_callback>:
* @param ip_instance: NX_IP instance
* @param ptr: user data
* @retval none
*/
static VOID ip_address_change_notify_callback(NX_IP *ip_instance, VOID *ptr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* release the semaphore as soon as an IP address is available */
  tx_semaphore_put(&Semaphore);
 8001b9e:	4803      	ldr	r0, [pc, #12]	@ (8001bac <ip_address_change_notify_callback+0x18>)
 8001ba0:	f011 fec2 	bl	8013928 <_txe_semaphore_put>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200084f4 	.word	0x200084f4

08001bb0 <App_Main_Thread_Entry>:
* @brief  Main thread entry.
* @param thread_input: ULONG user argument used by the thread entry
* @retval none
*/
static VOID App_Main_Thread_Entry(ULONG thread_input)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
  UINT ret;

  /* register the IP address change callback */
  ret = nx_ip_address_change_notify(&IpInstance, ip_address_change_notify_callback, NULL);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4923      	ldr	r1, [pc, #140]	@ (8001c48 <App_Main_Thread_Entry+0x98>)
 8001bbc:	4823      	ldr	r0, [pc, #140]	@ (8001c4c <App_Main_Thread_Entry+0x9c>)
 8001bbe:	f00d f999 	bl	800eef4 <_nxe_ip_address_change_notify>
 8001bc2:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <App_Main_Thread_Entry+0x1e>
  {
    Error_Handler();
 8001bca:	f7ff fb2b 	bl	8001224 <Error_Handler>
  }

  /* start the DHCP client */
  ret = nx_dhcp_start(&DHCPClient);
 8001bce:	4820      	ldr	r0, [pc, #128]	@ (8001c50 <App_Main_Thread_Entry+0xa0>)
 8001bd0:	f005 fbd0 	bl	8007374 <_nxe_dhcp_start>
 8001bd4:	60f8      	str	r0, [r7, #12]
  if (ret != NX_SUCCESS)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <App_Main_Thread_Entry+0x30>
  {
    Error_Handler();
 8001bdc:	f7ff fb22 	bl	8001224 <Error_Handler>
  }

  /* wait until an IP address is ready */
  if(tx_semaphore_get(&Semaphore, TX_WAIT_FOREVER) != TX_SUCCESS)
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be4:	481b      	ldr	r0, [pc, #108]	@ (8001c54 <App_Main_Thread_Entry+0xa4>)
 8001be6:	f011 fe5d 	bl	80138a4 <_txe_semaphore_get>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <App_Main_Thread_Entry+0x44>
  {
    Error_Handler();
 8001bf0:	f7ff fb18 	bl	8001224 <Error_Handler>
  }
  /* get IP address */
  ret = nx_ip_address_get(&IpInstance, &IpAddress, &NetMask);
 8001bf4:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <App_Main_Thread_Entry+0xa8>)
 8001bf6:	4919      	ldr	r1, [pc, #100]	@ (8001c5c <App_Main_Thread_Entry+0xac>)
 8001bf8:	4814      	ldr	r0, [pc, #80]	@ (8001c4c <App_Main_Thread_Entry+0x9c>)
 8001bfa:	f00d f9b9 	bl	800ef70 <_nxe_ip_address_get>
 8001bfe:	60f8      	str	r0, [r7, #12]

  /* print the IP address */
  PRINT_IP_ADDRESS(IpAddress);
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <App_Main_Thread_Entry+0xac>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0e19      	lsrs	r1, r3, #24
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <App_Main_Thread_Entry+0xac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	0c1b      	lsrs	r3, r3, #16
 8001c0c:	b2d8      	uxtb	r0, r3
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <App_Main_Thread_Entry+0xac>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4a11      	ldr	r2, [pc, #68]	@ (8001c5c <App_Main_Thread_Entry+0xac>)
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	4603      	mov	r3, r0
 8001c22:	460a      	mov	r2, r1
 8001c24:	490e      	ldr	r1, [pc, #56]	@ (8001c60 <App_Main_Thread_Entry+0xb0>)
 8001c26:	480f      	ldr	r0, [pc, #60]	@ (8001c64 <App_Main_Thread_Entry+0xb4>)
 8001c28:	f012 fac0 	bl	80141ac <iprintf>

  if (ret != TX_SUCCESS)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <App_Main_Thread_Entry+0x86>
  {
    Error_Handler();
 8001c32:	f7ff faf7 	bl	8001224 <Error_Handler>
  }
  /* the network is correctly initialized, start the UDP thread */
  tx_thread_resume(&AppUDPThread);
 8001c36:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <App_Main_Thread_Entry+0xb8>)
 8001c38:	f011 ffce 	bl	8013bd8 <_txe_thread_resume>

  /* this thread is not needed any more, we relinquish it */
  tx_thread_relinquish();
 8001c3c:	f011 ffb0 	bl	8013ba0 <_txe_thread_relinquish>

  return;
 8001c40:	bf00      	nop
}
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	08001b95 	.word	0x08001b95
 8001c4c:	20008550 	.word	0x20008550
 8001c50:	20008d1c 	.word	0x20008d1c
 8001c54:	200084f4 	.word	0x200084f4
 8001c58:	2000acf4 	.word	0x2000acf4
 8001c5c:	2000acf0 	.word	0x2000acf0
 8001c60:	080153f4 	.word	0x080153f4
 8001c64:	08015400 	.word	0x08015400
 8001c68:	2000838c 	.word	0x2000838c

08001c6c <App_UDP_Thread_Entry>:
static VOID App_UDP_Thread_Entry(ULONG thread_input)
{
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	f5ad 7d1e 	sub.w	sp, sp, #632	@ 0x278
 8001c72:	af04      	add	r7, sp, #16
 8001c74:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001c78:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8001c7c:	6018      	str	r0, [r3, #0]
  UCHAR data_buffer[512];

  NX_PACKET *data_packet;

  /* create the UDP socket */
  ret = nx_udp_socket_create(&IpInstance, &UDPSocket, "UDP Client Socket", NX_IP_NORMAL, NX_FRAGMENT_OKAY, NX_IP_TIME_TO_LIVE, QUEUE_MAX_SIZE);
 8001c7e:	2378      	movs	r3, #120	@ 0x78
 8001c80:	9303      	str	r3, [sp, #12]
 8001c82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	4aa4      	ldr	r2, [pc, #656]	@ (8001f24 <App_UDP_Thread_Entry+0x2b8>)
 8001c94:	49a4      	ldr	r1, [pc, #656]	@ (8001f28 <App_UDP_Thread_Entry+0x2bc>)
 8001c96:	48a5      	ldr	r0, [pc, #660]	@ (8001f2c <App_UDP_Thread_Entry+0x2c0>)
 8001c98:	f00d fd88 	bl	800f7ac <_nxe_udp_socket_create>
 8001c9c:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254

  if (ret != NX_SUCCESS)
 8001ca0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <App_UDP_Thread_Entry+0x40>
  {
    Error_Handler();
 8001ca8:	f7ff fabc 	bl	8001224 <Error_Handler>
  }

  /* bind UDP socket to the DEFAULT PORT */
  ret = nx_udp_socket_bind(&UDPSocket, DEFAULT_PORT, TX_WAIT_FOREVER);
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cb0:	f241 7170 	movw	r1, #6000	@ 0x1770
 8001cb4:	489c      	ldr	r0, [pc, #624]	@ (8001f28 <App_UDP_Thread_Entry+0x2bc>)
 8001cb6:	f00d fd33 	bl	800f720 <_nxe_udp_socket_bind>
 8001cba:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254

  if (ret != NX_SUCCESS)
 8001cbe:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <App_UDP_Thread_Entry+0x5e>
  {
    Error_Handler();
 8001cc6:	f7ff faad 	bl	8001224 <Error_Handler>
  }
  TX_MEMSET(data_buffer, '\0', sizeof(data_buffer));
 8001cca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f012 fb4f 	bl	8014378 <memset>

  /* create the packet to send over the UDP socket */
  ret = nx_packet_allocate(&AppPool, &data_packet, NX_UDP_PACKET, TX_WAIT_FOREVER);
 8001cda:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ce2:	222c      	movs	r2, #44	@ 0x2c
 8001ce4:	4892      	ldr	r0, [pc, #584]	@ (8001f30 <App_UDP_Thread_Entry+0x2c4>)
 8001ce6:	f00d faed 	bl	800f2c4 <_nxe_packet_allocate>
 8001cea:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254

  if (ret != NX_SUCCESS)
 8001cee:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <App_UDP_Thread_Entry+0x8e>
  {
	Error_Handler();
 8001cf6:	f7ff fa95 	bl	8001224 <Error_Handler>
  }

  ret = nx_packet_data_append(data_packet, (VOID *)DEFAULT_MESSAGE, sizeof(DEFAULT_MESSAGE), &AppPool, TX_WAIT_FOREVER);
 8001cfa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001cfe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	4b89      	ldr	r3, [pc, #548]	@ (8001f30 <App_UDP_Thread_Entry+0x2c4>)
 8001d0c:	2206      	movs	r2, #6
 8001d0e:	4989      	ldr	r1, [pc, #548]	@ (8001f34 <App_UDP_Thread_Entry+0x2c8>)
 8001d10:	f00d fb1e 	bl	800f350 <_nxe_packet_data_append>
 8001d14:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254

  if (ret != NX_SUCCESS)
 8001d18:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <App_UDP_Thread_Entry+0xb8>
  {
	Error_Handler();
 8001d20:	f7ff fa80 	bl	8001224 <Error_Handler>
  }

  /* send the message */
  ret = nx_udp_socket_send(&UDPSocket, data_packet, UDP_SERVER_ADDRESS, UDP_SERVER_PORT);
 8001d24:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001d28:	f241 7371 	movw	r3, #6001	@ 0x1771
 8001d2c:	4a82      	ldr	r2, [pc, #520]	@ (8001f38 <App_UDP_Thread_Entry+0x2cc>)
 8001d2e:	487e      	ldr	r0, [pc, #504]	@ (8001f28 <App_UDP_Thread_Entry+0x2bc>)
 8001d30:	f00d fe4e 	bl	800f9d0 <_nxe_udp_socket_send>
 8001d34:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
  while(1)
  {
	  ret = nx_udp_socket_receive(&UDPSocket, &server_packet, 10000000);
 8001d38:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001d3c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f3c <App_UDP_Thread_Entry+0x2d0>)
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4879      	ldr	r0, [pc, #484]	@ (8001f28 <App_UDP_Thread_Entry+0x2bc>)
 8001d42:	f00d fe03 	bl	800f94c <_nxe_udp_socket_receive>
 8001d46:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
	  if (ret == NX_SUCCESS)
 8001d4a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 80db 	bne.w	8001f0a <App_UDP_Thread_Entry+0x29e>
	  {
		ULONG source_ip_address;
		UINT source_port;

		/* get the server IP address and  port */
		nx_udp_source_extract(server_packet, &source_ip_address, &source_port);
 8001d54:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8001d58:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001d5c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00d fef7 	bl	800fb54 <_nxe_udp_source_extract>

		/* retrieve the data sent by the server */
		nx_packet_data_retrieve(server_packet, data_buffer, &bytes_read);
 8001d66:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8001d6a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8001d6e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00d fb46 	bl	800f404 <_nxe_packet_data_retrieve>

		/* print the received data */
	    PRINT_DATA(source_ip_address, source_port, data_buffer);
 8001d78:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001d7c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0e18      	lsrs	r0, r3, #24
 8001d84:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001d88:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0c1b      	lsrs	r3, r3, #16
 8001d90:	b2dc      	uxtb	r4, r3
 8001d92:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001d96:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	b2dd      	uxtb	r5, r3
 8001da0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001da4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8001db0:	f5a2 720a 	sub.w	r2, r2, #552	@ 0x228
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001dba:	9102      	str	r1, [sp, #8]
 8001dbc:	9201      	str	r2, [sp, #4]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	485e      	ldr	r0, [pc, #376]	@ (8001f40 <App_UDP_Thread_Entry+0x2d4>)
 8001dc8:	f012 f9f0 	bl	80141ac <iprintf>
	    if(data_buffer[0]=='r')
 8001dcc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001dd0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b72      	cmp	r3, #114	@ 0x72
 8001dd8:	d117      	bne.n	8001e0a <App_UDP_Thread_Entry+0x19e>
	    {
	    	printf("reset\n");
 8001dda:	485a      	ldr	r0, [pc, #360]	@ (8001f44 <App_UDP_Thread_Entry+0x2d8>)
 8001ddc:	f012 fa4e 	bl	801427c <puts>
			for(int i=0;i<MOTOR_COUNT;i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8001de6:	e00b      	b.n	8001e00 <App_UDP_Thread_Entry+0x194>
			{
				controlMotor(i, 3000, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001dee:	f8d7 0264 	ldr.w	r0, [r7, #612]	@ 0x264
 8001df2:	f7ff f95f 	bl	80010b4 <controlMotor>
			for(int i=0;i<MOTOR_COUNT;i++)
 8001df6:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8001e00:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8001e04:	2b0d      	cmp	r3, #13
 8001e06:	ddef      	ble.n	8001de8 <App_UDP_Thread_Entry+0x17c>
 8001e08:	e076      	b.n	8001ef8 <App_UDP_Thread_Entry+0x28c>
			}
	    }
	    else
	    {
			// remove []
			memmove(data_buffer, data_buffer+1, strlen(data_buffer));
 8001e0a:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001e0e:	3401      	adds	r4, #1
 8001e10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fb07 	bl	8000428 <strlen>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e20:	4621      	mov	r1, r4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f012 fa8e 	bl	8014344 <memmove>
			data_buffer[strlen(data_buffer)-1] = '\0';
 8001e28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fafb 	bl	8000428 <strlen>
 8001e32:	4603      	mov	r3, r0
 8001e34:	3b01      	subs	r3, #1
 8001e36:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8001e3a:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8001e3e:	2100      	movs	r1, #0
 8001e40:	54d1      	strb	r1, [r2, r3]
//			printf("%d\n", MOTOR_COUNT);
			// parse to list
			int32_t motorCmd[MOTOR_COUNT] = {0};
 8001e42:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001e46:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	2338      	movs	r3, #56	@ 0x38
 8001e4e:	461a      	mov	r2, r3
 8001e50:	2100      	movs	r1, #0
 8001e52:	f012 fa91 	bl	8014378 <memset>
			char *ptr = strtok(data_buffer, ", ");
 8001e56:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e5a:	493b      	ldr	r1, [pc, #236]	@ (8001f48 <App_UDP_Thread_Entry+0x2dc>)
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f012 fa15 	bl	801428c <strtok>
 8001e62:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
			int idx = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
			while(ptr != NULL)
 8001e6c:	e017      	b.n	8001e9e <App_UDP_Thread_Entry+0x232>
			{
				motorCmd[idx] = atoi(ptr);
 8001e6e:	f8d7 0260 	ldr.w	r0, [r7, #608]	@ 0x260
 8001e72:	f012 f813 	bl	8013e9c <atoi>
 8001e76:	4601      	mov	r1, r0
 8001e78:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001e7c:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001e80:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				ptr = strtok(NULL, ", ");
 8001e88:	492f      	ldr	r1, [pc, #188]	@ (8001f48 <App_UDP_Thread_Entry+0x2dc>)
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f012 f9fe 	bl	801428c <strtok>
 8001e90:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
				idx++;
 8001e94:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
			while(ptr != NULL)
 8001e9e:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1e3      	bne.n	8001e6e <App_UDP_Thread_Entry+0x202>
			}
			for(int i=0;i<MOTOR_COUNT;i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001eac:	e020      	b.n	8001ef0 <App_UDP_Thread_Entry+0x284>
			{
//				printf("%d ", motorCmd[i]);
				controlMotor(i, abs(motorCmd[i]), motorCmd[i]>=0);
 8001eae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001eb2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001eb6:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8001eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bfb8      	it	lt
 8001ec2:	425b      	neglt	r3, r3
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8001eca:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8001ece:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8001ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	0fdb      	lsrs	r3, r3, #31
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 8001ee2:	f7ff f8e7 	bl	80010b4 <controlMotor>
			for(int i=0;i<MOTOR_COUNT;i++)
 8001ee6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8001eea:	3301      	adds	r3, #1
 8001eec:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8001ef0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8001ef4:	2b0d      	cmp	r3, #13
 8001ef6:	ddda      	ble.n	8001eae <App_UDP_Thread_Entry+0x242>
//				updateReset(abs(motorCmd[i]));
			}
//			printf("\n");
	    }
		/* release the server packet */
		nx_packet_release(server_packet);
 8001ef8:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00d fb67 	bl	800f5d0 <_nxe_packet_release>

		/* toggle the green led on success */
		BSP_LED_Toggle(LED_GREEN);
 8001f02:	2000      	movs	r0, #0
 8001f04:	f000 fa6c 	bl	80023e0 <BSP_LED_Toggle>
	  ret = nx_udp_socket_receive(&UDPSocket, &server_packet, 10000000);
 8001f08:	e716      	b.n	8001d38 <App_UDP_Thread_Entry+0xcc>
	  }
	  else
	  {
		/* connection lost with the server, exit the loop */
		break;
 8001f0a:	bf00      	nop
//    /* Add a short timeout to let the echool tool correctly
//    process the just sent packet before sending a new one */
//    tx_thread_sleep(20);
//  }
  /* unbind the socket and delete it */
  nx_udp_socket_unbind(&UDPSocket);
 8001f0c:	4806      	ldr	r0, [pc, #24]	@ (8001f28 <App_UDP_Thread_Entry+0x2bc>)
 8001f0e:	f00d fde5 	bl	800fadc <_nxe_udp_socket_unbind>
  nx_udp_socket_delete(&UDPSocket);
 8001f12:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <App_UDP_Thread_Entry+0x2bc>)
 8001f14:	f00d fcde 	bl	800f8d4 <_nxe_udp_socket_delete>
//  else
//  {
//    printf("\n-------------------------------------\n\tFAIL : %u / %u packets sent\n-------------------------------------\n", count - 1, MAX_PACKET_COUNT);
//    Error_Handler();
//  }
}
 8001f18:	bf00      	nop
 8001f1a:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bdb0      	pop	{r4, r5, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	0801541c 	.word	0x0801541c
 8001f28:	2000ac78 	.word	0x2000ac78
 8001f2c:	20008550 	.word	0x20008550
 8001f30:	20008514 	.word	0x20008514
 8001f34:	08015430 	.word	0x08015430
 8001f38:	c0a8020a 	.word	0xc0a8020a
 8001f3c:	00989680 	.word	0x00989680
 8001f40:	08015438 	.word	0x08015438
 8001f44:	08015458 	.word	0x08015458
 8001f48:	08015460 	.word	0x08015460

08001f4c <App_Link_Thread_Entry>:
* @brief  Link thread entry
* @param thread_input: ULONG thread parameter
* @retval none
*/
static VOID App_Link_Thread_Entry(ULONG thread_input)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	6078      	str	r0, [r7, #4]
  ULONG actual_status;
  UINT linkdown = 0, status;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  while(1)
  {
    /* Get Physical Link stackavailtus. */
    status = nx_ip_interface_status_check(&IpInstance, 0, NX_IP_LINK_ENABLED,
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	220a      	movs	r2, #10
 8001f5e:	9200      	str	r2, [sp, #0]
 8001f60:	2204      	movs	r2, #4
 8001f62:	2100      	movs	r1, #0
 8001f64:	481e      	ldr	r0, [pc, #120]	@ (8001fe0 <App_Link_Thread_Entry+0x94>)
 8001f66:	f00d f957 	bl	800f218 <_nxe_ip_interface_status_check>
 8001f6a:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);

    if(status == NX_SUCCESS)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d129      	bne.n	8001fc6 <App_Link_Thread_Entry+0x7a>
    {
      if(linkdown == 1)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d12e      	bne.n	8001fd6 <App_Link_Thread_Entry+0x8a>
      {
        linkdown = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
        status = nx_ip_interface_status_check(&IpInstance, 0, NX_IP_ADDRESS_RESOLVED,
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	220a      	movs	r2, #10
 8001f82:	9200      	str	r2, [sp, #0]
 8001f84:	2202      	movs	r2, #2
 8001f86:	2100      	movs	r1, #0
 8001f88:	4815      	ldr	r0, [pc, #84]	@ (8001fe0 <App_Link_Thread_Entry+0x94>)
 8001f8a:	f00d f945 	bl	800f218 <_nxe_ip_interface_status_check>
 8001f8e:	6138      	str	r0, [r7, #16]
                                      &actual_status, 10);
        if(status == NX_SUCCESS)
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <App_Link_Thread_Entry+0x58>
        {
          /* The network cable is connected again. */
          printf("The network cable is connected again.\n");
 8001f96:	4813      	ldr	r0, [pc, #76]	@ (8001fe4 <App_Link_Thread_Entry+0x98>)
 8001f98:	f012 f970 	bl	801427c <puts>
          /* Print UDP Echo Client is available again. */
          printf("UDP Echo Client is available again.\n");
 8001f9c:	4812      	ldr	r0, [pc, #72]	@ (8001fe8 <App_Link_Thread_Entry+0x9c>)
 8001f9e:	f012 f96d 	bl	801427c <puts>
 8001fa2:	e018      	b.n	8001fd6 <App_Link_Thread_Entry+0x8a>
        }
        else
        {
          /* The network cable is connected. */
          printf("The network cable is connected.\n");
 8001fa4:	4811      	ldr	r0, [pc, #68]	@ (8001fec <App_Link_Thread_Entry+0xa0>)
 8001fa6:	f012 f969 	bl	801427c <puts>
          /* Send command to Enable Nx driver. */
          nx_ip_driver_direct_command(&IpInstance, NX_LINK_ENABLE,
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	480b      	ldr	r0, [pc, #44]	@ (8001fe0 <App_Link_Thread_Entry+0x94>)
 8001fb4:	f00d f8f0 	bl	800f198 <_nxe_ip_driver_direct_command>
                                      &actual_status);
          /* Restart DHCP Client. */
          nx_dhcp_stop(&DHCPClient);
 8001fb8:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <App_Link_Thread_Entry+0xa4>)
 8001fba:	f005 fbe1 	bl	8007780 <_nxe_dhcp_stop>
          nx_dhcp_start(&DHCPClient);
 8001fbe:	480c      	ldr	r0, [pc, #48]	@ (8001ff0 <App_Link_Thread_Entry+0xa4>)
 8001fc0:	f005 f9d8 	bl	8007374 <_nxe_dhcp_start>
 8001fc4:	e007      	b.n	8001fd6 <App_Link_Thread_Entry+0x8a>
        }
      }
    }
    else
    {
      if(0 == linkdown)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <App_Link_Thread_Entry+0x8a>
      {
        linkdown = 1;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	617b      	str	r3, [r7, #20]
        /* The network cable is not connected. */
        printf("The network cable is not connected.\n");
 8001fd0:	4808      	ldr	r0, [pc, #32]	@ (8001ff4 <App_Link_Thread_Entry+0xa8>)
 8001fd2:	f012 f953 	bl	801427c <puts>
      }
    }

    tx_thread_sleep(NX_ETH_CABLE_CONNECTION_CHECK_PERIOD);
 8001fd6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001fda:	f010 f8ab 	bl	8012134 <_tx_thread_sleep>
    status = nx_ip_interface_status_check(&IpInstance, 0, NX_IP_LINK_ENABLED,
 8001fde:	e7bb      	b.n	8001f58 <App_Link_Thread_Entry+0xc>
 8001fe0:	20008550 	.word	0x20008550
 8001fe4:	08015464 	.word	0x08015464
 8001fe8:	0801548c 	.word	0x0801548c
 8001fec:	080154b0 	.word	0x080154b0
 8001ff0:	20008d1c 	.word	0x20008d1c
 8001ff4:	080154d0 	.word	0x080154d0

08001ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002030 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ffc:	480d      	ldr	r0, [pc, #52]	@ (8002034 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ffe:	490e      	ldr	r1, [pc, #56]	@ (8002038 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002000:	4a0e      	ldr	r2, [pc, #56]	@ (800203c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002004:	e002      	b.n	800200c <LoopCopyDataInit>

08002006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200a:	3304      	adds	r3, #4

0800200c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800200c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002010:	d3f9      	bcc.n	8002006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002012:	4a0b      	ldr	r2, [pc, #44]	@ (8002040 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002014:	4c0b      	ldr	r4, [pc, #44]	@ (8002044 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002018:	e001      	b.n	800201e <LoopFillZerobss>

0800201a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800201c:	3204      	adds	r2, #4

0800201e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002020:	d3fb      	bcc.n	800201a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002022:	f000 f9f7 	bl	8002414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002026:	f012 f9b5 	bl	8014394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202a:	f7fe fc2d 	bl	8000888 <main>
  bx  lr    
 800202e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002030:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002038:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800203c:	080157cc 	.word	0x080157cc
  ldr r2, =_sbss
 8002040:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002044:	2000b56c 	.word	0x2000b56c

08002048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002048:	e7fe      	b.n	8002048 <ADC_IRQHandler>

0800204a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <LAN8742_RegisterBusIO+0x28>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d007      	beq.n	8002072 <LAN8742_RegisterBusIO+0x28>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <LAN8742_RegisterBusIO+0x28>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d102      	bne.n	8002078 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002076:	e014      	b.n	80020a2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d17c      	bne.n	80021c8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	e01c      	b.n	8002122 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f107 0208 	add.w	r2, r7, #8
 80020f0:	2112      	movs	r1, #18
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	4798      	blx	r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	da03      	bge.n	8002104 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80020fc:	f06f 0304 	mvn.w	r3, #4
 8002100:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002102:	e00b      	b.n	800211c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d105      	bne.n	800211c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
         break;
 800211a:	e005      	b.n	8002128 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	3301      	adds	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b1f      	cmp	r3, #31
 8002126:	d9df      	bls.n	80020e8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b1f      	cmp	r3, #31
 800212e:	d902      	bls.n	8002136 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002130:	f06f 0302 	mvn.w	r3, #2
 8002134:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d145      	bne.n	80021c8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6810      	ldr	r0, [r2, #0]
 8002144:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002148:	2100      	movs	r1, #0
 800214a:	4798      	blx	r3
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	db37      	blt.n	80021c2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6810      	ldr	r0, [r2, #0]
 800215a:	f107 0208 	add.w	r2, r7, #8
 800215e:	2100      	movs	r1, #0
 8002160:	4798      	blx	r3
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	db28      	blt.n	80021ba <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4798      	blx	r3
 800216e:	4603      	mov	r3, r0
 8002170:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002172:	e01c      	b.n	80021ae <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4798      	blx	r3
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002186:	d80e      	bhi.n	80021a6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6810      	ldr	r0, [r2, #0]
 8002190:	f107 0208 	add.w	r2, r7, #8
 8002194:	2100      	movs	r1, #0
 8002196:	4798      	blx	r3
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	da07      	bge.n	80021ae <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800219e:	f06f 0304 	mvn.w	r3, #4
 80021a2:	613b      	str	r3, [r7, #16]
                 break;
 80021a4:	e010      	b.n	80021c8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80021a6:	f06f 0301 	mvn.w	r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
               break;
 80021ac:	e00c      	b.n	80021c8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1dd      	bne.n	8002174 <LAN8742_Init+0xc6>
 80021b8:	e006      	b.n	80021c8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80021ba:	f06f 0304 	mvn.w	r3, #4
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	e002      	b.n	80021c8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80021c2:	f06f 0303 	mvn.w	r3, #3
 80021c6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d112      	bne.n	80021f4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	4798      	blx	r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80021d8:	bf00      	nop
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	4798      	blx	r3
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80021ec:	d9f5      	bls.n	80021da <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80021f4:	693b      	ldr	r3, [r7, #16]
 }
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6810      	ldr	r0, [r2, #0]
 8002212:	f107 020c 	add.w	r2, r7, #12
 8002216:	2101      	movs	r1, #1
 8002218:	4798      	blx	r3
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	da02      	bge.n	8002226 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002220:	f06f 0304 	mvn.w	r3, #4
 8002224:	e06e      	b.n	8002304 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6810      	ldr	r0, [r2, #0]
 800222e:	f107 020c 	add.w	r2, r7, #12
 8002232:	2101      	movs	r1, #1
 8002234:	4798      	blx	r3
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	da02      	bge.n	8002242 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800223c:	f06f 0304 	mvn.w	r3, #4
 8002240:	e060      	b.n	8002304 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800224c:	2301      	movs	r3, #1
 800224e:	e059      	b.n	8002304 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6810      	ldr	r0, [r2, #0]
 8002258:	f107 020c 	add.w	r2, r7, #12
 800225c:	2100      	movs	r1, #0
 800225e:	4798      	blx	r3
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	da02      	bge.n	800226c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002266:	f06f 0304 	mvn.w	r3, #4
 800226a:	e04b      	b.n	8002304 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11b      	bne.n	80022ae <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <LAN8742_GetLinkState+0x90>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800228a:	2302      	movs	r3, #2
 800228c:	e03a      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002298:	2303      	movs	r3, #3
 800229a:	e033      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022a6:	2304      	movs	r3, #4
 80022a8:	e02c      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022aa:	2305      	movs	r3, #5
 80022ac:	e02a      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6810      	ldr	r0, [r2, #0]
 80022b6:	f107 020c 	add.w	r2, r7, #12
 80022ba:	211f      	movs	r1, #31
 80022bc:	4798      	blx	r3
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	da02      	bge.n	80022ca <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80022c4:	f06f 0304 	mvn.w	r3, #4
 80022c8:	e01c      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80022d4:	2306      	movs	r3, #6
 80022d6:	e015      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 031c 	and.w	r3, r3, #28
 80022de:	2b18      	cmp	r3, #24
 80022e0:	d101      	bne.n	80022e6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022e2:	2302      	movs	r3, #2
 80022e4:	e00e      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f003 031c 	and.w	r3, r3, #28
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d101      	bne.n	80022f4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e007      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 031c 	and.w	r3, r3, #28
 80022fa:	2b14      	cmp	r3, #20
 80022fc:	d101      	bne.n	8002302 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022fe:	2304      	movs	r3, #4
 8002300:	e000      	b.n	8002304 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002302:	2305      	movs	r3, #5
    }				
  }
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08a      	sub	sp, #40	@ 0x28
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10e      	bne.n	800233a <BSP_LED_Init+0x2e>
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <BSP_LED_Init+0x94>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <BSP_LED_Init+0x94>)
 8002326:	f043 0302 	orr.w	r3, r3, #2
 800232a:	6313      	str	r3, [r2, #48]	@ 0x30
 800232c:	4b1c      	ldr	r3, [pc, #112]	@ (80023a0 <BSP_LED_Init+0x94>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	e00d      	b.n	8002356 <BSP_LED_Init+0x4a>
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <BSP_LED_Init+0x94>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	4a17      	ldr	r2, [pc, #92]	@ (80023a0 <BSP_LED_Init+0x94>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6313      	str	r3, [r2, #48]	@ 0x30
 800234a:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <BSP_LED_Init+0x94>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4a12      	ldr	r2, [pc, #72]	@ (80023a4 <BSP_LED_Init+0x98>)
 800235a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800235e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002368:	2302      	movs	r3, #2
 800236a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	4a0e      	ldr	r2, [pc, #56]	@ (80023a8 <BSP_LED_Init+0x9c>)
 8002370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002374:	f107 0214 	add.w	r2, r7, #20
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f001 fc48 	bl	8003c10 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	4a09      	ldr	r2, [pc, #36]	@ (80023a8 <BSP_LED_Init+0x9c>)
 8002384:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	4a06      	ldr	r2, [pc, #24]	@ (80023a4 <BSP_LED_Init+0x98>)
 800238c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002390:	2200      	movs	r2, #0
 8002392:	4619      	mov	r1, r3
 8002394:	f001 fe00 	bl	8003f98 <HAL_GPIO_WritePin>
}
 8002398:	bf00      	nop
 800239a:	3728      	adds	r7, #40	@ 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08015560 	.word	0x08015560
 80023a8:	20000000 	.word	0x20000000

080023ac <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4a07      	ldr	r2, [pc, #28]	@ (80023d8 <BSP_LED_Off+0x2c>)
 80023ba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	4a06      	ldr	r2, [pc, #24]	@ (80023dc <BSP_LED_Off+0x30>)
 80023c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023c6:	2200      	movs	r2, #0
 80023c8:	4619      	mov	r1, r3
 80023ca:	f001 fde5 	bl	8003f98 <HAL_GPIO_WritePin>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000000 	.word	0x20000000
 80023dc:	08015560 	.word	0x08015560

080023e0 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	4a07      	ldr	r2, [pc, #28]	@ (800240c <BSP_LED_Toggle+0x2c>)
 80023ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4906      	ldr	r1, [pc, #24]	@ (8002410 <BSP_LED_Toggle+0x30>)
 80023f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f001 fde4 	bl	8003fca <HAL_GPIO_TogglePin>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000000 	.word	0x20000000
 8002410:	08015560 	.word	0x08015560

08002414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	@ (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800243c:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <HAL_Init+0x40>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <HAL_Init+0x40>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	@ (8002478 <HAL_Init+0x40>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 f8fc 	bl	800265e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	200f      	movs	r0, #15
 8002468:	f7ff f8ea 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7fe fee8 	bl	8001240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002480:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_IncTick+0x20>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	461a      	mov	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_IncTick+0x24>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4413      	add	r3, r2
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <HAL_IncTick+0x24>)
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	20000014 	.word	0x20000014
 80024a0:	2000acfc 	.word	0x2000acfc

080024a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return uwTick;
 80024a8:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_GetTick+0x14>)
 80024aa:	681b      	ldr	r3, [r3, #0]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	2000acfc 	.word	0x2000acfc

080024bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c4:	f7ff ffee 	bl	80024a4 <HAL_GetTick>
 80024c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d4:	d005      	beq.n	80024e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_Delay+0x44>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024e2:	bf00      	nop
 80024e4:	f7ff ffde 	bl	80024a4 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d8f7      	bhi.n	80024e4 <HAL_Delay+0x28>
  {
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000014 	.word	0x20000014

08002504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002514:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002520:	4013      	ands	r3, r2
 8002522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800252c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <__NVIC_SetPriorityGrouping+0x44>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	@ (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	@ (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	@ (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	@ 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	@ 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff4c 	bl	8002504 <__NVIC_SetPriorityGrouping>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002686:	f7ff ff61 	bl	800254c <__NVIC_GetPriorityGrouping>
 800268a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	6978      	ldr	r0, [r7, #20]
 8002692:	f7ff ffb1 	bl	80025f8 <NVIC_EncodePriority>
 8002696:	4602      	mov	r2, r0
 8002698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff80 	bl	80025a4 <__NVIC_SetPriority>
}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff54 	bl	8002568 <__NVIC_EnableIRQ>
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06c      	b.n	80027b4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d106      	bne.n	80026f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2223      	movs	r2, #35	@ 0x23
 80026e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7fe fdcf 	bl	8001290 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <HAL_ETH_Init+0xf4>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	4a30      	ldr	r2, [pc, #192]	@ (80027bc <HAL_ETH_Init+0xf4>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002700:	6453      	str	r3, [r2, #68]	@ 0x44
 8002702:	4b2e      	ldr	r3, [pc, #184]	@ (80027bc <HAL_ETH_Init+0xf4>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800270e:	4b2c      	ldr	r3, [pc, #176]	@ (80027c0 <HAL_ETH_Init+0xf8>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4a2b      	ldr	r2, [pc, #172]	@ (80027c0 <HAL_ETH_Init+0xf8>)
 8002714:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002718:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800271a:	4b29      	ldr	r3, [pc, #164]	@ (80027c0 <HAL_ETH_Init+0xf8>)
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4927      	ldr	r1, [pc, #156]	@ (80027c0 <HAL_ETH_Init+0xf8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002728:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <HAL_ETH_Init+0xf8>)
 800272a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002742:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002744:	f7ff feae 	bl	80024a4 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800274a:	e011      	b.n	8002770 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800274c:	f7ff feaa 	bl	80024a4 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800275a:	d909      	bls.n	8002770 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2204      	movs	r2, #4
 8002760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	22e0      	movs	r2, #224	@ 0xe0
 8002768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e021      	b.n	80027b4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1e4      	bne.n	800274c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 ff9e 	bl	80036c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f001 f845 	bl	8003818 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f001 f89b 	bl	80038ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	461a      	mov	r2, r3
 800279a:	2100      	movs	r1, #0
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f001 f803 	bl	80037a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2210      	movs	r2, #16
 80027ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40013800 	.word	0x40013800

080027c4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d17f      	bne.n	80028d6 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2223      	movs	r2, #35	@ 0x23
 80027da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80027f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002804:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002808:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800281c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2204      	movs	r2, #4
 8002824:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f9d2 	bl	8002bd0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002844:	2001      	movs	r0, #1
 8002846:	f7ff fe39 	bl	80024bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0204 	orr.w	r2, r2, #4
 8002860:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800286a:	2001      	movs	r0, #1
 800286c:	f7ff fe26 	bl	80024bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fdc3 	bl	8003404 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002890:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002894:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028ac:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80028c0:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80028c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028c8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2223      	movs	r2, #35	@ 0x23
 80028ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
  }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ee:	2b23      	cmp	r3, #35	@ 0x23
 80028f0:	d14a      	bne.n	8002988 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2223      	movs	r2, #35	@ 0x23
 80028f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800290c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002910:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	f023 0302 	bic.w	r3, r3, #2
 8002924:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002928:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0204 	bic.w	r2, r2, #4
 8002938:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002942:	2001      	movs	r0, #1
 8002944:	f7ff fdba 	bl	80024bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fd57 	bl	8003404 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0208 	bic.w	r2, r2, #8
 8002964:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff fda4 	bl	80024bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2210      	movs	r2, #16
 8002980:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e045      	b.n	8002a42 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029bc:	2b23      	cmp	r3, #35	@ 0x23
 80029be:	d13f      	bne.n	8002a40 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80029c8:	2201      	movs	r2, #1
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 ffe9 	bl	80039a4 <ETH_Prepare_Tx_Descriptors>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e02a      	b.n	8002a42 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029ec:	f3bf 8f4f 	dsb	sy
}
 80029f0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d904      	bls.n	8002a0e <HAL_ETH_Transmit_IT+0x7c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	1f1a      	subs	r2, r3, #4
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00d      	beq.n	8002a3c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a36:	461a      	mov	r2, r3
 8002a38:	2300      	movs	r3, #0
 8002a3a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e000      	b.n	8002a42 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b088      	sub	sp, #32
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0a8      	b.n	8002bc8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7c:	2b23      	cmp	r3, #35	@ 0x23
 8002a7e:	d001      	beq.n	8002a84 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0a1      	b.n	8002bc8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	3212      	adds	r2, #18
 8002a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a94:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a9a:	f1c3 0304 	rsb	r3, r3, #4
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002aa0:	e06a      	b.n	8002b78 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	699a      	ldr	r2, [r3, #24]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <HAL_ETH_ReadData+0x88>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d040      	beq.n	8002b54 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d005      	beq.n	8002aea <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00c      	beq.n	8002b16 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002b06:	3b04      	subs	r3, #4
 8002b08:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002b2e:	461a      	mov	r2, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	f004 f944 	bl	8006dc0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	441a      	add	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2200      	movs	r2, #0
 8002b52:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	3301      	adds	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d902      	bls.n	8002b66 <HAL_ETH_ReadData+0x11c>
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3b04      	subs	r3, #4
 8002b64:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	3212      	adds	r2, #18
 8002b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b70:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db06      	blt.n	8002b8e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d202      	bcs.n	8002b8e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d089      	beq.n	8002aa2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	441a      	add	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f814 	bl	8002bd0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d108      	bne.n	8002bc6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002be4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	3212      	adds	r2, #18
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002bf8:	e03d      	b.n	8002c76 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d112      	bne.n	8002c28 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002c02:	f107 0308 	add.w	r3, r7, #8
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 f8b8 	bl	8006d7c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d102      	bne.n	8002c18 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	74fb      	strb	r3, [r7, #19]
 8002c16:	e007      	b.n	8002c28 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	461a      	mov	r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d023      	beq.n	8002c76 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	4a24      	ldr	r2, [pc, #144]	@ (8002ccc <ETH_UpdateDescriptor+0xfc>)
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	e003      	b.n	8002c46 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002c44:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3301      	adds	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d902      	bls.n	8002c64 <ETH_UpdateDescriptor+0x94>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b04      	subs	r3, #4
 8002c62:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	3212      	adds	r2, #18
 8002c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6e:	617b      	str	r3, [r7, #20]
      desccount--;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <ETH_UpdateDescriptor+0xb2>
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1bb      	bne.n	8002bfa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d01a      	beq.n	8002cc2 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c96:	f3bf 8f5f 	dmb	sy
}
 8002c9a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6919      	ldr	r1, [r3, #16]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	18ca      	adds	r2, r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	80004600 	.word	0x80004600

08002cd0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3318      	adds	r3, #24
 8002cdc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002cee:	e03f      	b.n	8002d70 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d028      	beq.n	8002d70 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68d9      	ldr	r1, [r3, #12]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	db1b      	blt.n	8002d6c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 ffe5 	bl	8006d10 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	2200      	movs	r2, #0
 8002d52:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	3301      	adds	r3, #1
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d6a:	e001      	b.n	8002d70 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_ETH_ReleaseTxPacket+0xac>
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1b9      	bne.n	8002cf0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9e:	2b40      	cmp	r3, #64	@ 0x40
 8002da0:	d112      	bne.n	8002dc8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db0:	2b40      	cmp	r3, #64	@ 0x40
 8002db2:	d109      	bne.n	8002dc8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b50      	ldr	r3, [pc, #320]	@ (8002f00 <HAL_ETH_IRQHandler+0x178>)
 8002dc0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f004 f836 	bl	8006e34 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d113      	bne.n	8002e02 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10a      	bne.n	8002e02 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002df4:	461a      	mov	r2, r3
 8002df6:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002dfa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f004 f835 	bl	8006e6c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e14:	d14c      	bne.n	8002eb0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e28:	d142      	bne.n	8002eb0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e30:	f043 0208 	orr.w	r2, r3, #8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e4c:	d11a      	bne.n	8002e84 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	4b2a      	ldr	r3, [pc, #168]	@ (8002f04 <HAL_ETH_IRQHandler+0x17c>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002e74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e78:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	22e0      	movs	r2, #224	@ 0xe0
 8002e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002e82:	e012      	b.n	8002eaa <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002e92:	4013      	ands	r3, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002ea8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f82e 	bl	8002f0c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b08      	cmp	r3, #8
 8002ebc:	d10e      	bne.n	8002edc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f826 	bl	8002f20 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_ETH_IRQHandler+0x180>)
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d006      	beq.n	8002ef6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002ee8:	4b07      	ldr	r3, [pc, #28]	@ (8002f08 <HAL_ETH_IRQHandler+0x180>)
 8002eea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002eee:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f81f 	bl	8002f34 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	00010040 	.word	0x00010040
 8002f04:	007e2000 	.word	0x007e2000
 8002f08:	40013c00 	.word	0x40013c00

08002f0c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f003 031c 	and.w	r3, r3, #28
 8002f64:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	02db      	lsls	r3, r3, #11
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	019b      	lsls	r3, r3, #6
 8002f76:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0302 	bic.w	r3, r3, #2
 8002f86:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002f98:	f7ff fa84 	bl	80024a4 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002f9e:	e00d      	b.n	8002fbc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002fa0:	f7ff fa80 	bl	80024a4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fae:	d301      	bcc.n	8002fb4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e010      	b.n	8002fd6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ec      	bne.n	8002fa0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 031c 	and.w	r3, r3, #28
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	02db      	lsls	r3, r3, #11
 8003000:	b29b      	uxth	r3, r3
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	019b      	lsls	r3, r3, #6
 800300c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003038:	f7ff fa34 	bl	80024a4 <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800303e:	e00d      	b.n	800305c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003040:	f7ff fa30 	bl	80024a4 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800304e:	d301      	bcc.n	8003054 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e009      	b.n	8003068 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ec      	bne.n	8003040 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0d9      	b.n	8003238 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003108:	2b00      	cmp	r3, #0
 800310a:	bf14      	ite	ne
 800310c:	2301      	movne	r3, #1
 800310e:	2300      	moveq	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	0c1b      	lsrs	r3, r3, #16
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e00b      	b.n	8003270 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800325e:	2b10      	cmp	r3, #16
 8003260:	d105      	bne.n	800326e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003262:	6839      	ldr	r1, [r7, #0]
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f8f3 	bl	8003450 <ETH_SetMACConfig>

    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_ETH_SetDMAConfig>:
  * @param  dmaconf: pointer to a ETH_DMAConfigTypeDef structure that will hold
  *         the configuration of the ETH DMA.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  if (dmaconf == NULL)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_ETH_SetDMAConfig+0x14>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e00b      	b.n	80032a4 <HAL_ETH_SetDMAConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003292:	2b10      	cmp	r3, #16
 8003294:	d105      	bne.n	80032a2 <HAL_ETH_SetDMAConfig+0x2a>
  {
    ETH_SetDMAConfig(heth, dmaconf);
 8003296:	6839      	ldr	r1, [r7, #0]
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f989 	bl	80035b0 <ETH_SetDMAConfig>

    return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <HAL_ETH_SetDMAConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
  }
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 031c 	bic.w	r3, r3, #28
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80032c4:	f001 fb50 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 80032c8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003344 <HAL_ETH_SetMDIOClockRange+0x98>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d908      	bls.n	80032e4 <HAL_ETH_SetMDIOClockRange+0x38>
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d804      	bhi.n	80032e4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f043 0308 	orr.w	r3, r3, #8
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	e027      	b.n	8003334 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4a18      	ldr	r2, [pc, #96]	@ (8003348 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d908      	bls.n	80032fe <HAL_ETH_SetMDIOClockRange+0x52>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4a17      	ldr	r2, [pc, #92]	@ (800334c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d204      	bcs.n	80032fe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f043 030c 	orr.w	r3, r3, #12
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e01a      	b.n	8003334 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4a12      	ldr	r2, [pc, #72]	@ (800334c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d303      	bcc.n	800330e <HAL_ETH_SetMDIOClockRange+0x62>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	4a11      	ldr	r2, [pc, #68]	@ (8003350 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d911      	bls.n	8003332 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a0f      	ldr	r2, [pc, #60]	@ (8003350 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d908      	bls.n	8003328 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	4a0e      	ldr	r2, [pc, #56]	@ (8003354 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d804      	bhi.n	8003328 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f043 0304 	orr.w	r3, r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	e005      	b.n	8003334 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f043 0310 	orr.w	r3, r3, #16
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e000      	b.n	8003334 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003332:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	611a      	str	r2, [r3, #16]
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	01312cff 	.word	0x01312cff
 8003348:	02160ebf 	.word	0x02160ebf
 800334c:	03938700 	.word	0x03938700
 8003350:	05f5e0ff 	.word	0x05f5e0ff
 8003354:	08f0d17f 	.word	0x08f0d17f

08003358 <HAL_ETH_SetMACFilterConfig>:
  * @param  pFilterConfig: pointer to a ETH_MACFilterConfigTypeDef structure that contains
  *         the configuration of the ETH MAC filters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACFilterConfig(ETH_HandleTypeDef *heth, const ETH_MACFilterConfigTypeDef *pFilterConfig)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t filterconfig;
  uint32_t tmpreg1;

  if (pFilterConfig == NULL)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ETH_SetMACFilterConfig+0x14>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e044      	b.n	80033f6 <HAL_ETH_SetMACFilterConfig+0x9e>
  }

  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	78db      	ldrb	r3, [r3, #3]
 8003376:	005b      	lsls	r3, r3, #1
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 8003378:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	791b      	ldrb	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
                  ((uint32_t)pFilterConfig->HashUnicast << 1) |
 8003380:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	7a1b      	ldrb	r3, [r3, #8]
 8003386:	00db      	lsls	r3, r3, #3
                  ((uint32_t)pFilterConfig->HashMulticast << 2)  |
 8003388:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	795b      	ldrb	r3, [r3, #5]
 800338e:	011b      	lsls	r3, r3, #4
                  ((uint32_t)pFilterConfig->DestAddrInverseFiltering << 3) |
 8003390:	4313      	orrs	r3, r2
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	7a52      	ldrb	r2, [r2, #9]
 8003396:	2a00      	cmp	r2, #0
 8003398:	d101      	bne.n	800339e <HAL_ETH_SetMACFilterConfig+0x46>
 800339a:	2220      	movs	r2, #32
 800339c:	e000      	b.n	80033a0 <HAL_ETH_SetMACFilterConfig+0x48>
 800339e:	2200      	movs	r2, #0
                  ((uint32_t)pFilterConfig->PassAllMulticast << 4) |
 80033a0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	79db      	ldrb	r3, [r3, #7]
 80033a6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)((pFilterConfig->BroadcastFilter == DISABLE) ? 1U : 0U) << 5) |
 80033a8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	799b      	ldrb	r3, [r3, #6]
 80033ae:	025b      	lsls	r3, r3, #9
                  ((uint32_t)pFilterConfig->SrcAddrInverseFiltering << 8) |
 80033b0:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	789b      	ldrb	r3, [r3, #2]
 80033b6:	029b      	lsls	r3, r3, #10
                  ((uint32_t)pFilterConfig->SrcAddrFiltering << 9) |
 80033b8:	431a      	orrs	r2, r3
                  ((uint32_t)pFilterConfig->ReceiveAllMode << 31) |
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	785b      	ldrb	r3, [r3, #1]
 80033be:	07db      	lsls	r3, r3, #31
                  ((uint32_t)pFilterConfig->HachOrPerfectFilter << 10) |
 80033c0:	431a      	orrs	r2, r3
                  pFilterConfig->ControlPacketsFilter);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
  filterconfig = ((uint32_t)pFilterConfig->PromiscuousMode |
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->MACFFR, ETH_MACFFR_MASK, filterconfig);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_ETH_SetMACFilterConfig+0xa8>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	68f9      	ldr	r1, [r7, #12]
 80033da:	430b      	orrs	r3, r1
 80033dc:	6053      	str	r3, [r2, #4]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	60bb      	str	r3, [r7, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033e6:	2001      	movs	r0, #1
 80033e8:	f7ff f868 	bl	80024bc <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	7ffff800 	.word	0x7ffff800

08003404 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003422:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003426:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003434:	2001      	movs	r0, #1
 8003436:	f7ff f841 	bl	80024bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003444:	6193      	str	r3, [r2, #24]
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4b51      	ldr	r3, [pc, #324]	@ (80035ac <ETH_SetMACConfig+0x15c>)
 8003466:	4013      	ands	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	7c1b      	ldrb	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d102      	bne.n	8003478 <ETH_SetMACConfig+0x28>
 8003472:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003476:	e000      	b.n	800347a <ETH_SetMACConfig+0x2a>
 8003478:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	7c5b      	ldrb	r3, [r3, #17]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <ETH_SetMACConfig+0x38>
 8003482:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003486:	e000      	b.n	800348a <ETH_SetMACConfig+0x3a>
 8003488:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800348a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003490:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	7fdb      	ldrb	r3, [r3, #31]
 8003496:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003498:	431a      	orrs	r2, r3
                        macconf->Speed |
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800349e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	7f92      	ldrb	r2, [r2, #30]
 80034a4:	2a00      	cmp	r2, #0
 80034a6:	d102      	bne.n	80034ae <ETH_SetMACConfig+0x5e>
 80034a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034ac:	e000      	b.n	80034b0 <ETH_SetMACConfig+0x60>
 80034ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80034b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	7f1b      	ldrb	r3, [r3, #28]
 80034b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80034b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80034be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	791b      	ldrb	r3, [r3, #4]
 80034c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80034c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80034ce:	2a00      	cmp	r2, #0
 80034d0:	d102      	bne.n	80034d8 <ETH_SetMACConfig+0x88>
 80034d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034d6:	e000      	b.n	80034da <ETH_SetMACConfig+0x8a>
 80034d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80034da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	7bdb      	ldrb	r3, [r3, #15]
 80034e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80034e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80034e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80034f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80034f2:	4313      	orrs	r3, r2
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800350a:	2001      	movs	r0, #1
 800350c:	f7fe ffd6 	bl	80024bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003526:	4013      	ands	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003536:	2a00      	cmp	r2, #0
 8003538:	d101      	bne.n	800353e <ETH_SetMACConfig+0xee>
 800353a:	2280      	movs	r2, #128	@ 0x80
 800353c:	e000      	b.n	8003540 <ETH_SetMACConfig+0xf0>
 800353e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003540:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003546:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800354e:	2a01      	cmp	r2, #1
 8003550:	d101      	bne.n	8003556 <ETH_SetMACConfig+0x106>
 8003552:	2208      	movs	r2, #8
 8003554:	e000      	b.n	8003558 <ETH_SetMACConfig+0x108>
 8003556:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003558:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003560:	2a01      	cmp	r2, #1
 8003562:	d101      	bne.n	8003568 <ETH_SetMACConfig+0x118>
 8003564:	2204      	movs	r2, #4
 8003566:	e000      	b.n	800356a <ETH_SetMACConfig+0x11a>
 8003568:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800356a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003572:	2a01      	cmp	r2, #1
 8003574:	d101      	bne.n	800357a <ETH_SetMACConfig+0x12a>
 8003576:	2202      	movs	r2, #2
 8003578:	e000      	b.n	800357c <ETH_SetMACConfig+0x12c>
 800357a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800357c:	4313      	orrs	r3, r2
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003594:	2001      	movs	r0, #1
 8003596:	f7fe ff91 	bl	80024bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	619a      	str	r2, [r3, #24]
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	ff20810f 	.word	0xff20810f

080035b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4b3d      	ldr	r3, [pc, #244]	@ (80036c0 <ETH_SetDMAConfig+0x110>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	7b1b      	ldrb	r3, [r3, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d102      	bne.n	80035dc <ETH_SetDMAConfig+0x2c>
 80035d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035da:	e000      	b.n	80035de <ETH_SetDMAConfig+0x2e>
 80035dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	7b5b      	ldrb	r3, [r3, #13]
 80035e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80035e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	7f52      	ldrb	r2, [r2, #29]
 80035ea:	2a00      	cmp	r2, #0
 80035ec:	d102      	bne.n	80035f4 <ETH_SetDMAConfig+0x44>
 80035ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035f2:	e000      	b.n	80035f6 <ETH_SetDMAConfig+0x46>
 80035f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80035f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	7b9b      	ldrb	r3, [r3, #14]
 80035fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80035fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003604:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	7f1b      	ldrb	r3, [r3, #28]
 800360a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800360c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	7f9b      	ldrb	r3, [r3, #30]
 8003612:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003614:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800361a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003622:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003624:	4313      	orrs	r3, r2
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003634:	461a      	mov	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003646:	2001      	movs	r0, #1
 8003648:	f7fe ff38 	bl	80024bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003654:	461a      	mov	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	791b      	ldrb	r3, [r3, #4]
 800365e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003664:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800366a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003670:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003678:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800367a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003682:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003688:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003692:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003696:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036a4:	2001      	movs	r0, #1
 80036a6:	f7fe ff09 	bl	80024bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	f8de3f23 	.word	0xf8de3f23

080036c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b0a6      	sub	sp, #152	@ 0x98
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80036d8:	2300      	movs	r3, #0
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003700:	2300      	movs	r3, #0
 8003702:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003704:	2300      	movs	r3, #0
 8003706:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800370a:	2300      	movs	r3, #0
 800370c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800370e:	2300      	movs	r3, #0
 8003710:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003726:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800372a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800372c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003738:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fe86 	bl	8003450 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003744:	2301      	movs	r3, #1
 8003746:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003748:	2301      	movs	r3, #1
 800374a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003752:	2301      	movs	r3, #1
 8003754:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003756:	2300      	movs	r3, #0
 8003758:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800375a:	2300      	movs	r3, #0
 800375c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003760:	2300      	movs	r3, #0
 8003762:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003766:	2300      	movs	r3, #0
 8003768:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003770:	2301      	movs	r3, #1
 8003772:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003774:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003778:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800377a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800377e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003784:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800378c:	2300      	movs	r3, #0
 800378e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003794:	f107 0308 	add.w	r3, r7, #8
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ff08 	bl	80035b0 <ETH_SetDMAConfig>
}
 80037a0:	bf00      	nop
 80037a2:	3798      	adds	r7, #152	@ 0x98
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3305      	adds	r3, #5
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	3204      	adds	r2, #4
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <ETH_MACAddressConfig+0x68>)
 80037ca:	4413      	add	r3, r2
 80037cc:	461a      	mov	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3303      	adds	r3, #3
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	061a      	lsls	r2, r3, #24
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3302      	adds	r3, #2
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3301      	adds	r3, #1
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	4313      	orrs	r3, r2
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	7812      	ldrb	r2, [r2, #0]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80037f6:	68ba      	ldr	r2, [r7, #8]
 80037f8:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <ETH_MACAddressConfig+0x6c>)
 80037fa:	4413      	add	r3, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	6013      	str	r3, [r2, #0]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40028040 	.word	0x40028040
 8003814:	40028044 	.word	0x40028044

08003818 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e03e      	b.n	80038a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68d9      	ldr	r1, [r3, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	440b      	add	r3, r1
 8003836:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2200      	movs	r2, #0
 8003842:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2200      	movs	r2, #0
 800384e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	3206      	adds	r2, #6
 8003858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d80c      	bhi.n	8003888 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68d9      	ldr	r1, [r3, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	440b      	add	r3, r1
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	e004      	b.n	8003892 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3301      	adds	r3, #1
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d9bd      	bls.n	8003826 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80038bc:	611a      	str	r2, [r3, #16]
}
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e046      	b.n	8003966 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6919      	ldr	r1, [r3, #16]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2200      	movs	r2, #0
 8003906:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2200      	movs	r2, #0
 800390c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003914:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 800391c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	3212      	adds	r2, #18
 8003932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b02      	cmp	r3, #2
 800393a:	d80c      	bhi.n	8003956 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6919      	ldr	r1, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	461a      	mov	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	e004      	b.n	8003960 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	461a      	mov	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3301      	adds	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d9b5      	bls.n	80038d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691a      	ldr	r2, [r3, #16]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003996:	60da      	str	r2, [r3, #12]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b08d      	sub	sp, #52	@ 0x34
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3318      	adds	r3, #24
 80039b4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ce:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039e6:	d007      	beq.n	80039f8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	3304      	adds	r3, #4
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80039f8:	2302      	movs	r3, #2
 80039fa:	e103      	b.n	8003c04 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	3301      	adds	r3, #1
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003a14:	f023 031f 	bic.w	r3, r3, #31
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	6852      	ldr	r2, [r2, #4]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d008      	beq.n	8003a40 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d008      	beq.n	8003a5e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003a82:	f3bf 8f5f 	dmb	sy
}
 8003a86:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003a94:	e084      	b.n	8003ba0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d006      	beq.n	8003ab6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e005      	b.n	8003ac2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d902      	bls.n	8003ad4 <ETH_Prepare_Tx_Descriptors+0x130>
 8003ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad0:	3b04      	subs	r3, #4
 8003ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003adc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003af2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003af6:	d007      	beq.n	8003b08 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afc:	3304      	adds	r3, #4
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d029      	beq.n	8003b5c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b14:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b1a:	e019      	b.n	8003b50 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003b1c:	f3bf 8f5f 	dmb	sy
}
 8003b20:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b30:	3301      	adds	r3, #1
 8003b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d902      	bls.n	8003b40 <ETH_Prepare_Tx_Descriptors+0x19c>
 8003b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3c:	3b04      	subs	r3, #4
 8003b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b48:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d3e1      	bcc.n	8003b1c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8003b58:	2302      	movs	r3, #2
 8003b5a:	e053      	b.n	8003c04 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5e:	3301      	adds	r3, #1
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003b7a:	f023 031f 	bic.w	r3, r3, #31
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	6852      	ldr	r2, [r2, #4]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b8e:	f3bf 8f5f 	dmb	sy
}
 8003b92:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f47f af76 	bne.w	8003a96 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e005      	b.n	8003bca <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bda:	6979      	ldr	r1, [r7, #20]
 8003bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bde:	3304      	adds	r3, #4
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bea:	611a      	str	r2, [r3, #16]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bec:	b672      	cpsid	i
}
 8003bee:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003bfe:	b662      	cpsie	i
}
 8003c00:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3734      	adds	r7, #52	@ 0x34
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b089      	sub	sp, #36	@ 0x24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e177      	b.n	8003f1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	f040 8166 	bne.w	8003f16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d005      	beq.n	8003c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d130      	bne.n	8003cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	2203      	movs	r2, #3
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c98:	2201      	movs	r2, #1
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 0201 	and.w	r2, r3, #1
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d017      	beq.n	8003d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	2203      	movs	r2, #3
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d123      	bne.n	8003d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	08da      	lsrs	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3208      	adds	r2, #8
 8003d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	220f      	movs	r2, #15
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	08da      	lsrs	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3208      	adds	r2, #8
 8003d4e:	69b9      	ldr	r1, [r7, #24]
 8003d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	2203      	movs	r2, #3
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0203 	and.w	r2, r3, #3
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80c0 	beq.w	8003f16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	4b66      	ldr	r3, [pc, #408]	@ (8003f34 <HAL_GPIO_Init+0x324>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9e:	4a65      	ldr	r2, [pc, #404]	@ (8003f34 <HAL_GPIO_Init+0x324>)
 8003da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003da6:	4b63      	ldr	r3, [pc, #396]	@ (8003f34 <HAL_GPIO_Init+0x324>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003db2:	4a61      	ldr	r2, [pc, #388]	@ (8003f38 <HAL_GPIO_Init+0x328>)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	3302      	adds	r3, #2
 8003dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	220f      	movs	r2, #15
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a58      	ldr	r2, [pc, #352]	@ (8003f3c <HAL_GPIO_Init+0x32c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d037      	beq.n	8003e4e <HAL_GPIO_Init+0x23e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a57      	ldr	r2, [pc, #348]	@ (8003f40 <HAL_GPIO_Init+0x330>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d031      	beq.n	8003e4a <HAL_GPIO_Init+0x23a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a56      	ldr	r2, [pc, #344]	@ (8003f44 <HAL_GPIO_Init+0x334>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d02b      	beq.n	8003e46 <HAL_GPIO_Init+0x236>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a55      	ldr	r2, [pc, #340]	@ (8003f48 <HAL_GPIO_Init+0x338>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d025      	beq.n	8003e42 <HAL_GPIO_Init+0x232>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a54      	ldr	r2, [pc, #336]	@ (8003f4c <HAL_GPIO_Init+0x33c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01f      	beq.n	8003e3e <HAL_GPIO_Init+0x22e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a53      	ldr	r2, [pc, #332]	@ (8003f50 <HAL_GPIO_Init+0x340>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d019      	beq.n	8003e3a <HAL_GPIO_Init+0x22a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a52      	ldr	r2, [pc, #328]	@ (8003f54 <HAL_GPIO_Init+0x344>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_GPIO_Init+0x226>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a51      	ldr	r2, [pc, #324]	@ (8003f58 <HAL_GPIO_Init+0x348>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00d      	beq.n	8003e32 <HAL_GPIO_Init+0x222>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a50      	ldr	r2, [pc, #320]	@ (8003f5c <HAL_GPIO_Init+0x34c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <HAL_GPIO_Init+0x21e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4f      	ldr	r2, [pc, #316]	@ (8003f60 <HAL_GPIO_Init+0x350>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_GPIO_Init+0x21a>
 8003e26:	2309      	movs	r3, #9
 8003e28:	e012      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	e010      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	e00e      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e32:	2307      	movs	r3, #7
 8003e34:	e00c      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e36:	2306      	movs	r3, #6
 8003e38:	e00a      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e3a:	2305      	movs	r3, #5
 8003e3c:	e008      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e3e:	2304      	movs	r3, #4
 8003e40:	e006      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e42:	2303      	movs	r3, #3
 8003e44:	e004      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e002      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <HAL_GPIO_Init+0x240>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	69fa      	ldr	r2, [r7, #28]
 8003e52:	f002 0203 	and.w	r2, r2, #3
 8003e56:	0092      	lsls	r2, r2, #2
 8003e58:	4093      	lsls	r3, r2
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e60:	4935      	ldr	r1, [pc, #212]	@ (8003f38 <HAL_GPIO_Init+0x328>)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	3302      	adds	r3, #2
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f64 <HAL_GPIO_Init+0x354>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e92:	4a34      	ldr	r2, [pc, #208]	@ (8003f64 <HAL_GPIO_Init+0x354>)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e98:	4b32      	ldr	r3, [pc, #200]	@ (8003f64 <HAL_GPIO_Init+0x354>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ebc:	4a29      	ldr	r2, [pc, #164]	@ (8003f64 <HAL_GPIO_Init+0x354>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ec2:	4b28      	ldr	r3, [pc, #160]	@ (8003f64 <HAL_GPIO_Init+0x354>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f64 <HAL_GPIO_Init+0x354>)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eec:	4b1d      	ldr	r3, [pc, #116]	@ (8003f64 <HAL_GPIO_Init+0x354>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f10:	4a14      	ldr	r2, [pc, #80]	@ (8003f64 <HAL_GPIO_Init+0x354>)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	f67f ae84 	bls.w	8003c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3724      	adds	r7, #36	@ 0x24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	40020000 	.word	0x40020000
 8003f40:	40020400 	.word	0x40020400
 8003f44:	40020800 	.word	0x40020800
 8003f48:	40020c00 	.word	0x40020c00
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40021400 	.word	0x40021400
 8003f54:	40021800 	.word	0x40021800
 8003f58:	40021c00 	.word	0x40021c00
 8003f5c:	40022000 	.word	0x40022000
 8003f60:	40022400 	.word	0x40022400
 8003f64:	40013c00 	.word	0x40013c00

08003f68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	887b      	ldrh	r3, [r7, #2]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	e001      	b.n	8003f8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	807b      	strh	r3, [r7, #2]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa8:	787b      	ldrb	r3, [r7, #1]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fb4:	e003      	b.n	8003fbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fb6:	887b      	ldrh	r3, [r7, #2]
 8003fb8:	041a      	lsls	r2, r3, #16
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	619a      	str	r2, [r3, #24]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	041a      	lsls	r2, r3, #16
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	887b      	ldrh	r3, [r7, #2]
 8003fea:	400b      	ands	r3, r1
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	619a      	str	r2, [r3, #24]
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	4b20      	ldr	r3, [pc, #128]	@ (8004090 <HAL_PWREx_EnableOverDrive+0x90>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004012:	4a1f      	ldr	r2, [pc, #124]	@ (8004090 <HAL_PWREx_EnableOverDrive+0x90>)
 8004014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004018:	6413      	str	r3, [r2, #64]	@ 0x40
 800401a:	4b1d      	ldr	r3, [pc, #116]	@ (8004090 <HAL_PWREx_EnableOverDrive+0x90>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004026:	4b1b      	ldr	r3, [pc, #108]	@ (8004094 <HAL_PWREx_EnableOverDrive+0x94>)
 8004028:	2201      	movs	r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800402c:	f7fe fa3a 	bl	80024a4 <HAL_GetTick>
 8004030:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004032:	e009      	b.n	8004048 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004034:	f7fe fa36 	bl	80024a4 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004042:	d901      	bls.n	8004048 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e01f      	b.n	8004088 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004048:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <HAL_PWREx_EnableOverDrive+0x98>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004054:	d1ee      	bne.n	8004034 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004056:	4b11      	ldr	r3, [pc, #68]	@ (800409c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004058:	2201      	movs	r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800405c:	f7fe fa22 	bl	80024a4 <HAL_GetTick>
 8004060:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004062:	e009      	b.n	8004078 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004064:	f7fe fa1e 	bl	80024a4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004072:	d901      	bls.n	8004078 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e007      	b.n	8004088 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004078:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <HAL_PWREx_EnableOverDrive+0x98>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004084:	d1ee      	bne.n	8004064 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	420e0040 	.word	0x420e0040
 8004098:	40007000 	.word	0x40007000
 800409c:	420e0044 	.word	0x420e0044

080040a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e267      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d075      	beq.n	80041aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040be:	4b88      	ldr	r3, [pc, #544]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d00c      	beq.n	80040e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ca:	4b85      	ldr	r3, [pc, #532]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d112      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040d6:	4b82      	ldr	r3, [pc, #520]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040e2:	d10b      	bne.n	80040fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e4:	4b7e      	ldr	r3, [pc, #504]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d05b      	beq.n	80041a8 <HAL_RCC_OscConfig+0x108>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d157      	bne.n	80041a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e242      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004104:	d106      	bne.n	8004114 <HAL_RCC_OscConfig+0x74>
 8004106:	4b76      	ldr	r3, [pc, #472]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a75      	ldr	r2, [pc, #468]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e01d      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x98>
 800411e:	4b70      	ldr	r3, [pc, #448]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a6f      	ldr	r2, [pc, #444]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004124:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4b6d      	ldr	r3, [pc, #436]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a6c      	ldr	r2, [pc, #432]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e00b      	b.n	8004150 <HAL_RCC_OscConfig+0xb0>
 8004138:	4b69      	ldr	r3, [pc, #420]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a68      	ldr	r2, [pc, #416]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 800413e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b66      	ldr	r3, [pc, #408]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a65      	ldr	r2, [pc, #404]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 800414a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800414e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fe f9a4 	bl	80024a4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004160:	f7fe f9a0 	bl	80024a4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b64      	cmp	r3, #100	@ 0x64
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e207      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	4b5b      	ldr	r3, [pc, #364]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0xc0>
 800417e:	e014      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe f990 	bl	80024a4 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004188:	f7fe f98c 	bl	80024a4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	@ 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1f3      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	4b51      	ldr	r3, [pc, #324]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0xe8>
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b6:	4b4a      	ldr	r3, [pc, #296]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c2:	4b47      	ldr	r3, [pc, #284]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ca:	2b08      	cmp	r3, #8
 80041cc:	d11c      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ce:	4b44      	ldr	r3, [pc, #272]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d116      	bne.n	8004208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041da:	4b41      	ldr	r3, [pc, #260]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d001      	beq.n	80041f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e1c7      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f2:	4b3b      	ldr	r3, [pc, #236]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4937      	ldr	r1, [pc, #220]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004206:	e03a      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004210:	4b34      	ldr	r3, [pc, #208]	@ (80042e4 <HAL_RCC_OscConfig+0x244>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fe f945 	bl	80024a4 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421e:	f7fe f941 	bl	80024a4 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e1a8      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	4b2b      	ldr	r3, [pc, #172]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423c:	4b28      	ldr	r3, [pc, #160]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	4925      	ldr	r1, [pc, #148]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 800424c:	4313      	orrs	r3, r2
 800424e:	600b      	str	r3, [r1, #0]
 8004250:	e015      	b.n	800427e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004252:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <HAL_RCC_OscConfig+0x244>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe f924 	bl	80024a4 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004260:	f7fe f920 	bl	80024a4 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e187      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	4b1b      	ldr	r3, [pc, #108]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d036      	beq.n	80042f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d016      	beq.n	80042c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004292:	4b15      	ldr	r3, [pc, #84]	@ (80042e8 <HAL_RCC_OscConfig+0x248>)
 8004294:	2201      	movs	r2, #1
 8004296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004298:	f7fe f904 	bl	80024a4 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a0:	f7fe f900 	bl	80024a4 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e167      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	4b0b      	ldr	r3, [pc, #44]	@ (80042e0 <HAL_RCC_OscConfig+0x240>)
 80042b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x200>
 80042be:	e01b      	b.n	80042f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c0:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <HAL_RCC_OscConfig+0x248>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fe f8ed 	bl	80024a4 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	e00e      	b.n	80042ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ce:	f7fe f8e9 	bl	80024a4 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d907      	bls.n	80042ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e150      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
 80042e0:	40023800 	.word	0x40023800
 80042e4:	42470000 	.word	0x42470000
 80042e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ec:	4b88      	ldr	r3, [pc, #544]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1ea      	bne.n	80042ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	f000 8097 	beq.w	8004434 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430a:	4b81      	ldr	r3, [pc, #516]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10f      	bne.n	8004336 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	4b7d      	ldr	r3, [pc, #500]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	4a7c      	ldr	r2, [pc, #496]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 8004320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004324:	6413      	str	r3, [r2, #64]	@ 0x40
 8004326:	4b7a      	ldr	r3, [pc, #488]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432e:	60bb      	str	r3, [r7, #8]
 8004330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004336:	4b77      	ldr	r3, [pc, #476]	@ (8004514 <HAL_RCC_OscConfig+0x474>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433e:	2b00      	cmp	r3, #0
 8004340:	d118      	bne.n	8004374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004342:	4b74      	ldr	r3, [pc, #464]	@ (8004514 <HAL_RCC_OscConfig+0x474>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a73      	ldr	r2, [pc, #460]	@ (8004514 <HAL_RCC_OscConfig+0x474>)
 8004348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800434c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434e:	f7fe f8a9 	bl	80024a4 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004356:	f7fe f8a5 	bl	80024a4 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e10c      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004368:	4b6a      	ldr	r3, [pc, #424]	@ (8004514 <HAL_RCC_OscConfig+0x474>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x2ea>
 800437c:	4b64      	ldr	r3, [pc, #400]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 800437e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004380:	4a63      	ldr	r2, [pc, #396]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6713      	str	r3, [r2, #112]	@ 0x70
 8004388:	e01c      	b.n	80043c4 <HAL_RCC_OscConfig+0x324>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b05      	cmp	r3, #5
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x30c>
 8004392:	4b5f      	ldr	r3, [pc, #380]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004396:	4a5e      	ldr	r2, [pc, #376]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 0304 	orr.w	r3, r3, #4
 800439c:	6713      	str	r3, [r2, #112]	@ 0x70
 800439e:	4b5c      	ldr	r3, [pc, #368]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80043aa:	e00b      	b.n	80043c4 <HAL_RCC_OscConfig+0x324>
 80043ac:	4b58      	ldr	r3, [pc, #352]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b0:	4a57      	ldr	r2, [pc, #348]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b8:	4b55      	ldr	r3, [pc, #340]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043bc:	4a54      	ldr	r2, [pc, #336]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80043be:	f023 0304 	bic.w	r3, r3, #4
 80043c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fe f86a 	bl	80024a4 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fe f866 	bl	80024a4 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0cb      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ea:	4b49      	ldr	r3, [pc, #292]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0ee      	beq.n	80043d4 <HAL_RCC_OscConfig+0x334>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f8:	f7fe f854 	bl	80024a4 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004400:	f7fe f850 	bl	80024a4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e0b5      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004416:	4b3e      	ldr	r3, [pc, #248]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ee      	bne.n	8004400 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d105      	bne.n	8004434 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004428:	4b39      	ldr	r3, [pc, #228]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 800442a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442c:	4a38      	ldr	r2, [pc, #224]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 800442e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004432:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80a1 	beq.w	8004580 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800443e:	4b34      	ldr	r3, [pc, #208]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b08      	cmp	r3, #8
 8004448:	d05c      	beq.n	8004504 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d141      	bne.n	80044d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b31      	ldr	r3, [pc, #196]	@ (8004518 <HAL_RCC_OscConfig+0x478>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe f824 	bl	80024a4 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004460:	f7fe f820 	bl	80024a4 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e087      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	4b27      	ldr	r3, [pc, #156]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	019b      	lsls	r3, r3, #6
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	085b      	lsrs	r3, r3, #1
 8004496:	3b01      	subs	r3, #1
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	061b      	lsls	r3, r3, #24
 80044a2:	491b      	ldr	r1, [pc, #108]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <HAL_RCC_OscConfig+0x478>)
 80044aa:	2201      	movs	r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fd fff9 	bl	80024a4 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fd fff5 	bl	80024a4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e05c      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c8:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0x416>
 80044d4:	e054      	b.n	8004580 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	4b10      	ldr	r3, [pc, #64]	@ (8004518 <HAL_RCC_OscConfig+0x478>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd ffe2 	bl	80024a4 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fd ffde 	bl	80024a4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e045      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f6:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <HAL_RCC_OscConfig+0x470>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x444>
 8004502:	e03d      	b.n	8004580 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e038      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
 8004510:	40023800 	.word	0x40023800
 8004514:	40007000 	.word	0x40007000
 8004518:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800451c:	4b1b      	ldr	r3, [pc, #108]	@ (800458c <HAL_RCC_OscConfig+0x4ec>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d028      	beq.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d121      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	429a      	cmp	r2, r3
 8004544:	d11a      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004552:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004554:	4293      	cmp	r3, r2
 8004556:	d111      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	3b01      	subs	r3, #1
 8004566:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800

08004590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0cc      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a4:	4b68      	ldr	r3, [pc, #416]	@ (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d90c      	bls.n	80045cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b2:	4b65      	ldr	r3, [pc, #404]	@ (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ba:	4b63      	ldr	r3, [pc, #396]	@ (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d001      	beq.n	80045cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0b8      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d020      	beq.n	800461a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e4:	4b59      	ldr	r3, [pc, #356]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4a58      	ldr	r2, [pc, #352]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045fc:	4b53      	ldr	r3, [pc, #332]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a52      	ldr	r2, [pc, #328]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004608:	4b50      	ldr	r3, [pc, #320]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	494d      	ldr	r1, [pc, #308]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d044      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462e:	4b47      	ldr	r3, [pc, #284]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d119      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e07f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b02      	cmp	r3, #2
 8004644:	d003      	beq.n	800464e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464a:	2b03      	cmp	r3, #3
 800464c:	d107      	bne.n	800465e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464e:	4b3f      	ldr	r3, [pc, #252]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e06f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465e:	4b3b      	ldr	r3, [pc, #236]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e067      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466e:	4b37      	ldr	r3, [pc, #220]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4934      	ldr	r1, [pc, #208]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800467c:	4313      	orrs	r3, r2
 800467e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004680:	f7fd ff10 	bl	80024a4 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004686:	e00a      	b.n	800469e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004688:	f7fd ff0c 	bl	80024a4 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04f      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	4b2b      	ldr	r3, [pc, #172]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 020c 	and.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d1eb      	bne.n	8004688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b0:	4b25      	ldr	r3, [pc, #148]	@ (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d20c      	bcs.n	80046d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b22      	ldr	r3, [pc, #136]	@ (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c6:	4b20      	ldr	r3, [pc, #128]	@ (8004748 <HAL_RCC_ClockConfig+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e032      	b.n	800473e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e4:	4b19      	ldr	r3, [pc, #100]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	4916      	ldr	r1, [pc, #88]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004702:	4b12      	ldr	r3, [pc, #72]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	490e      	ldr	r1, [pc, #56]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004716:	f000 f821 	bl	800475c <HAL_RCC_GetSysClockFreq>
 800471a:	4602      	mov	r2, r0
 800471c:	4b0b      	ldr	r3, [pc, #44]	@ (800474c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	490a      	ldr	r1, [pc, #40]	@ (8004750 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	5ccb      	ldrb	r3, [r1, r3]
 800472a:	fa22 f303 	lsr.w	r3, r2, r3
 800472e:	4a09      	ldr	r2, [pc, #36]	@ (8004754 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004732:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc ff82 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40023c00 	.word	0x40023c00
 800474c:	40023800 	.word	0x40023800
 8004750:	08015568 	.word	0x08015568
 8004754:	2000000c 	.word	0x2000000c
 8004758:	20000010 	.word	0x20000010

0800475c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004760:	b094      	sub	sp, #80	@ 0x50
 8004762:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	647b      	str	r3, [r7, #68]	@ 0x44
 8004768:	2300      	movs	r3, #0
 800476a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800476c:	2300      	movs	r3, #0
 800476e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004774:	4b79      	ldr	r3, [pc, #484]	@ (800495c <HAL_RCC_GetSysClockFreq+0x200>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 030c 	and.w	r3, r3, #12
 800477c:	2b08      	cmp	r3, #8
 800477e:	d00d      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0x40>
 8004780:	2b08      	cmp	r3, #8
 8004782:	f200 80e1 	bhi.w	8004948 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_RCC_GetSysClockFreq+0x34>
 800478a:	2b04      	cmp	r3, #4
 800478c:	d003      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x3a>
 800478e:	e0db      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004790:	4b73      	ldr	r3, [pc, #460]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x204>)
 8004792:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004794:	e0db      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004796:	4b73      	ldr	r3, [pc, #460]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x208>)
 8004798:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800479a:	e0d8      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800479c:	4b6f      	ldr	r3, [pc, #444]	@ (800495c <HAL_RCC_GetSysClockFreq+0x200>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a6:	4b6d      	ldr	r3, [pc, #436]	@ (800495c <HAL_RCC_GetSysClockFreq+0x200>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d063      	beq.n	800487a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b2:	4b6a      	ldr	r3, [pc, #424]	@ (800495c <HAL_RCC_GetSysClockFreq+0x200>)
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	099b      	lsrs	r3, r3, #6
 80047b8:	2200      	movs	r2, #0
 80047ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80047c6:	2300      	movs	r3, #0
 80047c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047ce:	4622      	mov	r2, r4
 80047d0:	462b      	mov	r3, r5
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	0159      	lsls	r1, r3, #5
 80047dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047e0:	0150      	lsls	r0, r2, #5
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4621      	mov	r1, r4
 80047e8:	1a51      	subs	r1, r2, r1
 80047ea:	6139      	str	r1, [r7, #16]
 80047ec:	4629      	mov	r1, r5
 80047ee:	eb63 0301 	sbc.w	r3, r3, r1
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004800:	4659      	mov	r1, fp
 8004802:	018b      	lsls	r3, r1, #6
 8004804:	4651      	mov	r1, sl
 8004806:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800480a:	4651      	mov	r1, sl
 800480c:	018a      	lsls	r2, r1, #6
 800480e:	4651      	mov	r1, sl
 8004810:	ebb2 0801 	subs.w	r8, r2, r1
 8004814:	4659      	mov	r1, fp
 8004816:	eb63 0901 	sbc.w	r9, r3, r1
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800482a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800482e:	4690      	mov	r8, r2
 8004830:	4699      	mov	r9, r3
 8004832:	4623      	mov	r3, r4
 8004834:	eb18 0303 	adds.w	r3, r8, r3
 8004838:	60bb      	str	r3, [r7, #8]
 800483a:	462b      	mov	r3, r5
 800483c:	eb49 0303 	adc.w	r3, r9, r3
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800484e:	4629      	mov	r1, r5
 8004850:	024b      	lsls	r3, r1, #9
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004858:	4621      	mov	r1, r4
 800485a:	024a      	lsls	r2, r1, #9
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004862:	2200      	movs	r2, #0
 8004864:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004866:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800486c:	f7fb fe38 	bl	80004e0 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004878:	e058      	b.n	800492c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487a:	4b38      	ldr	r3, [pc, #224]	@ (800495c <HAL_RCC_GetSysClockFreq+0x200>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	099b      	lsrs	r3, r3, #6
 8004880:	2200      	movs	r2, #0
 8004882:	4618      	mov	r0, r3
 8004884:	4611      	mov	r1, r2
 8004886:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800488a:	623b      	str	r3, [r7, #32]
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004890:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	f04f 0000 	mov.w	r0, #0
 800489c:	f04f 0100 	mov.w	r1, #0
 80048a0:	0159      	lsls	r1, r3, #5
 80048a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a6:	0150      	lsls	r0, r2, #5
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4641      	mov	r1, r8
 80048ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80048b2:	4649      	mov	r1, r9
 80048b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048cc:	ebb2 040a 	subs.w	r4, r2, sl
 80048d0:	eb63 050b 	sbc.w	r5, r3, fp
 80048d4:	f04f 0200 	mov.w	r2, #0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	00eb      	lsls	r3, r5, #3
 80048de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048e2:	00e2      	lsls	r2, r4, #3
 80048e4:	4614      	mov	r4, r2
 80048e6:	461d      	mov	r5, r3
 80048e8:	4643      	mov	r3, r8
 80048ea:	18e3      	adds	r3, r4, r3
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	464b      	mov	r3, r9
 80048f0:	eb45 0303 	adc.w	r3, r5, r3
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004902:	4629      	mov	r1, r5
 8004904:	028b      	lsls	r3, r1, #10
 8004906:	4621      	mov	r1, r4
 8004908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800490c:	4621      	mov	r1, r4
 800490e:	028a      	lsls	r2, r1, #10
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
 8004914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004916:	2200      	movs	r2, #0
 8004918:	61bb      	str	r3, [r7, #24]
 800491a:	61fa      	str	r2, [r7, #28]
 800491c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004920:	f7fb fdde 	bl	80004e0 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4613      	mov	r3, r2
 800492a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_GetSysClockFreq+0x200>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	0c1b      	lsrs	r3, r3, #16
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	3301      	adds	r3, #1
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800493c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800493e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004940:	fbb2 f3f3 	udiv	r3, r2, r3
 8004944:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004946:	e002      	b.n	800494e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x204>)
 800494a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800494c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800494e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004950:	4618      	mov	r0, r3
 8004952:	3750      	adds	r7, #80	@ 0x50
 8004954:	46bd      	mov	sp, r7
 8004956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	00f42400 	.word	0x00f42400
 8004964:	007a1200 	.word	0x007a1200

08004968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800496c:	4b03      	ldr	r3, [pc, #12]	@ (800497c <HAL_RCC_GetHCLKFreq+0x14>)
 800496e:	681b      	ldr	r3, [r3, #0]
}
 8004970:	4618      	mov	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	2000000c 	.word	0x2000000c

08004980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004984:	f7ff fff0 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 8004988:	4602      	mov	r2, r0
 800498a:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	0a9b      	lsrs	r3, r3, #10
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	4903      	ldr	r1, [pc, #12]	@ (80049a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004996:	5ccb      	ldrb	r3, [r1, r3]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40023800 	.word	0x40023800
 80049a4:	08015578 	.word	0x08015578

080049a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049ac:	f7ff ffdc 	bl	8004968 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0b5b      	lsrs	r3, r3, #13
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	@ (80049cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40023800 	.word	0x40023800
 80049cc:	08015578 	.word	0x08015578

080049d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	220f      	movs	r2, #15
 80049de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049e0:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <HAL_RCC_GetClockConfig+0x5c>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0203 	and.w	r2, r3, #3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049ec:	4b0f      	ldr	r3, [pc, #60]	@ (8004a2c <HAL_RCC_GetClockConfig+0x5c>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049f8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <HAL_RCC_GetClockConfig+0x5c>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a04:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <HAL_RCC_GetClockConfig+0x5c>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	08db      	lsrs	r3, r3, #3
 8004a0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a12:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <HAL_RCC_GetClockConfig+0x60>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 020f 	and.w	r2, r3, #15
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	601a      	str	r2, [r3, #0]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40023c00 	.word	0x40023c00

08004a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e041      	b.n	8004aca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fd1e 	bl	800149c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f000 fc58 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d001      	beq.n	8004aec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e04e      	b.n	8004b8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a23      	ldr	r2, [pc, #140]	@ (8004b98 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d022      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b16:	d01d      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <HAL_TIM_Base_Start_IT+0xc8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d018      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1c      	ldr	r2, [pc, #112]	@ (8004ba4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00e      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ba8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d009      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a19      	ldr	r2, [pc, #100]	@ (8004bac <HAL_TIM_Base_Start_IT+0xd8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d004      	beq.n	8004b54 <HAL_TIM_Base_Start_IT+0x80>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	@ (8004bb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d111      	bne.n	8004b78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d010      	beq.n	8004b88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b76:	e007      	b.n	8004b88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40010400 	.word	0x40010400
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40001800 	.word	0x40001800

08004bb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e041      	b.n	8004c4a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fc fc26 	bl	800142c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	4619      	mov	r1, r3
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	f000 fb98 	bl	8005328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d109      	bne.n	8004c78 <HAL_TIM_PWM_Start+0x24>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e022      	b.n	8004cbe <HAL_TIM_PWM_Start+0x6a>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d109      	bne.n	8004c92 <HAL_TIM_PWM_Start+0x3e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	bf14      	ite	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	2300      	moveq	r3, #0
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	e015      	b.n	8004cbe <HAL_TIM_PWM_Start+0x6a>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d109      	bne.n	8004cac <HAL_TIM_PWM_Start+0x58>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	e008      	b.n	8004cbe <HAL_TIM_PWM_Start+0x6a>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e07c      	b.n	8004dc0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0x82>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd4:	e013      	b.n	8004cfe <HAL_TIM_PWM_Start+0xaa>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d104      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0x92>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ce4:	e00b      	b.n	8004cfe <HAL_TIM_PWM_Start+0xaa>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_PWM_Start+0xa2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf4:	e003      	b.n	8004cfe <HAL_TIM_PWM_Start+0xaa>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2201      	movs	r2, #1
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fe04 	bl	8005914 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2d      	ldr	r2, [pc, #180]	@ (8004dc8 <HAL_TIM_PWM_Start+0x174>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_TIM_PWM_Start+0xcc>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dcc <HAL_TIM_PWM_Start+0x178>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIM_PWM_Start+0xd0>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <HAL_TIM_PWM_Start+0xd2>
 8004d24:	2300      	movs	r3, #0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a22      	ldr	r2, [pc, #136]	@ (8004dc8 <HAL_TIM_PWM_Start+0x174>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d022      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x136>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4c:	d01d      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x136>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1f      	ldr	r2, [pc, #124]	@ (8004dd0 <HAL_TIM_PWM_Start+0x17c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d018      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x136>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004dd4 <HAL_TIM_PWM_Start+0x180>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d013      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x136>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1c      	ldr	r2, [pc, #112]	@ (8004dd8 <HAL_TIM_PWM_Start+0x184>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d00e      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x136>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <HAL_TIM_PWM_Start+0x178>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x136>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a18      	ldr	r2, [pc, #96]	@ (8004ddc <HAL_TIM_PWM_Start+0x188>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d004      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x136>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a16      	ldr	r2, [pc, #88]	@ (8004de0 <HAL_TIM_PWM_Start+0x18c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d111      	bne.n	8004dae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b06      	cmp	r3, #6
 8004d9a:	d010      	beq.n	8004dbe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	e007      	b.n	8004dbe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40010400 	.word	0x40010400
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	40014000 	.word	0x40014000
 8004de0:	40001800 	.word	0x40001800

08004de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d020      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01b      	beq.n	8004e48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0202 	mvn.w	r2, #2
 8004e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa5b 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fa4d 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fa5e 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d020      	beq.n	8004e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01b      	beq.n	8004e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f06f 0204 	mvn.w	r2, #4
 8004e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa35 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8004e80:	e005      	b.n	8004e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa27 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 fa38 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d020      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0308 	and.w	r3, r3, #8
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d01b      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0208 	mvn.w	r2, #8
 8004eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2204      	movs	r2, #4
 8004eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa0f 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8004ecc:	e005      	b.n	8004eda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fa01 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fa12 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d020      	beq.n	8004f2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f003 0310 	and.w	r3, r3, #16
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01b      	beq.n	8004f2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0210 	mvn.w	r2, #16
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2208      	movs	r2, #8
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f9e9 	bl	80052ea <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9db 	bl	80052d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9ec 	bl	80052fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0201 	mvn.w	r2, #1
 8004f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fc f8f8 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d007      	beq.n	8004f74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fdce 	bl	8005b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00c      	beq.n	8004f98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f9bd 	bl	8005312 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00c      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d007      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0220 	mvn.w	r2, #32
 8004fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fda0 	bl	8005afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fbc:	bf00      	nop
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e0ae      	b.n	8005140 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	f200 809f 	bhi.w	8005130 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800502d 	.word	0x0800502d
 8004ffc:	08005131 	.word	0x08005131
 8005000:	08005131 	.word	0x08005131
 8005004:	08005131 	.word	0x08005131
 8005008:	0800506d 	.word	0x0800506d
 800500c:	08005131 	.word	0x08005131
 8005010:	08005131 	.word	0x08005131
 8005014:	08005131 	.word	0x08005131
 8005018:	080050af 	.word	0x080050af
 800501c:	08005131 	.word	0x08005131
 8005020:	08005131 	.word	0x08005131
 8005024:	08005131 	.word	0x08005131
 8005028:	080050ef 	.word	0x080050ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68b9      	ldr	r1, [r7, #8]
 8005032:	4618      	mov	r0, r3
 8005034:	f000 fa24 	bl	8005480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	699a      	ldr	r2, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0208 	orr.w	r2, r2, #8
 8005046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0204 	bic.w	r2, r2, #4
 8005056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6999      	ldr	r1, [r3, #24]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	619a      	str	r2, [r3, #24]
      break;
 800506a:	e064      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fa74 	bl	8005560 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699a      	ldr	r2, [r3, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699a      	ldr	r2, [r3, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6999      	ldr	r1, [r3, #24]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	021a      	lsls	r2, r3, #8
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	619a      	str	r2, [r3, #24]
      break;
 80050ac:	e043      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68b9      	ldr	r1, [r7, #8]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fac9 	bl	800564c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f042 0208 	orr.w	r2, r2, #8
 80050c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0204 	bic.w	r2, r2, #4
 80050d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69d9      	ldr	r1, [r3, #28]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	61da      	str	r2, [r3, #28]
      break;
 80050ec:	e023      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68b9      	ldr	r1, [r7, #8]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fb1d 	bl	8005734 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69d9      	ldr	r1, [r3, #28]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	61da      	str	r2, [r3, #28]
      break;
 800512e:	e002      	b.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800513e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIM_ConfigClockSource+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e0b4      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x186>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800518a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800519c:	d03e      	beq.n	800521c <HAL_TIM_ConfigClockSource+0xd4>
 800519e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a2:	f200 8087 	bhi.w	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051aa:	f000 8086 	beq.w	80052ba <HAL_TIM_ConfigClockSource+0x172>
 80051ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051b2:	d87f      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051b4:	2b70      	cmp	r3, #112	@ 0x70
 80051b6:	d01a      	beq.n	80051ee <HAL_TIM_ConfigClockSource+0xa6>
 80051b8:	2b70      	cmp	r3, #112	@ 0x70
 80051ba:	d87b      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051bc:	2b60      	cmp	r3, #96	@ 0x60
 80051be:	d050      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0x11a>
 80051c0:	2b60      	cmp	r3, #96	@ 0x60
 80051c2:	d877      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051c4:	2b50      	cmp	r3, #80	@ 0x50
 80051c6:	d03c      	beq.n	8005242 <HAL_TIM_ConfigClockSource+0xfa>
 80051c8:	2b50      	cmp	r3, #80	@ 0x50
 80051ca:	d873      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b40      	cmp	r3, #64	@ 0x40
 80051ce:	d058      	beq.n	8005282 <HAL_TIM_ConfigClockSource+0x13a>
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d86f      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b30      	cmp	r3, #48	@ 0x30
 80051d6:	d064      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x15a>
 80051d8:	2b30      	cmp	r3, #48	@ 0x30
 80051da:	d86b      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d060      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x15a>
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d867      	bhi.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d05c      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x15a>
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d05a      	beq.n	80052a2 <HAL_TIM_ConfigClockSource+0x15a>
 80051ec:	e062      	b.n	80052b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051fe:	f000 fb69 	bl	80058d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	609a      	str	r2, [r3, #8]
      break;
 800521a:	e04f      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800522c:	f000 fb52 	bl	80058d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800523e:	609a      	str	r2, [r3, #8]
      break;
 8005240:	e03c      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800524e:	461a      	mov	r2, r3
 8005250:	f000 fac6 	bl	80057e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2150      	movs	r1, #80	@ 0x50
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fb1f 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005260:	e02c      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800526e:	461a      	mov	r2, r3
 8005270:	f000 fae5 	bl	800583e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2160      	movs	r1, #96	@ 0x60
 800527a:	4618      	mov	r0, r3
 800527c:	f000 fb0f 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 8005280:	e01c      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800528e:	461a      	mov	r2, r3
 8005290:	f000 faa6 	bl	80057e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2140      	movs	r1, #64	@ 0x40
 800529a:	4618      	mov	r0, r3
 800529c:	f000 faff 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80052a0:	e00c      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f000 faf6 	bl	800589e <TIM_ITRx_SetConfig>
      break;
 80052b2:	e003      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
      break;
 80052b8:	e000      	b.n	80052bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a46      	ldr	r2, [pc, #280]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d013      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005346:	d00f      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a43      	ldr	r2, [pc, #268]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00b      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a42      	ldr	r2, [pc, #264]	@ (800545c <TIM_Base_SetConfig+0x134>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a41      	ldr	r2, [pc, #260]	@ (8005460 <TIM_Base_SetConfig+0x138>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a40      	ldr	r2, [pc, #256]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d108      	bne.n	800537a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800536e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a35      	ldr	r2, [pc, #212]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005388:	d027      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a32      	ldr	r2, [pc, #200]	@ (8005458 <TIM_Base_SetConfig+0x130>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d023      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a31      	ldr	r2, [pc, #196]	@ (800545c <TIM_Base_SetConfig+0x134>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01f      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a30      	ldr	r2, [pc, #192]	@ (8005460 <TIM_Base_SetConfig+0x138>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d017      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005468 <TIM_Base_SetConfig+0x140>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2d      	ldr	r2, [pc, #180]	@ (800546c <TIM_Base_SetConfig+0x144>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005470 <TIM_Base_SetConfig+0x148>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005474 <TIM_Base_SetConfig+0x14c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005478 <TIM_Base_SetConfig+0x150>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a29      	ldr	r2, [pc, #164]	@ (800547c <TIM_Base_SetConfig+0x154>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d108      	bne.n	80053ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a10      	ldr	r2, [pc, #64]	@ (8005454 <TIM_Base_SetConfig+0x12c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0xf8>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a12      	ldr	r2, [pc, #72]	@ (8005464 <TIM_Base_SetConfig+0x13c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d103      	bne.n	8005428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f023 0201 	bic.w	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]
  }
}
 8005446:	bf00      	nop
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800
 8005460:	40000c00 	.word	0x40000c00
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800
 8005474:	40001800 	.word	0x40001800
 8005478:	40001c00 	.word	0x40001c00
 800547c:	40002000 	.word	0x40002000

08005480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0201 	bic.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0302 	bic.w	r3, r3, #2
 80054c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a20      	ldr	r2, [pc, #128]	@ (8005558 <TIM_OC1_SetConfig+0xd8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC1_SetConfig+0x64>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1f      	ldr	r2, [pc, #124]	@ (800555c <TIM_OC1_SetConfig+0xdc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10c      	bne.n	80054fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0308 	bic.w	r3, r3, #8
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 0304 	bic.w	r3, r3, #4
 80054fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <TIM_OC1_SetConfig+0xd8>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_OC1_SetConfig+0x8e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a14      	ldr	r2, [pc, #80]	@ (800555c <TIM_OC1_SetConfig+0xdc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d111      	bne.n	8005532 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800551c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400

08005560 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f023 0210 	bic.w	r2, r3, #16
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f023 0320 	bic.w	r3, r3, #32
 80055aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a22      	ldr	r2, [pc, #136]	@ (8005644 <TIM_OC2_SetConfig+0xe4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_OC2_SetConfig+0x68>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a21      	ldr	r2, [pc, #132]	@ (8005648 <TIM_OC2_SetConfig+0xe8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d10d      	bne.n	80055e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a17      	ldr	r2, [pc, #92]	@ (8005644 <TIM_OC2_SetConfig+0xe4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_OC2_SetConfig+0x94>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a16      	ldr	r2, [pc, #88]	@ (8005648 <TIM_OC2_SetConfig+0xe8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d113      	bne.n	800561c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	4313      	orrs	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40010000 	.word	0x40010000
 8005648:	40010400 	.word	0x40010400

0800564c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a21      	ldr	r2, [pc, #132]	@ (800572c <TIM_OC3_SetConfig+0xe0>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <TIM_OC3_SetConfig+0x66>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a20      	ldr	r2, [pc, #128]	@ (8005730 <TIM_OC3_SetConfig+0xe4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10d      	bne.n	80056ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a16      	ldr	r2, [pc, #88]	@ (800572c <TIM_OC3_SetConfig+0xe0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC3_SetConfig+0x92>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a15      	ldr	r2, [pc, #84]	@ (8005730 <TIM_OC3_SetConfig+0xe4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d113      	bne.n	8005706 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	621a      	str	r2, [r3, #32]
}
 8005720:	bf00      	nop
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	40010000 	.word	0x40010000
 8005730:	40010400 	.word	0x40010400

08005734 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800576a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	021b      	lsls	r3, r3, #8
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800577e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a12      	ldr	r2, [pc, #72]	@ (80057d8 <TIM_OC4_SetConfig+0xa4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_OC4_SetConfig+0x68>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a11      	ldr	r2, [pc, #68]	@ (80057dc <TIM_OC4_SetConfig+0xa8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d109      	bne.n	80057b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	621a      	str	r2, [r3, #32]
}
 80057ca:	bf00      	nop
 80057cc:	371c      	adds	r7, #28
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	40010000 	.word	0x40010000
 80057dc:	40010400 	.word	0x40010400

080057e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1b      	ldr	r3, [r3, #32]
 80057f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800580a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	4313      	orrs	r3, r2
 8005814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f023 030a 	bic.w	r3, r3, #10
 800581c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583e:	b480      	push	{r7}
 8005840:	b087      	sub	sp, #28
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f023 0210 	bic.w	r2, r3, #16
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	031b      	lsls	r3, r3, #12
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800587a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	011b      	lsls	r3, r3, #4
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr

0800589e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f043 0307 	orr.w	r3, r3, #7
 80058c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 031f 	and.w	r3, r3, #31
 8005926:	2201      	movs	r2, #1
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a1a      	ldr	r2, [r3, #32]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	43db      	mvns	r3, r3
 8005936:	401a      	ands	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 031f 	and.w	r3, r3, #31
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	431a      	orrs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e05a      	b.n	8005a2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a21      	ldr	r2, [pc, #132]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d022      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c4:	d01d      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d018      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1a      	ldr	r2, [pc, #104]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00e      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a18      	ldr	r2, [pc, #96]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a17      	ldr	r2, [pc, #92]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10c      	bne.n	8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40000400 	.word	0x40000400
 8005a44:	40000800 	.word	0x40000800
 8005a48:	40000c00 	.word	0x40000c00
 8005a4c:	40010400 	.word	0x40010400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	40001800 	.word	0x40001800

08005a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e03d      	b.n	8005af0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e042      	b.n	8005bbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fb fd30 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	@ 0x24
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f973 	bl	8005e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08a      	sub	sp, #40	@ 0x28
 8005bc8:	af02      	add	r7, sp, #8
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b20      	cmp	r3, #32
 8005be2:	d175      	bne.n	8005cd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <HAL_UART_Transmit+0x2c>
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e06e      	b.n	8005cd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2221      	movs	r2, #33	@ 0x21
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c02:	f7fc fc4f 	bl	80024a4 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1c:	d108      	bne.n	8005c30 <HAL_UART_Transmit+0x6c>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e003      	b.n	8005c38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c38:	e02e      	b.n	8005c98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	2180      	movs	r1, #128	@ 0x80
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f848 	bl	8005cda <UART_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e03a      	b.n	8005cd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	3302      	adds	r3, #2
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	e007      	b.n	8005c8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1cb      	bne.n	8005c3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2140      	movs	r1, #64	@ 0x40
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f814 	bl	8005cda <UART_WaitOnFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e006      	b.n	8005cd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cea:	e03b      	b.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf2:	d037      	beq.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf4:	f7fc fbd6 	bl	80024a4 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	6a3a      	ldr	r2, [r7, #32]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d302      	bcc.n	8005d0a <UART_WaitOnFlagUntilTimeout+0x30>
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e03a      	b.n	8005d84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d023      	beq.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b80      	cmp	r3, #128	@ 0x80
 8005d20:	d020      	beq.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b40      	cmp	r3, #64	@ 0x40
 8005d26:	d01d      	beq.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d116      	bne.n	8005d64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f81d 	bl	8005d8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2208      	movs	r2, #8
 8005d56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e00f      	b.n	8005d84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	bf0c      	ite	eq
 8005d74:	2301      	moveq	r3, #1
 8005d76:	2300      	movne	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d0b4      	beq.n	8005cec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b095      	sub	sp, #84	@ 0x54
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d9e:	e853 3f00 	ldrex	r3, [r3]
 8005da2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005db4:	643a      	str	r2, [r7, #64]	@ 0x40
 8005db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e5      	bne.n	8005d94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3314      	adds	r3, #20
 8005dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	e853 3f00 	ldrex	r3, [r3]
 8005dd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f023 0301 	bic.w	r3, r3, #1
 8005dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3314      	adds	r3, #20
 8005de6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005de8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df0:	e841 2300 	strex	r3, r2, [r1]
 8005df4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1e5      	bne.n	8005dc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d119      	bne.n	8005e38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e853 3f00 	ldrex	r3, [r3]
 8005e12:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f023 0310 	bic.w	r3, r3, #16
 8005e1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330c      	adds	r3, #12
 8005e22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e24:	61ba      	str	r2, [r7, #24]
 8005e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6979      	ldr	r1, [r7, #20]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	613b      	str	r3, [r7, #16]
   return(result);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e5      	bne.n	8005e04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e46:	bf00      	nop
 8005e48:	3754      	adds	r7, #84	@ 0x54
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e58:	b0c0      	sub	sp, #256	@ 0x100
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	68d9      	ldr	r1, [r3, #12]
 8005e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	ea40 0301 	orr.w	r3, r0, r1
 8005e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005eac:	f021 010c 	bic.w	r1, r1, #12
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eba:	430b      	orrs	r3, r1
 8005ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ece:	6999      	ldr	r1, [r3, #24]
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	ea40 0301 	orr.w	r3, r0, r1
 8005eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4b8f      	ldr	r3, [pc, #572]	@ (8006120 <UART_SetConfig+0x2cc>)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d005      	beq.n	8005ef4 <UART_SetConfig+0xa0>
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b8d      	ldr	r3, [pc, #564]	@ (8006124 <UART_SetConfig+0x2d0>)
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d104      	bne.n	8005efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ef4:	f7fe fd58 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 8005ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005efc:	e003      	b.n	8005f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005efe:	f7fe fd3f 	bl	8004980 <HAL_RCC_GetPCLK1Freq>
 8005f02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f10:	f040 810c 	bne.w	800612c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f26:	4622      	mov	r2, r4
 8005f28:	462b      	mov	r3, r5
 8005f2a:	1891      	adds	r1, r2, r2
 8005f2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f2e:	415b      	adcs	r3, r3
 8005f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f36:	4621      	mov	r1, r4
 8005f38:	eb12 0801 	adds.w	r8, r2, r1
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	eb43 0901 	adc.w	r9, r3, r1
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f56:	4690      	mov	r8, r2
 8005f58:	4699      	mov	r9, r3
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	eb18 0303 	adds.w	r3, r8, r3
 8005f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f64:	462b      	mov	r3, r5
 8005f66:	eb49 0303 	adc.w	r3, r9, r3
 8005f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f82:	460b      	mov	r3, r1
 8005f84:	18db      	adds	r3, r3, r3
 8005f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f88:	4613      	mov	r3, r2
 8005f8a:	eb42 0303 	adc.w	r3, r2, r3
 8005f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f98:	f7fa faa2 	bl	80004e0 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4b61      	ldr	r3, [pc, #388]	@ (8006128 <UART_SetConfig+0x2d4>)
 8005fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	011c      	lsls	r4, r3, #4
 8005faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	1891      	adds	r1, r2, r2
 8005fc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fc4:	415b      	adcs	r3, r3
 8005fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fcc:	4641      	mov	r1, r8
 8005fce:	eb12 0a01 	adds.w	sl, r2, r1
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fec:	4692      	mov	sl, r2
 8005fee:	469b      	mov	fp, r3
 8005ff0:	4643      	mov	r3, r8
 8005ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8006000:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006010:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006018:	460b      	mov	r3, r1
 800601a:	18db      	adds	r3, r3, r3
 800601c:	643b      	str	r3, [r7, #64]	@ 0x40
 800601e:	4613      	mov	r3, r2
 8006020:	eb42 0303 	adc.w	r3, r2, r3
 8006024:	647b      	str	r3, [r7, #68]	@ 0x44
 8006026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800602a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800602e:	f7fa fa57 	bl	80004e0 <__aeabi_uldivmod>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4611      	mov	r1, r2
 8006038:	4b3b      	ldr	r3, [pc, #236]	@ (8006128 <UART_SetConfig+0x2d4>)
 800603a:	fba3 2301 	umull	r2, r3, r3, r1
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	2264      	movs	r2, #100	@ 0x64
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	1acb      	subs	r3, r1, r3
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800604e:	4b36      	ldr	r3, [pc, #216]	@ (8006128 <UART_SetConfig+0x2d4>)
 8006050:	fba3 2302 	umull	r2, r3, r3, r2
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800605c:	441c      	add	r4, r3
 800605e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006062:	2200      	movs	r2, #0
 8006064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006068:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800606c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	1891      	adds	r1, r2, r2
 8006076:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006078:	415b      	adcs	r3, r3
 800607a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800607c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006080:	4641      	mov	r1, r8
 8006082:	1851      	adds	r1, r2, r1
 8006084:	6339      	str	r1, [r7, #48]	@ 0x30
 8006086:	4649      	mov	r1, r9
 8006088:	414b      	adcs	r3, r1
 800608a:	637b      	str	r3, [r7, #52]	@ 0x34
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006098:	4659      	mov	r1, fp
 800609a:	00cb      	lsls	r3, r1, #3
 800609c:	4651      	mov	r1, sl
 800609e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a2:	4651      	mov	r1, sl
 80060a4:	00ca      	lsls	r2, r1, #3
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	4642      	mov	r2, r8
 80060ae:	189b      	adds	r3, r3, r2
 80060b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060b4:	464b      	mov	r3, r9
 80060b6:	460a      	mov	r2, r1
 80060b8:	eb42 0303 	adc.w	r3, r2, r3
 80060bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060d4:	460b      	mov	r3, r1
 80060d6:	18db      	adds	r3, r3, r3
 80060d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060da:	4613      	mov	r3, r2
 80060dc:	eb42 0303 	adc.w	r3, r2, r3
 80060e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060ea:	f7fa f9f9 	bl	80004e0 <__aeabi_uldivmod>
 80060ee:	4602      	mov	r2, r0
 80060f0:	460b      	mov	r3, r1
 80060f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006128 <UART_SetConfig+0x2d4>)
 80060f4:	fba3 1302 	umull	r1, r3, r3, r2
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	2164      	movs	r1, #100	@ 0x64
 80060fc:	fb01 f303 	mul.w	r3, r1, r3
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	3332      	adds	r3, #50	@ 0x32
 8006106:	4a08      	ldr	r2, [pc, #32]	@ (8006128 <UART_SetConfig+0x2d4>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	f003 0207 	and.w	r2, r3, #7
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4422      	add	r2, r4
 800611a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800611c:	e106      	b.n	800632c <UART_SetConfig+0x4d8>
 800611e:	bf00      	nop
 8006120:	40011000 	.word	0x40011000
 8006124:	40011400 	.word	0x40011400
 8006128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800612c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006130:	2200      	movs	r2, #0
 8006132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006136:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800613a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800613e:	4642      	mov	r2, r8
 8006140:	464b      	mov	r3, r9
 8006142:	1891      	adds	r1, r2, r2
 8006144:	6239      	str	r1, [r7, #32]
 8006146:	415b      	adcs	r3, r3
 8006148:	627b      	str	r3, [r7, #36]	@ 0x24
 800614a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800614e:	4641      	mov	r1, r8
 8006150:	1854      	adds	r4, r2, r1
 8006152:	4649      	mov	r1, r9
 8006154:	eb43 0501 	adc.w	r5, r3, r1
 8006158:	f04f 0200 	mov.w	r2, #0
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	00eb      	lsls	r3, r5, #3
 8006162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006166:	00e2      	lsls	r2, r4, #3
 8006168:	4614      	mov	r4, r2
 800616a:	461d      	mov	r5, r3
 800616c:	4643      	mov	r3, r8
 800616e:	18e3      	adds	r3, r4, r3
 8006170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006174:	464b      	mov	r3, r9
 8006176:	eb45 0303 	adc.w	r3, r5, r3
 800617a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800617e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800618a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800619a:	4629      	mov	r1, r5
 800619c:	008b      	lsls	r3, r1, #2
 800619e:	4621      	mov	r1, r4
 80061a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061a4:	4621      	mov	r1, r4
 80061a6:	008a      	lsls	r2, r1, #2
 80061a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061ac:	f7fa f998 	bl	80004e0 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b60      	ldr	r3, [pc, #384]	@ (8006338 <UART_SetConfig+0x4e4>)
 80061b6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	011c      	lsls	r4, r3, #4
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	61b9      	str	r1, [r7, #24]
 80061d8:	415b      	adcs	r3, r3
 80061da:	61fb      	str	r3, [r7, #28]
 80061dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061e0:	4641      	mov	r1, r8
 80061e2:	1851      	adds	r1, r2, r1
 80061e4:	6139      	str	r1, [r7, #16]
 80061e6:	4649      	mov	r1, r9
 80061e8:	414b      	adcs	r3, r1
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061f8:	4659      	mov	r1, fp
 80061fa:	00cb      	lsls	r3, r1, #3
 80061fc:	4651      	mov	r1, sl
 80061fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006202:	4651      	mov	r1, sl
 8006204:	00ca      	lsls	r2, r1, #3
 8006206:	4610      	mov	r0, r2
 8006208:	4619      	mov	r1, r3
 800620a:	4603      	mov	r3, r0
 800620c:	4642      	mov	r2, r8
 800620e:	189b      	adds	r3, r3, r2
 8006210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006214:	464b      	mov	r3, r9
 8006216:	460a      	mov	r2, r1
 8006218:	eb42 0303 	adc.w	r3, r2, r3
 800621c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	67bb      	str	r3, [r7, #120]	@ 0x78
 800622a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006238:	4649      	mov	r1, r9
 800623a:	008b      	lsls	r3, r1, #2
 800623c:	4641      	mov	r1, r8
 800623e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006242:	4641      	mov	r1, r8
 8006244:	008a      	lsls	r2, r1, #2
 8006246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800624a:	f7fa f949 	bl	80004e0 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4611      	mov	r1, r2
 8006254:	4b38      	ldr	r3, [pc, #224]	@ (8006338 <UART_SetConfig+0x4e4>)
 8006256:	fba3 2301 	umull	r2, r3, r3, r1
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2264      	movs	r2, #100	@ 0x64
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	1acb      	subs	r3, r1, r3
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	3332      	adds	r3, #50	@ 0x32
 8006268:	4a33      	ldr	r2, [pc, #204]	@ (8006338 <UART_SetConfig+0x4e4>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006274:	441c      	add	r4, r3
 8006276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800627a:	2200      	movs	r2, #0
 800627c:	673b      	str	r3, [r7, #112]	@ 0x70
 800627e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	1891      	adds	r1, r2, r2
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	415b      	adcs	r3, r3
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006294:	4641      	mov	r1, r8
 8006296:	1851      	adds	r1, r2, r1
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	4649      	mov	r1, r9
 800629c:	414b      	adcs	r3, r1
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062ac:	4659      	mov	r1, fp
 80062ae:	00cb      	lsls	r3, r1, #3
 80062b0:	4651      	mov	r1, sl
 80062b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b6:	4651      	mov	r1, sl
 80062b8:	00ca      	lsls	r2, r1, #3
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	4603      	mov	r3, r0
 80062c0:	4642      	mov	r2, r8
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062c6:	464b      	mov	r3, r9
 80062c8:	460a      	mov	r2, r1
 80062ca:	eb42 0303 	adc.w	r3, r2, r3
 80062ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80062da:	667a      	str	r2, [r7, #100]	@ 0x64
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	f04f 0300 	mov.w	r3, #0
 80062e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062e8:	4649      	mov	r1, r9
 80062ea:	008b      	lsls	r3, r1, #2
 80062ec:	4641      	mov	r1, r8
 80062ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062f2:	4641      	mov	r1, r8
 80062f4:	008a      	lsls	r2, r1, #2
 80062f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062fa:	f7fa f8f1 	bl	80004e0 <__aeabi_uldivmod>
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4b0d      	ldr	r3, [pc, #52]	@ (8006338 <UART_SetConfig+0x4e4>)
 8006304:	fba3 1302 	umull	r1, r3, r3, r2
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	2164      	movs	r1, #100	@ 0x64
 800630c:	fb01 f303 	mul.w	r3, r1, r3
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	3332      	adds	r3, #50	@ 0x32
 8006316:	4a08      	ldr	r2, [pc, #32]	@ (8006338 <UART_SetConfig+0x4e4>)
 8006318:	fba2 2303 	umull	r2, r3, r2, r3
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	f003 020f 	and.w	r2, r3, #15
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4422      	add	r2, r4
 800632a:	609a      	str	r2, [r3, #8]
}
 800632c:	bf00      	nop
 800632e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006332:	46bd      	mov	sp, r7
 8006334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006338:	51eb851f 	.word	0x51eb851f

0800633c <nx_stm32_eth_driver>:
/*                                                                        */
/**************************************************************************/
/****** DRIVER SPECIFIC ****** Start of part/vendor specific global driver entry function name.  */
VOID  nx_stm32_eth_driver(NX_IP_DRIVER *driver_req_ptr)
/****** DRIVER SPECIFIC ****** End of part/vendor specific global driver entry function name.  */
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	605a      	str	r2, [r3, #4]

  /* Process according to the driver request type in the IP control
  block.  */
  switch (driver_req_ptr -> nx_ip_driver_command)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b16      	cmp	r3, #22
 8006350:	d85c      	bhi.n	800640c <nx_stm32_eth_driver+0xd0>
 8006352:	a201      	add	r2, pc, #4	@ (adr r2, 8006358 <nx_stm32_eth_driver+0x1c>)
 8006354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006358:	080063d5 	.word	0x080063d5
 800635c:	080063bd 	.word	0x080063bd
 8006360:	080063c5 	.word	0x080063c5
 8006364:	080063cd 	.word	0x080063cd
 8006368:	080063d5 	.word	0x080063d5
 800636c:	080063d5 	.word	0x080063d5
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063d5 	.word	0x080063d5
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080063e5 	.word	0x080063e5
 8006380:	080063ed 	.word	0x080063ed
 8006384:	0800640d 	.word	0x0800640d
 8006388:	0800640d 	.word	0x0800640d
 800638c:	0800640d 	.word	0x0800640d
 8006390:	0800640d 	.word	0x0800640d
 8006394:	0800640d 	.word	0x0800640d
 8006398:	0800640d 	.word	0x0800640d
 800639c:	0800640d 	.word	0x0800640d
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	0800640d 	.word	0x0800640d
 80063ac:	080063fd 	.word	0x080063fd
 80063b0:	08006405 	.word	0x08006405
  {

  case NX_LINK_INTERFACE_ATTACH:

    /* Process link interface attach requests.  */
    _nx_driver_interface_attach(driver_req_ptr);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f835 	bl	8006424 <_nx_driver_interface_attach>
    break;
 80063ba:	e02e      	b.n	800641a <nx_stm32_eth_driver+0xde>

  case NX_LINK_INITIALIZE:
    {

      /* Process link initialize requests.  */
      _nx_driver_initialize(driver_req_ptr);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f849 	bl	8006454 <_nx_driver_initialize>
      break;
 80063c2:	e02a      	b.n	800641a <nx_stm32_eth_driver+0xde>

  case NX_LINK_ENABLE:
    {

      /* Process link enable requests.  */
      _nx_driver_enable(driver_req_ptr);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f8a7 	bl	8006518 <_nx_driver_enable>
      break;
 80063ca:	e026      	b.n	800641a <nx_stm32_eth_driver+0xde>

  case NX_LINK_DISABLE:
    {

      /* Process link disable requests.  */
      _nx_driver_disable(driver_req_ptr);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f92b 	bl	8006628 <_nx_driver_disable>
      break;
 80063d2:	e022      	b.n	800641a <nx_stm32_eth_driver+0xde>
  case NX_LINK_RARP_SEND:
  case NX_LINK_PACKET_SEND:
    {

      /* Process packet send requests.  */
      _nx_driver_packet_send(driver_req_ptr);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f951 	bl	800667c <_nx_driver_packet_send>
      break;
 80063da:	e01e      	b.n	800641a <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_JOIN:
    {

      /* Process multicast join requests.  */
      _nx_driver_multicast_join(driver_req_ptr);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fa0f 	bl	8006800 <_nx_driver_multicast_join>
      break;
 80063e2:	e01a      	b.n	800641a <nx_stm32_eth_driver+0xde>

  case NX_LINK_MULTICAST_LEAVE:
    {

      /* Process multicast leave requests.  */
      _nx_driver_multicast_leave(driver_req_ptr);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fa21 	bl	800682c <_nx_driver_multicast_leave>
      break;
 80063ea:	e016      	b.n	800641a <nx_stm32_eth_driver+0xde>

  case NX_LINK_GET_STATUS:
    {

      /* Process get status requests.  */
      _nx_driver_get_status(driver_req_ptr);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fa33 	bl	8006858 <_nx_driver_get_status>
      break;
 80063f2:	e012      	b.n	800641a <nx_stm32_eth_driver+0xde>
    {

      /* Process driver deferred requests.  */

      /* Process a device driver function on behave of the IP thread. */
      _nx_driver_deferred_processing(driver_req_ptr);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fa6d 	bl	80068d4 <_nx_driver_deferred_processing>

      break;
 80063fa:	e00e      	b.n	800641a <nx_stm32_eth_driver+0xde>
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  case NX_INTERFACE_CAPABILITY_GET:
    {

      /* Process get capability requests.  */
      _nx_driver_capability_get(driver_req_ptr);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fa41 	bl	8006884 <_nx_driver_capability_get>
      break;
 8006402:	e00a      	b.n	800641a <nx_stm32_eth_driver+0xde>

  case NX_INTERFACE_CAPABILITY_SET:
    {

      /* Process set capability requests.  */
      _nx_driver_capability_set(driver_req_ptr);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fa4f 	bl	80068a8 <_nx_driver_capability_set>
      break;
 800640a:	e006      	b.n	800641a <nx_stm32_eth_driver+0xde>


    /* Invalid driver request.  */

    /* Return the unhandled command status.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_UNHANDLED_COMMAND;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2244      	movs	r2, #68	@ 0x44
 8006410:	605a      	str	r2, [r3, #4]

    /* Default to successful return.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	225a      	movs	r2, #90	@ 0x5a
 8006416:	605a      	str	r2, [r3, #4]
  }
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop

08006424 <_nx_driver_interface_attach>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_interface_attach(NX_IP_DRIVER *driver_req_ptr)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]


  /* Setup the driver's interface.  This example is for a simple one-interface
  Ethernet driver. Additional logic is necessary for multiple port devices.  */
  nx_driver_information.nx_driver_information_interface =  driver_req_ptr -> nx_ip_driver_interface;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	4a07      	ldr	r2, [pc, #28]	@ (8006450 <_nx_driver_interface_attach+0x2c>)
 8006432:	60d3      	str	r3, [r2, #12]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  driver_req_ptr -> nx_ip_driver_interface -> nx_interface_capability_flag = NX_DRIVER_CAPABILITY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800643c:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  /* Return successful status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	605a      	str	r2, [r3, #4]
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	2000ad00 	.word	0x2000ad00

08006454 <_nx_driver_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  NX_INTERFACE    *interface_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	617b      	str	r3, [r7, #20]

  /* Setup interface pointer.  */
  interface_ptr = driver_req_ptr -> nx_ip_driver_interface;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	613b      	str	r3, [r7, #16]

  /* Initialize the driver's information structure.  */

  /* Default IP pointer to NULL.  */
  nx_driver_information.nx_driver_information_ip_ptr =               NX_NULL;
 8006468:	4b29      	ldr	r3, [pc, #164]	@ (8006510 <_nx_driver_initialize+0xbc>)
 800646a:	2200      	movs	r2, #0
 800646c:	601a      	str	r2, [r3, #0]

  /* Setup the driver state to not initialized.  */
  nx_driver_information.nx_driver_information_state =                NX_DRIVER_STATE_NOT_INITIALIZED;
 800646e:	4b28      	ldr	r3, [pc, #160]	@ (8006510 <_nx_driver_initialize+0xbc>)
 8006470:	2201      	movs	r2, #1
 8006472:	605a      	str	r2, [r3, #4]

  /* Setup the default packet pool for the driver's received packets.  */
  nx_driver_information.nx_driver_information_packet_pool_ptr = ip_ptr -> nx_ip_default_packet_pool;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800647a:	4a25      	ldr	r2, [pc, #148]	@ (8006510 <_nx_driver_initialize+0xbc>)
 800647c:	6093      	str	r3, [r2, #8]

  /* Clear the deferred events for the driver.  */
  nx_driver_information.nx_driver_information_deferred_events =       0;
 800647e:	4b24      	ldr	r3, [pc, #144]	@ (8006510 <_nx_driver_initialize+0xbc>)
 8006480:	2200      	movs	r2, #0
 8006482:	611a      	str	r2, [r3, #16]

  /* Call the hardware-specific ethernet controller initialization.  */
  status =  _nx_driver_hardware_initialize(driver_req_ptr);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fab9 	bl	80069fc <_nx_driver_hardware_initialize>
 800648a:	60f8      	str	r0, [r7, #12]

  /* Determine if the request was successful.  */
  if (status == NX_SUCCESS)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d136      	bne.n	8006500 <_nx_driver_initialize+0xac>
  {

    /* Successful hardware initialization.  */

    /* Setup driver information to point to IP pointer.  */
    nx_driver_information.nx_driver_information_ip_ptr = driver_req_ptr -> nx_ip_driver_ptr;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	4a1e      	ldr	r2, [pc, #120]	@ (8006510 <_nx_driver_initialize+0xbc>)
 8006498:	6013      	str	r3, [r2, #0]

    /* Setup the link maximum transfer unit. */
    interface_ptr -> nx_interface_ip_mtu_size =  NX_DRIVER_ETHERNET_MTU - NX_DRIVER_ETHERNET_FRAME_SIZE;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80064a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the physical address of this IP instance.  Increment the
    physical address lsw to simulate multiple nodes hanging on the
    ethernet.  */
    interface_ptr -> nx_interface_physical_address_msw =
      (ULONG)(( eth_handle.Init.MACAddr[0] << 8) | ( eth_handle.Init.MACAddr[1]));
 80064a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006514 <_nx_driver_initialize+0xc0>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	021b      	lsls	r3, r3, #8
 80064aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006514 <_nx_driver_initialize+0xc0>)
 80064ac:	6852      	ldr	r2, [r2, #4]
 80064ae:	3201      	adds	r2, #1
 80064b0:	7812      	ldrb	r2, [r2, #0]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_msw =
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	60da      	str	r2, [r3, #12]
    interface_ptr -> nx_interface_physical_address_lsw =
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80064ba:	4b16      	ldr	r3, [pc, #88]	@ (8006514 <_nx_driver_initialize+0xc0>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	3302      	adds	r3, #2
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	061a      	lsls	r2, r3, #24
 80064c4:	4b13      	ldr	r3, [pc, #76]	@ (8006514 <_nx_driver_initialize+0xc0>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	3303      	adds	r3, #3
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	041b      	lsls	r3, r3, #16
 80064ce:	431a      	orrs	r2, r3
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 80064d0:	4b10      	ldr	r3, [pc, #64]	@ (8006514 <_nx_driver_initialize+0xc0>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	3304      	adds	r3, #4
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	021b      	lsls	r3, r3, #8
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80064da:	4313      	orrs	r3, r2
              ( eth_handle.Init.MACAddr[4] << 8) | ( eth_handle.Init.MACAddr[5]));
 80064dc:	4a0d      	ldr	r2, [pc, #52]	@ (8006514 <_nx_driver_initialize+0xc0>)
 80064de:	6852      	ldr	r2, [r2, #4]
 80064e0:	3205      	adds	r2, #5
 80064e2:	7812      	ldrb	r2, [r2, #0]
 80064e4:	4313      	orrs	r3, r2
      (ULONG)(( eth_handle.Init.MACAddr[2] << 24) | ( eth_handle.Init.MACAddr[3] << 16) |
 80064e6:	461a      	mov	r2, r3
    interface_ptr -> nx_interface_physical_address_lsw =
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	611a      	str	r2, [r3, #16]

    /* Indicate to the IP software that IP to physical mapping
    is required.  */
    interface_ptr -> nx_interface_address_mapping_needed =  NX_TRUE;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2201      	movs	r2, #1
 80064f0:	715a      	strb	r2, [r3, #5]

    /* Move the driver's state to initialized.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_INITIALIZED;
 80064f2:	4b07      	ldr	r3, [pc, #28]	@ (8006510 <_nx_driver_initialize+0xbc>)
 80064f4:	2203      	movs	r2, #3
 80064f6:	605a      	str	r2, [r3, #4]

    /* Indicate successful initialize.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	605a      	str	r2, [r3, #4]
  {

    /* Initialization failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
  }
}
 80064fe:	e002      	b.n	8006506 <_nx_driver_initialize+0xb2>
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	225a      	movs	r2, #90	@ 0x5a
 8006504:	605a      	str	r2, [r3, #4]
}
 8006506:	bf00      	nop
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	2000ad00 	.word	0x2000ad00
 8006514:	20007ef4 	.word	0x20007ef4

08006518 <_nx_driver_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b0a0      	sub	sp, #128	@ 0x80
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]

  NX_IP           *ip_ptr;
  ETH_MACConfigTypeDef MACConf;
  UINT            status, duplex, speed = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	67bb      	str	r3, [r7, #120]	@ 0x78
  INT             PHYLinkState;

  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	677b      	str	r3, [r7, #116]	@ 0x74

  /* See if we can honor the NX_LINK_ENABLE request.  */
  if (nx_driver_information.nx_driver_information_state < NX_DRIVER_STATE_INITIALIZED)
 800652a:	4b3d      	ldr	r3, [pc, #244]	@ (8006620 <_nx_driver_enable+0x108>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d803      	bhi.n	800653a <_nx_driver_enable+0x22>
  {

    /* Mark the request as not successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	225a      	movs	r2, #90	@ 0x5a
 8006536:	605a      	str	r2, [r3, #4]
    return;
 8006538:	e06e      	b.n	8006618 <_nx_driver_enable+0x100>
  }

  /* Check if it is enabled by someone already */
  if (nx_driver_information.nx_driver_information_state >=  NX_DRIVER_STATE_LINK_ENABLED)
 800653a:	4b39      	ldr	r3, [pc, #228]	@ (8006620 <_nx_driver_enable+0x108>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b03      	cmp	r3, #3
 8006540:	d903      	bls.n	800654a <_nx_driver_enable+0x32>
  {

    /* Yes, the request has already been made.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_ALREADY_ENABLED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2215      	movs	r2, #21
 8006546:	605a      	str	r2, [r3, #4]
    return;
 8006548:	e066      	b.n	8006618 <_nx_driver_enable+0x100>
  }

  if (nx_eth_phy_init() != ETH_PHY_STATUS_OK)
 800654a:	f000 fcab 	bl	8006ea4 <nx_eth_phy_init>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <_nx_driver_enable+0x44>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	225a      	movs	r2, #90	@ 0x5a
 8006558:	605a      	str	r2, [r3, #4]
    return;
 800655a:	e05d      	b.n	8006618 <_nx_driver_enable+0x100>
  }

  PHYLinkState = nx_eth_phy_get_link_state();
 800655c:	f000 fcbe 	bl	8006edc <nx_eth_phy_get_link_state>
 8006560:	6738      	str	r0, [r7, #112]	@ 0x70

  /* Get link state */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8006562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006564:	2b01      	cmp	r3, #1
 8006566:	dc03      	bgt.n	8006570 <_nx_driver_enable+0x58>
  {
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	225a      	movs	r2, #90	@ 0x5a
 800656c:	605a      	str	r2, [r3, #4]
    return;
 800656e:	e053      	b.n	8006618 <_nx_driver_enable+0x100>
  }
  else
  {
    switch (PHYLinkState)
 8006570:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006572:	3b02      	subs	r3, #2
 8006574:	2b03      	cmp	r3, #3
 8006576:	d823      	bhi.n	80065c0 <_nx_driver_enable+0xa8>
 8006578:	a201      	add	r2, pc, #4	@ (adr r2, 8006580 <_nx_driver_enable+0x68>)
 800657a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657e:	bf00      	nop
 8006580:	08006591 	.word	0x08006591
 8006584:	0800659f 	.word	0x0800659f
 8006588:	080065ab 	.word	0x080065ab
 800658c:	080065b7 	.word	0x080065b7
    {
    case ETH_PHY_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006590:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006594:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_100M;
 8006596:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800659a:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 800659c:	e017      	b.n	80065ce <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800659e:	2300      	movs	r3, #0
 80065a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_100M;
 80065a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 80065a8:	e011      	b.n	80065ce <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80065aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_10M;
 80065b0:	2300      	movs	r3, #0
 80065b2:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 80065b4:	e00b      	b.n	80065ce <_nx_driver_enable+0xb6>
    case ETH_PHY_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_10M;
 80065ba:	2300      	movs	r3, #0
 80065bc:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 80065be:	e006      	b.n	80065ce <_nx_driver_enable+0xb6>
    default:
      duplex = ETH_FULLDUPLEX_MODE;
 80065c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      speed = ETH_SPEED_100M;
 80065c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80065ca:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 80065cc:	bf00      	nop
    }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&eth_handle, &MACConf);
 80065ce:	f107 0308 	add.w	r3, r7, #8
 80065d2:	4619      	mov	r1, r3
 80065d4:	4813      	ldr	r0, [pc, #76]	@ (8006624 <_nx_driver_enable+0x10c>)
 80065d6:	f7fc fd4b 	bl	8003070 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80065da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065dc:	623b      	str	r3, [r7, #32]
    MACConf.Speed = speed;
 80065de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065e0:	61fb      	str	r3, [r7, #28]
    HAL_ETH_SetMACConfig(&eth_handle, &MACConf);
 80065e2:	f107 0308 	add.w	r3, r7, #8
 80065e6:	4619      	mov	r1, r3
 80065e8:	480e      	ldr	r0, [pc, #56]	@ (8006624 <_nx_driver_enable+0x10c>)
 80065ea:	f7fc fe2b 	bl	8003244 <HAL_ETH_SetMACConfig>
  }

  /* Call hardware specific enable.  */
  status =  _nx_driver_hardware_enable(driver_req_ptr);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa86 	bl	8006b00 <_nx_driver_hardware_enable>
 80065f4:	66f8      	str	r0, [r7, #108]	@ 0x6c

  /* Was the hardware enable successful?  */
  if (status == NX_SUCCESS)
 80065f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <_nx_driver_enable+0xfa>
  {

    /* Update the driver state to link enabled.  */
    nx_driver_information.nx_driver_information_state = NX_DRIVER_STATE_LINK_ENABLED;
 80065fc:	4b08      	ldr	r3, [pc, #32]	@ (8006620 <_nx_driver_enable+0x108>)
 80065fe:	2204      	movs	r2, #4
 8006600:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	605a      	str	r2, [r3, #4]

    /* Mark the IP instance as link up.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_TRUE;
 8006608:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800660a:	2201      	movs	r2, #1
 800660c:	f883 272a 	strb.w	r2, [r3, #1834]	@ 0x72a
 8006610:	e002      	b.n	8006618 <_nx_driver_enable+0x100>
  }
  else
  {

    /* Enable failed.  Indicate that the request failed.  */
    driver_req_ptr -> nx_ip_driver_status =   NX_DRIVER_ERROR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	225a      	movs	r2, #90	@ 0x5a
 8006616:	605a      	str	r2, [r3, #4]
  }
}
 8006618:	3780      	adds	r7, #128	@ 0x80
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	2000ad00 	.word	0x2000ad00
 8006624:	20007ef4 	.word	0x20007ef4

08006628 <_nx_driver_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  NX_IP           *ip_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	60fb      	str	r3, [r7, #12]

  /* Check if the link is enabled.  */
  if (nx_driver_information.nx_driver_information_state !=  NX_DRIVER_STATE_LINK_ENABLED)
 8006636:	4b10      	ldr	r3, [pc, #64]	@ (8006678 <_nx_driver_disable+0x50>)
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b04      	cmp	r3, #4
 800663c:	d003      	beq.n	8006646 <_nx_driver_disable+0x1e>
  {

    /* The link is not enabled, so just return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	225a      	movs	r2, #90	@ 0x5a
 8006642:	605a      	str	r2, [r3, #4]
    return;
 8006644:	e014      	b.n	8006670 <_nx_driver_disable+0x48>
  }

  /* Call hardware specific disable.  */
  status =  _nx_driver_hardware_disable(driver_req_ptr);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fa68 	bl	8006b1c <_nx_driver_hardware_disable>
 800664c:	60b8      	str	r0, [r7, #8]

  /* Was the hardware disable successful?  */
  if (status == NX_SUCCESS)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <_nx_driver_disable+0x42>
  {

    /* Mark the IP instance as link down.  */
    ip_ptr -> nx_ip_driver_link_up =  NX_FALSE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 272a 	strb.w	r2, [r3, #1834]	@ 0x72a

    /* Update the driver state back to initialized.  */
    nx_driver_information.nx_driver_information_state =  NX_DRIVER_STATE_INITIALIZED;
 800665c:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <_nx_driver_disable+0x50>)
 800665e:	2203      	movs	r2, #3
 8006660:	605a      	str	r2, [r3, #4]

    /* Mark request as successful.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	e002      	b.n	8006670 <_nx_driver_disable+0x48>
  }
  else
  {

    /* Disable failed, return an error.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	225a      	movs	r2, #90	@ 0x5a
 800666e:	605a      	str	r2, [r3, #4]
  }
}
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	2000ad00 	.word	0x2000ad00

0800667c <_nx_driver_packet_send>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_packet_send(NX_IP_DRIVER *driver_req_ptr)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  ULONG           *ethernet_frame_ptr;
  UINT            status;


  /* Setup the IP pointer from the driver request.  */
  ip_ptr =  driver_req_ptr -> nx_ip_driver_ptr;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	617b      	str	r3, [r7, #20]

  /* Check to make sure the link is up.  */
  if (nx_driver_information.nx_driver_information_state != NX_DRIVER_STATE_LINK_ENABLED)
 800668a:	4b5c      	ldr	r3, [pc, #368]	@ (80067fc <_nx_driver_packet_send+0x180>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2b04      	cmp	r3, #4
 8006690:	d008      	beq.n	80066a4 <_nx_driver_packet_send+0x28>
  {

    /* Inidate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	225a      	movs	r2, #90	@ 0x5a
 8006696:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(driver_req_ptr -> nx_ip_driver_packet);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3310      	adds	r3, #16
 800669c:	4618      	mov	r0, r3
 800669e:	f008 ffcf 	bl	800f640 <_nxe_packet_transmit_release>
    return;
 80066a2:	e0a7      	b.n	80067f4 <_nx_driver_packet_send+0x178>
  }

  /* Process driver send packet.  */

  /* Place the ethernet frame at the front of the packet.  */
  packet_ptr =  driver_req_ptr -> nx_ip_driver_packet;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	60bb      	str	r3, [r7, #8]

  /* Adjust the prepend pointer.  */
  packet_ptr -> nx_packet_prepend_ptr =
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	689a      	ldr	r2, [r3, #8]
  packet_ptr -> nx_packet_prepend_ptr =
 80066ae:	68bb      	ldr	r3, [r7, #8]
    packet_ptr -> nx_packet_prepend_ptr - NX_DRIVER_ETHERNET_FRAME_SIZE;
 80066b0:	3a0e      	subs	r2, #14
  packet_ptr -> nx_packet_prepend_ptr =
 80066b2:	609a      	str	r2, [r3, #8]

  /* Adjust the packet length.  */
  packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + NX_DRIVER_ETHERNET_FRAME_SIZE;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	320e      	adds	r2, #14
 80066bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Setup the ethernet frame pointer to build the ethernet frame.  Backup another 2
  * bytes to get 32-bit word alignment.  */
  ethernet_frame_ptr =  (ULONG *) (packet_ptr -> nx_packet_prepend_ptr - 2);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	3b02      	subs	r3, #2
 80066c4:	613b      	str	r3, [r7, #16]

  /* Set up the hardware addresses in the Ethernet header. */
  *ethernet_frame_ptr       =  driver_req_ptr -> nx_ip_driver_physical_address_msw;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 1) =  driver_req_ptr -> nx_ip_driver_physical_address_lsw;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3304      	adds	r3, #4
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68d2      	ldr	r2, [r2, #12]
 80066d6:	601a      	str	r2, [r3, #0]

  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f8d3 3730 	ldr.w	r3, [r3, #1840]	@ 0x730
 80066de:	0419      	lsls	r1, r3, #16
    (ip_ptr -> nx_ip_arp_physical_address_lsw >> 16);
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f8d3 3734 	ldr.w	r3, [r3, #1844]	@ 0x734
 80066e6:	0c1a      	lsrs	r2, r3, #16
  *(ethernet_frame_ptr + 2) =  (ip_ptr -> nx_ip_arp_physical_address_msw << 16) |
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	3308      	adds	r3, #8
 80066ec:	430a      	orrs	r2, r1
 80066ee:	601a      	str	r2, [r3, #0]
  *(ethernet_frame_ptr + 3) =  (ip_ptr -> nx_ip_arp_physical_address_lsw << 16);
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f8d3 2734 	ldr.w	r2, [r3, #1844]	@ 0x734
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	330c      	adds	r3, #12
 80066fa:	0412      	lsls	r2, r2, #16
 80066fc:	601a      	str	r2, [r3, #0]

  /* Set up the frame type field in the Ethernet harder. */
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2b05      	cmp	r3, #5
 8006704:	d003      	beq.n	800670e <_nx_driver_packet_send+0x92>
      (driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_RESPONSE_SEND))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
  if ((driver_req_ptr -> nx_ip_driver_command == NX_LINK_ARP_SEND)||
 800670a:	2b06      	cmp	r3, #6
 800670c:	d10a      	bne.n	8006724 <_nx_driver_packet_send+0xa8>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_ARP;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	330c      	adds	r3, #12
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	320c      	adds	r2, #12
 8006718:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800671c:	f043 0306 	orr.w	r3, r3, #6
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	e016      	b.n	8006752 <_nx_driver_packet_send+0xd6>
  }
  else if(driver_req_ptr -> nx_ip_driver_command == NX_LINK_RARP_SEND)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b07      	cmp	r3, #7
 800672a:	d10a      	bne.n	8006742 <_nx_driver_packet_send+0xc6>
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_RARP;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	330c      	adds	r3, #12
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	320c      	adds	r2, #12
 8006736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800673a:	f043 0335 	orr.w	r3, r3, #53	@ 0x35
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	e007      	b.n	8006752 <_nx_driver_packet_send+0xd6>
#endif /* FEATURE_NX_IPV6 */

  else
  {

    *(ethernet_frame_ptr + 3) |= NX_DRIVER_ETHERNET_IP;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	330c      	adds	r3, #12
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	330c      	adds	r3, #12
 800674c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006750:	601a      	str	r2, [r3, #0]
  }

  /* Endian swapping if NX_LITTLE_ENDIAN is defined.  */
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr));
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	ba1a      	rev	r2, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 1));
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	3304      	adds	r3, #4
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	3304      	adds	r3, #4
 8006766:	ba12      	rev	r2, r2
 8006768:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 2));
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	3308      	adds	r3, #8
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	3308      	adds	r3, #8
 8006774:	ba12      	rev	r2, r2
 8006776:	601a      	str	r2, [r3, #0]
  NX_CHANGE_ULONG_ENDIAN(*(ethernet_frame_ptr + 3));
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	330c      	adds	r3, #12
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	330c      	adds	r3, #12
 8006782:	ba12      	rev	r2, r2
 8006784:	601a      	str	r2, [r3, #0]

  /* Determine if the packet exceeds the driver's MTU.  */
  if (packet_ptr -> nx_packet_length > NX_DRIVER_ETHERNET_MTU)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 800678e:	4293      	cmp	r3, r2
 8006790:	d912      	bls.n	80067b8 <_nx_driver_packet_send+0x13c>
  {

    /* This packet exceeds the size of the driver's MTU. Simply throw it away! */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	320e      	adds	r2, #14
 800679a:	609a      	str	r2, [r3, #8]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	3a0e      	subs	r2, #14
 80067a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	225a      	movs	r2, #90	@ 0x5a
 80067aa:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 80067ac:	f107 0308 	add.w	r3, r7, #8
 80067b0:	4618      	mov	r0, r3
 80067b2:	f008 ff45 	bl	800f640 <_nxe_packet_transmit_release>
    return;
 80067b6:	e01d      	b.n	80067f4 <_nx_driver_packet_send+0x178>
  }

  /* Transmit the packet through the Ethernet controller low level access routine. */
  status = _nx_driver_hardware_packet_send(packet_ptr);
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f9bc 	bl	8006b38 <_nx_driver_hardware_packet_send>
 80067c0:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d012      	beq.n	80067ee <_nx_driver_packet_send+0x172>
  {

    /* Driver's hardware send packet routine failed to send the packet.  */

    /* Remove the Ethernet header.  */
    NX_DRIVER_ETHERNET_HEADER_REMOVE(packet_ptr);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	320e      	adds	r2, #14
 80067d0:	609a      	str	r2, [r3, #8]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	3a0e      	subs	r2, #14
 80067da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Indicate an unsuccessful packet send.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	225a      	movs	r2, #90	@ 0x5a
 80067e0:	605a      	str	r2, [r3, #4]

    /* Link is not up, simply free the packet.  */
    nx_packet_transmit_release(packet_ptr);
 80067e2:	f107 0308 	add.w	r3, r7, #8
 80067e6:	4618      	mov	r0, r3
 80067e8:	f008 ff2a 	bl	800f640 <_nxe_packet_transmit_release>
 80067ec:	e002      	b.n	80067f4 <_nx_driver_packet_send+0x178>
  }
  else
  {

    /* Set the status of the request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	605a      	str	r2, [r3, #4]
  }
}
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	2000ad00 	.word	0x2000ad00

08006800 <_nx_driver_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast join function. */
  status =  _nx_driver_hardware_multicast_join(driver_req_ptr);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fa2d 	bl	8006c68 <_nx_driver_hardware_multicast_join>
 800680e:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d003      	beq.n	800681e <_nx_driver_multicast_join+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	225a      	movs	r2, #90	@ 0x5a
 800681a:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 800681c:	e002      	b.n	8006824 <_nx_driver_multicast_join+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	605a      	str	r2, [r3, #4]
}
 8006824:	bf00      	nop
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <_nx_driver_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific multicast leave function. */
  status =  _nx_driver_hardware_multicast_leave(driver_req_ptr);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fa33 	bl	8006ca0 <_nx_driver_hardware_multicast_leave>
 800683a:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <_nx_driver_multicast_leave+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	225a      	movs	r2, #90	@ 0x5a
 8006846:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8006848:	e002      	b.n	8006850 <_nx_driver_multicast_leave+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	605a      	str	r2, [r3, #4]
}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <_nx_driver_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_get_status(driver_req_ptr);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fa3d 	bl	8006ce0 <_nx_driver_hardware_get_status>
 8006866:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <_nx_driver_get_status+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	225a      	movs	r2, #90	@ 0x5a
 8006872:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 8006874:	e002      	b.n	800687c <_nx_driver_get_status+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	605a      	str	r2, [r3, #4]
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <_nx_driver_capability_get>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_get(NX_IP_DRIVER *driver_req_ptr)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

  /* Return the capability of the Ethernet controller.  */
  *(driver_req_ptr -> nx_ip_driver_return_ptr) = NX_DRIVER_CAPABILITY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006894:	601a      	str	r2, [r3, #0]

  /* Return the success status.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	605a      	str	r2, [r3, #4]
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <_nx_driver_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]

  UINT        status;


  /* Call hardware specific get status function. */
  status =  _nx_driver_hardware_capability_set(driver_req_ptr);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fab3 	bl	8006e1c <_nx_driver_hardware_capability_set>
 80068b6:	60f8      	str	r0, [r7, #12]

  /* Determine if there was an error.  */
  if (status != NX_SUCCESS)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <_nx_driver_capability_set+0x1e>
  {

    /* Indicate an unsuccessful request.  */
    driver_req_ptr -> nx_ip_driver_status =  NX_DRIVER_ERROR;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	225a      	movs	r2, #90	@ 0x5a
 80068c2:	605a      	str	r2, [r3, #4]
  {

    /* Indicate the request was successful.   */
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
  }
}
 80068c4:	e002      	b.n	80068cc <_nx_driver_capability_set+0x24>
    driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	605a      	str	r2, [r3, #4]
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <_nx_driver_deferred_processing>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_driver_deferred_processing(NX_IP_DRIVER *driver_req_ptr)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80068dc:	f3ef 8310 	mrs	r3, PRIMASK
 80068e0:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 80068e2:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80068e4:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80068e6:	b672      	cpsid	i
#endif
    return(int_posture);
 80068e8:	68fb      	ldr	r3, [r7, #12]

    ULONG       deferred_events;


  /* Disable interrupts.  */
  TX_DISABLE
 80068ea:	61fb      	str	r3, [r7, #28]

    /* Pickup deferred events.  */
    deferred_events =  nx_driver_information.nx_driver_information_deferred_events;
 80068ec:	4b10      	ldr	r3, [pc, #64]	@ (8006930 <_nx_driver_deferred_processing+0x5c>)
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	61bb      	str	r3, [r7, #24]
  nx_driver_information.nx_driver_information_deferred_events =  0;
 80068f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006930 <_nx_driver_deferred_processing+0x5c>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	611a      	str	r2, [r3, #16]
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f383 8810 	msr	PRIMASK, r3
}
 8006902:	bf00      	nop

  /* Restore interrupts.  */
  TX_RESTORE
    /* Check for a transmit complete event.  */
    if(deferred_events & NX_DRIVER_DEFERRED_PACKET_TRANSMITTED)
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b00      	cmp	r3, #0
 800690c:	d002      	beq.n	8006914 <_nx_driver_deferred_processing+0x40>
    {

      /* Process transmitted packet(s).  */
      HAL_ETH_ReleaseTxPacket(&eth_handle);
 800690e:	4809      	ldr	r0, [pc, #36]	@ (8006934 <_nx_driver_deferred_processing+0x60>)
 8006910:	f7fc f9de 	bl	8002cd0 <HAL_ETH_ReleaseTxPacket>
    }
  /* Check for received packet.  */
  if(deferred_events & NX_DRIVER_DEFERRED_PACKET_RECEIVED)
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <_nx_driver_deferred_processing+0x4e>
  {

    /* Process received packet(s).  */
    _nx_driver_hardware_packet_received();
 800691e:	f000 fa11 	bl	8006d44 <_nx_driver_hardware_packet_received>
  }

  /* Mark request as successful.  */
  driver_req_ptr->nx_ip_driver_status =  NX_SUCCESS;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	605a      	str	r2, [r3, #4]
}
 8006928:	bf00      	nop
 800692a:	3720      	adds	r7, #32
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	2000ad00 	.word	0x2000ad00
 8006934:	20007ef4 	.word	0x20007ef4

08006938 <_nx_driver_transfer_to_netx>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID _nx_driver_transfer_to_netx(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]

  USHORT    packet_type;


  /* Set the interface for the incoming packet.  */
  packet_ptr -> nx_packet_ip_interface = nx_driver_information.nx_driver_information_interface;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	4a2c      	ldr	r2, [pc, #176]	@ (80069f8 <_nx_driver_transfer_to_netx+0xc0>)
 8006946:	68d2      	ldr	r2, [r2, #12]
 8006948:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Pickup the packet header to determine where the packet needs to be
  sent.  */
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	330c      	adds	r3, #12
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	b29b      	uxth	r3, r3
    ((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+13)));
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	6892      	ldr	r2, [r2, #8]
 800695a:	320d      	adds	r2, #13
 800695c:	7812      	ldrb	r2, [r2, #0]
  packet_type =  (USHORT)(((UINT) (*(packet_ptr -> nx_packet_prepend_ptr+12))) << 8) |
 800695e:	4313      	orrs	r3, r2
 8006960:	81fb      	strh	r3, [r7, #14]

  /* Route the incoming packet according to its ethernet type.  */
  if (packet_type == NX_DRIVER_ETHERNET_IP || packet_type == NX_DRIVER_ETHERNET_IPV6)
 8006962:	89fb      	ldrh	r3, [r7, #14]
 8006964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006968:	d004      	beq.n	8006974 <_nx_driver_transfer_to_netx+0x3c>
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 8006970:	4293      	cmp	r3, r2
 8006972:	d10f      	bne.n	8006994 <_nx_driver_transfer_to_netx+0x5c>
    cases, the actual packet length after the Ethernet header should
    be derived from the length in the IP header (lower 16 bits of
    the first 32-bit word).  */

    /* Clean off the Ethernet header.  */
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	320e      	adds	r2, #14
 800697c:	609a      	str	r2, [r3, #8]

    /* Adjust the packet length.  */
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	3a0e      	subs	r2, #14
 8006986:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Route to the ip receive function.  */
    _nx_ip_packet_deferred_receive(ip_ptr, packet_ptr);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f005 fa47 	bl	800be20 <_nx_ip_packet_deferred_receive>
  else
  {
    /* Invalid ethernet header... release the packet.  */
    nx_packet_release(packet_ptr);
  }
}
 8006992:	e02d      	b.n	80069f0 <_nx_driver_transfer_to_netx+0xb8>
  else if (packet_type == NX_DRIVER_ETHERNET_ARP)
 8006994:	89fb      	ldrh	r3, [r7, #14]
 8006996:	f640 0206 	movw	r2, #2054	@ 0x806
 800699a:	4293      	cmp	r3, r2
 800699c:	d10f      	bne.n	80069be <_nx_driver_transfer_to_netx+0x86>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	320e      	adds	r2, #14
 80069a6:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	3a0e      	subs	r2, #14
 80069b0:	625a      	str	r2, [r3, #36]	@ 0x24
    _nx_arp_packet_deferred_receive(ip_ptr, packet_ptr);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f002 fe43 	bl	8009642 <_nx_arp_packet_deferred_receive>
}
 80069bc:	e018      	b.n	80069f0 <_nx_driver_transfer_to_netx+0xb8>
  else if (packet_type == NX_DRIVER_ETHERNET_RARP)
 80069be:	89fb      	ldrh	r3, [r7, #14]
 80069c0:	f248 0235 	movw	r2, #32821	@ 0x8035
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10f      	bne.n	80069e8 <_nx_driver_transfer_to_netx+0xb0>
    packet_ptr -> nx_packet_prepend_ptr += NX_DRIVER_ETHERNET_FRAME_SIZE;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	320e      	adds	r2, #14
 80069d0:	609a      	str	r2, [r3, #8]
    packet_ptr -> nx_packet_length -= NX_DRIVER_ETHERNET_FRAME_SIZE;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	3a0e      	subs	r2, #14
 80069da:	625a      	str	r2, [r3, #36]	@ 0x24
    _nx_rarp_packet_deferred_receive(ip_ptr, packet_ptr);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f006 ff71 	bl	800d8c8 <_nx_rarp_packet_deferred_receive>
}
 80069e6:	e003      	b.n	80069f0 <_nx_driver_transfer_to_netx+0xb8>
    nx_packet_release(packet_ptr);
 80069e8:	463b      	mov	r3, r7
 80069ea:	4618      	mov	r0, r3
 80069ec:	f008 fdf0 	bl	800f5d0 <_nxe_packet_release>
}
 80069f0:	bf00      	nop
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	2000ad00 	.word	0x2000ad00

080069fc <_nx_driver_hardware_initialize>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_initialize(NX_IP_DRIVER *driver_req_ptr)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08e      	sub	sp, #56	@ 0x38
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

  /* Default to successful return.  */
  driver_req_ptr -> nx_ip_driver_status =  NX_SUCCESS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	605a      	str	r2, [r3, #4]

  /* Setup indices.  */
  nx_driver_information.nx_driver_information_receive_current_index = 0;
 8006a0a:	4b39      	ldr	r3, [pc, #228]	@ (8006af0 <_nx_driver_hardware_initialize+0xf4>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	615a      	str	r2, [r3, #20]
  nx_driver_information.nx_driver_information_transmit_current_index = 0;
 8006a10:	4b37      	ldr	r3, [pc, #220]	@ (8006af0 <_nx_driver_hardware_initialize+0xf4>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	619a      	str	r2, [r3, #24]
  nx_driver_information.nx_driver_information_transmit_release_index = 0;
 8006a16:	4b36      	ldr	r3, [pc, #216]	@ (8006af0 <_nx_driver_hardware_initialize+0xf4>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	61da      	str	r2, [r3, #28]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_number_of_transmit_buffers_in_use = 0;
 8006a1c:	4b34      	ldr	r3, [pc, #208]	@ (8006af0 <_nx_driver_hardware_initialize+0xf4>)
 8006a1e:	2200      	movs	r2, #0
 8006a20:	621a      	str	r2, [r3, #32]

  /* Make sure there are receive packets... otherwise, return an error.  */
  if (nx_driver_information.nx_driver_information_packet_pool_ptr == NULL)
 8006a22:	4b33      	ldr	r3, [pc, #204]	@ (8006af0 <_nx_driver_hardware_initialize+0xf4>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <_nx_driver_hardware_initialize+0x32>
  {

    /* There must be receive packets. If not, return an error!  */
    return(NX_DRIVER_ERROR);
 8006a2a:	235a      	movs	r3, #90	@ 0x5a
 8006a2c:	e05b      	b.n	8006ae6 <_nx_driver_hardware_initialize+0xea>
#ifdef NX_DRIVER_ETH_HW_IP_INIT
  nx_eth_init();
#endif /* NX_DRIVER_ETH_HW_IP_INIT */

  ETH_DMAConfigTypeDef dmaDefaultConf;
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006a32:	2301      	movs	r3, #1
 8006a34:	743b      	strb	r3, [r7, #16]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006a36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a3a:	617b      	str	r3, [r7, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006a3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a40:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006a42:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  dmaDefaultConf.SecondPacketOperate = ENABLE;
  dmaDefaultConf.TCPSegmentation = DISABLE;
  dmaDefaultConf.MaximumSegmentSize = 536;
#endif
#ifdef STM32_ETH_HAL_LEGACY
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	763b      	strb	r3, [r7, #24]
  dmaDefaultConf.ReceiveStoreForward =  DISABLE;
 8006a52:	2300      	movs	r3, #0
 8006a54:	767b      	strb	r3, [r7, #25]
  dmaDefaultConf.TransmitStoreForward =  ENABLE;
 8006a56:	2301      	movs	r3, #1
 8006a58:	76bb      	strb	r3, [r7, #26]
  dmaDefaultConf.TransmitThresholdControl =  ENABLE;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.ForwardErrorFrames =  DISABLE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.ReceiveThresholdControl =  DISABLE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.SecondFrameOperate =  DISABLE;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.EnhancedDescriptorFormat =  DISABLE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  dmaDefaultConf.DescriptorSkipLength =  DISABLE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
  /* enable OSF bit to enhance throughput */
  HAL_ETH_SetDMAConfig(&eth_handle, &dmaDefaultConf);
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	481d      	ldr	r0, [pc, #116]	@ (8006af4 <_nx_driver_hardware_initialize+0xf8>)
 8006a80:	f7fc fbfa 	bl	8003278 <HAL_ETH_SetDMAConfig>

  FilterConfig.PromiscuousMode = DISABLE;
 8006a84:	4b1c      	ldr	r3, [pc, #112]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	701a      	strb	r2, [r3, #0]
  FilterConfig.HashUnicast = DISABLE;
 8006a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	70da      	strb	r2, [r3, #3]
  FilterConfig.HashMulticast = DISABLE;
 8006a90:	4b19      	ldr	r3, [pc, #100]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	711a      	strb	r2, [r3, #4]
  FilterConfig.DestAddrInverseFiltering = DISABLE;
 8006a96:	4b18      	ldr	r3, [pc, #96]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	721a      	strb	r2, [r3, #8]
  FilterConfig.PassAllMulticast = DISABLE;
 8006a9c:	4b16      	ldr	r3, [pc, #88]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	715a      	strb	r2, [r3, #5]
  FilterConfig.BroadcastFilter = ENABLE;
 8006aa2:	4b15      	ldr	r3, [pc, #84]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	725a      	strb	r2, [r3, #9]
  FilterConfig.SrcAddrInverseFiltering = DISABLE;
 8006aa8:	4b13      	ldr	r3, [pc, #76]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	71da      	strb	r2, [r3, #7]
  FilterConfig.SrcAddrFiltering = DISABLE;
 8006aae:	4b12      	ldr	r3, [pc, #72]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	719a      	strb	r2, [r3, #6]
  FilterConfig.HachOrPerfectFilter = DISABLE;
 8006ab4:	4b10      	ldr	r3, [pc, #64]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	709a      	strb	r2, [r3, #2]
  FilterConfig.ReceiveAllMode = DISABLE;
 8006aba:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	705a      	strb	r2, [r3, #1]
  FilterConfig.ControlPacketsFilter = 0x00;
 8006ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8006af8 <_nx_driver_hardware_initialize+0xfc>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	60da      	str	r2, [r3, #12]

  /* Set Tx packet config common parameters */
  memset(&TxPacketCfg, 0, sizeof(ETH_TxPacketConfig));
 8006ac6:	2238      	movs	r2, #56	@ 0x38
 8006ac8:	2100      	movs	r1, #0
 8006aca:	480c      	ldr	r0, [pc, #48]	@ (8006afc <_nx_driver_hardware_initialize+0x100>)
 8006acc:	f00d fc54 	bl	8014378 <memset>
  TxPacketCfg.Attributes = ETH_TX_PACKETS_FEATURES_CSUM ;
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <_nx_driver_hardware_initialize+0x100>)
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
  TxPacketCfg.CRCPadCtrl = ETH_CRC_PAD_DISABLE;
 8006ad6:	4b09      	ldr	r3, [pc, #36]	@ (8006afc <_nx_driver_hardware_initialize+0x100>)
 8006ad8:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8006adc:	611a      	str	r2, [r3, #16]

  /* Clear the number of buffers in use counter.  */
  nx_driver_information.nx_driver_information_multicast_count = 0;
 8006ade:	4b04      	ldr	r3, [pc, #16]	@ (8006af0 <_nx_driver_hardware_initialize+0xf4>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Return success!  */
  return(NX_SUCCESS);
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3738      	adds	r7, #56	@ 0x38
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2000ad00 	.word	0x2000ad00
 8006af4:	20007ef4 	.word	0x20007ef4
 8006af8:	2000ad84 	.word	0x2000ad84
 8006afc:	2000ad4c 	.word	0x2000ad4c

08006b00 <_nx_driver_hardware_enable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_enable(NX_IP_DRIVER *driver_req_ptr)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  /* Call STM32 library to start Ethernet operation.  */
  HAL_ETH_Start_IT(&eth_handle);
 8006b08:	4803      	ldr	r0, [pc, #12]	@ (8006b18 <_nx_driver_hardware_enable+0x18>)
 8006b0a:	f7fb fe5b 	bl	80027c4 <HAL_ETH_Start_IT>

  /* Return success!  */
  return(NX_SUCCESS);
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20007ef4 	.word	0x20007ef4

08006b1c <_nx_driver_hardware_disable>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_disable(NX_IP_DRIVER *driver_req_ptr)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]

  HAL_ETH_Stop(&eth_handle);
 8006b24:	4803      	ldr	r0, [pc, #12]	@ (8006b34 <_nx_driver_hardware_disable+0x18>)
 8006b26:	f7fb fedb 	bl	80028e0 <HAL_ETH_Stop>

  /* Return success!  */
  return(NX_SUCCESS);
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20007ef4 	.word	0x20007ef4

08006b38 <_nx_driver_hardware_packet_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/

static UINT  _nx_driver_hardware_packet_send(NX_PACKET *packet_ptr)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b092      	sub	sp, #72	@ 0x48
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

  NX_PACKET       *pktIdx;
  UINT            buffLen = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	643b      	str	r3, [r7, #64]	@ 0x40

  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	2230      	movs	r2, #48	@ 0x30
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f00d fc13 	bl	8014378 <memset>


  int i = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b5a:	e050      	b.n	8006bfe <_nx_driver_hardware_packet_send+0xc6>
  {
    if (i >= ETH_TX_DESC_CNT)
 8006b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d901      	bls.n	8006b66 <_nx_driver_hardware_packet_send+0x2e>
    {
      return NX_DRIVER_ERROR;
 8006b62:	235a      	movs	r3, #90	@ 0x5a
 8006b64:	e077      	b.n	8006c56 <_nx_driver_hardware_packet_send+0x11e>
    }

    Txbuffer[i].buffer = pktIdx->nx_packet_prepend_ptr;
 8006b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b68:	6899      	ldr	r1, [r3, #8]
 8006b6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	3348      	adds	r3, #72	@ 0x48
 8006b76:	443b      	add	r3, r7
 8006b78:	3b3c      	subs	r3, #60	@ 0x3c
 8006b7a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8006b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	4619      	mov	r1, r3
 8006b88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	3348      	adds	r3, #72	@ 0x48
 8006b94:	443b      	add	r3, r7
 8006b96:	3b38      	subs	r3, #56	@ 0x38
 8006b98:	6019      	str	r1, [r3, #0]
    buffLen += (pktIdx -> nx_packet_append_ptr - pktIdx->nx_packet_prepend_ptr);
 8006b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ba8:	4413      	add	r3, r2
 8006baa:	643b      	str	r3, [r7, #64]	@ 0x40

    if(i>0)
 8006bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dd11      	ble.n	8006bd6 <_nx_driver_hardware_packet_send+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	f107 000c 	add.w	r0, r7, #12
 8006bba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	440b      	add	r3, r1
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	18c1      	adds	r1, r0, r3
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	3348      	adds	r3, #72	@ 0x48
 8006bd0:	443b      	add	r3, r7
 8006bd2:	3b34      	subs	r3, #52	@ 0x34
 8006bd4:	6019      	str	r1, [r3, #0]
    }

    if (pktIdx-> nx_packet_next ==NULL)
 8006bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d109      	bne.n	8006bf2 <_nx_driver_hardware_packet_send+0xba>
    {
      Txbuffer[i].next = NULL;
 8006bde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006be0:	4613      	mov	r3, r2
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	3348      	adds	r3, #72	@ 0x48
 8006bea:	443b      	add	r3, r7
 8006bec:	3b34      	subs	r3, #52	@ 0x34
 8006bee:	2200      	movs	r2, #0
 8006bf0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  for (pktIdx = packet_ptr;pktIdx != NX_NULL ; pktIdx = pktIdx -> nx_packet_next)
 8006bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1ab      	bne.n	8006b5c <_nx_driver_hardware_packet_send+0x24>
    SCB_CleanDCache_by_Addr((uint32_t*)(pktIdx -> nx_packet_data_start), pktIdx -> nx_packet_data_end - pktIdx -> nx_packet_data_start);
#endif
  }

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
  if (packet_ptr -> nx_packet_interface_capability_flag & (NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM |
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c08:	f403 7315 	and.w	r3, r3, #596	@ 0x254
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d004      	beq.n	8006c1a <_nx_driver_hardware_packet_send+0xe2>
                                                           NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM |
                                                             NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM |
                                                               NX_INTERFACE_CAPABILITY_ICMPV6_TX_CHECKSUM))
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006c10:	4b13      	ldr	r3, [pc, #76]	@ (8006c60 <_nx_driver_hardware_packet_send+0x128>)
 8006c12:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8006c16:	615a      	str	r2, [r3, #20]
 8006c18:	e009      	b.n	8006c2e <_nx_driver_hardware_packet_send+0xf6>
  }
  else if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <_nx_driver_hardware_packet_send+0xf6>
  {
    TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_IPHDR_INSERT;
 8006c26:	4b0e      	ldr	r3, [pc, #56]	@ (8006c60 <_nx_driver_hardware_packet_send+0x128>)
 8006c28:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8006c2c:	615a      	str	r2, [r3, #20]
  }
#else
  TxPacketCfg.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

  TxPacketCfg.Length = buffLen;
 8006c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006c60 <_nx_driver_hardware_packet_send+0x128>)
 8006c30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c32:	6053      	str	r3, [r2, #4]
  TxPacketCfg.TxBuffer = Txbuffer;
 8006c34:	4a0a      	ldr	r2, [pc, #40]	@ (8006c60 <_nx_driver_hardware_packet_send+0x128>)
 8006c36:	f107 030c 	add.w	r3, r7, #12
 8006c3a:	6093      	str	r3, [r2, #8]
  TxPacketCfg.pData = (uint32_t *)packet_ptr;
 8006c3c:	4a08      	ldr	r2, [pc, #32]	@ (8006c60 <_nx_driver_hardware_packet_send+0x128>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6353      	str	r3, [r2, #52]	@ 0x34

  if(HAL_ETH_Transmit_IT(&eth_handle, &TxPacketCfg))
 8006c42:	4907      	ldr	r1, [pc, #28]	@ (8006c60 <_nx_driver_hardware_packet_send+0x128>)
 8006c44:	4807      	ldr	r0, [pc, #28]	@ (8006c64 <_nx_driver_hardware_packet_send+0x12c>)
 8006c46:	f7fb fea4 	bl	8002992 <HAL_ETH_Transmit_IT>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <_nx_driver_hardware_packet_send+0x11c>
  {
    return(NX_DRIVER_ERROR);
 8006c50:	235a      	movs	r3, #90	@ 0x5a
 8006c52:	e000      	b.n	8006c56 <_nx_driver_hardware_packet_send+0x11e>
  }

  return(NX_SUCCESS);
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3748      	adds	r7, #72	@ 0x48
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	2000ad4c 	.word	0x2000ad4c
 8006c64:	20007ef4 	.word	0x20007ef4

08006c68 <_nx_driver_hardware_multicast_join>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_join(NX_IP_DRIVER *driver_req_ptr)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]


  /* Increase the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count++;
 8006c70:	4b08      	ldr	r3, [pc, #32]	@ (8006c94 <_nx_driver_hardware_multicast_join+0x2c>)
 8006c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c74:	3301      	adds	r3, #1
 8006c76:	4a07      	ldr	r2, [pc, #28]	@ (8006c94 <_nx_driver_hardware_multicast_join+0x2c>)
 8006c78:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Enable multicast frame reception.  */
  FilterConfig.PassAllMulticast = ENABLE;
 8006c7a:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <_nx_driver_hardware_multicast_join+0x30>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	715a      	strb	r2, [r3, #5]
  HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8006c80:	4905      	ldr	r1, [pc, #20]	@ (8006c98 <_nx_driver_hardware_multicast_join+0x30>)
 8006c82:	4806      	ldr	r0, [pc, #24]	@ (8006c9c <_nx_driver_hardware_multicast_join+0x34>)
 8006c84:	f7fc fb68 	bl	8003358 <HAL_ETH_SetMACFilterConfig>

  /* Return success.  */
  return(NX_SUCCESS);
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	2000ad00 	.word	0x2000ad00
 8006c98:	2000ad84 	.word	0x2000ad84
 8006c9c:	20007ef4 	.word	0x20007ef4

08006ca0 <_nx_driver_hardware_multicast_leave>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_multicast_leave(NX_IP_DRIVER *driver_req_ptr)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]

  /* Decrease the multicast count.  */
  nx_driver_information.nx_driver_information_multicast_count--;
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd4 <_nx_driver_hardware_multicast_leave+0x34>)
 8006caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cac:	3b01      	subs	r3, #1
 8006cae:	4a09      	ldr	r2, [pc, #36]	@ (8006cd4 <_nx_driver_hardware_multicast_leave+0x34>)
 8006cb0:	6493      	str	r3, [r2, #72]	@ 0x48

  /* If multicast count reaches zero, disable multicast frame reception.  */
  if (nx_driver_information.nx_driver_information_multicast_count == 0)
 8006cb2:	4b08      	ldr	r3, [pc, #32]	@ (8006cd4 <_nx_driver_hardware_multicast_leave+0x34>)
 8006cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d106      	bne.n	8006cc8 <_nx_driver_hardware_multicast_leave+0x28>
  {

    /* Disable multicast frame reception.  */
    FilterConfig.PassAllMulticast = DISABLE;
 8006cba:	4b07      	ldr	r3, [pc, #28]	@ (8006cd8 <_nx_driver_hardware_multicast_leave+0x38>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	715a      	strb	r2, [r3, #5]
    HAL_ETH_SetMACFilterConfig(&eth_handle, &FilterConfig);
 8006cc0:	4905      	ldr	r1, [pc, #20]	@ (8006cd8 <_nx_driver_hardware_multicast_leave+0x38>)
 8006cc2:	4806      	ldr	r0, [pc, #24]	@ (8006cdc <_nx_driver_hardware_multicast_leave+0x3c>)
 8006cc4:	f7fc fb48 	bl	8003358 <HAL_ETH_SetMACFilterConfig>
  }

  /* Return success.  */
  return(NX_SUCCESS);
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	2000ad00 	.word	0x2000ad00
 8006cd8:	2000ad84 	.word	0x2000ad84
 8006cdc:	20007ef4 	.word	0x20007ef4

08006ce0 <_nx_driver_hardware_get_status>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_driver_hardware_get_status(NX_IP_DRIVER *driver_req_ptr)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  INT PHYLinkState;

  /* Get link status. */
  PHYLinkState = nx_eth_phy_get_link_state();
 8006ce8:	f000 f8f8 	bl	8006edc <nx_eth_phy_get_link_state>
 8006cec:	60f8      	str	r0, [r7, #12]

  /* Check link status. */
  if(PHYLinkState <= ETH_PHY_STATUS_LINK_DOWN)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	dc04      	bgt.n	8006cfe <_nx_driver_hardware_get_status+0x1e>
  {
    /* Update Link status if phsical link is down. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_FALSE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e003      	b.n	8006d06 <_nx_driver_hardware_get_status+0x26>
  }
  else
  {
    /* Update Link status if phsical link is up. */
    *(driver_req_ptr->nx_ip_driver_return_ptr) = NX_TRUE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
  }

  /* Return success. */
  return NX_SUCCESS;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  NX_PACKET * release_packet = (NX_PACKET *) buff;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Remove the Ethernet header and release the packet.  */
  NX_DRIVER_ETHERNET_HEADER_REMOVE(release_packet);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	320e      	adds	r2, #14
 8006d24:	609a      	str	r2, [r3, #8]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3a0e      	subs	r2, #14
 8006d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Release the packet.  */
  nx_packet_transmit_release(release_packet);
 8006d30:	f107 030c 	add.w	r3, r7, #12
 8006d34:	4618      	mov	r0, r3
 8006d36:	f008 fc83 	bl	800f640 <_nxe_packet_transmit_release>
}
 8006d3a:	bf00      	nop
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <_nx_driver_hardware_packet_received>:

static VOID  _nx_driver_hardware_packet_received(VOID)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
  NX_PACKET  *received_packet_ptr;

  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 8006d4a:	e006      	b.n	8006d5a <_nx_driver_hardware_packet_received+0x16>
  {
      /* Transfer the packet to NetX.  */
      _nx_driver_transfer_to_netx(nx_driver_information.nx_driver_information_ip_ptr, received_packet_ptr);
 8006d4c:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <_nx_driver_hardware_packet_received+0x30>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff fdef 	bl	8006938 <_nx_driver_transfer_to_netx>
  while (HAL_ETH_ReadData(&eth_handle, (void **)&received_packet_ptr) == HAL_OK)
 8006d5a:	1d3b      	adds	r3, r7, #4
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	4806      	ldr	r0, [pc, #24]	@ (8006d78 <_nx_driver_hardware_packet_received+0x34>)
 8006d60:	f7fb fe73 	bl	8002a4a <HAL_ETH_ReadData>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <_nx_driver_hardware_packet_received+0x8>
  }
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	2000ad00 	.word	0x2000ad00
 8006d78:	20007ef4 	.word	0x20007ef4

08006d7c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t ** buff)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  NX_PACKET     *packet_ptr;
  if (nx_packet_allocate(nx_driver_information.nx_driver_information_packet_pool_ptr, &packet_ptr,
 8006d84:	4b0d      	ldr	r3, [pc, #52]	@ (8006dbc <HAL_ETH_RxAllocateCallback+0x40>)
 8006d86:	6898      	ldr	r0, [r3, #8]
 8006d88:	f107 010c 	add.w	r1, r7, #12
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f008 fa98 	bl	800f2c4 <_nxe_packet_allocate>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <HAL_ETH_RxAllocateCallback+0x32>
                         NX_RECEIVE_PACKET, NX_NO_WAIT) == NX_SUCCESS)
  {
    /* Adjust the packet.  */
    packet_ptr -> nx_packet_prepend_ptr += 2;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3202      	adds	r2, #2
 8006da2:	609a      	str	r2, [r3, #8]
#if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    SCB_InvalidateDCache_by_Addr((uint32_t*)packet_ptr -> nx_packet_data_start, packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_data_start);
#endif
    *buff = packet_ptr -> nx_packet_prepend_ptr;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	601a      	str	r2, [r3, #0]
  else
  {
    /* Rx Buffer Pool is exhausted. */
    *buff = NULL;
  }
}
 8006dac:	e002      	b.n	8006db4 <HAL_ETH_RxAllocateCallback+0x38>
    *buff = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	2000ad00 	.word	0x2000ad00

08006dc0 <HAL_ETH_RxLinkCallback>:
/*    HAL_ETH_ReadData              Read a received packet                */
/*                                                                        */
/**************************************************************************/

void HAL_ETH_RxLinkCallback(void **first_packet_ptr, void **last_packet_ptr, uint8_t *buff, uint16_t Length)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b089      	sub	sp, #36	@ 0x24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	807b      	strh	r3, [r7, #2]
  NX_PACKET **first_nx_packet_ptr = (NX_PACKET **)first_packet_ptr;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	61fb      	str	r3, [r7, #28]
  NX_PACKET **last_nx_packet_ptr = (NX_PACKET **)last_packet_ptr;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	61bb      	str	r3, [r7, #24]
  NX_PACKET  *received_packet_ptr;

  /* Indicate the offset of the received data.  */
  uint8_t *data_buffer_ptr = buff - 2U - sizeof(NX_PACKET);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3b3e      	subs	r3, #62	@ 0x3e
 8006dda:	617b      	str	r3, [r7, #20]

  received_packet_ptr = (NX_PACKET *)data_buffer_ptr;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	613b      	str	r3, [r7, #16]
  received_packet_ptr->nx_packet_append_ptr = received_packet_ptr->nx_packet_prepend_ptr + Length;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	887b      	ldrh	r3, [r7, #2]
 8006de6:	441a      	add	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	60da      	str	r2, [r3, #12]
  received_packet_ptr->nx_packet_length = Length;
 8006dec:	887a      	ldrh	r2, [r7, #2]
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check whether this is the first packet. */
  if (*first_nx_packet_ptr == NULL)
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* Add the first buffer of the packet. */
    *first_nx_packet_ptr = received_packet_ptr;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e003      	b.n	8006e0a <HAL_ETH_RxLinkCallback+0x4a>
  }
  /* This is not the first packet. */
  else
  {
    /* Add the rest of the buffer to the end of the packet. */
    (*last_nx_packet_ptr)->nx_packet_next = received_packet_ptr;
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	605a      	str	r2, [r3, #4]
  }
  /* Save the current packet in order to use it in the next iteration. */
  *last_nx_packet_ptr  = received_packet_ptr;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	601a      	str	r2, [r3, #0]
}
 8006e10:	bf00      	nop
 8006e12:	3724      	adds	r7, #36	@ 0x24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <_nx_driver_hardware_capability_set>:
/*  xx-xx-xxxx     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_driver_hardware_capability_set(NX_IP_DRIVER *driver_req_ptr)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

  return NX_SUCCESS;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
	...

08006e34 <HAL_ETH_RxCpltCallback>:
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]

  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e68 <HAL_ETH_RxCpltCallback+0x34>)
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	60fb      	str	r3, [r7, #12]

  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_RECEIVED;
 8006e42:	4b09      	ldr	r3, [pc, #36]	@ (8006e68 <HAL_ETH_RxCpltCallback+0x34>)
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	4a07      	ldr	r2, [pc, #28]	@ (8006e68 <HAL_ETH_RxCpltCallback+0x34>)
 8006e4c:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <HAL_ETH_RxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8006e54:	4b04      	ldr	r3, [pc, #16]	@ (8006e68 <HAL_ETH_RxCpltCallback+0x34>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f004 f829 	bl	800aeb0 <_nx_ip_driver_deferred_processing>
  }
}
 8006e5e:	bf00      	nop
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	2000ad00 	.word	0x2000ad00

08006e6c <HAL_ETH_TxCpltCallback>:

void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  ULONG deffered_events;
  deffered_events = nx_driver_information.nx_driver_information_deferred_events;
 8006e74:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea0 <HAL_ETH_TxCpltCallback+0x34>)
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	60fb      	str	r3, [r7, #12]


  nx_driver_information.nx_driver_information_deferred_events |= NX_DRIVER_DEFERRED_PACKET_TRANSMITTED;
 8006e7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ea0 <HAL_ETH_TxCpltCallback+0x34>)
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f043 0304 	orr.w	r3, r3, #4
 8006e82:	4a07      	ldr	r2, [pc, #28]	@ (8006ea0 <HAL_ETH_TxCpltCallback+0x34>)
 8006e84:	6113      	str	r3, [r2, #16]

  if (!deffered_events)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <HAL_ETH_TxCpltCallback+0x2a>
  {
    /* Call NetX deferred driver processing.  */
    _nx_ip_driver_deferred_processing(nx_driver_information.nx_driver_information_ip_ptr);
 8006e8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ea0 <HAL_ETH_TxCpltCallback+0x34>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f004 f80d 	bl	800aeb0 <_nx_ip_driver_deferred_processing>
  }
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	2000ad00 	.word	0x2000ad00

08006ea4 <nx_eth_phy_init>:
  * @param  none
  * @retval ETH_PHY_STATUS_OK on success, ETH_PHY_STATUS_ERROR otherwise
  */

int32_t nx_eth_phy_init(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
    int32_t ret = ETH_PHY_STATUS_ERROR;
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eae:	607b      	str	r3, [r7, #4]
    /* Set PHY IO functions */

    LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006eb0:	4908      	ldr	r1, [pc, #32]	@ (8006ed4 <nx_eth_phy_init+0x30>)
 8006eb2:	4809      	ldr	r0, [pc, #36]	@ (8006ed8 <nx_eth_phy_init+0x34>)
 8006eb4:	f7fb f8c9 	bl	800204a <LAN8742_RegisterBusIO>
    /* Initialize the LAN8742 ETH PHY */

    if (LAN8742_Init(&LAN8742) == LAN8742_STATUS_OK)
 8006eb8:	4807      	ldr	r0, [pc, #28]	@ (8006ed8 <nx_eth_phy_init+0x34>)
 8006eba:	f7fb f8f8 	bl	80020ae <LAN8742_Init>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <nx_eth_phy_init+0x24>
    {
        ret = ETH_PHY_STATUS_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	607b      	str	r3, [r7, #4]
    }

    return ret;
 8006ec8:	687b      	ldr	r3, [r7, #4]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	20000018 	.word	0x20000018
 8006ed8:	2000ad94 	.word	0x2000ad94

08006edc <nx_eth_phy_get_link_state>:
  * @param  none
  * @retval the link status.
  */

int32_t nx_eth_phy_get_link_state(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
    int32_t  linkstate = LAN8742_GetLinkState(&LAN8742);
 8006ee2:	4804      	ldr	r0, [pc, #16]	@ (8006ef4 <nx_eth_phy_get_link_state+0x18>)
 8006ee4:	f7fb f98b 	bl	80021fe <LAN8742_GetLinkState>
 8006ee8:	6078      	str	r0, [r7, #4]

    return linkstate;
 8006eea:	687b      	ldr	r3, [r7, #4]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	2000ad94 	.word	0x2000ad94

08006ef8 <lan8742_io_init>:
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */

int32_t lan8742_io_init(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&eth_handle);
 8006efc:	4802      	ldr	r0, [pc, #8]	@ (8006f08 <lan8742_io_init+0x10>)
 8006efe:	f7fc f9d5 	bl	80032ac <HAL_ETH_SetMDIOClockRange>

  return ETH_PHY_STATUS_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20007ef4 	.word	0x20007ef4

08006f0c <lan8742_io_deinit>:
  * @brief  De-Initialize the MDIO interface
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t lan8742_io_deinit (void)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
    return ETH_PHY_STATUS_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <lan8742_io_read_reg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t lan8742_io_read_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&eth_handle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	68f9      	ldr	r1, [r7, #12]
 8006f2e:	4807      	ldr	r0, [pc, #28]	@ (8006f4c <lan8742_io_read_reg+0x30>)
 8006f30:	f7fc f80a 	bl	8002f48 <HAL_ETH_ReadPHYRegister>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <lan8742_io_read_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8006f3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f3e:	e000      	b.n	8006f42 <lan8742_io_read_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20007ef4 	.word	0x20007ef4

08006f50 <lan8742_io_write_reg>:

int32_t lan8742_io_write_reg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&eth_handle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	4807      	ldr	r0, [pc, #28]	@ (8006f80 <lan8742_io_write_reg+0x30>)
 8006f64:	f7fc f83b 	bl	8002fde <HAL_ETH_WritePHYRegister>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <lan8742_io_write_reg+0x24>
  {
    return ETH_PHY_STATUS_ERROR;
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f72:	e000      	b.n	8006f76 <lan8742_io_write_reg+0x26>
  }

  return ETH_PHY_STATUS_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20007ef4 	.word	0x20007ef4

08006f84 <lan8742_io_get_tick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t lan8742_io_get_tick(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006f88:	f7fb fa8c 	bl	80024a4 <HAL_GetTick>
 8006f8c:	4603      	mov	r3, r0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <_nxe_dhcp_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (dhcp_ptr == NX_NULL))
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <_nxe_dhcp_create+0x22>
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a09      	ldr	r2, [pc, #36]	@ (8006fd0 <_nxe_dhcp_create+0x3c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d102      	bne.n	8006fb6 <_nxe_dhcp_create+0x22>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <_nxe_dhcp_create+0x26>
    {
    
        return(NX_PTR_ERROR);
 8006fb6:	2307      	movs	r3, #7
 8006fb8:	e006      	b.n	8006fc8 <_nxe_dhcp_create+0x34>
    }

    /* Call actual DHCP create service.  */
    status =  _nx_dhcp_create(dhcp_ptr, ip_ptr, name_ptr);
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 f808 	bl	8006fd4 <_nx_dhcp_create>
 8006fc4:	6178      	str	r0, [r7, #20]

    /* Return status.  */
    return(status);
 8006fc6:	697b      	ldr	r3, [r7, #20]
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	49502020 	.word	0x49502020

08006fd4 <_nx_dhcp_create>:
/*                                            multiple client instances,  */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_create(NX_DHCP *dhcp_ptr, NX_IP *ip_ptr, CHAR *name_ptr)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b092      	sub	sp, #72	@ 0x48
 8006fd8:	af08      	add	r7, sp, #32
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
            return (NX_DHCP_INVALID_NAME);
    }
#endif /* NX_DHCP_CLIENT_ENABLE_HOST_NAME_CHECK  */

    /* Initialize the DHCP control block to zero.  */
    memset((void *) dhcp_ptr, 0, sizeof(NX_DHCP));
 8006fe0:	f641 725c 	movw	r2, #8028	@ 0x1f5c
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f00d f9c6 	bl	8014378 <memset>
    
    /* Save the IP pointer.  */
    dhcp_ptr -> nx_dhcp_ip_ptr =  ip_ptr;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	609a      	str	r2, [r3, #8]

    /* Save the DHCP name.  */
    dhcp_ptr -> nx_dhcp_name =  name_ptr;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]
        /* Invalid payload, return error status.  */
        return(NX_DHCP_INVALID_PAYLOAD);
    }

    /* Create the pool and check the status */
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f103 000c 	add.w	r0, r3, #12
                                    dhcp_ptr -> nx_dhcp_pool_area, NX_DHCP_PACKET_POOL_SIZE);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3348      	adds	r3, #72	@ 0x48
    status =  nx_packet_pool_create(&dhcp_ptr -> nx_dhcp_pool, "NetX DHCP Client", NX_DHCP_PACKET_PAYLOAD, 
 8007002:	f44f 6239 	mov.w	r2, #2960	@ 0xb90
 8007006:	9200      	str	r2, [sp, #0]
 8007008:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800700c:	498b      	ldr	r1, [pc, #556]	@ (800723c <_nx_dhcp_create+0x268>)
 800700e:	f006 fa03 	bl	800d418 <_nx_packet_pool_create>
 8007012:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Determine if it was successful.  */
    if (status != NX_SUCCESS)
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <_nx_dhcp_create+0x4a>
    {

        /* No, return error status.  */
        return(status);
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	e109      	b.n	8007232 <_nx_dhcp_create+0x25e>
    }

    /* Set an internal packet pool pointer to the newly created packet pool. */
    dhcp_ptr -> nx_dhcp_packet_pool_ptr = &dhcp_ptr -> nx_dhcp_pool;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f103 020c 	add.w	r2, r3, #12
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8c3 2bd8 	str.w	r2, [r3, #3032]	@ 0xbd8
#endif /* NX_DHCP_CLIENT_SEND_MAX_DHCP_MESSAGE_OPTION  */

#endif /* NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL  */

    /* Create the Socket and check the status */
    status = nx_udp_socket_create(ip_ptr, &(dhcp_ptr -> nx_dhcp_socket), "NetX DHCP Client",
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f603 31dc 	addw	r1, r3, #3036	@ 0xbdc
 8007030:	2304      	movs	r3, #4
 8007032:	9302      	str	r3, [sp, #8]
 8007034:	2380      	movs	r3, #128	@ 0x80
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	4a7e      	ldr	r2, [pc, #504]	@ (800723c <_nx_dhcp_create+0x268>)
 8007042:	68b8      	ldr	r0, [r7, #8]
 8007044:	f007 f910 	bl	800e268 <_nx_udp_socket_create>
 8007048:	6278      	str	r0, [r7, #36]	@ 0x24
                                  NX_DHCP_TYPE_OF_SERVICE, NX_DHCP_FRAGMENT_OPTION, NX_DHCP_TIME_TO_LIVE, NX_DHCP_QUEUE_DEPTH);

    /* Was the socket creation successful?  */
    if (status != NX_SUCCESS)
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	2b00      	cmp	r3, #0
 800704e:	d007      	beq.n	8007060 <_nx_dhcp_create+0x8c>
    {

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	@ 0xbd8
 8007056:	4618      	mov	r0, r3
 8007058:	f006 faae 	bl	800d5b8 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	e0e8      	b.n	8007232 <_nx_dhcp_create+0x25e>
    }


    /* Set the UDP socket receive callback function.  */
    status = nx_udp_socket_receive_notify(&(dhcp_ptr -> nx_dhcp_socket), _nx_dhcp_udp_receive_notify);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 8007066:	4976      	ldr	r1, [pc, #472]	@ (8007240 <_nx_dhcp_create+0x26c>)
 8007068:	4618      	mov	r0, r3
 800706a:	f007 fb5b 	bl	800e724 <_nx_udp_socket_receive_notify>
 800706e:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check status.  */
    if (status != NX_SUCCESS) 
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <_nx_dhcp_create+0xba>
    {


#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	@ 0xbd8
 800707c:	4618      	mov	r0, r3
 800707e:	f006 fa9b 	bl	800d5b8 <_nx_packet_pool_delete>
#endif

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 8007088:	4618      	mov	r0, r3
 800708a:	f007 f97d 	bl	800e388 <_nx_udp_socket_delete>
    }

    dhcp_ptr -> nx_dhcp_socket.nx_udp_socket_reserved_ptr = (VOID*)dhcp_ptr;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	f8c3 2c50 	str.w	r2, [r3, #3152]	@ 0xc50

    /* Create the ThreadX activity timeout timer.  This will be used to periodically check to see if
       a client connection has gone silent and needs to be terminated.  */
    status =  tx_timer_create(&(dhcp_ptr -> nx_dhcp_timer), "DHCP Client Timer", _nx_dhcp_timeout_entry,
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 50eb 	add.w	r0, r3, #7520	@ 0x1d60
 800709c:	3004      	adds	r0, #4
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	222c      	movs	r2, #44	@ 0x2c
 80070a2:	9203      	str	r2, [sp, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	9202      	str	r2, [sp, #8]
 80070a8:	2264      	movs	r2, #100	@ 0x64
 80070aa:	9201      	str	r2, [sp, #4]
 80070ac:	2264      	movs	r2, #100	@ 0x64
 80070ae:	9200      	str	r2, [sp, #0]
 80070b0:	4a64      	ldr	r2, [pc, #400]	@ (8007244 <_nx_dhcp_create+0x270>)
 80070b2:	4965      	ldr	r1, [pc, #404]	@ (8007248 <_nx_dhcp_create+0x274>)
 80070b4:	f00c fdea 	bl	8013c8c <_txe_timer_create>
 80070b8:	6278      	str	r0, [r7, #36]	@ 0x24
                              (NX_DHCP_TIME_INTERVAL), TX_NO_ACTIVATE);

    NX_TIMER_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_timer), dhcp_ptr)

    /* Determine if the semaphore creation was successful.  */
    if (status != TX_SUCCESS)
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <_nx_dhcp_create+0x108>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 80070c6:	4618      	mov	r0, r3
 80070c8:	f007 f95e 	bl	800e388 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	@ 0xbd8
 80070d2:	4618      	mov	r0, r3
 80070d4:	f006 fa70 	bl	800d5b8 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	e0aa      	b.n	8007232 <_nx_dhcp_create+0x25e>
    }

    /* Create the DHCP mutex.  */
    status =  tx_mutex_create(&(dhcp_ptr -> nx_dhcp_mutex), "NetX DHCP Client", TX_NO_INHERIT);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 50e8 	add.w	r0, r3, #7424	@ 0x1d00
 80070e2:	3008      	adds	r0, #8
 80070e4:	2334      	movs	r3, #52	@ 0x34
 80070e6:	2200      	movs	r2, #0
 80070e8:	4954      	ldr	r1, [pc, #336]	@ (800723c <_nx_dhcp_create+0x268>)
 80070ea:	f00c f9d5 	bl	8013498 <_txe_mutex_create>
 80070ee:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Determine if the semaphore creation was successful.  */
    if (status != TX_SUCCESS)
 80070f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d014      	beq.n	8007120 <_nx_dhcp_create+0x14c>
    {

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 80070fc:	4618      	mov	r0, r3
 80070fe:	f007 f943 	bl	800e388 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	@ 0xbd8
 8007108:	4618      	mov	r0, r3
 800710a:	f006 fa55 	bl	800d5b8 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 53eb 	add.w	r3, r3, #7520	@ 0x1d60
 8007114:	3304      	adds	r3, #4
 8007116:	4618      	mov	r0, r3
 8007118:	f00c fe82 	bl	8013e20 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	e088      	b.n	8007232 <_nx_dhcp_create+0x25e>
    }

    /* Create the DHCP processing thread.  */
    status =  tx_thread_create(&(dhcp_ptr -> nx_dhcp_thread), "NetX DHCP Client", _nx_dhcp_thread_entry, (ULONG)(ALIGN_TYPE)dhcp_ptr,
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f603 4054 	addw	r0, r3, #3156	@ 0xc54
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f603 5308 	addw	r3, r3, #3336	@ 0xd08
 800712e:	21b4      	movs	r1, #180	@ 0xb4
 8007130:	9106      	str	r1, [sp, #24]
 8007132:	2100      	movs	r1, #0
 8007134:	9105      	str	r1, [sp, #20]
 8007136:	2101      	movs	r1, #1
 8007138:	9104      	str	r1, [sp, #16]
 800713a:	2103      	movs	r1, #3
 800713c:	9103      	str	r1, [sp, #12]
 800713e:	2103      	movs	r1, #3
 8007140:	9102      	str	r1, [sp, #8]
 8007142:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007146:	9101      	str	r1, [sp, #4]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	4613      	mov	r3, r2
 800714c:	4a3f      	ldr	r2, [pc, #252]	@ (800724c <_nx_dhcp_create+0x278>)
 800714e:	493b      	ldr	r1, [pc, #236]	@ (800723c <_nx_dhcp_create+0x268>)
 8007150:	f00c fc08 	bl	8013964 <_txe_thread_create>
 8007154:	6278      	str	r0, [r7, #36]	@ 0x24
                                NX_DHCP_THREAD_PRIORITY, NX_DHCP_THREAD_PRIORITY, 1, TX_DONT_START);

    NX_THREAD_EXTENSION_PTR_SET(&(dhcp_ptr -> nx_dhcp_thread), dhcp_ptr)

    /* Determine if the thread creation was successful.  */
    if (status != TX_SUCCESS)
 8007156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01b      	beq.n	8007194 <_nx_dhcp_create+0x1c0>
    {

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007162:	3308      	adds	r3, #8
 8007164:	4618      	mov	r0, r3
 8007166:	f00c fa35 	bl	80135d4 <_txe_mutex_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 8007170:	4618      	mov	r0, r3
 8007172:	f007 f909 	bl	800e388 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	@ 0xbd8
 800717c:	4618      	mov	r0, r3
 800717e:	f006 fa1b 	bl	800d5b8 <_nx_packet_pool_delete>
#endif

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 53eb 	add.w	r3, r3, #7520	@ 0x1d60
 8007188:	3304      	adds	r3, #4
 800718a:	4618      	mov	r0, r3
 800718c:	f00c fe48 	bl	8013e20 <_txe_timer_delete>

        /* No, return error status.  */
        return(status);
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	e04e      	b.n	8007232 <_nx_dhcp_create+0x25e>
    }

    /* Create a DHCP event flag group. .  */
    status = tx_event_flags_create(&(dhcp_ptr -> nx_dhcp_events), (CHAR *)"DHCP Client Events");
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 53e9 	add.w	r3, r3, #7456	@ 0x1d20
 800719a:	331c      	adds	r3, #28
 800719c:	2228      	movs	r2, #40	@ 0x28
 800719e:	492c      	ldr	r1, [pc, #176]	@ (8007250 <_nx_dhcp_create+0x27c>)
 80071a0:	4618      	mov	r0, r3
 80071a2:	f00c f863 	bl	801326c <_txe_event_flags_create>
 80071a6:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Check for error. */
    if (status != TX_SUCCESS)
 80071a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d021      	beq.n	80071f2 <_nx_dhcp_create+0x21e>
    {

        /* Delete the thread.  */
        tx_thread_delete(&(dhcp_ptr -> nx_dhcp_thread));
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f603 4354 	addw	r3, r3, #3156	@ 0xc54
 80071b4:	4618      	mov	r0, r3
 80071b6:	f00c fcc7 	bl	8013b48 <_txe_thread_delete>

        /* Delete the mutex.  */
        tx_mutex_delete(&(dhcp_ptr -> nx_dhcp_mutex));
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80071c0:	3308      	adds	r3, #8
 80071c2:	4618      	mov	r0, r3
 80071c4:	f00c fa06 	bl	80135d4 <_txe_mutex_delete>

        /* Delete the timer.  */
        tx_timer_delete(&(dhcp_ptr -> nx_dhcp_timer));
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 53eb 	add.w	r3, r3, #7520	@ 0x1d60
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f00c fe25 	bl	8013e20 <_txe_timer_delete>

        /* Delete the UDP socket.  */
        nx_udp_socket_delete(&(dhcp_ptr -> nx_dhcp_socket));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 80071dc:	4618      	mov	r0, r3
 80071de:	f007 f8d3 	bl	800e388 <_nx_udp_socket_delete>

#ifndef NX_DHCP_CLIENT_USER_CREATE_PACKET_POOL 
        /* Delete the packet pool.  */
        nx_packet_pool_delete(dhcp_ptr -> nx_dhcp_packet_pool_ptr);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f8d3 3bd8 	ldr.w	r3, [r3, #3032]	@ 0xbd8
 80071e8:	4618      	mov	r0, r3
 80071ea:	f006 f9e5 	bl	800d5b8 <_nx_packet_pool_delete>
#endif

        /* No, return error status.  */
        return(status);
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	e01f      	b.n	8007232 <_nx_dhcp_create+0x25e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80071f2:	f3ef 8310 	mrs	r3, PRIMASK
 80071f6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80071f8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80071fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80071fc:	b672      	cpsid	i
    return(int_posture);
 80071fe:	697b      	ldr	r3, [r7, #20]
    }

    /* Otherwise, the DHCP initialization was successful.  Place the
       DHCP control block on the list of created DHCP instances.  */
    TX_DISABLE
 8007200:	623b      	str	r3, [r7, #32]

    /* Update the dhcp structure ID.  */
    dhcp_ptr -> nx_dhcp_id =  NX_DHCP_ID;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4a13      	ldr	r2, [pc, #76]	@ (8007254 <_nx_dhcp_create+0x280>)
 8007206:	601a      	str	r2, [r3, #0]

    /* Setup this DHCP's created links.  */
    dhcp_ptr -> nx_dhcp_created_next = _nx_dhcp_created_ptr;
 8007208:	4b13      	ldr	r3, [pc, #76]	@ (8007258 <_nx_dhcp_create+0x284>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007212:	f8c2 3f54 	str.w	r3, [r2, #3924]	@ 0xf54

    /* Place the new DHCP control block on the head of created DHCPs.  */
    _nx_dhcp_created_ptr = dhcp_ptr;
 8007216:	4a10      	ldr	r2, [pc, #64]	@ (8007258 <_nx_dhcp_create+0x284>)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f383 8810 	msr	PRIMASK, r3
}
 8007226:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Default enable DHCP on the primary interface (0).  */
    _nx_dhcp_interface_enable(dhcp_ptr, 0);
 8007228:	2100      	movs	r1, #0
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fa09 	bl	8007642 <_nx_dhcp_interface_enable>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3728      	adds	r7, #40	@ 0x28
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	080154f4 	.word	0x080154f4
 8007240:	08007a01 	.word	0x08007a01
 8007244:	08007a29 	.word	0x08007a29
 8007248:	08015508 	.word	0x08015508
 800724c:	08007a4f 	.word	0x08007a4f
 8007250:	0801551c 	.word	0x0801551c
 8007254:	44484350 	.word	0x44484350
 8007258:	2000adb4 	.word	0x2000adb4

0800725c <_nx_dhcp_interface_reinitialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_dhcp_interface_reinitialize(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]

UINT                      status;
ULONG                     ip_address;
ULONG                     network_mask;
ULONG                     gateway_address;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]

  
    /* Obtain DHCP Client protection mutex. */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007270:	3308      	adds	r3, #8
 8007272:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007276:	4618      	mov	r0, r3
 8007278:	f00c f9ea 	bl	8013650 <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 800727c:	f107 030c 	add.w	r3, r7, #12
 8007280:	461a      	mov	r2, r3
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f002 f802 	bl	800928e <_nx_dhcp_interface_record_find>
 800728a:	61f8      	str	r0, [r7, #28]

    /* Check status.  */
    if (status)
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d008      	beq.n	80072a4 <_nx_dhcp_interface_reinitialize+0x48>
    {

        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007298:	3308      	adds	r3, #8
 800729a:	4618      	mov	r0, r3
 800729c:	f00c fa32 	bl	8013704 <_txe_mutex_put>
        return(status);
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	e063      	b.n	800736c <_nx_dhcp_interface_reinitialize+0x110>
    }

    /* Check if have IP address.  */
    if (interface_record -> nx_dhcp_ip_address)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d018      	beq.n	80072de <_nx_dhcp_interface_reinitialize+0x82>
    {

        /* Get the IP address.  */
        status = nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, &ip_address, &network_mask);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6898      	ldr	r0, [r3, #8]
 80072b0:	f107 0314 	add.w	r3, r7, #20
 80072b4:	f107 0218 	add.w	r2, r7, #24
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	f004 fa19 	bl	800b6f0 <_nx_ip_interface_address_get>
 80072be:	61f8      	str	r0, [r7, #28]

        /* Check if the IP address is set by DHCP.  */
        if ((status == NX_SUCCESS) && (ip_address == interface_record -> nx_dhcp_ip_address))
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10b      	bne.n	80072de <_nx_dhcp_interface_reinitialize+0x82>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d106      	bne.n	80072de <_nx_dhcp_interface_reinitialize+0x82>
        {

            /* Clear the IP address.  */
            nx_ip_interface_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, iface_index, 0, 0);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6898      	ldr	r0, [r3, #8]
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	f004 fa49 	bl	800b770 <_nx_ip_interface_address_set>
        }
    }

    /* Check if have gateway address.  */
    if (interface_record -> nx_dhcp_gateway_address)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d015      	beq.n	8007312 <_nx_dhcp_interface_reinitialize+0xb6>
    {

        /* Get the gateway address.  */
        status = nx_ip_gateway_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, &gateway_address);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f107 0210 	add.w	r2, r7, #16
 80072ee:	4611      	mov	r1, r2
 80072f0:	4618      	mov	r0, r3
 80072f2:	f004 f889 	bl	800b408 <_nx_ip_gateway_address_get>
 80072f6:	61f8      	str	r0, [r7, #28]

        /* Check status.  */
        if ((status == NX_SUCCESS) && (gateway_address == interface_record -> nx_dhcp_gateway_address))
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <_nx_dhcp_interface_reinitialize+0xb6>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	429a      	cmp	r2, r3
 8007306:	d104      	bne.n	8007312 <_nx_dhcp_interface_reinitialize+0xb6>
        {

            /* Clear the Gateway/Router IP address.  */
            nx_ip_gateway_address_clear(dhcp_ptr -> nx_dhcp_ip_ptr);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	4618      	mov	r0, r3
 800730e:	f004 f850 	bl	800b3b2 <_nx_ip_gateway_address_clear>
        }
    }

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS; 
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS; 
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	615a      	str	r2, [r3, #20]

    /* Clear these DHCP Client network values too.*/
    interface_record -> nx_dhcp_gateway_address = NX_BOOTP_NO_ADDRESS; 
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	611a      	str	r2, [r3, #16]
    interface_record -> nx_dhcp_network_mask = NX_BOOTP_NO_ADDRESS;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	619a      	str	r2, [r3, #24]

    /* Clear the flag to skip the discovery step. The host application must
       call the nx_dhcp_request_ip_address to reset the flag and the requested IP address. */
    interface_record -> nx_dhcp_skip_discovery = NX_FALSE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	645a      	str	r2, [r3, #68]	@ 0x44
                                                             
    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	635a      	str	r2, [r3, #52]	@ 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007342:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Reset the seconds field for starting the DHCP request process. */
    interface_record -> nx_dhcp_seconds = 0;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]

    /* Reset the timeout and retransmission interval.  */
    interface_record -> nx_dhcp_timeout = 0;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the DHCP state to the initial state.  */
    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_NOT_STARTED;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	705a      	strb	r2, [r3, #1]

    /* Release the mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007362:	3308      	adds	r3, #8
 8007364:	4618      	mov	r0, r3
 8007366:	f00c f9cd 	bl	8013704 <_txe_mutex_put>
    return NX_SUCCESS;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3720      	adds	r7, #32
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <_nxe_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_start(NX_DHCP *dhcp_ptr)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for invalid input pointer.  */
    if ((dhcp_ptr == NX_NULL) || (dhcp_ptr -> nx_dhcp_id != NX_DHCP_ID))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d004      	beq.n	800738c <_nxe_dhcp_start+0x18>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a11      	ldr	r2, [pc, #68]	@ (80073cc <_nxe_dhcp_start+0x58>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d001      	beq.n	8007390 <_nxe_dhcp_start+0x1c>
        return(NX_PTR_ERROR);
 800738c:	2307      	movs	r3, #7
 800738e:	e018      	b.n	80073c2 <_nxe_dhcp_start+0x4e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007390:	f3ef 8305 	mrs	r3, IPSR
 8007394:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8007396:	68ba      	ldr	r2, [r7, #8]
    
    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 8007398:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <_nxe_dhcp_start+0x5c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4313      	orrs	r3, r2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d108      	bne.n	80073b4 <_nxe_dhcp_start+0x40>
 80073a2:	4b0c      	ldr	r3, [pc, #48]	@ (80073d4 <_nxe_dhcp_start+0x60>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <_nxe_dhcp_start+0x40>
 80073aa:	4b0a      	ldr	r3, [pc, #40]	@ (80073d4 <_nxe_dhcp_start+0x60>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a0a      	ldr	r2, [pc, #40]	@ (80073d8 <_nxe_dhcp_start+0x64>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d101      	bne.n	80073b8 <_nxe_dhcp_start+0x44>
 80073b4:	2311      	movs	r3, #17
 80073b6:	e004      	b.n	80073c2 <_nxe_dhcp_start+0x4e>

    /* Call actual DHCP start service.  */
    status =  _nx_dhcp_start(dhcp_ptr);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f80f 	bl	80073dc <_nx_dhcp_start>
 80073be:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 80073c0:	68fb      	ldr	r3, [r7, #12]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	44484350 	.word	0x44484350
 80073d0:	20000098 	.word	0x20000098
 80073d4:	2000ae14 	.word	0x2000ae14
 80073d8:	2000af5c 	.word	0x2000af5c

080073dc <_nx_dhcp_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_start(NX_DHCP *dhcp_ptr)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]

UINT    status;
UINT    interfaces_started = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
UINT    i;


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80073ee:	3308      	adds	r3, #8
 80073f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80073f4:	4618      	mov	r0, r3
 80073f6:	f00c f92b 	bl	8013650 <_txe_mutex_get>

    /* Check all interfaces to find out which need to start the DHCP protocol.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80073fa:	2300      	movs	r3, #0
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	e028      	b.n	8007452 <_nx_dhcp_start+0x76>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8007408:	fb01 f303 	mul.w	r3, r1, r3
 800740c:	4413      	add	r3, r2
 800740e:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8007412:	3310      	adds	r3, #16
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d118      	bne.n	800744c <_nx_dhcp_start+0x70>
        {

            /* Start DHCP on this interface.   */
             status = _nx_dhcp_interface_start(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8007422:	fb01 f303 	mul.w	r3, r1, r3
 8007426:	4413      	add	r3, r2
 8007428:	f503 53ed 	add.w	r3, r3, #7584	@ 0x1da0
 800742c:	330c      	adds	r3, #12
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f828 	bl	8007488 <_nx_dhcp_interface_start>
 8007438:	60f8      	str	r0, [r7, #12]
             /* Note, not all interfaces are enabled to run, so
                status may not be successful. Skip to the next
                interface. */

             /* Check status.  */
             if ((status == NX_SUCCESS) || (status == NX_DHCP_ALREADY_STARTED))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <_nx_dhcp_start+0x6a>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b93      	cmp	r3, #147	@ 0x93
 8007444:	d102      	bne.n	800744c <_nx_dhcp_start+0x70>
             {
                 interfaces_started++;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	3301      	adds	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	3301      	adds	r3, #1
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0d3      	beq.n	8007400 <_nx_dhcp_start+0x24>
             }
        }
    }

    /* Check if any interfaces started DHCP. */
    if (interfaces_started == 0) 
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d108      	bne.n	8007470 <_nx_dhcp_start+0x94>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007464:	3308      	adds	r3, #8
 8007466:	4618      	mov	r0, r3
 8007468:	f00c f94c 	bl	8013704 <_txe_mutex_put>

        /* Unable to start any interfaces. */
        return NX_DHCP_NO_INTERFACES_STARTED;
 800746c:	23a6      	movs	r3, #166	@ 0xa6
 800746e:	e007      	b.n	8007480 <_nx_dhcp_start+0xa4>
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007476:	3308      	adds	r3, #8
 8007478:	4618      	mov	r0, r3
 800747a:	f00c f943 	bl	8013704 <_txe_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);  
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <_nx_dhcp_interface_start>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_start(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]

UINT    i;
UINT    status;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]

    
    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 800749c:	3308      	adds	r3, #8
 800749e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80074a2:	4618      	mov	r0, r3
 80074a4:	f00c f8d4 	bl	8013650 <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 80074a8:	f107 030c 	add.w	r3, r7, #12
 80074ac:	461a      	mov	r2, r3
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 feec 	bl	800928e <_nx_dhcp_interface_record_find>
 80074b6:	6138      	str	r0, [r7, #16]

    /* Check status.  */
    if (status)
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d008      	beq.n	80074d0 <_nx_dhcp_interface_start+0x48>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80074c4:	3308      	adds	r3, #8
 80074c6:	4618      	mov	r0, r3
 80074c8:	f00c f91c 	bl	8013704 <_txe_mutex_put>

        return(status);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	e0b4      	b.n	800763a <_nx_dhcp_interface_start+0x1b2>
    }

    /* Check if DHCP is already started.  */
    if (interface_record -> nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <_nx_dhcp_interface_start+0x62>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80074de:	3308      	adds	r3, #8
 80074e0:	4618      	mov	r0, r3
 80074e2:	f00c f90f 	bl	8013704 <_txe_mutex_put>
        return(NX_DHCP_ALREADY_STARTED); 
 80074e6:	2393      	movs	r3, #147	@ 0x93
 80074e8:	e0a7      	b.n	800763a <_nx_dhcp_interface_start+0x1b2>
    }
                                   
    /* Check if other interface are working.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e01c      	b.n	800752a <_nx_dhcp_interface_start+0xa2>
    {

        /* Check which interface record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 80074f8:	fb01 f303 	mul.w	r3, r1, r3
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8007502:	3310      	adds	r3, #16
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00c      	beq.n	8007524 <_nx_dhcp_interface_start+0x9c>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8007512:	fb01 f303 	mul.w	r3, r1, r3
 8007516:	4413      	add	r3, r2
 8007518:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800751c:	3311      	adds	r3, #17
 800751e:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8007520:	2b00      	cmp	r3, #0
 8007522:	d106      	bne.n	8007532 <_nx_dhcp_interface_start+0xaa>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	3301      	adds	r3, #1
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0df      	beq.n	80074f0 <_nx_dhcp_interface_start+0x68>
 8007530:	e000      	b.n	8007534 <_nx_dhcp_interface_start+0xac>
        {

            /* Yes, other interface have started DHCP.  */
            break;
 8007532:	bf00      	nop
        }
    }

    /* Check if any interfaces have started DHCP.  */
    if (i == NX_DHCP_CLIENT_MAX_RECORDS) 
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d14b      	bne.n	80075d2 <_nx_dhcp_interface_start+0x14a>
    {

        /* Bind the UDP socket to the DHCP Client port.  */
        status =  nx_udp_socket_bind(&(dhcp_ptr -> nx_dhcp_socket), NX_DHCP_CLIENT_UDP_PORT, NX_WAIT_FOREVER);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 8007540:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007544:	2144      	movs	r1, #68	@ 0x44
 8007546:	4618      	mov	r0, r3
 8007548:	f006 fd60 	bl	800e00c <_nx_udp_socket_bind>
 800754c:	6138      	str	r0, [r7, #16]

        /* Check for error */
        if (status != NX_SUCCESS)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d008      	beq.n	8007566 <_nx_dhcp_interface_start+0xde>
        {

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 800755a:	3308      	adds	r3, #8
 800755c:	4618      	mov	r0, r3
 800755e:	f00c f8d1 	bl	8013704 <_txe_mutex_put>
            return(status);
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	e069      	b.n	800763a <_nx_dhcp_interface_start+0x1b2>
        }

        /* Resume the DHCP processing thread.  */
        status = tx_thread_resume(&(dhcp_ptr -> nx_dhcp_thread));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f603 4354 	addw	r3, r3, #3156	@ 0xc54
 800756c:	4618      	mov	r0, r3
 800756e:	f00c fb33 	bl	8013bd8 <_txe_thread_resume>
 8007572:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if ((status != TX_SUCCESS) && (status != TX_SUSPEND_LIFTED))
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d011      	beq.n	800759e <_nx_dhcp_interface_start+0x116>
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2b19      	cmp	r3, #25
 800757e:	d00e      	beq.n	800759e <_nx_dhcp_interface_start+0x116>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 8007586:	4618      	mov	r0, r3
 8007588:	f007 f924 	bl	800e7d4 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007592:	3308      	adds	r3, #8
 8007594:	4618      	mov	r0, r3
 8007596:	f00c f8b5 	bl	8013704 <_txe_mutex_put>
            return(status);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	e04d      	b.n	800763a <_nx_dhcp_interface_start+0x1b2>
        }

        /* Activate DHCP Timer.  */
        status = tx_timer_activate(&(dhcp_ptr -> nx_dhcp_timer));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f503 53eb 	add.w	r3, r3, #7520	@ 0x1d60
 80075a4:	3304      	adds	r3, #4
 80075a6:	4618      	mov	r0, r3
 80075a8:	f00c fb52 	bl	8013c50 <_txe_timer_activate>
 80075ac:	6138      	str	r0, [r7, #16]

        /* Determine if the resume was successful.  */
        if (status != NX_SUCCESS)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00e      	beq.n	80075d2 <_nx_dhcp_interface_start+0x14a>
        {

            /* Error, unbind the DHCP socket.  */
            nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 80075ba:	4618      	mov	r0, r3
 80075bc:	f007 f90a 	bl	800e7d4 <_nx_udp_socket_unbind>

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80075c6:	3308      	adds	r3, #8
 80075c8:	4618      	mov	r0, r3
 80075ca:	f00c f89b 	bl	8013704 <_txe_mutex_put>
            return(status);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	e033      	b.n	800763a <_nx_dhcp_interface_start+0x1b2>
        }
    }

    /* Start DHCP service for this interface record.  */
    /* Start the DHCP protocol again by setting the state back to INIT. */
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2202      	movs	r2, #2
 80075d6:	705a      	strb	r2, [r3, #1]
    /* The client begins in INIT state and forms a DHCPDISCOVER message.
       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
       RFC2131, Section4.4.1, Page36.  */

    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2264      	movs	r2, #100	@ 0x64
 80075dc:	621a      	str	r2, [r3, #32]
    interface_record -> nx_dhcp_rtr_interval = 0;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Determine if the application has specified a routine for DHCP state change notification.  */
    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ea:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d009      	beq.n	8007606 <_nx_dhcp_interface_start+0x17e>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075f8:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	7852      	ldrb	r2, [r2, #1]
 8007600:	4611      	mov	r1, r2
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	4798      	blx	r3
    }

    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800760c:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <_nx_dhcp_interface_start+0x1a2>
    {

        /* Yes, call the application's state change notify function with the new state.  */
        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800761a:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	69d1      	ldr	r1, [r2, #28]
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	7852      	ldrb	r2, [r2, #1]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007630:	3308      	adds	r3, #8
 8007632:	4618      	mov	r0, r3
 8007634:	f00c f866 	bl	8013704 <_txe_mutex_put>

    return NX_SUCCESS;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <_nx_dhcp_interface_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_interface_enable(NX_DHCP *dhcp_ptr, UINT iface_index)   
{
 8007642:	b590      	push	{r4, r7, lr}
 8007644:	b087      	sub	sp, #28
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
UINT                      i;
ULONG                     client_physical_lsw, client_physical_msw;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), NX_WAIT_FOREVER);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007656:	3308      	adds	r3, #8
 8007658:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800765c:	4618      	mov	r0, r3
 800765e:	f00b fff7 	bl	8013650 <_txe_mutex_get>

    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]
 8007666:	e034      	b.n	80076d2 <_nx_dhcp_interface_enable+0x90>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_TRUE)
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	4413      	add	r3, r2
 8007676:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800767a:	3310      	adds	r3, #16
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d116      	bne.n	80076b0 <_nx_dhcp_interface_enable+0x6e>
        {

            /* Check if the interface is already enabled. */
            if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 800768a:	fb01 f303 	mul.w	r3, r1, r3
 800768e:	4413      	add	r3, r2
 8007690:	f503 53ed 	add.w	r3, r3, #7584	@ 0x1da0
 8007694:	330c      	adds	r3, #12
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d116      	bne.n	80076cc <_nx_dhcp_interface_enable+0x8a>
            {

                /* Release the DHCP mutex.  */
                 tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80076a4:	3308      	adds	r3, #8
 80076a6:	4618      	mov	r0, r3
 80076a8:	f00c f82c 	bl	8013704 <_txe_mutex_put>
                 return(NX_DHCP_INTERFACE_ALREADY_ENABLED);
 80076ac:	23a3      	movs	r3, #163	@ 0xa3
 80076ae:	e063      	b.n	8007778 <_nx_dhcp_interface_enable+0x136>
        }
        else
        {

            /* Yes, we found an available record.  */
            if (interface_record == NX_NULL)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <_nx_dhcp_interface_enable+0x8a>
                interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80076bc:	fb02 f303 	mul.w	r3, r2, r3
 80076c0:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 80076c4:	3310      	adds	r3, #16
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4413      	add	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	3301      	adds	r3, #1
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0c7      	beq.n	8007668 <_nx_dhcp_interface_enable+0x26>
        }
    }

    /* Check if we found an valid DHCP interface record.  */
    if (interface_record == NX_NULL)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d108      	bne.n	80076f0 <_nx_dhcp_interface_enable+0xae>
    {

        /* No, release the mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80076e4:	3308      	adds	r3, #8
 80076e6:	4618      	mov	r0, r3
 80076e8:	f00c f80c 	bl	8013704 <_txe_mutex_put>
        return(NX_DHCP_NO_RECORDS_AVAILABLE);
 80076ec:	23a7      	movs	r3, #167	@ 0xa7
 80076ee:	e043      	b.n	8007778 <_nx_dhcp_interface_enable+0x136>
    }

    /* Set this record as valid.  */
    interface_record -> nx_dhcp_record_valid = NX_TRUE;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	2201      	movs	r2, #1
 80076f4:	701a      	strb	r2, [r3, #0]

    /* Set interface index. */  
    interface_record -> nx_dhcp_interface_index = iface_index;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	61da      	str	r2, [r3, #28]

    /* Initialize the client DHCP IP address with the NULL IP address.  */
    interface_record -> nx_dhcp_ip_address =  NX_BOOTP_NO_ADDRESS;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2200      	movs	r2, #0
 8007700:	60da      	str	r2, [r3, #12]

    /* Initialize the client DHCP server IP address.  */
    interface_record -> nx_dhcp_server_ip =  NX_BOOTP_NO_ADDRESS;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2200      	movs	r2, #0
 8007706:	615a      	str	r2, [r3, #20]

    /* Initialize renew and rebind timeout values to zero.  */
    interface_record -> nx_dhcp_rebind_time = 0;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2200      	movs	r2, #0
 800770c:	635a      	str	r2, [r3, #52]	@ 0x34
    interface_record -> nx_dhcp_renewal_time =  0;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2200      	movs	r2, #0
 8007712:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup for infinite lease time request.  */
    interface_record -> nx_dhcp_lease_time =  NX_DHCP_INFINITE_LEASE;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800771a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Get the client MAC address from the device interface. */
    client_physical_msw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6899      	ldr	r1, [r3, #8]
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	011b      	lsls	r3, r3, #4
 800772a:	440b      	add	r3, r1
 800772c:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]
    client_physical_lsw = dhcp_ptr ->  nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6899      	ldr	r1, [r3, #8]
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	440b      	add	r3, r1
 8007744:	f203 7334 	addw	r3, r3, #1844	@ 0x734
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60bb      	str	r3, [r7, #8]

    /* Generate a 'unique' client transaction ID from the MAC address for each message to the server. */
    interface_record -> nx_dhcp_xid =  (ULONG)(client_physical_msw ^ client_physical_lsw ^ (ULONG)NX_RAND());
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	ea82 0403 	eor.w	r4, r2, r3
 8007754:	f00c fba6 	bl	8013ea4 <rand>
 8007758:	4603      	mov	r3, r0
 800775a:	ea84 0203 	eor.w	r2, r4, r3
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	605a      	str	r2, [r3, #4]

    /* Clear the timeout.  */
    interface_record -> nx_dhcp_timeout = 0;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2200      	movs	r2, #0
 8007766:	621a      	str	r2, [r3, #32]

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex)); 
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 800776e:	3308      	adds	r3, #8
 8007770:	4618      	mov	r0, r3
 8007772:	f00b ffc7 	bl	8013704 <_txe_mutex_put>
    return(NX_SUCCESS); 
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	371c      	adds	r7, #28
 800777c:	46bd      	mov	sp, r7
 800777e:	bd90      	pop	{r4, r7, pc}

08007780 <_nxe_dhcp_stop>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_dhcp_stop(NX_DHCP *dhcp_ptr)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for invalid input pointer.  */
    if ((dhcp_ptr == NX_NULL) || (dhcp_ptr -> nx_dhcp_id != NX_DHCP_ID))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d004      	beq.n	8007798 <_nxe_dhcp_stop+0x18>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a11      	ldr	r2, [pc, #68]	@ (80077d8 <_nxe_dhcp_stop+0x58>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d001      	beq.n	800779c <_nxe_dhcp_stop+0x1c>
        return(NX_PTR_ERROR);
 8007798:	2307      	movs	r3, #7
 800779a:	e018      	b.n	80077ce <_nxe_dhcp_stop+0x4e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800779c:	f3ef 8305 	mrs	r3, IPSR
 80077a0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80077a2:	68ba      	ldr	r2, [r7, #8]
    
    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 80077a4:	4b0d      	ldr	r3, [pc, #52]	@ (80077dc <_nxe_dhcp_stop+0x5c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d108      	bne.n	80077c0 <_nxe_dhcp_stop+0x40>
 80077ae:	4b0c      	ldr	r3, [pc, #48]	@ (80077e0 <_nxe_dhcp_stop+0x60>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d004      	beq.n	80077c0 <_nxe_dhcp_stop+0x40>
 80077b6:	4b0a      	ldr	r3, [pc, #40]	@ (80077e0 <_nxe_dhcp_stop+0x60>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a0a      	ldr	r2, [pc, #40]	@ (80077e4 <_nxe_dhcp_stop+0x64>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d101      	bne.n	80077c4 <_nxe_dhcp_stop+0x44>
 80077c0:	2311      	movs	r3, #17
 80077c2:	e004      	b.n	80077ce <_nxe_dhcp_stop+0x4e>

    /* Call actual DHCP stop service.  */
    status =  _nx_dhcp_stop(dhcp_ptr);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f80f 	bl	80077e8 <_nx_dhcp_stop>
 80077ca:	60f8      	str	r0, [r7, #12]

    /* Return status.  */
    return(status);
 80077cc:	68fb      	ldr	r3, [r7, #12]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	44484350 	.word	0x44484350
 80077dc:	20000098 	.word	0x20000098
 80077e0:	2000ae14 	.word	0x2000ae14
 80077e4:	2000af5c 	.word	0x2000af5c

080077e8 <_nx_dhcp_stop>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_stop(NX_DHCP *dhcp_ptr)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]

UINT i;


    /* Get the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80077f6:	3308      	adds	r3, #8
 80077f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80077fc:	4618      	mov	r0, r3
 80077fe:	f00b ff27 	bl	8013650 <_txe_mutex_get>

    /* Check all interfaces to find out which need to stop the DHCP protocol.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e02b      	b.n	8007860 <_nx_dhcp_stop+0x78>
    {

        /* Check if this record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8007810:	fb01 f303 	mul.w	r3, r1, r3
 8007814:	4413      	add	r3, r2
 8007816:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800781a:	3310      	adds	r3, #16
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01b      	beq.n	800785a <_nx_dhcp_stop+0x72>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 800782a:	fb01 f303 	mul.w	r3, r1, r3
 800782e:	4413      	add	r3, r2
 8007830:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8007834:	3311      	adds	r3, #17
 8007836:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00e      	beq.n	800785a <_nx_dhcp_stop+0x72>
        {

            /* Stop DHCP.  */
            _nx_dhcp_interface_stop(dhcp_ptr, dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index);
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8007844:	fb01 f303 	mul.w	r3, r1, r3
 8007848:	4413      	add	r3, r2
 800784a:	f503 53ed 	add.w	r3, r3, #7584	@ 0x1da0
 800784e:	330c      	adds	r3, #12
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f825 	bl	80078a4 <_nx_dhcp_interface_stop>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3301      	adds	r3, #1
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0d0      	beq.n	8007808 <_nx_dhcp_stop+0x20>
       }
    }

    /* Stop DHCP Thread. */
    tx_thread_suspend(&(dhcp_ptr -> nx_dhcp_thread));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f603 4354 	addw	r3, r3, #3156	@ 0xc54
 800786c:	4618      	mov	r0, r3
 800786e:	f00c f9d1 	bl	8013c14 <_txe_thread_suspend>

    /* Deactivate DHCP Timer.  */
    tx_timer_deactivate(&(dhcp_ptr -> nx_dhcp_timer));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f503 53eb 	add.w	r3, r3, #7520	@ 0x1d60
 8007878:	3304      	adds	r3, #4
 800787a:	4618      	mov	r0, r3
 800787c:	f00c fab2 	bl	8013de4 <_txe_timer_deactivate>

    /* Ubind UDP socket.  */
    nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 8007886:	4618      	mov	r0, r3
 8007888:	f006 ffa4 	bl	800e7d4 <_nx_udp_socket_unbind>

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007892:	3308      	adds	r3, #8
 8007894:	4618      	mov	r0, r3
 8007896:	f00b ff35 	bl	8013704 <_txe_mutex_put>
    return(NX_SUCCESS);
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <_nx_dhcp_interface_stop>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT _nx_dhcp_interface_stop(NX_DHCP *dhcp_ptr, UINT iface_index)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]

UINT                     i;
UINT                     status;
UINT                     original_state;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60bb      	str	r3, [r7, #8]


    /* Obtain the DHCP mutex.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80078b8:	3308      	adds	r3, #8
 80078ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80078be:	4618      	mov	r0, r3
 80078c0:	f00b fec6 	bl	8013650 <_txe_mutex_get>

    /* Find the interface record.  */
    status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 80078c4:	f107 0308 	add.w	r3, r7, #8
 80078c8:	461a      	mov	r2, r3
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 fcde 	bl	800928e <_nx_dhcp_interface_record_find>
 80078d2:	6138      	str	r0, [r7, #16]

    /* Check status.  */
    if (status)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d008      	beq.n	80078ec <_nx_dhcp_interface_stop+0x48>
    {

        /* Not found. Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80078e0:	3308      	adds	r3, #8
 80078e2:	4618      	mov	r0, r3
 80078e4:	f00b ff0e 	bl	8013704 <_txe_mutex_put>
        return(status);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	e085      	b.n	80079f8 <_nx_dhcp_interface_stop+0x154>
    }

    /* Get the original state.  */
    original_state = interface_record -> nx_dhcp_state;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	785b      	ldrb	r3, [r3, #1]
 80078f0:	60fb      	str	r3, [r7, #12]

    /* Determine if DHCP is started.  */
    if (interface_record -> nx_dhcp_state == NX_DHCP_STATE_NOT_STARTED)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d108      	bne.n	800790c <_nx_dhcp_interface_stop+0x68>
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007900:	3308      	adds	r3, #8
 8007902:	4618      	mov	r0, r3
 8007904:	f00b fefe 	bl	8013704 <_txe_mutex_put>
   
        /* DHCP is not started so it can't be stopped.  */
        return(NX_DHCP_NOT_STARTED);
 8007908:	2396      	movs	r3, #150	@ 0x96
 800790a:	e075      	b.n	80079f8 <_nx_dhcp_interface_stop+0x154>
    }

    /* Set the state to NX_DHCP_STATE_NOT_STARTED.  */
    interface_record -> nx_dhcp_state = NX_DHCP_STATE_NOT_STARTED;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	705a      	strb	r2, [r3, #1]

    /* Check if the state is changed.  */
    if (original_state != interface_record -> nx_dhcp_state)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	785b      	ldrb	r3, [r3, #1]
 8007916:	461a      	mov	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4293      	cmp	r3, r2
 800791c:	d022      	beq.n	8007964 <_nx_dhcp_interface_stop+0xc0>
    {

        /* Determine if the application has specified a routine for DHCP state change notification.  */
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007924:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <_nx_dhcp_interface_stop+0x9c>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007932:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	7852      	ldrb	r2, [r2, #1]
 800793a:	4611      	mov	r1, r2
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
        }

        /* Determine if the application has specified a routine for DHCP interface state change notification.  */
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007946:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <_nx_dhcp_interface_stop+0xc0>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record->nx_dhcp_state);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007954:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	69d1      	ldr	r1, [r2, #28]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	7852      	ldrb	r2, [r2, #1]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
        }
    }

    /* Check if other interfaces are running DHCP.  */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 8007964:	2300      	movs	r3, #0
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e025      	b.n	80079b6 <_nx_dhcp_interface_stop+0x112>
    {

        /* Check which interface record is valid.  */
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8007972:	fb01 f303 	mul.w	r3, r1, r3
 8007976:	4413      	add	r3, r2
 8007978:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800797c:	3310      	adds	r3, #16
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d015      	beq.n	80079b0 <_nx_dhcp_interface_stop+0x10c>
            (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_state != NX_DHCP_STATE_NOT_STARTED))
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 800798c:	fb01 f303 	mul.w	r3, r1, r3
 8007990:	4413      	add	r3, r2
 8007992:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8007996:	3311      	adds	r3, #17
 8007998:	781b      	ldrb	r3, [r3, #0]
        if ((dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid) &&
 800799a:	2b00      	cmp	r3, #0
 800799c:	d008      	beq.n	80079b0 <_nx_dhcp_interface_stop+0x10c>

            /* Yes, other interfaces have started DHCP. We can assume Netx and ThreadX
               resources need to stay activated. */

            /* Release the DHCP mutex.  */
            tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80079a4:	3308      	adds	r3, #8
 80079a6:	4618      	mov	r0, r3
 80079a8:	f00b feac 	bl	8013704 <_txe_mutex_put>
            return(NX_SUCCESS);
 80079ac:	2300      	movs	r3, #0
 80079ae:	e023      	b.n	80079f8 <_nx_dhcp_interface_stop+0x154>
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++)
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	3301      	adds	r3, #1
 80079b4:	617b      	str	r3, [r7, #20]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0d6      	beq.n	800796a <_nx_dhcp_interface_stop+0xc6>
        }
    }
                 
    /* Has DHCP stopped on all interfaces? */
    if (i == NX_DHCP_CLIENT_MAX_RECORDS) 
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d112      	bne.n	80079e8 <_nx_dhcp_interface_stop+0x144>
    {

        /* Yes, stop DHCP Thread. */
        tx_thread_suspend(&(dhcp_ptr -> nx_dhcp_thread));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f603 4354 	addw	r3, r3, #3156	@ 0xc54
 80079c8:	4618      	mov	r0, r3
 80079ca:	f00c f923 	bl	8013c14 <_txe_thread_suspend>

        /* Deactivate DHCP Timer.  */
        tx_timer_deactivate(&(dhcp_ptr -> nx_dhcp_timer));
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 53eb 	add.w	r3, r3, #7520	@ 0x1d60
 80079d4:	3304      	adds	r3, #4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f00c fa04 	bl	8013de4 <_txe_timer_deactivate>

        /* Unbind UDP socket.  */
        nx_udp_socket_unbind(&(dhcp_ptr -> nx_dhcp_socket));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 80079e2:	4618      	mov	r0, r3
 80079e4:	f006 fef6 	bl	800e7d4 <_nx_udp_socket_unbind>
    }

    /* Release the DHCP mutex.  */
    tx_mutex_put(&(dhcp_ptr->nx_dhcp_mutex));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 80079ee:	3308      	adds	r3, #8
 80079f0:	4618      	mov	r0, r3
 80079f2:	f00b fe87 	bl	8013704 <_txe_mutex_put>
    return(NX_SUCCESS);
 80079f6:	2300      	movs	r3, #0

}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_nx_dhcp_udp_receive_notify>:
/*                                            multiple client instances,  */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_udp_receive_notify(NX_UDP_SOCKET *socket_ptr)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]

NX_DHCP *dhcp_ptr;

    dhcp_ptr = (NX_DHCP *)(socket_ptr -> nx_udp_socket_reserved_ptr);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a0c:	60fb      	str	r3, [r7, #12]

    /* Set the data received event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_RECEIVE_EVENT, TX_OR);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 53e9 	add.w	r3, r3, #7456	@ 0x1d20
 8007a14:	331c      	adds	r3, #28
 8007a16:	2200      	movs	r2, #0
 8007a18:	2101      	movs	r1, #1
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f00b fd0e 	bl	801343c <_txe_event_flags_set>
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <_nx_dhcp_timeout_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_entry(ULONG dhcp)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]

NX_DHCP     *dhcp_ptr;


    /* Setup DHCP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	60fb      	str	r3, [r7, #12]

    /* Set the data event flag.  */
    tx_event_flags_set(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_TIMER_EVENT, TX_OR);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 53e9 	add.w	r3, r3, #7456	@ 0x1d20
 8007a3a:	331c      	adds	r3, #28
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	2102      	movs	r1, #2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f00b fcfb 	bl	801343c <_txe_event_flags_set>
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <_nx_dhcp_thread_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_thread_entry(ULONG dhcp_instance)
{
 8007a4e:	b590      	push	{r4, r7, lr}
 8007a50:	b08f      	sub	sp, #60	@ 0x3c
 8007a52:	af02      	add	r7, sp, #8
 8007a54:	6078      	str	r0, [r7, #4]
UINT                      status;
UINT                      iface_index;
UINT                      source_port;
ULONG                     source_ip_address;
UINT                      protocol;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]

    /* Setup the DHCP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(dhcp_ptr, NX_DHCP, dhcp_instance)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Obtain the DHCP mutex before processing an.  */
    tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007a64:	3308      	adds	r3, #8
 8007a66:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f00b fdf0 	bl	8013650 <_txe_mutex_get>
    /* Enter the DHCP Client task loop.  */
    do
    {

        /* Release the DHCP mutex.  */
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8007a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a72:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007a76:	3308      	adds	r3, #8
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f00b fe43 	bl	8013704 <_txe_mutex_put>

        /* Wait for a DHCP client activity.  */
        tx_event_flags_get(&(dhcp_ptr -> nx_dhcp_events), NX_DHCP_CLIENT_ALL_EVENTS, 
 8007a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a80:	f503 50e9 	add.w	r0, r3, #7456	@ 0x1d20
 8007a84:	301c      	adds	r0, #28
 8007a86:	f107 0320 	add.w	r3, r7, #32
 8007a8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a8e:	9200      	str	r2, [sp, #0]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007a96:	f00b fc7b 	bl	8013390 <_txe_event_flags_get>
                           TX_OR_CLEAR, &events, TX_WAIT_FOREVER);

        /* Obtain the DHCP mutex before processing an.  */
        tx_mutex_get(&(dhcp_ptr -> nx_dhcp_mutex), TX_WAIT_FOREVER);
 8007a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9c:	f503 53e8 	add.w	r3, r3, #7424	@ 0x1d00
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f00b fdd2 	bl	8013650 <_txe_mutex_get>

        /* Check for DHCP data received event.  */
        if  (events & NX_DHCP_CLIENT_RECEIVE_EVENT)
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d03a      	beq.n	8007b2c <_nx_dhcp_thread_entry+0xde>
            /* Loop to receive DHCP message.  */
            while(1)
            {

                /* Check for an incoming DHCP packet with non blocking option. */
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8007ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab8:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 8007abc:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f006 fcc0 	bl	800e448 <_nx_udp_socket_receive>
 8007ac8:	62b8      	str	r0, [r7, #40]	@ 0x28

                /* Check for packet receive errors. */
                if (status != NX_SUCCESS)
 8007aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d12c      	bne.n	8007b2a <_nx_dhcp_thread_entry+0xdc>
                {
                    break;
                }

                /* Find the source IP address, port, interface this packet is on. */
                status = nx_udp_packet_info_extract(packet_ptr, &source_ip_address, &protocol, &source_port, &iface_index);
 8007ad0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ad2:	f107 0418 	add.w	r4, r7, #24
 8007ad6:	f107 0210 	add.w	r2, r7, #16
 8007ada:	f107 0114 	add.w	r1, r7, #20
 8007ade:	f107 031c 	add.w	r3, r7, #28
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	4623      	mov	r3, r4
 8007ae6:	f006 f812 	bl	800db0e <_nx_udp_packet_info_extract>
 8007aea:	62b8      	str	r0, [r7, #40]	@ 0x28

                /* Check status.  */
                if (status != NX_SUCCESS) 
 8007aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d004      	beq.n	8007afc <_nx_dhcp_thread_entry+0xae>
                {

                    nx_packet_release(packet_ptr); 
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	4618      	mov	r0, r3
 8007af6:	f005 fde9 	bl	800d6cc <_nx_packet_release>
                    continue;
 8007afa:	e015      	b.n	8007b28 <_nx_dhcp_thread_entry+0xda>
                }

                /* Find the interface record.  */
                status = _nx_dhcp_interface_record_find(dhcp_ptr, iface_index, &interface_record);
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	f107 020c 	add.w	r2, r7, #12
 8007b02:	4619      	mov	r1, r3
 8007b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b06:	f001 fbc2 	bl	800928e <_nx_dhcp_interface_record_find>
 8007b0a:	62b8      	str	r0, [r7, #40]	@ 0x28

                /* Check status.  */
                if (status != NX_SUCCESS)
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d004      	beq.n	8007b1c <_nx_dhcp_thread_entry+0xce>
                {

                    /* Release the original packet . */
                    nx_packet_release(packet_ptr);
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	4618      	mov	r0, r3
 8007b16:	f005 fdd9 	bl	800d6cc <_nx_packet_release>
                    continue;
 8007b1a:	e005      	b.n	8007b28 <_nx_dhcp_thread_entry+0xda>
                }
                
                /* Process DHCP packet.  */
                _nx_dhcp_packet_process(dhcp_ptr, interface_record, packet_ptr);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b20:	4619      	mov	r1, r3
 8007b22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b24:	f000 f80c 	bl	8007b40 <_nx_dhcp_packet_process>
                status = _nx_udp_socket_receive(&dhcp_ptr -> nx_dhcp_socket, &packet_ptr, NX_NO_WAIT);
 8007b28:	e7c5      	b.n	8007ab6 <_nx_dhcp_thread_entry+0x68>
                    break;
 8007b2a:	bf00      	nop
            }
        }

        /* Timer event.  */
        if (events & NX_DHCP_CLIENT_TIMER_EVENT)
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d09c      	beq.n	8007a70 <_nx_dhcp_thread_entry+0x22>
        {
            _nx_dhcp_timeout_process(dhcp_ptr);
 8007b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007b38:	f000 fa66 	bl	8008008 <_nx_dhcp_timeout_process>
        tx_mutex_put(&(dhcp_ptr -> nx_dhcp_mutex));
 8007b3c:	e798      	b.n	8007a70 <_nx_dhcp_thread_entry+0x22>
	...

08007b40 <_nx_dhcp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_dhcp_packet_process(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, NX_PACKET *packet_ptr)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b094      	sub	sp, #80	@ 0x50
 8007b44:	af02      	add	r7, sp, #8
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
#ifdef NX_DHCP_CLIENT_SEND_ARP_PROBE
ULONG       probing_delay;
#endif

    /* Set the IP pointer and interface index.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	647b      	str	r3, [r7, #68]	@ 0x44
    iface_index = interface_record -> nx_dhcp_interface_index;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length <= NX_BOOTP_OFFSET_OPTIONS)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	2bf0      	cmp	r3, #240	@ 0xf0
 8007b5e:	d803      	bhi.n	8007b68 <_nx_dhcp_packet_process+0x28>
    {

        /* Release the packet. */
        nx_packet_release(packet_ptr);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f005 fdb3 	bl	800d6cc <_nx_packet_release>

        /* Return.  */
        return;
 8007b66:	e24c      	b.n	8008002 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Copy the received packet (datagram) over to a packet from the DHCP Client pool and release
       the packet back to receive packet pool as soon as possible. */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &new_packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	@ 0xbd8
 8007b6e:	f107 0118 	add.w	r1, r7, #24
 8007b72:	2300      	movs	r3, #0
 8007b74:	222c      	movs	r2, #44	@ 0x2c
 8007b76:	f005 f915 	bl	800cda4 <_nx_packet_allocate>
 8007b7a:	63f8      	str	r0, [r7, #60]	@ 0x3c

    /* Check status.  */
    if (status != NX_SUCCESS)
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <_nx_dhcp_packet_process+0x4a>
    {

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f005 fda2 	bl	800d6cc <_nx_packet_release>

        /* Error allocating packet, return error status.  */
        return;
 8007b88:	e23b      	b.n	8008002 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Verify the incoming packet does not exceed our DHCP Client packet payload. */
    if ((ULONG)(new_packet_ptr -> nx_packet_data_end - new_packet_ptr -> nx_packet_prepend_ptr) < ((packet_ptr) -> nx_packet_length))
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	695a      	ldr	r2, [r3, #20]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	461a      	mov	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d207      	bcs.n	8007bae <_nx_dhcp_packet_process+0x6e>
    {

        /* Release the newly allocated packet . */
        nx_packet_release(new_packet_ptr);
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f005 fd93 	bl	800d6cc <_nx_packet_release>
        
        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f005 fd90 	bl	800d6cc <_nx_packet_release>

        return;
 8007bac:	e229      	b.n	8008002 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Initialize the offset to the beginning of the packet buffer. */
    offset = 0;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    status = nx_packet_data_extract_offset(packet_ptr, offset, (VOID *)new_packet_ptr -> nx_packet_prepend_ptr, (packet_ptr) -> nx_packet_length, &bytes_copied);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	689a      	ldr	r2, [r3, #8]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007bba:	f107 0310 	add.w	r3, r7, #16
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f005 fb08 	bl	800d1da <_nx_packet_data_extract_offset>
 8007bca:	63f8      	str	r0, [r7, #60]	@ 0x3c

    /* Check status.  */
    if ((status != NX_SUCCESS) || (bytes_copied == 0))
 8007bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d102      	bne.n	8007bd8 <_nx_dhcp_packet_process+0x98>
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d107      	bne.n	8007be8 <_nx_dhcp_packet_process+0xa8>
    {

        /* Release the allocated packet we'll never send. */
        nx_packet_release(new_packet_ptr);
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f005 fd76 	bl	800d6cc <_nx_packet_release>

        /* Release the original packet. */
        nx_packet_release(packet_ptr);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f005 fd73 	bl	800d6cc <_nx_packet_release>

        /* Error extracting packet buffer, return error status.  */
        return;
 8007be6:	e20c      	b.n	8008002 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Update the new packet with the bytes copied.  For chained packets, this will reflect the total
       'datagram' length. */
    new_packet_ptr -> nx_packet_length = bytes_copied; 
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	625a      	str	r2, [r3, #36]	@ 0x24


    /* Now we can release the original packet. */
    nx_packet_release(packet_ptr);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f005 fd6c 	bl	800d6cc <_nx_packet_release>

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 8007bf4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007bf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bf8:	4613      	mov	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	440b      	add	r3, r1
 8007c02:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
    dhcp_client_mac_lsw = ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 8007c0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	440b      	add	r3, r1
 8007c18:	f203 7334 	addw	r3, r3, #1844	@ 0x734
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set work_ptr.  */
    work_ptr = new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_CLIENT_HW;
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	331c      	adds	r3, #28
 8007c26:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Pickup the target MAC address in the DHCP message.  */
    packet_client_mac_msw = (((ULONG)work_ptr[0]) << 8) | ((ULONG)work_ptr[1]);
 8007c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	021b      	lsls	r3, r3, #8
 8007c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c30:	3201      	adds	r2, #1
 8007c32:	7812      	ldrb	r2, [r2, #0]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8007c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3a:	3302      	adds	r3, #2
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	061a      	lsls	r2, r3, #24
                            (((ULONG)work_ptr[3]) << 16) |
 8007c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c42:	3303      	adds	r3, #3
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	041b      	lsls	r3, r3, #16
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8007c48:	431a      	orrs	r2, r3
                            (((ULONG)work_ptr[4]) << 8) |
 8007c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	021b      	lsls	r3, r3, #8
                            (((ULONG)work_ptr[3]) << 16) |
 8007c52:	4313      	orrs	r3, r2
                            ((ULONG)work_ptr[5]);
 8007c54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c56:	3205      	adds	r2, #5
 8007c58:	7812      	ldrb	r2, [r2, #0]
    packet_client_mac_lsw = (((ULONG)work_ptr[2]) << 24) |
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the  MAC address matches ours.  */
    if ((packet_client_mac_msw != dhcp_client_mac_msw) || (packet_client_mac_lsw != dhcp_client_mac_lsw))
 8007c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d103      	bne.n	8007c6e <_nx_dhcp_packet_process+0x12e>
 8007c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d004      	beq.n	8007c78 <_nx_dhcp_packet_process+0x138>
    {

        /* Release the allocated packet. */
        nx_packet_release(new_packet_ptr);
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f005 fd2b 	bl	800d6cc <_nx_packet_release>
        return;
 8007c76:	e1c4      	b.n	8008002 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Check if XIDs match.  */
    if (_nx_dhcp_get_data(new_packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_XID, 4) != interface_record -> nx_dhcp_xid)
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	3304      	adds	r3, #4
 8007c7e:	2104      	movs	r1, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f001 fa95 	bl	80091b0 <_nx_dhcp_get_data>
 8007c86:	4602      	mov	r2, r0
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d004      	beq.n	8007c9a <_nx_dhcp_packet_process+0x15a>
    {

        /* Release the original packet . */
        nx_packet_release(new_packet_ptr);
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f005 fd1a 	bl	800d6cc <_nx_packet_release>

        /* Error with XID data, return error status.  */
        return;
 8007c98:	e1b3      	b.n	8008002 <_nx_dhcp_packet_process+0x4c2>
    }

    /* Save the original state for the state change callback; after this point we will likely change it. */                          
    original_state  = interface_record -> nx_dhcp_state;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	623b      	str	r3, [r7, #32]

    /* The action depends on the current state of the dhcp client. */
    switch (interface_record -> nx_dhcp_state)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	3b03      	subs	r3, #3
 8007ca6:	2b04      	cmp	r3, #4
 8007ca8:	f200 816c 	bhi.w	8007f84 <_nx_dhcp_packet_process+0x444>
 8007cac:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <_nx_dhcp_packet_process+0x174>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007cc9 	.word	0x08007cc9
 8007cb8:	08007d55 	.word	0x08007d55
 8007cbc:	08007f85 	.word	0x08007f85
 8007cc0:	08007e1d 	.word	0x08007e1d
 8007cc4:	08007ed3 	.word	0x08007ed3

        case NX_DHCP_STATE_SELECTING:
        {
    
            /* Set up a buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	61fb      	str	r3, [r7, #28]

            /* Get what type of DHCP message it is. */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr -> nx_packet_length);
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd2:	f107 0214 	add.w	r2, r7, #20
 8007cd6:	2135      	movs	r1, #53	@ 0x35
 8007cd8:	69f8      	ldr	r0, [r7, #28]
 8007cda:	f001 f8ba 	bl	8008e52 <_nx_dhcp_get_option_value>
 8007cde:	63f8      	str	r0, [r7, #60]	@ 0x3c

            /* Determine if it is an Offer.  */        
            if ((status == NX_SUCCESS) && (dhcp_type == NX_DHCP_TYPE_DHCPOFFER))
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f040 8150 	bne.w	8007f88 <_nx_dhcp_packet_process+0x448>
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	f040 814c 	bne.w	8007f88 <_nx_dhcp_packet_process+0x448>
            {

                /* Yes, a valid Offer is received!  */

                /* Increment the number of offers received.  */
                interface_record -> nx_dhcp_offers_received++;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

                /* Update the DHCP Client interface parameters (IP address, server IP, lease, renewal and rebind times */
                if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	68b9      	ldr	r1, [r7, #8]
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 ff83 	bl	8008c12 <_nx_dhcp_extract_information>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f040 813c 	bne.w	8007f8c <_nx_dhcp_packet_process+0x44c>
                    break;

                /* Send the DHCP Request to accept the offer.  */
                _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8007d14:	2203      	movs	r2, #3
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 fb29 	bl	8008370 <_nx_dhcp_send_request_internal>

                /* Reset the initial timeout to NX_DHCP_MIN_RETRANS_TIMEOUT seconds  */
                interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007d24:	625a      	str	r2, [r3, #36]	@ 0x24
                interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	621a      	str	r2, [r3, #32]

                /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f001 f990 	bl	8009058 <_nx_dhcp_add_randomize>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	621a      	str	r2, [r3, #32]

                /* Check if the timeout is zero.  */
                if (interface_record -> nx_dhcp_timeout == 0)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d102      	bne.n	8007d4c <_nx_dhcp_packet_process+0x20c>
                    interface_record -> nx_dhcp_timeout = 1;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	621a      	str	r2, [r3, #32]

                /* Update the state to Requesting state.  */
                interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	705a      	strb	r2, [r3, #1]
           }

           /* Let the timeout processing handle retransmissions. We're done here */
           break;
 8007d52:	e119      	b.n	8007f88 <_nx_dhcp_packet_process+0x448>
            /* Also initialize status to success since we won't make the get option call. */               
            status = NX_SUCCESS;
#endif

            /* Setup buffer pointer.  */
            buffer = new_packet_ptr -> nx_packet_prepend_ptr;
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	61fb      	str	r3, [r7, #28]

#ifndef NX_DHCP_ENABLE_BOOTP
            /* There is a valid DHCP response, see if it is an ACK.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5e:	f107 0214 	add.w	r2, r7, #20
 8007d62:	2135      	movs	r1, #53	@ 0x35
 8007d64:	69f8      	ldr	r0, [r7, #28]
 8007d66:	f001 f874 	bl	8008e52 <_nx_dhcp_get_option_value>
 8007d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
#endif
            /* Proceed to processing the server response?   */
            if (status == NX_SUCCESS)
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f040 810e 	bne.w	8007f90 <_nx_dhcp_packet_process+0x450>
            {

                /* Yes, check and see if it is an ACK back to our previous request.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	2b05      	cmp	r3, #5
 8007d78:	d12d      	bne.n	8007dd6 <_nx_dhcp_packet_process+0x296>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

                    /* Either we got an ACK or we are using BOOTP.  */

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8c:	69fa      	ldr	r2, [r7, #28]
 8007d8e:	68b9      	ldr	r1, [r7, #8]
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f000 ff3e 	bl	8008c12 <_nx_dhcp_extract_information>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 80fb 	bne.w	8007f94 <_nx_dhcp_packet_process+0x454>
                    /* Setup the handler to indicate the we want collision notification.  */
                    ip_ptr -> nx_ip_interface[iface_index].nx_interface_ip_conflict_notify_handler = _nx_dhcp_ip_conflict;

#else    /* NX_DHCP_CLIENT_SEND_ARP_PROBE not defined: */

                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007da8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007daa:	f003 fce1 	bl	800b770 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d007      	beq.n	8007dc6 <_nx_dhcp_packet_process+0x286>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	f003 fb45 	bl	800b450 <_nx_ip_gateway_address_set>
                    }

                    /* No ARP probe performed. OK to change to the Bound state.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2205      	movs	r2, #5
 8007dca:	705a      	strb	r2, [r3, #1]
#ifdef NX_DHCP_ENABLE_BOOTP
                    /* BOOTP does not use timeouts.  For the life of this DHCP Client application, keep the same IP address. */
                    interface_record -> nx_dhcp_timeout = NX_WAIT_FOREVER; 
#else
                    /* Set the renewal time received from the server.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	621a      	str	r2, [r3, #32]
#endif /* NX_DHCP_ENABLE_BOOTP  */

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE*/

                    break;
 8007dd4:	e0e7      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
                }
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b06      	cmp	r3, #6
 8007dda:	f040 80d9 	bne.w	8007f90 <_nx_dhcp_packet_process+0x450>
                {
                                                 
                    /* Increment the number of NACKs received.  */
                    interface_record -> nx_dhcp_nacks_received++;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198

                    /* Reinitialize DHCP.  */
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	4619      	mov	r1, r3
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7ff fa32 	bl	800725c <_nx_dhcp_interface_reinitialize>

                    /* Restart DHCP service for this interface record.  */

                    /* Start the DHCP protocol again by setting the state back to INIT. */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	705a      	strb	r2, [r3, #1]
                    /* The client begins in INIT state and forms a DHCPDISCOVER message.
                       The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                       RFC2131, Section4.4.1, Page36.  */

                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2264      	movs	r2, #100	@ 0x64
 8007e02:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2200      	movs	r2, #0
 8007e08:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* Check if the timeout is less than 1 second.  */
                    if (interface_record -> nx_dhcp_timeout < NX_IP_PERIODIC_RATE)
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	2b63      	cmp	r3, #99	@ 0x63
 8007e10:	f200 80be 	bhi.w	8007f90 <_nx_dhcp_packet_process+0x450>
                        interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	2264      	movs	r2, #100	@ 0x64
 8007e18:	621a      	str	r2, [r3, #32]
                }
            }
            break;
 8007e1a:	e0b9      	b.n	8007f90 <_nx_dhcp_packet_process+0x450>

        case NX_DHCP_STATE_RENEWING:
        {

            /* Setup the buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	61fb      	str	r3, [r7, #28]

            /* Check the server response if it accepts are renewal.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e26:	f107 0214 	add.w	r2, r7, #20
 8007e2a:	2135      	movs	r1, #53	@ 0x35
 8007e2c:	69f8      	ldr	r0, [r7, #28]
 8007e2e:	f001 f810 	bl	8008e52 <_nx_dhcp_get_option_value>
 8007e32:	63f8      	str	r0, [r7, #60]	@ 0x3c

            /* Was the option retrieved?  */
            if (status == NX_SUCCESS)
 8007e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f040 80ae 	bne.w	8007f98 <_nx_dhcp_packet_process+0x458>
            {

                /* Yes, Check for an ACK.  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b05      	cmp	r3, #5
 8007e40:	d12d      	bne.n	8007e9e <_nx_dhcp_packet_process+0x35e>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8007e48:	1c5a      	adds	r2, r3, #1
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 feda 	bl	8008c12 <_nx_dhcp_extract_information>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f040 809b 	bne.w	8007f9c <_nx_dhcp_packet_process+0x45c>
                        break;
                    
                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e70:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007e72:	f003 fc7d 	bl	800b770 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <_nx_dhcp_packet_process+0x34e>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f003 fae1 	bl	800b450 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state*/
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	621a      	str	r2, [r3, #32]

                    /* Change the state back to bound.  */
                    interface_record -> nx_dhcp_state =  NX_DHCP_STATE_BOUND;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2205      	movs	r2, #5
 8007e9a:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 8007e9c:	e07c      	b.n	8007f98 <_nx_dhcp_packet_process+0x458>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2b06      	cmp	r3, #6
 8007ea2:	d179      	bne.n	8007f98 <_nx_dhcp_packet_process+0x458>
                    interface_record -> nx_dhcp_nacks_received++;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff f9cf 	bl	800725c <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2264      	movs	r2, #100	@ 0x64
 8007ec8:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 8007ed0:	e062      	b.n	8007f98 <_nx_dhcp_packet_process+0x458>

        case NX_DHCP_STATE_REBINDING:
        {

            /* Setup buffer pointer.  */
            buffer =  new_packet_ptr -> nx_packet_prepend_ptr;
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	61fb      	str	r3, [r7, #28]

            /* There is a valid DHCP response, pickup the type of response.  */
            status = _nx_dhcp_get_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, &dhcp_type, new_packet_ptr ->nx_packet_length);
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007edc:	f107 0214 	add.w	r2, r7, #20
 8007ee0:	2135      	movs	r1, #53	@ 0x35
 8007ee2:	69f8      	ldr	r0, [r7, #28]
 8007ee4:	f000 ffb5 	bl	8008e52 <_nx_dhcp_get_option_value>
 8007ee8:	63f8      	str	r0, [r7, #60]	@ 0x3c

            /* Valid response?  */
            if (status == NX_SUCCESS)
 8007eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d157      	bne.n	8007fa0 <_nx_dhcp_packet_process+0x460>
            {

                /* Is it an ACK response?  */
                if (dhcp_type == NX_DHCP_TYPE_DHCPACK)
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	2b05      	cmp	r3, #5
 8007ef4:	d12c      	bne.n	8007f50 <_nx_dhcp_packet_process+0x410>
                {

                    /* Increment the number of ACKs received.  */
                    interface_record -> nx_dhcp_acks_received++;
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8007efc:	1c5a      	adds	r2, r3, #1
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194

                    /* Update the parameters (IP address, server IP, lease, renewal and rebind times */
                    if (_nx_dhcp_extract_information(dhcp_ptr, interface_record, buffer, new_packet_ptr -> nx_packet_length))
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	69fa      	ldr	r2, [r7, #28]
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fe80 	bl	8008c12 <_nx_dhcp_extract_information>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d145      	bne.n	8007fa4 <_nx_dhcp_packet_process+0x464>
                        break;

                    /* Set the IP address and gateway address from the value extracted from the Server's DHCP response. */
                    nx_ip_interface_address_set(ip_ptr, iface_index, 
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f22:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007f24:	f003 fc24 	bl	800b770 <_nx_ip_interface_address_set>
                                                interface_record -> nx_dhcp_ip_address,  
                                                interface_record -> nx_dhcp_network_mask);

                    /* Check if the gateway address is valid.  */
                    if (interface_record -> nx_dhcp_gateway_address)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d007      	beq.n	8007f40 <_nx_dhcp_packet_process+0x400>
                    {

                        /* Set the gateway address.  */
                        nx_ip_gateway_address_set(dhcp_ptr -> nx_dhcp_ip_ptr, interface_record -> nx_dhcp_gateway_address);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f003 fa88 	bl	800b450 <_nx_ip_gateway_address_set>
                    }

                    /* Lease has been renewed, set the countdown timer back to the renewal time and go back 
                       to the Bound state.  */
                    interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_renewal_time;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	621a      	str	r2, [r3, #32]

                    /* Change to bound state.  */
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_BOUND;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2205      	movs	r2, #5
 8007f4c:	705a      	strb	r2, [r3, #1]
                    /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
                    interface_record -> nx_dhcp_rtr_interval = 0;
                }
            }
            break;
 8007f4e:	e027      	b.n	8007fa0 <_nx_dhcp_packet_process+0x460>
                else if (dhcp_type == NX_DHCP_TYPE_DHCPNACK)
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b06      	cmp	r3, #6
 8007f54:	d124      	bne.n	8007fa0 <_nx_dhcp_packet_process+0x460>
                    interface_record -> nx_dhcp_nacks_received++;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
                    _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff f976 	bl	800725c <_nx_dhcp_interface_reinitialize>
                    interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2202      	movs	r2, #2
 8007f74:	705a      	strb	r2, [r3, #1]
                    interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2264      	movs	r2, #100	@ 0x64
 8007f7a:	621a      	str	r2, [r3, #32]
                    interface_record -> nx_dhcp_rtr_interval = 0;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 8007f82:	e00d      	b.n	8007fa0 <_nx_dhcp_packet_process+0x460>
        }

        default:
            break;
 8007f84:	bf00      	nop
 8007f86:	e00e      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
           break;
 8007f88:	bf00      	nop
 8007f8a:	e00c      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
                    break;
 8007f8c:	bf00      	nop
 8007f8e:	e00a      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
            break;
 8007f90:	bf00      	nop
 8007f92:	e008      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
                        break;
 8007f94:	bf00      	nop
 8007f96:	e006      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
            break;
 8007f98:	bf00      	nop
 8007f9a:	e004      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
                        break;
 8007f9c:	bf00      	nop
 8007f9e:	e002      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
            break;
 8007fa0:	bf00      	nop
 8007fa2:	e000      	b.n	8007fa6 <_nx_dhcp_packet_process+0x466>
                        break;
 8007fa4:	bf00      	nop

    } /* End of switch case */

    /* Release the packet.  */
    nx_packet_release(new_packet_ptr);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f005 fb8f 	bl	800d6cc <_nx_packet_release>

    /* Check if the state is changed.  */
    if (original_state != interface_record -> nx_dhcp_state)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	785b      	ldrb	r3, [r3, #1]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d022      	beq.n	8008000 <_nx_dhcp_packet_process+0x4c0>
    {

        /* Determine if the application has specified a routine for DHCP state change notification.  */
        if (dhcp_ptr -> nx_dhcp_state_change_callback)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fc0:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d009      	beq.n	8007fdc <_nx_dhcp_packet_process+0x49c>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fce:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	7852      	ldrb	r2, [r2, #1]
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	4798      	blx	r3
        }

        /* Determine if the application has specified a routine for DHCP interface state change notification.  */
        if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fe2:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00a      	beq.n	8008000 <_nx_dhcp_packet_process+0x4c0>
        {

            /* Yes, call the application's state change notify function with the new state.  */
            (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ff0:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	69d1      	ldr	r1, [r2, #28]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	7852      	ldrb	r2, [r2, #1]
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	4798      	blx	r3
        }
    }

    return;
 8008000:	bf00      	nop
}
 8008002:	3748      	adds	r7, #72	@ 0x48
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <_nx_dhcp_timeout_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_dhcp_timeout_process(NX_DHCP *dhcp_ptr)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]

UINT            i;
UINT            original_state;
NX_DHCP_INTERFACE_RECORD *interface_record = NX_NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]

#endif /* NX_DHCP_CLIENT_SEND_ARP_PROBE  */

    /* Update the timeout on both interfaces. Check what needs to be done
       if a timeout expires, based on Client state. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8008014:	2300      	movs	r3, #0
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	e1a0      	b.n	800835c <_nx_dhcp_timeout_process+0x354>
    {

         /* Check if the DHCP Client is active on this interface. */      
         if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE)
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	4413      	add	r3, r2
 8008028:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800802c:	3310      	adds	r3, #16
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 818f 	beq.w	8008354 <_nx_dhcp_timeout_process+0x34c>
             continue;

         /* Set the interface reocrd pointer.  */
         interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 800803c:	fb02 f303 	mul.w	r3, r2, r3
 8008040:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 8008044:	3310      	adds	r3, #16
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	4413      	add	r3, r2
 800804a:	613b      	str	r3, [r7, #16]

         /* Update the count.  */
         interface_record -> nx_dhcp_seconds ++;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	1c5a      	adds	r2, r3, #1
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	609a      	str	r2, [r3, #8]

        /* Check the timer.  */
        if (interface_record -> nx_dhcp_timeout != 0)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 817b 	beq.w	8008356 <_nx_dhcp_timeout_process+0x34e>
        {

            /* Apply the timer interval to the current DHCP Client timeout.  */
            if (interface_record -> nx_dhcp_timeout > NX_DHCP_TIME_INTERVAL)
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	2b64      	cmp	r3, #100	@ 0x64
 8008066:	d906      	bls.n	8008076 <_nx_dhcp_timeout_process+0x6e>
            {

                /* Update the timeout.  */
                interface_record -> nx_dhcp_timeout -= (ULONG)NX_DHCP_TIME_INTERVAL;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	621a      	str	r2, [r3, #32]
 8008074:	e16f      	b.n	8008356 <_nx_dhcp_timeout_process+0x34e>
            }
            else
            {

                /* The DHCP Client timeout has expired. */
                interface_record -> nx_dhcp_timeout = 0; 
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2200      	movs	r2, #0
 800807a:	621a      	str	r2, [r3, #32]

                /* Save the current state for state change callback. */
                original_state = interface_record -> nx_dhcp_state;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	785b      	ldrb	r3, [r3, #1]
 8008080:	60fb      	str	r3, [r7, #12]

                /* Process according to what state the Client is in. */
                switch (interface_record -> nx_dhcp_state)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	785b      	ldrb	r3, [r3, #1]
 8008086:	3b02      	subs	r3, #2
 8008088:	2b07      	cmp	r3, #7
 800808a:	f200 8132 	bhi.w	80082f2 <_nx_dhcp_timeout_process+0x2ea>
 800808e:	a201      	add	r2, pc, #4	@ (adr r2, 8008094 <_nx_dhcp_timeout_process+0x8c>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080b5 	.word	0x080080b5
 8008098:	08008139 	.word	0x08008139
 800809c:	0800817d 	.word	0x0800817d
 80080a0:	080081c1 	.word	0x080081c1
 80080a4:	080081ff 	.word	0x080081ff
 80080a8:	08008285 	.word	0x08008285
 80080ac:	080082f3 	.word	0x080082f3
 80080b0:	080082f3 	.word	0x080082f3

                    case NX_DHCP_STATE_INIT:
                    {

                        /* Reset the seconds field for starting the DHCP address acquistiion. */
                        interface_record -> nx_dhcp_seconds = 0;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	2200      	movs	r2, #0
 80080b8:	609a      	str	r2, [r3, #8]
                        /* Initial state when there is no address.  Send a DHCPDISCOVER message
                           to find a DHCP server and switch to the SELECTING state.
                           Initial timeout is NX_DHCP_MIN_RETRANS_TIMEOUT seconds. */
#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Only if the DHCP Client is requesting an IP address and is configured to skip the Discovery message. */
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00c      	beq.n	80080dc <_nx_dhcp_timeout_process+0xd4>
                            (interface_record -> nx_dhcp_skip_discovery))
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                        if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) &&
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d008      	beq.n	80080dc <_nx_dhcp_timeout_process+0xd4>
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80080ca:	2203      	movs	r2, #3
 80080cc:	6939      	ldr	r1, [r7, #16]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f94e 	bl	8008370 <_nx_dhcp_send_request_internal>

                            /* And change to the Requesting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2204      	movs	r2, #4
 80080d8:	705a      	strb	r2, [r3, #1]
 80080da:	e007      	b.n	80080ec <_nx_dhcp_timeout_process+0xe4>
                        }
                        else
                        {

                            /* Send out the DHCP request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 80080dc:	2201      	movs	r2, #1
 80080de:	6939      	ldr	r1, [r7, #16]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f945 	bl	8008370 <_nx_dhcp_send_request_internal>

                            /* And change to the Selecting state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_SELECTING;
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2203      	movs	r2, #3
 80080ea:	705a      	strb	r2, [r3, #1]
                        /* And change to the Requesting state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_REQUESTING;
#endif

                        /* Check if the retransmission interval is zero.  */
                        if (interface_record -> nx_dhcp_rtr_interval == 0)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d104      	bne.n	80080fe <_nx_dhcp_timeout_process+0xf6>
                        {

                            /* Set the interval to min retransmission timeout.  */
                            interface_record -> nx_dhcp_rtr_interval = NX_DHCP_MIN_RETRANS_TIMEOUT;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80080fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80080fc:	e007      	b.n	800810e <_nx_dhcp_timeout_process+0x106>
                        }
                        else
                        {

                            /* Record the retransmission interval for next retransmission.  */
                            interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008102:	4618      	mov	r0, r3
 8008104:	f000 ffd6 	bl	80090b4 <_nx_dhcp_update_timeout>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	625a      	str	r2, [r3, #36]	@ 0x24
                        }

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval; 
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	4618      	mov	r0, r3
 800811c:	f000 ff9c 	bl	8009058 <_nx_dhcp_add_randomize>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f040 80e3 	bne.w	80082f6 <_nx_dhcp_timeout_process+0x2ee>
                            interface_record -> nx_dhcp_timeout = 1;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2201      	movs	r2, #1
 8008134:	621a      	str	r2, [r3, #32]

                        break;
 8008136:	e0de      	b.n	80082f6 <_nx_dhcp_timeout_process+0x2ee>
                    case NX_DHCP_STATE_SELECTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Retransmit the Discover message.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPDISCOVER);
 8008138:	2201      	movs	r2, #1
 800813a:	6939      	ldr	r1, [r7, #16]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f917 	bl	8008370 <_nx_dhcp_send_request_internal>
                        /* Retransmit the BOOTP Request message.  */ 
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif

                        /* Update the retransmision interval.   */
                        interface_record -> nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008146:	4618      	mov	r0, r3
 8008148:	f000 ffb4 	bl	80090b4 <_nx_dhcp_update_timeout>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	625a      	str	r2, [r3, #36]	@ 0x24

                        /* Update the timeout for next retransmission.  */
                        interface_record -> nx_dhcp_timeout = interface_record -> nx_dhcp_rtr_interval;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	4618      	mov	r0, r3
 8008160:	f000 ff7a 	bl	8009058 <_nx_dhcp_add_randomize>
 8008164:	4602      	mov	r2, r0
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	f040 80c3 	bne.w	80082fa <_nx_dhcp_timeout_process+0x2f2>
                            interface_record -> nx_dhcp_timeout = 1;
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2201      	movs	r2, #1
 8008178:	621a      	str	r2, [r3, #32]

                        break;
 800817a:	e0be      	b.n	80082fa <_nx_dhcp_timeout_process+0x2f2>
                    case NX_DHCP_STATE_REQUESTING:
                    {

#ifndef NX_DHCP_ENABLE_BOOTP
                        /* Send a DHCP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800817c:	2203      	movs	r2, #3
 800817e:	6939      	ldr	r1, [r7, #16]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8f5 	bl	8008370 <_nx_dhcp_send_request_internal>
                        /* Send a BOOTP request. */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_BOOT_REQUEST);
#endif
                                                
                        /* Update the retransmision interval.   */
                        interface_record->nx_dhcp_rtr_interval = _nx_dhcp_update_timeout(interface_record -> nx_dhcp_rtr_interval);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818a:	4618      	mov	r0, r3
 800818c:	f000 ff92 	bl	80090b4 <_nx_dhcp_update_timeout>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	625a      	str	r2, [r3, #36]	@ 0x24

                        /* Reset the timeout for next retransmision. */
                        interface_record -> nx_dhcp_timeout = interface_record->nx_dhcp_rtr_interval;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	621a      	str	r2, [r3, #32]

                        /* This will modify the timeout by up to +/- 1 second as recommended by RFC 2131, Section 4.1, Page 24. */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_add_randomize(interface_record -> nx_dhcp_timeout);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 ff58 	bl	8009058 <_nx_dhcp_add_randomize>
 80081a8:	4602      	mov	r2, r0
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	621a      	str	r2, [r3, #32]

                        /* Check if the timeout is zero.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 80a3 	bne.w	80082fe <_nx_dhcp_timeout_process+0x2f6>
                            interface_record -> nx_dhcp_timeout = 1;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2201      	movs	r2, #1
 80081bc:	621a      	str	r2, [r3, #32]

                        break;
 80081be:	e09e      	b.n	80082fe <_nx_dhcp_timeout_process+0x2f6>

                    case NX_DHCP_STATE_BOUND:
                    {

                        /* Reset the seconds field for starting the DHCP request process. */
                        interface_record -> nx_dhcp_seconds = 0;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2200      	movs	r2, #0
 80081c4:	609a      	str	r2, [r3, #8]

                        /* The lease has timed out. Time to renew.  */

                        /* And change to the Renewing state. */
                        interface_record -> nx_dhcp_state = NX_DHCP_STATE_RENEWING;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2206      	movs	r2, #6
 80081ca:	705a      	strb	r2, [r3, #1]

                        /* Send the renewal request.  */
                        _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80081cc:	2203      	movs	r2, #3
 80081ce:	6939      	ldr	r1, [r7, #16]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f8cd 	bl	8008370 <_nx_dhcp_send_request_internal>

                        /* Set the time remaining based on RFC 2131 when T1 expires. */
                        interface_record -> nx_dhcp_renewal_remain_time = interface_record -> nx_dhcp_rebind_time - interface_record -> nx_dhcp_renewal_time;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 ff7a 	bl	80090e2 <_nx_dhcp_update_renewal_timeout>
 80081ee:	4602      	mov	r2, r0
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	621a      	str	r2, [r3, #32]

                        /* Record the retransmission interval.  */
                        interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	6a1a      	ldr	r2, [r3, #32]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	625a      	str	r2, [r3, #36]	@ 0x24

                        break;
 80081fc:	e080      	b.n	8008300 <_nx_dhcp_timeout_process+0x2f8>

                    case NX_DHCP_STATE_RENEWING:
                    {

                        /* Check if we have reached the end of the renewal time.  */
                        if (interface_record -> nx_dhcp_renewal_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008206:	429a      	cmp	r2, r3
 8008208:	d307      	bcc.n	800821a <_nx_dhcp_timeout_process+0x212>
                        {
                            interface_record -> nx_dhcp_renewal_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008212:	1ad2      	subs	r2, r2, r3
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	639a      	str	r2, [r3, #56]	@ 0x38
 8008218:	e002      	b.n	8008220 <_nx_dhcp_timeout_process+0x218>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_renewal_remain_time = 0;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2200      	movs	r2, #0
 800821e:	639a      	str	r2, [r3, #56]	@ 0x38
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_renewal_remain_time);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008224:	4618      	mov	r0, r3
 8008226:	f000 ff5c 	bl	80090e2 <_nx_dhcp_update_renewal_timeout>
 800822a:	4602      	mov	r2, r0
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d11b      	bne.n	8008270 <_nx_dhcp_timeout_process+0x268>
                        {

                            /* And change to the Rebinding state. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_REBINDING;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2207      	movs	r2, #7
 800823c:	705a      	strb	r2, [r3, #1]

                            /* Send the rebind request.  */
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 800823e:	2203      	movs	r2, #3
 8008240:	6939      	ldr	r1, [r7, #16]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f894 	bl	8008370 <_nx_dhcp_send_request_internal>

                            /* Calculate the rebind time based on the RFC 2131. */
                            interface_record -> nx_dhcp_rebind_remain_time = interface_record -> nx_dhcp_lease_time - interface_record -> nx_dhcp_rebind_time;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008250:	1ad2      	subs	r2, r2, r3
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	63da      	str	r2, [r3, #60]	@ 0x3c
                                                                                        
                            /* Calculate the timeout for the response.  */
                            interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800825a:	4618      	mov	r0, r3
 800825c:	f000 ff41 	bl	80090e2 <_nx_dhcp_update_renewal_timeout>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	621a      	str	r2, [r3, #32]

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	6a1a      	ldr	r2, [r3, #32]
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	625a      	str	r2, [r3, #36]	@ 0x24

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }

                        break;
 800826e:	e047      	b.n	8008300 <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 8008270:	2203      	movs	r2, #3
 8008272:	6939      	ldr	r1, [r7, #16]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f87b 	bl	8008370 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	6a1a      	ldr	r2, [r3, #32]
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 8008282:	e03d      	b.n	8008300 <_nx_dhcp_timeout_process+0x2f8>
                    {

                        /* No response yet, the response must have timed out, 
                            update the timeout and check if we have reached the 
                            end of the rebinding time.  */
                        if (interface_record -> nx_dhcp_rebind_remain_time >= interface_record -> nx_dhcp_rtr_interval)
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828c:	429a      	cmp	r2, r3
 800828e:	d307      	bcc.n	80082a0 <_nx_dhcp_timeout_process+0x298>
                        {
                            interface_record -> nx_dhcp_rebind_remain_time -= interface_record -> nx_dhcp_rtr_interval;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	1ad2      	subs	r2, r2, r3
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800829e:	e002      	b.n	80082a6 <_nx_dhcp_timeout_process+0x29e>
                        }
                        else
                        {
                            interface_record -> nx_dhcp_rebind_remain_time = 0;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2200      	movs	r2, #0
 80082a4:	63da      	str	r2, [r3, #60]	@ 0x3c
                        }

                        /* Update the timeout for renew retranmission.  */
                        interface_record -> nx_dhcp_timeout = _nx_dhcp_update_renewal_timeout(interface_record -> nx_dhcp_rebind_remain_time);
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082aa:	4618      	mov	r0, r3
 80082ac:	f000 ff19 	bl	80090e2 <_nx_dhcp_update_renewal_timeout>
 80082b0:	4602      	mov	r2, r0
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	621a      	str	r2, [r3, #32]
                                                     
                        /* Check if we are at the limit on retransmission.  */
                        if (interface_record -> nx_dhcp_timeout == 0)
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10f      	bne.n	80082de <_nx_dhcp_timeout_process+0x2d6>
                        {

                            /* Timeout. Restart DHCP service for this interface record.  */

                            /* Reinitialize DHCP.  */
                            _nx_dhcp_interface_reinitialize(dhcp_ptr, interface_record -> nx_dhcp_interface_index);
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7fe ffc9 	bl	800725c <_nx_dhcp_interface_reinitialize>

                            /* Start the DHCP protocol again by setting the state back to INIT. */
                            interface_record -> nx_dhcp_state = NX_DHCP_STATE_INIT;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2202      	movs	r2, #2
 80082ce:	705a      	strb	r2, [r3, #1]
                            /* The client begins in INIT state and forms a DHCPDISCOVER message.
                               The client should wait a random time between one and ten seconds to desynchronize the use of DHCP at startup.  
                               RFC2131, Section4.4.1, Page36.  */

                            /* Use the minimum value, Wait one second to begain in INIT state and forms a DHCP Discovery message.  */
                            interface_record -> nx_dhcp_timeout = NX_IP_PERIODIC_RATE;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2264      	movs	r2, #100	@ 0x64
 80082d4:	621a      	str	r2, [r3, #32]
                            interface_record -> nx_dhcp_rtr_interval = 0;
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2200      	movs	r2, #0
 80082da:	625a      	str	r2, [r3, #36]	@ 0x24
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);

                            /* Record the retransmission interval.  */
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
                        }
                        break;
 80082dc:	e010      	b.n	8008300 <_nx_dhcp_timeout_process+0x2f8>
                            _nx_dhcp_send_request_internal(dhcp_ptr, interface_record, NX_DHCP_TYPE_DHCPREQUEST);
 80082de:	2203      	movs	r2, #3
 80082e0:	6939      	ldr	r1, [r7, #16]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f844 	bl	8008370 <_nx_dhcp_send_request_internal>
                            interface_record -> nx_dhcp_rtr_interval = interface_record -> nx_dhcp_timeout;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	6a1a      	ldr	r2, [r3, #32]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 80082f0:	e006      	b.n	8008300 <_nx_dhcp_timeout_process+0x2f8>
                    }

                    default:
                    {

                        break;
 80082f2:	bf00      	nop
 80082f4:	e004      	b.n	8008300 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 80082f6:	bf00      	nop
 80082f8:	e002      	b.n	8008300 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 80082fa:	bf00      	nop
 80082fc:	e000      	b.n	8008300 <_nx_dhcp_timeout_process+0x2f8>
                        break;
 80082fe:	bf00      	nop
                    }
                }

                /* Check if the state is changed.  */
                if (original_state != interface_record -> nx_dhcp_state)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	785b      	ldrb	r3, [r3, #1]
 8008304:	461a      	mov	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	4293      	cmp	r3, r2
 800830a:	d024      	beq.n	8008356 <_nx_dhcp_timeout_process+0x34e>
                {

                    /* Determine if the application has specified a routine for DHCP state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_state_change_callback)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008312:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <_nx_dhcp_timeout_process+0x326>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_state);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008320:	f8d3 3f48 	ldr.w	r3, [r3, #3912]	@ 0xf48
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	7852      	ldrb	r2, [r2, #1]
 8008328:	4611      	mov	r1, r2
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
                    }

                    /* Determine if the application has specified a routine for DHCP interface state change notification.  */
                    if (dhcp_ptr -> nx_dhcp_interface_state_change_callback)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008334:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00c      	beq.n	8008356 <_nx_dhcp_timeout_process+0x34e>
                    {

                        /* Yes, call the application's state change notify function with the new state.  */
                        (dhcp_ptr -> nx_dhcp_interface_state_change_callback)(dhcp_ptr, interface_record -> nx_dhcp_interface_index, interface_record -> nx_dhcp_state);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008342:	f8d3 3f4c 	ldr.w	r3, [r3, #3916]	@ 0xf4c
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	69d1      	ldr	r1, [r2, #28]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	7852      	ldrb	r2, [r2, #1]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	4798      	blx	r3
 8008352:	e000      	b.n	8008356 <_nx_dhcp_timeout_process+0x34e>
             continue;
 8008354:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	3301      	adds	r3, #1
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	f43f ae5b 	beq.w	800801a <_nx_dhcp_timeout_process+0x12>

            } /* End of switch statement. */ 
        }

    } /* Try the next interface record.  */ 
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop

08008370 <_nx_dhcp_send_request_internal>:
/*                                            option in parameter request,*/
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_send_request_internal(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UINT dhcp_message_type)
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b093      	sub	sp, #76	@ 0x4c
 8008374:	af02      	add	r7, sp, #8
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
ULONG           targetIP;
UINT            status;
ULONG           dhcp_client_mac_msw;
ULONG           dhcp_client_mac_lsw;
UINT            iface_index;
UINT            index = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	61fb      	str	r3, [r7, #28]
UINT            user_option_length;
UINT            name_length;


    /* Set the interface idnex.  */
    iface_index = interface_record -> nx_dhcp_interface_index;
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Allocate a DHCP packet.  */
    status =  nx_packet_allocate(dhcp_ptr -> nx_dhcp_packet_pool_ptr, &packet_ptr, NX_IPv4_UDP_PACKET, NX_NO_WAIT);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 0bd8 	ldr.w	r0, [r3, #3032]	@ 0xbd8
 800838c:	f107 0120 	add.w	r1, r7, #32
 8008390:	2300      	movs	r3, #0
 8008392:	222c      	movs	r2, #44	@ 0x2c
 8008394:	f004 fd06 	bl	800cda4 <_nx_packet_allocate>
 8008398:	63b8      	str	r0, [r7, #56]	@ 0x38

    /* Was the packet allocation successful?  */
    if (status != NX_SUCCESS)
 800839a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d008      	beq.n	80083b2 <_nx_dhcp_send_request_internal+0x42>
    {

        /* Increment the DHCP internal error counter.  */
        interface_record -> nx_dhcp_internal_errors++;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184

        /* Return status.  */
        return(status);
 80083ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b0:	e29c      	b.n	80088ec <_nx_dhcp_send_request_internal+0x57c>
    }

    /* Set the interface index and MAC address.  */
    dhcp_client_mac_msw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_msw;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6899      	ldr	r1, [r3, #8]
 80083b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	011b      	lsls	r3, r3, #4
 80083c0:	440b      	add	r3, r1
 80083c2:	f503 63e6 	add.w	r3, r3, #1840	@ 0x730
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	633b      	str	r3, [r7, #48]	@ 0x30
    dhcp_client_mac_lsw = dhcp_ptr -> nx_dhcp_ip_ptr -> nx_ip_interface[iface_index].nx_interface_physical_address_lsw;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6899      	ldr	r1, [r3, #8]
 80083ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	440b      	add	r3, r1
 80083da:	f203 7334 	addw	r3, r3, #1844	@ 0x734
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Setup the buffer pointer.  */
    buffer =  packet_ptr -> nx_packet_prepend_ptr;
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Clear the buffer out... just in case.  */
    memset((void *) buffer, 0, NX_BOOTP_OFFSET_END);
 80083e8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80083ec:	2100      	movs	r1, #0
 80083ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083f0:	f00b ffc2 	bl	8014378 <memset>
    
    /* Setup the standard BootP fields.  */
    buffer[NX_BOOTP_OFFSET_OP] =        NX_BOOTP_OP_REQUEST;
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	2201      	movs	r2, #1
 80083f8:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HTYPE] =     NX_BOOTP_TYPE_ETHERNET;     
 80083fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fc:	3301      	adds	r3, #1
 80083fe:	2201      	movs	r2, #1
 8008400:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HLEN] =      NX_BOOTP_HLEN_ETHERNET;
 8008402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008404:	3302      	adds	r3, #2
 8008406:	2206      	movs	r2, #6
 8008408:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_HOPS] =      0;
 800840a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840c:	3303      	adds	r3, #3
 800840e:	2200      	movs	r2, #0
 8008410:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_SERVER_NM] = 0;  
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	332c      	adds	r3, #44	@ 0x2c
 8008416:	2200      	movs	r2, #0
 8008418:	701a      	strb	r2, [r3, #0]
    buffer[NX_BOOTP_OFFSET_BOOT_FILE] = 0;  
 800841a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841c:	336c      	adds	r3, #108	@ 0x6c
 800841e:	2200      	movs	r2, #0
 8008420:	701a      	strb	r2, [r3, #0]

    /* Setup the 'Xid' field.  */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_XID, 4, interface_record -> nx_dhcp_xid);
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	1d18      	adds	r0, r3, #4
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	461a      	mov	r2, r3
 800842c:	2104      	movs	r1, #4
 800842e:	f000 fedb 	bl	80091e8 <_nx_dhcp_store_data>

    /* Set the 'secs' field according to RFC2131, Secion4.4.1, Page37, Table5. */ 
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b04      	cmp	r3, #4
 8008436:	d002      	beq.n	800843e <_nx_dhcp_send_request_internal+0xce>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b07      	cmp	r3, #7
 800843c:	d107      	bne.n	800844e <_nx_dhcp_send_request_internal+0xde>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, 0);
 800843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008440:	3308      	adds	r3, #8
 8008442:	2200      	movs	r2, #0
 8008444:	2102      	movs	r1, #2
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fece 	bl	80091e8 <_nx_dhcp_store_data>
 800844c:	e008      	b.n	8008460 <_nx_dhcp_send_request_internal+0xf0>
    }
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SECS, 2, interface_record -> nx_dhcp_seconds);
 800844e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008450:	f103 0008 	add.w	r0, r3, #8
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	461a      	mov	r2, r3
 800845a:	2102      	movs	r1, #2
 800845c:	f000 fec4 	bl	80091e8 <_nx_dhcp_store_data>
    }

    /* Set the broadcast flag according to RFC2131, Secion4.4.1, Page38, Table5.  */

    /* Set the broadcast flag to 0 for DHCP Decline and DHCP Release.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDECLINE) || (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b04      	cmp	r3, #4
 8008464:	d002      	beq.n	800846c <_nx_dhcp_send_request_internal+0xfc>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b07      	cmp	r3, #7
 800846a:	d107      	bne.n	800847c <_nx_dhcp_send_request_internal+0x10c>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 800846c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846e:	330a      	adds	r3, #10
 8008470:	2200      	movs	r2, #0
 8008472:	2101      	movs	r1, #1
 8008474:	4618      	mov	r0, r3
 8008476:	f000 feb7 	bl	80091e8 <_nx_dhcp_store_data>
 800847a:	e012      	b.n	80084a2 <_nx_dhcp_send_request_internal+0x132>
    }

    /* Set the 'broadcast' flag according to user requirement for DHCP Discover, DHCP Request and DHCP Inform.  */
    else if (interface_record -> nx_dhcp_clear_broadcast == NX_TRUE)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008480:	2b01      	cmp	r3, #1
 8008482:	d107      	bne.n	8008494 <_nx_dhcp_send_request_internal+0x124>
    {

        /* Request the response be sent unicast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_UNICAST);
 8008484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008486:	330a      	adds	r3, #10
 8008488:	2200      	movs	r2, #0
 800848a:	2101      	movs	r1, #1
 800848c:	4618      	mov	r0, r3
 800848e:	f000 feab 	bl	80091e8 <_nx_dhcp_store_data>
 8008492:	e006      	b.n	80084a2 <_nx_dhcp_send_request_internal+0x132>
    }
    else
    {

        /* Request the response be sent broadcast.  */
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_FLAGS, 1, NX_BOOTP_FLAGS_BROADCAST);
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	330a      	adds	r3, #10
 8008498:	2280      	movs	r2, #128	@ 0x80
 800849a:	2101      	movs	r1, #1
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fea3 	bl	80091e8 <_nx_dhcp_store_data>
    }

    /* RFC 2131 4.4.1: Do not set the Client IP ("ciaddr" field) address...*/
    if (dhcp_message_type != NX_DHCP_TYPE_DHCPINFORM)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d007      	beq.n	80084b8 <_nx_dhcp_send_request_internal+0x148>
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, NX_BOOTP_NO_ADDRESS);
 80084a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084aa:	330c      	adds	r3, #12
 80084ac:	2200      	movs	r2, #0
 80084ae:	2104      	movs	r1, #4
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 fe99 	bl	80091e8 <_nx_dhcp_store_data>
 80084b6:	e008      	b.n	80084ca <_nx_dhcp_send_request_internal+0x15a>
    }
    /* ...unless this is an INFORM REQUEST message. */
    else
    {
        _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 80084b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ba:	f103 000c 	add.w	r0, r3, #12
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	461a      	mov	r2, r3
 80084c4:	2104      	movs	r1, #4
 80084c6:	f000 fe8f 	bl	80091e8 <_nx_dhcp_store_data>
    }

    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_YOUR_IP, 4, NX_BOOTP_NO_ADDRESS);   
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	3310      	adds	r3, #16
 80084ce:	2200      	movs	r2, #0
 80084d0:	2104      	movs	r1, #4
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fe88 	bl	80091e8 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_SERVER_IP, 4, NX_BOOTP_NO_ADDRESS); 
 80084d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084da:	3314      	adds	r3, #20
 80084dc:	2200      	movs	r2, #0
 80084de:	2104      	movs	r1, #4
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fe81 	bl	80091e8 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_GATEWAY_IP, 4, NX_BOOTP_NO_ADDRESS);
 80084e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e8:	3318      	adds	r3, #24
 80084ea:	2200      	movs	r2, #0
 80084ec:	2104      	movs	r1, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fe7a 	bl	80091e8 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW, 2, dhcp_client_mac_msw);
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	331c      	adds	r3, #28
 80084f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084fa:	2102      	movs	r1, #2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fe73 	bl	80091e8 <_nx_dhcp_store_data>
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_HW + 2, 4, dhcp_client_mac_lsw);
 8008502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008504:	331e      	adds	r3, #30
 8008506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008508:	2104      	movs	r1, #4
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fe6c 	bl	80091e8 <_nx_dhcp_store_data>

#ifndef NX_DHCP_ENABLE_BOOTP        
    /* Update the index.  */
    index = NX_BOOTP_OFFSET_OPTIONS; 
 8008510:	23f0      	movs	r3, #240	@ 0xf0
 8008512:	61fb      	str	r3, [r7, #28]

    /*  A BOOTP Client should not request DHCP option data. */
    _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_VENDOR, 4, NX_BOOTP_MAGIC_COOKIE);
 8008514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008516:	33ec      	adds	r3, #236	@ 0xec
 8008518:	4aa5      	ldr	r2, [pc, #660]	@ (80087b0 <_nx_dhcp_send_request_internal+0x440>)
 800851a:	2104      	movs	r1, #4
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fe63 	bl	80091e8 <_nx_dhcp_store_data>

    /* Add the actual DHCP request.  */
    _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_TYPE, NX_DHCP_OPTION_DHCP_TYPE_SIZE, dhcp_message_type, &index);
 8008522:	f107 031c 	add.w	r3, r7, #28
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	2135      	movs	r1, #53	@ 0x35
 800852e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008530:	f000 fcd1 	bl	8008ed6 <_nx_dhcp_add_option_value>
#endif

    /* Determine if any additional options need to be added relative to the DHCP message type.
       RFC 2131, Table 5: Fields and options used by DHCP Clients.  */
    switch (dhcp_message_type)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3b01      	subs	r3, #1
 8008538:	2b07      	cmp	r3, #7
 800853a:	f200 8155 	bhi.w	80087e8 <_nx_dhcp_send_request_internal+0x478>
 800853e:	a201      	add	r2, pc, #4	@ (adr r2, 8008544 <_nx_dhcp_send_request_internal+0x1d4>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	08008565 	.word	0x08008565
 8008548:	080087e9 	.word	0x080087e9
 800854c:	080085ff 	.word	0x080085ff
 8008550:	0800870d 	.word	0x0800870d
 8008554:	080087e9 	.word	0x080087e9
 8008558:	080087e9 	.word	0x080087e9
 800855c:	0800874d 	.word	0x0800874d
 8008560:	08008785 	.word	0x08008785

        case NX_DHCP_TYPE_DHCPDISCOVER:


            /* Determine if we have a valid IP address.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00f      	beq.n	800858c <_nx_dhcp_send_request_internal+0x21c>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8008570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008574:	d00a      	beq.n	800858c <_nx_dhcp_send_request_internal+0x21c>
            {

                /* Add a IP request option if we have a valid IP address */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	f107 031c 	add.w	r3, r7, #28
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	4613      	mov	r3, r2
 8008582:	2204      	movs	r2, #4
 8008584:	2132      	movs	r1, #50	@ 0x32
 8008586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008588:	f000 fca5 	bl	8008ed6 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add an option request for an infinite lease.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 800858c:	f107 031c 	add.w	r3, r7, #28
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008596:	2204      	movs	r2, #4
 8008598:	2133      	movs	r1, #51	@ 0x33
 800859a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800859c:	f000 fc9b 	bl	8008ed6 <_nx_dhcp_add_option_value>

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01b      	beq.n	80085e0 <_nx_dhcp_send_request_internal+0x270>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f107 0114 	add.w	r1, r7, #20
 80085b0:	22ff      	movs	r2, #255	@ 0xff
 80085b2:	4618      	mov	r0, r3
 80085b4:	f006 fa95 	bl	800eae2 <_nx_utility_string_length_check>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <_nx_dhcp_send_request_internal+0x25a>
                {
                    nx_packet_release(packet_ptr);
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f005 f883 	bl	800d6cc <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 80085c6:	23a8      	movs	r3, #168	@ 0xa8
 80085c8:	e190      	b.n	80088ec <_nx_dhcp_send_request_internal+0x57c>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 80085ca:	697a      	ldr	r2, [r7, #20]
                                           (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6859      	ldr	r1, [r3, #4]
                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, 
 80085d0:	f107 031c 	add.w	r3, r7, #28
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	460b      	mov	r3, r1
 80085d8:	210c      	movs	r1, #12
 80085da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085dc:	f000 fcae 	bl	8008f3c <_nx_dhcp_add_option_string>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 80085e0:	f107 031c 	add.w	r3, r7, #28
 80085e4:	461a      	mov	r2, r3
 80085e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 fcdb 	bl	8008fa4 <_nx_dhcp_add_option_parameter_request>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Discovery messages sent.  */
            interface_record -> nx_dhcp_discoveries_sent++;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
            break;
 80085fc:	e0f5      	b.n	80087ea <_nx_dhcp_send_request_internal+0x47a>
      
        case NX_DHCP_TYPE_DHCPREQUEST:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01b      	beq.n	800863e <_nx_dhcp_send_request_internal+0x2ce>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f107 0114 	add.w	r1, r7, #20
 800860e:	22ff      	movs	r2, #255	@ 0xff
 8008610:	4618      	mov	r0, r3
 8008612:	f006 fa66 	bl	800eae2 <_nx_utility_string_length_check>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <_nx_dhcp_send_request_internal+0x2b8>
                {
                    nx_packet_release(packet_ptr);
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	4618      	mov	r0, r3
 8008620:	f005 f854 	bl	800d6cc <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 8008624:	23a8      	movs	r3, #168	@ 0xa8
 8008626:	e161      	b.n	80088ec <_nx_dhcp_send_request_internal+0x57c>
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6859      	ldr	r1, [r3, #4]
 800862e:	f107 031c 	add.w	r3, r7, #28
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	460b      	mov	r3, r1
 8008636:	210c      	movs	r1, #12
 8008638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800863a:	f000 fc7f 	bl	8008f3c <_nx_dhcp_add_option_string>
            }

            /* Determine if we have a valid IP address. Must not include if Renewing or Rebinding RCV 2131 4.3.2.  */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d017      	beq.n	8008676 <_nx_dhcp_send_request_internal+0x306>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800864a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800864e:	d012      	beq.n	8008676 <_nx_dhcp_send_request_internal+0x306>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS) &&
 8008654:	2b06      	cmp	r3, #6
 8008656:	d00e      	beq.n	8008676 <_nx_dhcp_send_request_internal+0x306>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	785b      	ldrb	r3, [r3, #1]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) && 
 800865c:	2b07      	cmp	r3, #7
 800865e:	d00a      	beq.n	8008676 <_nx_dhcp_send_request_internal+0x306>
            {

                /* Add an IP request option if we have a valid IP address.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	f107 031c 	add.w	r3, r7, #28
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	4613      	mov	r3, r2
 800866c:	2204      	movs	r2, #4
 800866e:	2132      	movs	r1, #50	@ 0x32
 8008670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008672:	f000 fc30 	bl	8008ed6 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }

            /* Add a request for an infinite lease if we haven't already set the timers.  */
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <_nx_dhcp_send_request_internal+0x316>
                (interface_record -> nx_dhcp_renewal_time == 0))
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            if ((interface_record -> nx_dhcp_rebind_time == 0) || 
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <_nx_dhcp_send_request_internal+0x32a>
            {

                /* Add the infinite lease option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_LEASE, NX_DHCP_OPTION_DHCP_LEASE_SIZE, NX_DHCP_INFINITE_LEASE, &index);
 8008686:	f107 031c 	add.w	r3, r7, #28
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008690:	2204      	movs	r2, #4
 8008692:	2133      	movs	r1, #51	@ 0x33
 8008694:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008696:	f000 fc1e 	bl	8008ed6 <_nx_dhcp_add_option_value>
            }

            /* Should add server ID if not renewing.  */
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	785b      	ldrb	r3, [r3, #1]
 800869e:	2b06      	cmp	r3, #6
 80086a0:	d014      	beq.n	80086cc <_nx_dhcp_send_request_internal+0x35c>
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	785b      	ldrb	r3, [r3, #1]
            if ((interface_record -> nx_dhcp_state != NX_DHCP_STATE_RENEWING) &&
 80086a6:	2b07      	cmp	r3, #7
 80086a8:	d010      	beq.n	80086cc <_nx_dhcp_send_request_internal+0x35c>
                (interface_record -> nx_dhcp_server_ip != NX_BOOTP_BC_ADDRESS)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	695b      	ldr	r3, [r3, #20]
                (interface_record -> nx_dhcp_state != NX_DHCP_STATE_REBINDING) && 
 80086ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086b2:	d00b      	beq.n	80086cc <_nx_dhcp_send_request_internal+0x35c>
               )
            {

                /* Add Server identifier option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	695a      	ldr	r2, [r3, #20]
 80086b8:	f107 031c 	add.w	r3, r7, #28
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	4613      	mov	r3, r2
 80086c0:	2204      	movs	r2, #4
 80086c2:	2136      	movs	r1, #54	@ 0x36
 80086c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086c6:	f000 fc06 	bl	8008ed6 <_nx_dhcp_add_option_value>
 80086ca:	e010      	b.n	80086ee <_nx_dhcp_send_request_internal+0x37e>
                                          interface_record -> nx_dhcp_server_ip, &index);
            }
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	785b      	ldrb	r3, [r3, #1]
 80086d0:	2b06      	cmp	r3, #6
 80086d2:	d003      	beq.n	80086dc <_nx_dhcp_send_request_internal+0x36c>
                     (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	785b      	ldrb	r3, [r3, #1]
            else if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) || 
 80086d8:	2b07      	cmp	r3, #7
 80086da:	d108      	bne.n	80086ee <_nx_dhcp_send_request_internal+0x37e>

            {

                /* Ensure the renewal message fields are correct.  */
                _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 80086dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086de:	f103 000c 	add.w	r0, r3, #12
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	461a      	mov	r2, r3
 80086e8:	2104      	movs	r1, #4
 80086ea:	f000 fd7d 	bl	80091e8 <_nx_dhcp_store_data>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 80086ee:	f107 031c 	add.w	r3, r7, #28
 80086f2:	461a      	mov	r2, r3
 80086f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 fc54 	bl	8008fa4 <_nx_dhcp_add_option_parameter_request>
               RFC2132, Section9.10, Page28.  */    
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_MAX_DHCP_MESSAGE, 2, dhcp_ptr -> nx_dhcp_max_dhcp_message_size, &index);
#endif

            /* Increment the number of Request messages sent.  */
            interface_record -> nx_dhcp_requests_sent++;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
            break;
 800870a:	e06e      	b.n	80087ea <_nx_dhcp_send_request_internal+0x47a>

        case NX_DHCP_TYPE_DHCPDECLINE:      

            /* Does the Client have a nonzero requested address it is declining? */
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00f      	beq.n	8008734 <_nx_dhcp_send_request_internal+0x3c4>
                (interface_record -> nx_dhcp_ip_address != NX_BOOTP_BC_ADDRESS))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	68db      	ldr	r3, [r3, #12]
            if ((interface_record -> nx_dhcp_ip_address != NX_BOOTP_NO_ADDRESS) && 
 8008718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800871c:	d00a      	beq.n	8008734 <_nx_dhcp_send_request_internal+0x3c4>
            {

                /* Yes; add Request IP address option.  */
                _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_IP_REQ, NX_DHCP_OPTION_DHCP_IP_REQ_SIZE, 
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	f107 031c 	add.w	r3, r7, #28
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	4613      	mov	r3, r2
 800872a:	2204      	movs	r2, #4
 800872c:	2132      	movs	r1, #50	@ 0x32
 800872e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008730:	f000 fbd1 	bl	8008ed6 <_nx_dhcp_add_option_value>
                                          interface_record -> nx_dhcp_ip_address, &index);
            }     

            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	695a      	ldr	r2, [r3, #20]
 8008738:	f107 031c 	add.w	r3, r7, #28
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	4613      	mov	r3, r2
 8008740:	2204      	movs	r2, #4
 8008742:	2136      	movs	r1, #54	@ 0x36
 8008744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008746:	f000 fbc6 	bl	8008ed6 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            break;
 800874a:	e04e      	b.n	80087ea <_nx_dhcp_send_request_internal+0x47a>

        case NX_DHCP_TYPE_DHCPRELEASE:       

            /* Added the 'ciaddr', Indicate the IP address being released.  */
            _nx_dhcp_store_data(buffer + NX_BOOTP_OFFSET_CLIENT_IP, 4, interface_record -> nx_dhcp_ip_address);
 800874c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874e:	f103 000c 	add.w	r0, r3, #12
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	461a      	mov	r2, r3
 8008758:	2104      	movs	r1, #4
 800875a:	f000 fd45 	bl	80091e8 <_nx_dhcp_store_data>
                                       
            /* Add Server identifier option.  */
            _nx_dhcp_add_option_value(buffer, NX_DHCP_OPTION_DHCP_SERVER, NX_DHCP_OPTION_DHCP_SERVER_SIZE, 
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	695a      	ldr	r2, [r3, #20]
 8008762:	f107 031c 	add.w	r3, r7, #28
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	4613      	mov	r3, r2
 800876a:	2204      	movs	r2, #4
 800876c:	2136      	movs	r1, #54	@ 0x36
 800876e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008770:	f000 fbb1 	bl	8008ed6 <_nx_dhcp_add_option_value>
                                      interface_record -> nx_dhcp_server_ip, &index);

            /* Increment the number of Release messages sent.  */
            interface_record -> nx_dhcp_releases_sent++;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800877a:	1c5a      	adds	r2, r3, #1
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
            break;
 8008782:	e032      	b.n	80087ea <_nx_dhcp_send_request_internal+0x47a>

        case NX_DHCP_TYPE_DHCPINFORM:

            /* Add the system name */
            if (dhcp_ptr -> nx_dhcp_name)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d01e      	beq.n	80087ca <_nx_dhcp_send_request_internal+0x45a>
            {

                /* Check name length.  */
                if (_nx_utility_string_length_check(dhcp_ptr -> nx_dhcp_name, &name_length, 255))
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f107 0114 	add.w	r1, r7, #20
 8008794:	22ff      	movs	r2, #255	@ 0xff
 8008796:	4618      	mov	r0, r3
 8008798:	f006 f9a3 	bl	800eae2 <_nx_utility_string_length_check>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d008      	beq.n	80087b4 <_nx_dhcp_send_request_internal+0x444>
                {
                    nx_packet_release(packet_ptr);
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f004 ff91 	bl	800d6cc <_nx_packet_release>
                    return(NX_DHCP_INVALID_NAME);
 80087aa:	23a8      	movs	r3, #168	@ 0xa8
 80087ac:	e09e      	b.n	80088ec <_nx_dhcp_send_request_internal+0x57c>
 80087ae:	bf00      	nop
 80087b0:	63825363 	.word	0x63825363
                }

                _nx_dhcp_add_option_string(buffer, NX_DHCP_OPTION_HOST_NAME, name_length, (UCHAR *) dhcp_ptr -> nx_dhcp_name, &index);
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6859      	ldr	r1, [r3, #4]
 80087ba:	f107 031c 	add.w	r3, r7, #28
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	460b      	mov	r3, r1
 80087c2:	210c      	movs	r1, #12
 80087c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087c6:	f000 fbb9 	bl	8008f3c <_nx_dhcp_add_option_string>
            }

            /* Add parameter request option.  */
            _nx_dhcp_add_option_parameter_request(dhcp_ptr, buffer, &index);
 80087ca:	f107 031c 	add.w	r3, r7, #28
 80087ce:	461a      	mov	r2, r3
 80087d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f000 fbe6 	bl	8008fa4 <_nx_dhcp_add_option_parameter_request>

            /* Increment the number of Inform messages sent.  */
            interface_record -> nx_dhcp_informs_sent++;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8

            break;
 80087e6:	e000      	b.n	80087ea <_nx_dhcp_send_request_internal+0x47a>

        default:
            break;
 80087e8:	bf00      	nop
    }

    /* Add any user supplied options to the buffer.  */
    if (dhcp_ptr -> nx_dhcp_user_option_add)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087f0:	f8d3 3f50 	ldr.w	r3, [r3, #3920]	@ 0xf50
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d024      	beq.n	8008842 <_nx_dhcp_send_request_internal+0x4d2>
    {

        /* Set the pointer for adding user option.  */
        user_option_ptr = buffer + index;
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087fc:	4413      	add	r3, r2
 80087fe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Calculate the available length for user options. Minus 1 to add the END option.  */
        user_option_length = (UINT)(packet_ptr -> nx_packet_data_end - user_option_ptr - 1);
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	3b01      	subs	r3, #1
 800880a:	61bb      	str	r3, [r7, #24]

        /* Add the specific DHCP option user wanted.  */
        if (dhcp_ptr -> nx_dhcp_user_option_add(dhcp_ptr, iface_index, dhcp_message_type, user_option_ptr, &user_option_length) == NX_TRUE)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008812:	f8d3 4f50 	ldr.w	r4, [r3, #3920]	@ 0xf50
 8008816:	f107 0318 	add.w	r3, r7, #24
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	47a0      	blx	r4
 8008826:	4603      	mov	r3, r0
 8008828:	2b01      	cmp	r3, #1
 800882a:	d104      	bne.n	8008836 <_nx_dhcp_send_request_internal+0x4c6>
        {

            /* Update the index to include the user options.  */
            index += user_option_length;
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	4413      	add	r3, r2
 8008832:	61fb      	str	r3, [r7, #28]
 8008834:	e005      	b.n	8008842 <_nx_dhcp_send_request_internal+0x4d2>
        }
        else
        {

            /* Invalid user options. Release the packet.  */
            nx_packet_release(packet_ptr);
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	4618      	mov	r0, r3
 800883a:	f004 ff47 	bl	800d6cc <_nx_packet_release>
            return(NX_DHCP_UNKNOWN_OPTION);
 800883e:	239f      	movs	r3, #159	@ 0x9f
 8008840:	e054      	b.n	80088ec <_nx_dhcp_send_request_internal+0x57c>
        }
    }

    /* Setup the packet pointers.  */
    packet_ptr -> nx_packet_length =      NX_BOOTP_OFFSET_END;
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008848:	625a      	str	r2, [r3, #36]	@ 0x24
    packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_BOOTP_OFFSET_END;
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	f502 7296 	add.w	r2, r2, #300	@ 0x12c
 8008854:	60da      	str	r2, [r3, #12]

#ifndef NX_DHCP_ENABLE_BOOTP

    /* Added the END option.  */
    *(buffer + index) = NX_DHCP_OPTION_END;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800885a:	4413      	add	r3, r2
 800885c:	22ff      	movs	r2, #255	@ 0xff
 800885e:	701a      	strb	r2, [r3, #0]
    index ++;
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	3301      	adds	r3, #1
 8008864:	61fb      	str	r3, [r7, #28]

    /* Check the option length.  */
    if (index > NX_BOOTP_OFFSET_END)
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800886c:	d908      	bls.n	8008880 <_nx_dhcp_send_request_internal+0x510>
    {
        packet_ptr -> nx_packet_length = index;
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	69fa      	ldr	r2, [r7, #28]
 8008872:	625a      	str	r2, [r3, #36]	@ 0x24
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + index;
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	6899      	ldr	r1, [r3, #8]
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	440a      	add	r2, r1
 800887e:	60da      	str	r2, [r3, #12]
    }
#endif

    /* Set the target address according to RFC2131, Section4.3.6, Page33, Table4 and Section4.4.4, Page40.  
       DHCP Request for renewing and DHCP Release message must be unicast.  */
    if (((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING)) ||
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b03      	cmp	r3, #3
 8008884:	d103      	bne.n	800888e <_nx_dhcp_send_request_internal+0x51e>
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	785b      	ldrb	r3, [r3, #1]
 800888a:	2b06      	cmp	r3, #6
 800888c:	d002      	beq.n	8008894 <_nx_dhcp_send_request_internal+0x524>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b07      	cmp	r3, #7
 8008892:	d103      	bne.n	800889c <_nx_dhcp_send_request_internal+0x52c>
        (dhcp_message_type == NX_DHCP_TYPE_DHCPRELEASE))
    {

        /* Use the current server's IP address.  */
        targetIP = interface_record -> nx_dhcp_server_ip;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800889a:	e002      	b.n	80088a2 <_nx_dhcp_send_request_internal+0x532>
    }
    else
    {

        /* Set the server target IP address to broadcast.  */
        targetIP = NX_BOOTP_BC_ADDRESS;
 800889c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* DHCP messages broadcast by a client prior to that client obtaining
       its IP address must have the source address field in the IP header
       set to 0. RFC2131, Section4.1, Page23.  */
    if ((dhcp_message_type == NX_DHCP_TYPE_DHCPDISCOVER) ||
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d006      	beq.n	80088b6 <_nx_dhcp_send_request_internal+0x546>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d10b      	bne.n	80088c6 <_nx_dhcp_send_request_internal+0x556>
        ((dhcp_message_type == NX_DHCP_TYPE_DHCPREQUEST) && (interface_record -> nx_dhcp_state < NX_DHCP_STATE_BOUND)))
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	785b      	ldrb	r3, [r3, #1]
 80088b2:	2b04      	cmp	r3, #4
 80088b4:	d807      	bhi.n	80088c6 <_nx_dhcp_send_request_internal+0x556>
    {

        /* Call function to send the special packet with zero source address.*/
        status = _nx_dhcp_client_send_with_zero_source_address(dhcp_ptr, iface_index, packet_ptr);
 80088b6:	6a3b      	ldr	r3, [r7, #32]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f819 	bl	80088f4 <_nx_dhcp_client_send_with_zero_source_address>
 80088c2:	63b8      	str	r0, [r7, #56]	@ 0x38
 80088c4:	e00a      	b.n	80088dc <_nx_dhcp_send_request_internal+0x56c>
    }
    else
    {

        /* Send the packet.  */
        status = nx_udp_socket_interface_send(&(dhcp_ptr -> nx_dhcp_socket), packet_ptr, targetIP, NX_DHCP_SERVER_UDP_PORT, iface_index);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f603 30dc 	addw	r0, r3, #3036	@ 0xbdc
 80088cc:	6a39      	ldr	r1, [r7, #32]
 80088ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	2343      	movs	r3, #67	@ 0x43
 80088d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80088d6:	f005 ff5a 	bl	800e78e <_nx_udp_socket_source_send>
 80088da:	63b8      	str	r0, [r7, #56]	@ 0x38
    }

    /* If an error is detected, release the packet. */
    if (status != NX_SUCCESS)
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d003      	beq.n	80088ea <_nx_dhcp_send_request_internal+0x57a>
    {

        /* Release the packet.  */
        nx_packet_release(packet_ptr);
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	4618      	mov	r0, r3
 80088e6:	f004 fef1 	bl	800d6cc <_nx_packet_release>
    }

    /* Return completion status.  */
    return(status);
 80088ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3744      	adds	r7, #68	@ 0x44
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd90      	pop	{r4, r7, pc}

080088f4 <_nx_dhcp_client_send_with_zero_source_address>:
/*                                            supported new ip filter,    */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_client_send_with_zero_source_address(NX_DHCP *dhcp_ptr, UINT iface_index, NX_PACKET *packet_ptr)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b098      	sub	sp, #96	@ 0x60
 80088f8:	af02      	add	r7, sp, #8
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	607a      	str	r2, [r7, #4]
ULONG           checksum;
ULONG           val;
NX_IP_DRIVER    driver_request;
      
    /* Set up the pointer to the associated IP instance.  */
    ip_ptr = dhcp_ptr -> nx_dhcp_ip_ptr;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Set up the pointer to the associated socket.  */
    socket_ptr = &dhcp_ptr -> nx_dhcp_socket;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f603 33dc 	addw	r3, r3, #3036	@ 0xbdc
 800890c:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Set up the pointer to the interface.  */
    interface_ptr = &(ip_ptr -> nx_ip_interface[iface_index]);
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800891c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800891e:	4413      	add	r3, r2
 8008920:	3304      	adds	r3, #4
 8008922:	647b      	str	r3, [r7, #68]	@ 0x44
    packet_ptr -> nx_packet_ip_interface = interface_ptr;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008928:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set up the address.  */
    ip_src_addr = NX_BOOTP_NO_ADDRESS;
 800892a:	2300      	movs	r3, #0
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
    ip_dest_addr = NX_BOOTP_BC_ADDRESS;
 800892e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008932:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check the interface.  */
    if ((!interface_ptr -> nx_interface_valid) || (!interface_ptr -> nx_interface_link_up))
 8008934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008936:	791b      	ldrb	r3, [r3, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <_nx_dhcp_client_send_with_zero_source_address+0x50>
 800893c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800893e:	799b      	ldrb	r3, [r3, #6]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <_nx_dhcp_client_send_with_zero_source_address+0x54>
    {

        /* None found; return the error status. */
        return(NX_INVALID_INTERFACE);
 8008944:	234c      	movs	r3, #76	@ 0x4c
 8008946:	e160      	b.n	8008c0a <_nx_dhcp_client_send_with_zero_source_address+0x316>
    }

    /* Build UDP header.  */

    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	f1a3 0208 	sub.w	r2, r3, #8
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2204      	movs	r2, #4
 8008958:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    
#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800895c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008966:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800896a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800896c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008974:	441a      	add	r2, r3
 8008976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800897c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008984:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 8008986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008988:	695a      	ldr	r2, [r3, #20]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800898e:	441a      	add	r2, r3
 8008990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008992:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008998:	f103 0208 	add.w	r2, r3, #8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the UDP header pointer.  */
    udp_header_ptr =  (NX_UDP_HEADER *) packet_ptr -> nx_packet_prepend_ptr;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 = (((ULONG)socket_ptr -> nx_udp_socket_port ) << NX_SHIFT_BY_16) | (ULONG) NX_DHCP_SERVER_UDP_PORT;
 80089a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	041b      	lsls	r3, r3, #16
 80089ac:	f043 0243 	orr.w	r2, r3, #67	@ 0x43
 80089b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089b2:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b8:	041a      	lsls	r2, r3, #16
 80089ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089bc:	605a      	str	r2, [r3, #4]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 80089be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	ba1a      	rev	r2, r3
 80089c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c6:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 80089c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	ba1a      	rev	r2, r3
 80089ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089d0:	605a      	str	r2, [r3, #4]

#ifdef NX_DISABLE_UDP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_UDP_TX_CHECKSUM */
    compute_checksum = 1;
 80089d2:	2301      	movs	r3, #1
 80089d4:	657b      	str	r3, [r7, #84]	@ 0x54
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 80089d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089da:	f003 0310 	and.w	r3, r3, #16
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <_nx_dhcp_client_send_with_zero_source_address+0xf4>
        compute_checksum = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80089e6:	e001      	b.n	80089ec <_nx_dhcp_client_send_with_zero_source_address+0xf8>
    else
        compute_checksum = 1;
 80089e8:	2301      	movs	r3, #1
 80089ea:	657b      	str	r3, [r7, #84]	@ 0x54
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 80089ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d028      	beq.n	8008a44 <_nx_dhcp_client_send_with_zero_source_address+0x150>
    {
        /* Yes, we need to compute the UDP checksum.  */
        checksum = _nx_ip_checksum_compute(packet_ptr,
                                           NX_PROTOCOL_UDP,
                                           (UINT)packet_ptr -> nx_packet_length,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        checksum = _nx_ip_checksum_compute(packet_ptr,
 80089f6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80089fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	460b      	mov	r3, r1
 8008a02:	2111      	movs	r1, #17
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 ff17 	bl	800a838 <_nx_ip_checksum_compute>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	653b      	str	r3, [r7, #80]	@ 0x50
                                           &ip_src_addr,
                                           &ip_dest_addr);

        checksum = ~checksum & NX_LOWER_16_MASK;
 8008a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a10:	43db      	mvns	r3, r3
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	653b      	str	r3, [r7, #80]	@ 0x50

        /* If the computed checksum is zero, it will be transmitted as all ones. */
        /* RFC 768, page 2. */
        if (checksum == 0)
 8008a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d102      	bne.n	8008a22 <_nx_dhcp_client_send_with_zero_source_address+0x12e>
            checksum = 0xFFFF;
 8008a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a20:	653b      	str	r3, [r7, #80]	@ 0x50

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	ba1a      	rev	r2, r3
 8008a28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a2a:	605a      	str	r2, [r3, #4]

        udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a32:	431a      	orrs	r2, r3
 8008a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a36:	605a      	str	r2, [r3, #4]

        NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 8008a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	ba1a      	rev	r2, r3
 8008a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a40:	605a      	str	r2, [r3, #4]
 8008a42:	e005      	b.n	8008a50 <_nx_dhcp_client_send_with_zero_source_address+0x15c>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
        /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a48:	f043 0210 	orr.w	r2, r3, #16
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY  */

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 8008a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a52:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8008a56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f00a fdf8 	bl	8013650 <_txe_mutex_get>

    /* Build the IP header.  */

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr - 20;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f1a3 0214 	sub.w	r2, r3, #20
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length + 20;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a70:	f103 0214 	add.w	r2, r3, #20
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the IP header pointer.  */
    ip_header_ptr =  (NX_IPV4_HEADER *) packet_ptr -> nx_packet_prepend_ptr; 
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Build the first 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | socket_ptr -> nx_udp_socket_type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 8008a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f043 428a 	orr.w	r2, r3, #1157627904	@ 0x45000000
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a90:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | socket_ptr -> nx_udp_socket_fragment_enable;
 8008a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a94:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8008a98:	1c59      	adds	r1, r3, #1
 8008a9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a9c:	f8c2 1134 	str.w	r1, [r2, #308]	@ 0x134
 8008aa0:	041a      	lsls	r2, r3, #16
 8008aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aaa:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((socket_ptr -> nx_udp_socket_time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | NX_IP_UDP);
 8008aac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab0:	061b      	lsls	r3, r3, #24
 8008ab2:	f443 1288 	orr.w	r2, r3, #1114112	@ 0x110000
 8008ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab8:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  ip_src_addr;
 8008aba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008abe:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  ip_dest_addr;
 8008ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac4:	611a      	str	r2, [r3, #16]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 8008ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	ba1a      	rev	r2, r3
 8008acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ace:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 8008ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	ba1a      	rev	r2, r3
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad8:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 8008ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	ba1a      	rev	r2, r3
 8008ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae2:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 8008ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	ba1a      	rev	r2, r3
 8008aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aec:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 8008aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	ba1a      	rev	r2, r3
 8008af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008af6:	611a      	str	r2, [r3, #16]
     
#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#else /* NX_DISABLE_IP_TX_CHECKSUM */
    compute_checksum = 1;
 8008af8:	2301      	movs	r3, #1
 8008afa:	657b      	str	r3, [r7, #84]	@ 0x54
#endif /* NX_DISABLE_IP_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <_nx_dhcp_client_send_with_zero_source_address+0x21c>
        compute_checksum = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b0e:	e001      	b.n	8008b14 <_nx_dhcp_client_send_with_zero_source_address+0x220>
    else
        compute_checksum = 1;
 8008b10:	2301      	movs	r3, #1
 8008b12:	657b      	str	r3, [r7, #84]	@ 0x54
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    if (compute_checksum)
 8008b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d019      	beq.n	8008b4e <_nx_dhcp_client_send_with_zero_source_address+0x25a>
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4, 20, NULL, NULL);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	2214      	movs	r2, #20
 8008b22:	2104      	movs	r1, #4
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f001 fe87 	bl	800a838 <_nx_ip_checksum_compute>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	653b      	str	r3, [r7, #80]	@ 0x50

        val = (ULONG)(~checksum);
 8008b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b30:	43db      	mvns	r3, r3
 8008b32:	63bb      	str	r3, [r7, #56]	@ 0x38
        val = val & NX_LOWER_16_MASK;
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 8008b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b3c:	ba1b      	rev	r3, r3
 8008b3e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 8008b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b46:	431a      	orrs	r2, r3
 8008b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4a:	609a      	str	r2, [r3, #8]
 8008b4c:	e005      	b.n	8008b5a <_nx_dhcp_client_send_with_zero_source_address+0x266>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b52:	f043 0201 	orr.w	r2, r3, #1
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	639a      	str	r2, [r3, #56]	@ 0x38
        }
    }
#endif /* NX_ENABLE_IP_PACKET_FILTER */

    /* Build the driver request.  */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8008b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    driver_request.nx_ip_driver_packet =                packet_ptr;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_ip_interface;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 8008b68:	2304      	movs	r3, #4
 8008b6a:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8008b6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008b70:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008b76:	61fb      	str	r3, [r7, #28]

    /* Determine if fragmentation is needed.  */
    if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_mtu_size)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d925      	bls.n	8008bd2 <_nx_dhcp_client_send_with_zero_source_address+0x2de>
    {

#ifndef NX_DISABLE_FRAGMENTATION
        /* Check the DF bit flag.  */
        if ((ip_ptr -> nx_ip_fragment_processing) && (socket_ptr -> nx_udp_socket_fragment_enable != NX_DONT_FRAGMENT))
 8008b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b88:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d013      	beq.n	8008bb8 <_nx_dhcp_client_send_with_zero_source_address+0x2c4>
 8008b90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b98:	d00e      	beq.n	8008bb8 <_nx_dhcp_client_send_with_zero_source_address+0x2c4>
        {

            /* Fragmentation is needed, call the IP fragment processing routine.  */
            (ip_ptr -> nx_ip_fragment_processing) (&driver_request);
 8008b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b9c:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 8008ba0:	f107 0210 	add.w	r2, r7, #16
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	4798      	blx	r3

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008baa:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f00a fda8 	bl	8013704 <_txe_mutex_put>

            /* Return a successful status.  */
            return(NX_SUCCESS);
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e028      	b.n	8008c0a <_nx_dhcp_client_send_with_zero_source_address+0x316>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 8008bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bc0:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bc4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f00a fd9b 	bl	8013704 <_txe_mutex_put>

            /* Return a not successful status.  */
            return(NX_NOT_SUCCESSFUL);
 8008bce:	2343      	movs	r3, #67	@ 0x43
 8008bd0:	e01b      	b.n	8008c0a <_nx_dhcp_client_send_with_zero_source_address+0x316>
    }

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP packet sent count.  */
    ip_ptr -> nx_ip_total_packets_sent++;
 8008bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	1c5a      	adds	r2, r3, #1
 8008bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bda:	615a      	str	r2, [r3, #20]

    /* Increment the IP bytes sent count.  */
    ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - 20;
 8008bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bde:	699a      	ldr	r2, [r3, #24]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	4413      	add	r3, r2
 8008be6:	f1a3 0214 	sub.w	r2, r3, #20
 8008bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bec:	619a      	str	r2, [r3, #24]
#endif

    /* Broadcast packet.  */
    (packet_ptr -> nx_packet_ip_interface -> nx_interface_link_driver_entry) (&driver_request);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bf4:	f107 0210 	add.w	r2, r7, #16
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 8008bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bfe:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8008c02:	4618      	mov	r0, r3
 8008c04:	f00a fd7e 	bl	8013704 <_txe_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3758      	adds	r7, #88	@ 0x58
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <_nx_dhcp_extract_information>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_extract_information(NX_DHCP *dhcp_ptr, NX_DHCP_INTERFACE_RECORD *interface_record, UCHAR *dhcp_message, UINT length)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
 8008c1e:	603b      	str	r3, [r7, #0]

ULONG       value;


    /* Extract the IP address.  */
    value =  _nx_dhcp_get_data(dhcp_message + NX_BOOTP_OFFSET_YOUR_IP, 4);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3310      	adds	r3, #16
 8008c24:	2104      	movs	r1, #4
 8008c26:	4618      	mov	r0, r3
 8008c28:	f000 fac2 	bl	80091b0 <_nx_dhcp_get_data>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	617b      	str	r3, [r7, #20]

    /* Determine if it is valid.  */
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d01c      	beq.n	8008c70 <_nx_dhcp_extract_information+0x5e>
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8008c36:	697b      	ldr	r3, [r7, #20]
    if ((value != NX_BOOTP_NO_ADDRESS) &&
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	da0b      	bge.n	8008c54 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
        (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8008c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c46:	d005      	beq.n	8008c54 <_nx_dhcp_extract_information+0x42>
         ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
         ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8008c4e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008c52:	d10d      	bne.n	8008c70 <_nx_dhcp_extract_information+0x5e>
    {

        /* Store the IP address.  */
        interface_record -> nx_dhcp_ip_address =  value;
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	60da      	str	r2, [r3, #12]
        return(NX_DHCP_BAD_IP_ADDRESS);
    }
                       
    /* Determine if there is a subnet mask. Note a DHCP Server receiving a BOOTP request
       may send DHCP option data for subnet masks as per RFC 1534 Section 2.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_SUBNET_MASK, &value, length) == NX_SUCCESS)
 8008c5a:	f107 0214 	add.w	r2, r7, #20
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2101      	movs	r1, #1
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f8f5 	bl	8008e52 <_nx_dhcp_get_option_value>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <_nx_dhcp_extract_information+0x62>
 8008c6e:	e012      	b.n	8008c96 <_nx_dhcp_extract_information+0x84>
        return(NX_DHCP_BAD_IP_ADDRESS);
 8008c70:	2392      	movs	r3, #146	@ 0x92
 8008c72:	e0ea      	b.n	8008e4a <_nx_dhcp_extract_information+0x238>
    {

        /* Make sure there is a valid IP address too.  */
        if (value != NX_BOOTP_NO_ADDRESS)
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <_nx_dhcp_extract_information+0x70>
        {

            interface_record -> nx_dhcp_network_mask =  value;
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	619a      	str	r2, [r3, #24]
 8008c80:	e009      	b.n	8008c96 <_nx_dhcp_extract_information+0x84>
        {
            ULONG ip_address;

            /* No valid network mask info supplied; use the current network mask if any. Don't
               care about current IP address for now. */
            nx_ip_interface_address_get(dhcp_ptr -> nx_dhcp_ip_ptr, 
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6898      	ldr	r0, [r3, #8]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	69d9      	ldr	r1, [r3, #28]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	3318      	adds	r3, #24
 8008c8e:	f107 0210 	add.w	r2, r7, #16
 8008c92:	f002 fd2d 	bl	800b6f0 <_nx_ip_interface_address_get>
#else  

    /* NX_DHCP_ENABLE_BOOTP  not defined */

    /* Overwrite the server ID if there is a DHCP option for Server ID */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_SERVER, &value, length) == NX_SUCCESS)
 8008c96:	f107 0214 	add.w	r2, r7, #20
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2136      	movs	r1, #54	@ 0x36
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f8d7 	bl	8008e52 <_nx_dhcp_get_option_value>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d117      	bne.n	8008cda <_nx_dhcp_extract_information+0xc8>
    {

        /* Determine if it is valid.  */
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d012      	beq.n	8008cd6 <_nx_dhcp_extract_information+0xc4>
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8008cb0:	697b      	ldr	r3, [r7, #20]
        if ((value != NX_BOOTP_NO_ADDRESS) &&
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	da0b      	bge.n	8008cce <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
            (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8008cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cc0:	d005      	beq.n	8008cce <_nx_dhcp_extract_information+0xbc>
             ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
             ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8008cc8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008ccc:	d103      	bne.n	8008cd6 <_nx_dhcp_extract_information+0xc4>
        {

            /* Store the server IP address.  */
            interface_record -> nx_dhcp_server_ip = value;
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	615a      	str	r2, [r3, #20]
 8008cd4:	e001      	b.n	8008cda <_nx_dhcp_extract_information+0xc8>
        }
        else
        {
            return(NX_DHCP_BAD_IP_ADDRESS);
 8008cd6:	2392      	movs	r3, #146	@ 0x92
 8008cd8:	e0b7      	b.n	8008e4a <_nx_dhcp_extract_information+0x238>
        }
    }

    /* Get the lease time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_DHCP_LEASE, &value, length) == NX_SUCCESS)
 8008cda:	f107 0214 	add.w	r2, r7, #20
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2133      	movs	r1, #51	@ 0x33
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8b5 	bl	8008e52 <_nx_dhcp_get_option_value>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d120      	bne.n	8008d30 <_nx_dhcp_extract_information+0x11e>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008cf4:	d109      	bne.n	8008d0a <_nx_dhcp_extract_information+0xf8>
        {
            /* Store the 'infinite' lease time . */
            interface_record -> nx_dhcp_lease_time = value;
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
            interface_record -> nx_dhcp_renewal_time = value;
 8008cfc:	697a      	ldr	r2, [r7, #20]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	631a      	str	r2, [r3, #48]	@ 0x30
            interface_record -> nx_dhcp_rebind_time = value;
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d08:	e012      	b.n	8008d30 <_nx_dhcp_extract_information+0x11e>
        }
        else
        {            

            /* Store the lease time in timer ticks.  */
            interface_record -> nx_dhcp_lease_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2264      	movs	r2, #100	@ 0x64
 8008d0e:	fb03 f202 	mul.w	r2, r3, r2
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	62da      	str	r2, [r3, #44]	@ 0x2c
    
            /* Set the renew and rebind times.  */
            interface_record -> nx_dhcp_renewal_time = interface_record -> nx_dhcp_lease_time / 2;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1a:	085a      	lsrs	r2, r3, #1
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	631a      	str	r2, [r3, #48]	@ 0x30
            interface_record -> nx_dhcp_rebind_time =  interface_record -> nx_dhcp_lease_time - (interface_record -> nx_dhcp_lease_time / 8);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d28:	08db      	lsrs	r3, r3, #3
 8008d2a:	1ad2      	subs	r2, r2, r3
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
    }
 
    /* Overwrite the renew and rebind times with the specified values if the options are present.  */
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8008d30:	f107 0214 	add.w	r2, r7, #20
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	213a      	movs	r1, #58	@ 0x3a
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f88a 	bl	8008e52 <_nx_dhcp_get_option_value>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d112      	bne.n	8008d6a <_nx_dhcp_extract_information+0x158>
        (value <= interface_record -> nx_dhcp_lease_time))
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d48:	697b      	ldr	r3, [r7, #20]
    if ((_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_RENEWAL, &value, length) == NX_SUCCESS) && 
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d30d      	bcc.n	8008d6a <_nx_dhcp_extract_information+0x158>
    {       

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d54:	d103      	bne.n	8008d5e <_nx_dhcp_extract_information+0x14c>
        {
            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_renewal_time = value;
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d5c:	e005      	b.n	8008d6a <_nx_dhcp_extract_information+0x158>
        }
        else
        {

            /* Store the renewal time in timer ticks  */
            interface_record -> nx_dhcp_renewal_time =  value * (ULONG)NX_IP_PERIODIC_RATE;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2264      	movs	r2, #100	@ 0x64
 8008d62:	fb03 f202 	mul.w	r2, r3, r2
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
  
    /* Determine if there is a rebind time.  */
    if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_REBIND, &value, length) == NX_SUCCESS)
 8008d6a:	f107 0214 	add.w	r2, r7, #20
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	213b      	movs	r1, #59	@ 0x3b
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f86d 	bl	8008e52 <_nx_dhcp_get_option_value>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d119      	bne.n	8008db2 <_nx_dhcp_extract_information+0x1a0>
    {

        /* Check for an infinite lease. */
        if (value == 0xFFFFFFFF)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d84:	d103      	bne.n	8008d8e <_nx_dhcp_extract_information+0x17c>
        {

            /* Set the 'infinite least time.  */
            interface_record -> nx_dhcp_rebind_time = value;
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8008d8c:	e011      	b.n	8008db2 <_nx_dhcp_extract_information+0x1a0>
        }
        else
        {

            /* Convert to timer ticks. */
            value = value * (ULONG)NX_IP_PERIODIC_RATE;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2264      	movs	r2, #100	@ 0x64
 8008d92:	fb02 f303 	mul.w	r3, r2, r3
 8008d96:	617b      	str	r3, [r7, #20]

            /* Sanity check*/
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d307      	bcc.n	8008db2 <_nx_dhcp_extract_information+0x1a0>
                (value >= interface_record -> nx_dhcp_renewal_time))
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008da6:	697b      	ldr	r3, [r7, #20]
            if ((value <= interface_record -> nx_dhcp_lease_time) && 
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d802      	bhi.n	8008db2 <_nx_dhcp_extract_information+0x1a0>
            {
        
                /* Store the rebind time.  */
                interface_record -> nx_dhcp_rebind_time =  value;
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	635a      	str	r2, [r3, #52]	@ 0x34
            }
        }
    }

    /* Determine if this is an ACK from a server response, which can only happen from a handful of states.  */
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d007      	beq.n	8008dca <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	785b      	ldrb	r3, [r3, #1]
    if ((interface_record -> nx_dhcp_state == NX_DHCP_STATE_REQUESTING) ||
 8008dbe:	2b06      	cmp	r3, #6
 8008dc0:	d003      	beq.n	8008dca <_nx_dhcp_extract_information+0x1b8>
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_REBINDING))
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
        (interface_record -> nx_dhcp_state == NX_DHCP_STATE_RENEWING) ||
 8008dc6:	2b07      	cmp	r3, #7
 8008dc8:	d121      	bne.n	8008e0e <_nx_dhcp_extract_information+0x1fc>
    {

        /* Determine if the IP gateway/router IP address is present.  */
        if (_nx_dhcp_get_option_value(dhcp_message, NX_DHCP_OPTION_GATEWAYS, &value, length) == NX_SUCCESS)
 8008dca:	f107 0214 	add.w	r2, r7, #20
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	2103      	movs	r1, #3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f83d 	bl	8008e52 <_nx_dhcp_get_option_value>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d117      	bne.n	8008e0e <_nx_dhcp_extract_information+0x1fc>
        {

            /* Determine if it is valid.  */
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d012      	beq.n	8008e0a <_nx_dhcp_extract_information+0x1f8>
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8008de4:	697b      	ldr	r3, [r7, #20]
            if ((value != NX_BOOTP_NO_ADDRESS) &&
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	da0b      	bge.n	8008e02 <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
                (((value & NX_IP_CLASS_A_MASK) == NX_IP_CLASS_A_TYPE) ||
 8008df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008df4:	d005      	beq.n	8008e02 <_nx_dhcp_extract_information+0x1f0>
                 ((value & NX_IP_CLASS_C_MASK) == NX_IP_CLASS_C_TYPE)))
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
                 ((value & NX_IP_CLASS_B_MASK) == NX_IP_CLASS_B_TYPE) ||
 8008dfc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8008e00:	d103      	bne.n	8008e0a <_nx_dhcp_extract_information+0x1f8>
            {

                /* Store the gateway/Router IP address to the Client record.  */
                interface_record -> nx_dhcp_gateway_address = value;
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	611a      	str	r2, [r3, #16]
 8008e08:	e001      	b.n	8008e0e <_nx_dhcp_extract_information+0x1fc>
            }
            else
            {
                return(NX_DHCP_BAD_IP_ADDRESS);
 8008e0a:	2392      	movs	r3, #146	@ 0x92
 8008e0c:	e01d      	b.n	8008e4a <_nx_dhcp_extract_information+0x238>
            }
        }
    }

     /* Check the DHCP options size.  */
     if ((length - NX_BOOTP_OFFSET_OPTIONS) > NX_DHCP_OPTIONS_BUFFER_SIZE)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	3bf0      	subs	r3, #240	@ 0xf0
 8008e12:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8008e16:	d905      	bls.n	8008e24 <_nx_dhcp_extract_information+0x212>
         interface_record -> nx_dhcp_options_size = NX_DHCP_OPTIONS_BUFFER_SIZE;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008e1e:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
 8008e22:	e005      	b.n	8008e30 <_nx_dhcp_extract_information+0x21e>
     else
         interface_record -> nx_dhcp_options_size = length - NX_BOOTP_OFFSET_OPTIONS;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	f1a3 02f0 	sub.w	r2, r3, #240	@ 0xf0
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180

     /* Copy the DHCP options into DHCP Client options buffer.  */
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f103 0048 	add.w	r0, r3, #72	@ 0x48
            &dhcp_message[NX_BOOTP_OFFSET_OPTIONS], interface_record -> nx_dhcp_options_size);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
     memcpy(interface_record -> nx_dhcp_options_buffer, /* Use case of memcpy is verified. */
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8008e42:	461a      	mov	r2, r3
 8008e44:	f00b facd 	bl	80143e2 <memcpy>

#endif  /* NX_DHCP_ENABLE_BOOTP */

    return (NX_SUCCESS);
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <_nx_dhcp_get_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_get_option_value(UCHAR *bootp_message, UINT option, ULONG *value, UINT length)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b088      	sub	sp, #32
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
UCHAR *option_message;
UINT   option_length;


    /* Setup buffer pointer.  */
    option_message = &bootp_message[NX_BOOTP_OFFSET_OPTIONS];
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	33f0      	adds	r3, #240	@ 0xf0
 8008e64:	61fb      	str	r3, [r7, #28]
    option_length = length - NX_BOOTP_OFFSET_OPTIONS;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	3bf0      	subs	r3, #240	@ 0xf0
 8008e6a:	61bb      	str	r3, [r7, #24]

    /* Find the option.  */
    if ((option != NX_DHCP_OPTION_PAD) && (option != NX_DHCP_OPTION_END))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d02c      	beq.n	8008ecc <_nx_dhcp_get_option_value+0x7a>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2bff      	cmp	r3, #255	@ 0xff
 8008e76:	d029      	beq.n	8008ecc <_nx_dhcp_get_option_value+0x7a>
    {

        /* Search the buffer for the option.  */
        data =  _nx_dhcp_search_buffer(option_message, option, option_length);
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	69f8      	ldr	r0, [r7, #28]
 8008e7e:	f000 f94f 	bl	8009120 <_nx_dhcp_search_buffer>
 8008e82:	6178      	str	r0, [r7, #20]

        /* Check to see if the option was found.  */
        if (data != NX_NULL)
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d020      	beq.n	8008ecc <_nx_dhcp_get_option_value+0x7a>
        {

            /* Check for the proper size.  */
            if (*data > 4)
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d90f      	bls.n	8008eb2 <_nx_dhcp_get_option_value+0x60>
            {

                /* Check for the gateway option.  */
                if (option == NX_DHCP_OPTION_GATEWAYS)
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b03      	cmp	r3, #3
 8008e96:	d10a      	bne.n	8008eae <_nx_dhcp_get_option_value+0x5c>
                {

                    /* Pickup the first gateway address.  */
                    *value =  _nx_dhcp_get_data(data + 1, 4);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	2104      	movs	r1, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 f986 	bl	80091b0 <_nx_dhcp_get_data>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	601a      	str	r2, [r3, #0]

                    /* For now, just disregard any additional gateway addresses.  */
                    return(NX_SUCCESS);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e00f      	b.n	8008ece <_nx_dhcp_get_option_value+0x7c>
                }
                else
                {

                    /* Invalid size, return error.  */
                    return(NX_SIZE_ERROR);
 8008eae:	2309      	movs	r3, #9
 8008eb0:	e00d      	b.n	8008ece <_nx_dhcp_get_option_value+0x7c>
            }
            else
            {

                /* Get the actual value.  */
                *value = _nx_dhcp_get_data(data + 1, *data);
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	f000 f977 	bl	80091b0 <_nx_dhcp_get_data>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	601a      	str	r2, [r3, #0]
                return(NX_SUCCESS);  
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e000      	b.n	8008ece <_nx_dhcp_get_option_value+0x7c>
            }
        }
    }

    /* Return an error if not found.  */
    return(NX_OPTION_ERROR);
 8008ecc:	230a      	movs	r3, #10
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <_nx_dhcp_add_option_value>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_dhcp_add_option_value(UCHAR *bootp_message, UINT option, UINT size, ULONG value, UINT *index)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b084      	sub	sp, #16
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	607a      	str	r2, [r7, #4]
 8008ee2:	603b      	str	r3, [r7, #0]


    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_store_data(bootp_message + (*index), size, value);
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 f961 	bl	80091e8 <_nx_dhcp_store_data>
    (*index) += size;    
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	441a      	add	r2, r3
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <_nx_dhcp_add_option_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_string(UCHAR *bootp_message, UINT option, UINT size, UCHAR *value, UINT *index)
{                                              
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = (UCHAR)option;
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)size; 
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	b2d2      	uxtb	r2, r2
 8008f6e:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	1c5a      	adds	r2, r3, #1
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), value, size);
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4413      	add	r3, r2
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f966 	bl	8009258 <_nx_dhcp_move_string>
    (*index) += size;    
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	441a      	add	r2, r3
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	601a      	str	r2, [r3, #0]

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <_nx_dhcp_add_option_parameter_request>:
/*                                                                        */
/*  08-02-2021     Yuxin Zhou               Initial Version 6.1.8         */
/*                                                                        */
/**************************************************************************/
static UINT  _nx_dhcp_add_option_parameter_request(NX_DHCP *dhcp_ptr, UCHAR *bootp_message, UINT *index)
{                                              
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
                    
    /* Store the option.  */
    *(bootp_message + (*index)) = NX_DHCP_OPTION_DHCP_PARAMETERS;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	4413      	add	r3, r2
 8008fb8:	2237      	movs	r2, #55	@ 0x37
 8008fba:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	1c5a      	adds	r2, r3, #1
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	601a      	str	r2, [r3, #0]

    /* Store the option size.  */
    *(bootp_message + (*index)) = (UCHAR)(NX_DHCP_REQUEST_PARAMETER_SIZE + dhcp_ptr -> nx_dhcp_user_request_parameter_size); 
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fcc:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	@ 0xf44
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	440b      	add	r3, r1
 8008fda:	3203      	adds	r2, #3
 8008fdc:	b2d2      	uxtb	r2, r2
 8008fde:	701a      	strb	r2, [r3, #0]
    (*index) ++;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	601a      	str	r2, [r3, #0]

    /* Store the option value.  */
    _nx_dhcp_move_string(bootp_message + (*index), _nx_dhcp_request_parameters, NX_DHCP_REQUEST_PARAMETER_SIZE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	2203      	movs	r2, #3
 8008ff4:	4917      	ldr	r1, [pc, #92]	@ (8009054 <_nx_dhcp_add_option_parameter_request+0xb0>)
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 f92e 	bl	8009258 <_nx_dhcp_move_string>
    (*index) += (UINT)NX_DHCP_REQUEST_PARAMETER_SIZE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	1cda      	adds	r2, r3, #3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	601a      	str	r2, [r3, #0]

    /* Check if there are additional user options.  */
    if (dhcp_ptr -> nx_dhcp_user_request_parameter_size)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800900c:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	@ 0xf44
 8009010:	2b00      	cmp	r3, #0
 8009012:	d019      	beq.n	8009048 <_nx_dhcp_add_option_parameter_request+0xa4>
    {
        _nx_dhcp_move_string(bootp_message + (*index), dhcp_ptr -> nx_dhcp_user_request_parameter, dhcp_ptr -> nx_dhcp_user_request_parameter_size);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	18d0      	adds	r0, r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 51fa 	add.w	r1, r3, #8000	@ 0x1f40
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009028:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	@ 0xf44
 800902c:	461a      	mov	r2, r3
 800902e:	f000 f913 	bl	8009258 <_nx_dhcp_move_string>
        (*index) += (UCHAR)dhcp_ptr -> nx_dhcp_user_request_parameter_size;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800903c:	f8d2 2f44 	ldr.w	r2, [r2, #3908]	@ 0xf44
 8009040:	b2d2      	uxtb	r2, r2
 8009042:	441a      	add	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	601a      	str	r2, [r3, #0]
    }

    /* Return a successful completion.  */
    return(NX_SUCCESS);      
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	2000002c 	.word	0x2000002c

08009058 <_nx_dhcp_add_randomize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_add_randomize(ULONG timeout)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
ULONG adjustment;

    /* Uniform random number chosen from the range -1 to +1 second as recommended by RFC2131, Section4.1, Page24. */

    /* Calculate random time adjustment in timer ticks from the range 0 to NX_IP_PERIODIC_RATE * 2.  */
    adjustment = (ULONG)NX_RAND() % ((NX_IP_PERIODIC_RATE << 1) + 1);
 8009060:	f00a ff20 	bl	8013ea4 <rand>
 8009064:	4603      	mov	r3, r0
 8009066:	4a12      	ldr	r2, [pc, #72]	@ (80090b0 <_nx_dhcp_add_randomize+0x58>)
 8009068:	fba2 1203 	umull	r1, r2, r2, r3
 800906c:	0852      	lsrs	r2, r2, #1
 800906e:	21c9      	movs	r1, #201	@ 0xc9
 8009070:	fb01 f202 	mul.w	r2, r1, r2
 8009074:	1a9b      	subs	r3, r3, r2
 8009076:	60fb      	str	r3, [r7, #12]

    /* Check for adjustment.  */
    if (adjustment < NX_IP_PERIODIC_RATE)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2b63      	cmp	r3, #99	@ 0x63
 800907c:	d80e      	bhi.n	800909c <_nx_dhcp_add_randomize+0x44>
    {

        /* Updated timeout, minus NX_IP_PERIODIC_RATE - adjustment.  */

        /* Check for timeout.  */
        if (timeout > (NX_IP_PERIODIC_RATE - adjustment))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	429a      	cmp	r2, r3
 8009088:	d905      	bls.n	8009096 <_nx_dhcp_add_randomize+0x3e>
            timeout -= (ULONG)(NX_IP_PERIODIC_RATE - adjustment);
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4413      	add	r3, r2
 8009090:	3b64      	subs	r3, #100	@ 0x64
 8009092:	607b      	str	r3, [r7, #4]
 8009094:	e007      	b.n	80090a6 <_nx_dhcp_add_randomize+0x4e>
        else
            timeout = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	607b      	str	r3, [r7, #4]
 800909a:	e004      	b.n	80090a6 <_nx_dhcp_add_randomize+0x4e>
    }
    else
    {

        /* Updated timeout, add adjustment- NX_IP_PERIODIC_RATE.  */
        timeout += (ULONG)(adjustment - NX_IP_PERIODIC_RATE);
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4413      	add	r3, r2
 80090a2:	3b64      	subs	r3, #100	@ 0x64
 80090a4:	607b      	str	r3, [r7, #4]
    }

    return timeout;
 80090a6:	687b      	ldr	r3, [r7, #4]
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	028c1979 	.word	0x028c1979

080090b4 <_nx_dhcp_update_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_timeout(ULONG timeout)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]

    /* Timed out, double the timeout, limited to NX_DHCP_MAX_RETRANS_TIMEOUT */
    if ((2 * timeout) >= NX_DHCP_MAX_RETRANS_TIMEOUT)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80090c4:	d303      	bcc.n	80090ce <_nx_dhcp_update_timeout+0x1a>
    {

        /* Set the timeout as NX_DHCP_MAX_RETRANS_TIMEOUT.  */
        timeout = NX_DHCP_MAX_RETRANS_TIMEOUT;  
 80090c6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80090ca:	607b      	str	r3, [r7, #4]
 80090cc:	e002      	b.n	80090d4 <_nx_dhcp_update_timeout+0x20>
    }
    else
    {

        /* Double timeout value.  */
        timeout = timeout * 2;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	607b      	str	r3, [r7, #4]
    }

    /* Return the sequence timeout.  */
    return(timeout);
 80090d4:	687b      	ldr	r3, [r7, #4]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <_nx_dhcp_update_renewal_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG _nx_dhcp_update_renewal_timeout(ULONG timeout)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]

    /* check if the timeout is non zero */
    if (timeout != 0)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d010      	beq.n	8009112 <_nx_dhcp_update_renewal_timeout+0x30>
    {

        /* Timed out, halve the timeout, limited to NX_DHCP_MIN_RENEW_TIMEOUT or
          the remaining timeout if it is less than NX_DHCP_MIN_RENEW_TIMEOUT */
        if (timeout > NX_DHCP_MIN_RENEW_TIMEOUT)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f241 7270 	movw	r2, #6000	@ 0x1770
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d90b      	bls.n	8009112 <_nx_dhcp_update_renewal_timeout+0x30>
        {

            /* Timeout can still decrease, either
               force it to the minimum or halve it */
            if (timeout > (2 * NX_DHCP_MIN_RENEW_TIMEOUT ))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8009100:	4293      	cmp	r3, r2
 8009102:	d903      	bls.n	800910c <_nx_dhcp_update_renewal_timeout+0x2a>
            {

                /* Halve timeout.  */
                timeout = timeout / 2;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	085b      	lsrs	r3, r3, #1
 8009108:	607b      	str	r3, [r7, #4]
 800910a:	e002      	b.n	8009112 <_nx_dhcp_update_renewal_timeout+0x30>
            }
            else
            {

                /* set timeout to minimum.  */
                timeout =  NX_DHCP_MIN_RENEW_TIMEOUT ;
 800910c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009110:	607b      	str	r3, [r7, #4]
            }
        }
    }

    /* Return the sequence timeout.  */
    return(timeout);
 8009112:	687b      	ldr	r3, [r7, #4]
}
 8009114:	4618      	mov	r0, r3
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <_nx_dhcp_search_buffer>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UCHAR  *_nx_dhcp_search_buffer(UCHAR *option_message, UINT option, UINT length)
{
 8009120:	b480      	push	{r7}
 8009122:	b089      	sub	sp, #36	@ 0x24
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
UCHAR   *data;
UINT    i;
UINT    size;

    /* Setup buffer pointer.  */
    data = option_message;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	61fb      	str	r3, [r7, #28]
    i = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	61bb      	str	r3, [r7, #24]

    /* Search as long as there are valid options.   */
    while (i < length - 1)
 8009134:	e030      	b.n	8009198 <_nx_dhcp_search_buffer+0x78>
    {

        /* Simply skip any padding */
        if (*data == NX_DHCP_OPTION_PAD)
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d106      	bne.n	800914c <_nx_dhcp_search_buffer+0x2c>
        {

            data++;
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	3301      	adds	r3, #1
 8009142:	61fb      	str	r3, [r7, #28]
            i++;
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	3301      	adds	r3, #1
 8009148:	61bb      	str	r3, [r7, #24]
 800914a:	e025      	b.n	8009198 <_nx_dhcp_search_buffer+0x78>
        }

        /* On a match, return a pointer to the size.  */
        else if (*data == option)
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	4293      	cmp	r3, r2
 8009156:	d10f      	bne.n	8009178 <_nx_dhcp_search_buffer+0x58>
        {

            size = *(data + 1);
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	3301      	adds	r3, #1
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	617b      	str	r3, [r7, #20]

            /* Check if the option data is in the packet.  */
            if ((i + size + 1) > length)
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	4413      	add	r3, r2
 8009166:	3301      	adds	r3, #1
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	429a      	cmp	r2, r3
 800916c:	d201      	bcs.n	8009172 <_nx_dhcp_search_buffer+0x52>
                return(NX_NULL);
 800916e:	2300      	movs	r3, #0
 8009170:	e018      	b.n	80091a4 <_nx_dhcp_search_buffer+0x84>

            /* Return a pointer to the option size byte.  */
            return(data + 1);
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	3301      	adds	r3, #1
 8009176:	e015      	b.n	80091a4 <_nx_dhcp_search_buffer+0x84>

        /* Otherwise skip the option by adding the size to the pointer.  */
        else
        {

            size = *(++data);
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	3301      	adds	r3, #1
 800917c:	61fb      	str	r3, [r7, #28]
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	617b      	str	r3, [r7, #20]

            /* skip the data plus the size byte */
            data += size + 1;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	3301      	adds	r3, #1
 8009188:	69fa      	ldr	r2, [r7, #28]
 800918a:	4413      	add	r3, r2
 800918c:	61fb      	str	r3, [r7, #28]
            i += size + 1;
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	4413      	add	r3, r2
 8009194:	3301      	adds	r3, #1
 8009196:	61bb      	str	r3, [r7, #24]
    while (i < length - 1)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3b01      	subs	r3, #1
 800919c:	69ba      	ldr	r2, [r7, #24]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d3c9      	bcc.n	8009136 <_nx_dhcp_search_buffer+0x16>
        }
    }

    /* Return NULL to indicate the option was not found.  */
    return(NX_NULL);
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3724      	adds	r7, #36	@ 0x24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <_nx_dhcp_get_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static ULONG  _nx_dhcp_get_data(UCHAR *data, UINT size)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]

ULONG   value = 0;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]

   
    /* Process the data retrieval request.  */
    while (size-- > 0)
 80091be:	e007      	b.n	80091d0 <_nx_dhcp_get_data+0x20>
    {

        /* Build return value.  */
        value = (value << 8) | *data++;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	021a      	lsls	r2, r3, #8
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	1c59      	adds	r1, r3, #1
 80091c8:	6079      	str	r1, [r7, #4]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
    while (size-- > 0)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	1e5a      	subs	r2, r3, #1
 80091d4:	603a      	str	r2, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1f2      	bne.n	80091c0 <_nx_dhcp_get_data+0x10>
    }

    /* Return value.  */
    return(value);
 80091da:	68fb      	ldr	r3, [r7, #12]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <_nx_dhcp_store_data>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_store_data(UCHAR *data, UINT size, ULONG value)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]

    /* Make sure that data is left justified.  */
    switch (size)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d011      	beq.n	800921e <_nx_dhcp_store_data+0x36>
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d812      	bhi.n	8009226 <_nx_dhcp_store_data+0x3e>
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d003      	beq.n	800920e <_nx_dhcp_store_data+0x26>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b02      	cmp	r3, #2
 800920a:	d004      	beq.n	8009216 <_nx_dhcp_store_data+0x2e>
      
            value <<= 8;
            break;

        default:
            break;
 800920c:	e00b      	b.n	8009226 <_nx_dhcp_store_data+0x3e>
            value <<= 24;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	061b      	lsls	r3, r3, #24
 8009212:	607b      	str	r3, [r7, #4]
            break;
 8009214:	e008      	b.n	8009228 <_nx_dhcp_store_data+0x40>
            value <<= 16;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	041b      	lsls	r3, r3, #16
 800921a:	607b      	str	r3, [r7, #4]
            break;
 800921c:	e004      	b.n	8009228 <_nx_dhcp_store_data+0x40>
            value <<= 8;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	607b      	str	r3, [r7, #4]
            break;
 8009224:	e000      	b.n	8009228 <_nx_dhcp_store_data+0x40>
            break;
 8009226:	bf00      	nop
    }

    /* Store the value.  */
    while (size-- > 0)
 8009228:	e00a      	b.n	8009240 <_nx_dhcp_store_data+0x58>
    {

        *data = (UCHAR) ((value >> 24) & 0xff);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	0e1b      	lsrs	r3, r3, #24
 800922e:	b2da      	uxtb	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	701a      	strb	r2, [r3, #0]
        data++;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3301      	adds	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]
        value <<= 8;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	021b      	lsls	r3, r3, #8
 800923e:	607b      	str	r3, [r7, #4]
    while (size-- > 0)
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	1e5a      	subs	r2, r3, #1
 8009244:	60ba      	str	r2, [r7, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1ef      	bne.n	800922a <_nx_dhcp_store_data+0x42>
    }
}
 800924a:	bf00      	nop
 800924c:	bf00      	nop
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <_nx_dhcp_move_string>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static VOID  _nx_dhcp_move_string(UCHAR *dest, UCHAR *source, UINT size)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]

    /* Loop to copy all bytes.  */
    while (size-- > 0)
 8009264:	e007      	b.n	8009276 <_nx_dhcp_move_string+0x1e>
    {
        
        /* Copy a byte.  */
        *dest++ = *source++;
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	1c53      	adds	r3, r2, #1
 800926a:	60bb      	str	r3, [r7, #8]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	1c59      	adds	r1, r3, #1
 8009270:	60f9      	str	r1, [r7, #12]
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	701a      	strb	r2, [r3, #0]
    while (size-- > 0)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	1e5a      	subs	r2, r3, #1
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1f2      	bne.n	8009266 <_nx_dhcp_move_string+0xe>
    }
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <_nx_dhcp_interface_record_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
static UINT _nx_dhcp_interface_record_find(NX_DHCP *dhcp_ptr, UINT iface_index, NX_DHCP_INTERFACE_RECORD **interface_record)
{
 800928e:	b480      	push	{r7}
 8009290:	b087      	sub	sp, #28
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]

UINT i;

    /* Find which DHCP Client interface record is assigned the input interface. */
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]
 800929e:	e02c      	b.n	80092fa <_nx_dhcp_interface_record_find+0x6c>
    {

        /* Check if this record is valid.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_record_valid == NX_FALSE) 
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 80092a8:	fb01 f303 	mul.w	r3, r1, r3
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 80092b2:	3310      	adds	r3, #16
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d01b      	beq.n	80092f2 <_nx_dhcp_interface_record_find+0x64>
            continue;

        /* Check if the interface index matches.  */
        if (dhcp_ptr -> nx_dhcp_interface_record[i].nx_dhcp_interface_index == iface_index)
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
 80092c2:	fb01 f303 	mul.w	r3, r1, r3
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 53ed 	add.w	r3, r3, #7584	@ 0x1da0
 80092cc:	330c      	adds	r3, #12
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d10e      	bne.n	80092f4 <_nx_dhcp_interface_record_find+0x66>
        {

            /* Yes, we found the record.  */
            *interface_record = &dhcp_ptr -> nx_dhcp_interface_record[i];
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 80092dc:	fb02 f303 	mul.w	r3, r2, r3
 80092e0:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 80092e4:	3310      	adds	r3, #16
 80092e6:	68fa      	ldr	r2, [r7, #12]
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	601a      	str	r2, [r3, #0]

            /* Return.  */
            return (NX_SUCCESS);
 80092ee:	2300      	movs	r3, #0
 80092f0:	e007      	b.n	8009302 <_nx_dhcp_interface_record_find+0x74>
            continue;
 80092f2:	bf00      	nop
    for (i = 0; i < NX_DHCP_CLIENT_MAX_RECORDS; i++) 
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	3301      	adds	r3, #1
 80092f8:	617b      	str	r3, [r7, #20]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d0cf      	beq.n	80092a0 <_nx_dhcp_interface_record_find+0x12>
        }
    }

    /* No matching record found.  */
    return (NX_DHCP_INTERFACE_NOT_ENABLED);
 8009300:	23a4      	movs	r3, #164	@ 0xa4
}
 8009302:	4618      	mov	r0, r3
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <_nx_arp_dynamic_entry_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_dynamic_entry_delete(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b088      	sub	sp, #32
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_PACKET *packet_ptr, *next_packet_ptr;


    /* Determine if this ARP entry is already active.  */
    if (arp_ptr -> nx_arp_active_list_head)
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d050      	beq.n	80093c2 <_nx_arp_dynamic_entry_delete+0xb4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009320:	f3ef 8310 	mrs	r3, PRIMASK
 8009324:	613b      	str	r3, [r7, #16]
    return(posture);
 8009326:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009328:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800932a:	b672      	cpsid	i
    return(int_posture);
 800932c:	68fb      	ldr	r3, [r7, #12]
    {

        /* Remove this dynamic ARP entry from the associated list.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800932e:	61bb      	str	r3, [r7, #24]

        /* Determine if this is the only ARP entry on the list.  */
        if (arp_ptr == arp_ptr -> nx_arp_active_next)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	683a      	ldr	r2, [r7, #0]
 8009336:	429a      	cmp	r2, r3
 8009338:	d104      	bne.n	8009344 <_nx_arp_dynamic_entry_delete+0x36>
        {

            /* Remove the entry from the list.  */
            *(arp_ptr -> nx_arp_active_list_head) =  NX_NULL;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	2200      	movs	r2, #0
 8009340:	601a      	str	r2, [r3, #0]
 8009342:	e014      	b.n	800936e <_nx_arp_dynamic_entry_delete+0x60>
        {

            /* Remove the entry from a list of more than one entry.  */

            /* Update the list head pointer.  */
            if (*(arp_ptr -> nx_arp_active_list_head) == arp_ptr)
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	69db      	ldr	r3, [r3, #28]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d104      	bne.n	800935a <_nx_arp_dynamic_entry_delete+0x4c>
            {
                *(arp_ptr -> nx_arp_active_list_head) =  arp_ptr -> nx_arp_active_next;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	69db      	ldr	r3, [r3, #28]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	6952      	ldr	r2, [r2, #20]
 8009358:	601a      	str	r2, [r3, #0]
            }

            /* Update the links of the adjacent ARP entries.  */
            (arp_ptr -> nx_arp_active_next) -> nx_arp_active_previous = arp_ptr -> nx_arp_active_previous;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	6992      	ldr	r2, [r2, #24]
 8009362:	619a      	str	r2, [r3, #24]
            (arp_ptr -> nx_arp_active_previous) -> nx_arp_active_next =  arp_ptr -> nx_arp_active_next;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	6952      	ldr	r2, [r2, #20]
 800936c:	615a      	str	r2, [r3, #20]
        }

        /* No longer active, clear the active list head.  */
        arp_ptr -> nx_arp_active_list_head =  NX_NULL;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2200      	movs	r2, #0
 8009372:	61da      	str	r2, [r3, #28]

        /* Decrease the number of active ARP entries.  */
        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 800937a:	1e5a      	subs	r2, r3, #1
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc

        /* Pickup the queued packets head pointer.  */
        next_packet_ptr =  arp_ptr -> nx_arp_packets_waiting;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009386:	61fb      	str	r3, [r7, #28]

        /* Clear the queued packets head pointer.  */
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2200      	movs	r2, #0
 800938c:	631a      	str	r2, [r3, #48]	@ 0x30
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f383 8810 	msr	PRIMASK, r3
}
 8009398:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Loop to remove all queued packets.  */
        while (next_packet_ptr)
 800939a:	e00f      	b.n	80093bc <_nx_arp_dynamic_entry_delete+0xae>
        {

            /* Pickup the packet pointer at the head of the queue.  */
            packet_ptr =  next_packet_ptr;
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	617b      	str	r3, [r7, #20]

            /* Move to the next packet in the queue.  */
            next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	69db      	ldr	r3, [r3, #28]
 80093a4:	61fb      	str	r3, [r7, #28]

            /* Clear the next packet queue pointer.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2200      	movs	r2, #0
 80093aa:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

            /* Release the packet that was queued from the previous ARP entry.  */
            _nx_packet_transmit_release(packet_ptr);
 80093b6:	6978      	ldr	r0, [r7, #20]
 80093b8:	f004 fa40 	bl	800d83c <_nx_packet_transmit_release>
        while (next_packet_ptr)
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1ec      	bne.n	800939c <_nx_arp_dynamic_entry_delete+0x8e>
        }
    }

    return(NX_SUCCESS);
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3720      	adds	r7, #32
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <_nx_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ARP_ENABLE, ip_ptr, arp_cache_memory, arp_cache_size, 0, NX_TRACE_ARP_EVENTS, 0, 0);

    /* Clear the entire ARP cache.  */
    memset((void *)arp_cache_memory, 0, arp_cache_size);
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	2100      	movs	r1, #0
 80093dc:	68b8      	ldr	r0, [r7, #8]
 80093de:	f00a ffcb 	bl	8014378 <memset>

    /* Pickup starting address of ARP entry array.  */
    entry_ptr =  (NX_ARP *)arp_cache_memory;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	61bb      	str	r3, [r7, #24]

    /* Determine how many ARP entries will fit in this cache area.  */
    arp_entries =  arp_cache_size / sizeof(NX_ARP);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a2d      	ldr	r2, [pc, #180]	@ (80094a0 <_nx_arp_enable+0xd4>)
 80093ea:	fba2 2303 	umull	r2, r3, r2, r3
 80093ee:	091b      	lsrs	r3, r3, #4
 80093f0:	617b      	str	r3, [r7, #20]

    /* Initialize the forward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 80093f2:	2300      	movs	r3, #0
 80093f4:	61fb      	str	r3, [r7, #28]
 80093f6:	e00a      	b.n	800940e <_nx_arp_enable+0x42>
    {
        /* Setup each entry to point to the next entry.  */
        entry_ptr -> nx_arp_pool_next =  entry_ptr + 1;
 80093f8:	69bb      	ldr	r3, [r7, #24]
 80093fa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	60da      	str	r2, [r3, #12]
        entry_ptr++;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	3334      	adds	r3, #52	@ 0x34
 8009406:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	3301      	adds	r3, #1
 800940c:	61fb      	str	r3, [r7, #28]
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	3b01      	subs	r3, #1
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	429a      	cmp	r2, r3
 8009416:	d3ef      	bcc.n	80093f8 <_nx_arp_enable+0x2c>
    }

    /* The entry now points to the last entry in the ARP array.  Set its
       next pointer to the first entry.  */
    entry_ptr -> nx_arp_pool_next =  (NX_ARP *)arp_cache_memory;
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	60da      	str	r2, [r3, #12]

    /* Initialize the backward pointers of available ARP entries.  */
    for (i = 0; i < (arp_entries - 1); i++)
 800941e:	2300      	movs	r3, #0
 8009420:	61fb      	str	r3, [r7, #28]
 8009422:	e00a      	b.n	800943a <_nx_arp_enable+0x6e>
    {
        /* Setup each entry to point to the previous entry.  */
        entry_ptr -> nx_arp_pool_previous =  entry_ptr - 1;
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	f1a3 0234 	sub.w	r2, r3, #52	@ 0x34
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	611a      	str	r2, [r3, #16]
        entry_ptr--;
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	3b34      	subs	r3, #52	@ 0x34
 8009432:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < (arp_entries - 1); i++)
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	3301      	adds	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	3b01      	subs	r3, #1
 800943e:	69fa      	ldr	r2, [r7, #28]
 8009440:	429a      	cmp	r2, r3
 8009442:	d3ef      	bcc.n	8009424 <_nx_arp_enable+0x58>
    }

    /* The entry now points to the first entry, set the previous pointer
       to the last entry.  */
    entry_ptr -> nx_arp_pool_previous =  (entry_ptr + (arp_entries - 1));
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	2234      	movs	r2, #52	@ 0x34
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	3b34      	subs	r3, #52	@ 0x34
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	441a      	add	r2, r3
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	611a      	str	r2, [r3, #16]
       information in the IP structure.  */

    /* Setup the list head pointers in the IP instance.  At first all ARP
       entries are associated with the dynamic ARP list.  The static ARP list
       is NULL until static ARP entry calls are made.  */
    ip_ptr -> nx_ip_arp_static_list =   NX_NULL;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2200      	movs	r2, #0
 800945a:	f8c3 26d4 	str.w	r2, [r3, #1748]	@ 0x6d4
    ip_ptr -> nx_ip_arp_dynamic_list =  (NX_ARP *)arp_cache_memory;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8

    /* Store the initial ARP cache information in the IP control block.  */
    ip_ptr -> nx_ip_arp_cache_memory  =  arp_cache_memory;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	68ba      	ldr	r2, [r7, #8]
 800946a:	f8c3 26fc 	str.w	r2, [r3, #1788]	@ 0x6fc
    ip_ptr -> nx_ip_arp_total_entries =  arp_entries;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	f8c3 2700 	str.w	r2, [r3, #1792]	@ 0x700

    /* Setup the ARP periodic update routine.  */
    ip_ptr -> nx_ip_arp_periodic_update =  _nx_arp_periodic_update;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4a0a      	ldr	r2, [pc, #40]	@ (80094a4 <_nx_arp_enable+0xd8>)
 800947a:	f8c3 26ec 	str.w	r2, [r3, #1772]	@ 0x6ec

    /* Setup the ARP queue process routine.  */
    ip_ptr -> nx_ip_arp_queue_process =  _nx_arp_queue_process;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	4a09      	ldr	r2, [pc, #36]	@ (80094a8 <_nx_arp_enable+0xdc>)
 8009482:	f8c3 26f0 	str.w	r2, [r3, #1776]	@ 0x6f0

    /* Setup the ARP send packet routine.  */
    ip_ptr -> nx_ip_arp_packet_send =  _nx_arp_packet_send;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	4a08      	ldr	r2, [pc, #32]	@ (80094ac <_nx_arp_enable+0xe0>)
 800948a:	f8c3 26f4 	str.w	r2, [r3, #1780]	@ 0x6f4

    /* Setup the ARP allocate service request pointer.  */
    ip_ptr -> nx_ip_arp_allocate =  _nx_arp_entry_allocate;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	4a07      	ldr	r2, [pc, #28]	@ (80094b0 <_nx_arp_enable+0xe4>)
 8009492:	f8c3 26e8 	str.w	r2, [r3, #1768]	@ 0x6e8

    /* Return successful completion.  */
    return(NX_SUCCESS);
 8009496:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009498:	4618      	mov	r0, r3
 800949a:	3720      	adds	r7, #32
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	4ec4ec4f 	.word	0x4ec4ec4f
 80094a4:	08009c89 	.word	0x08009c89
 80094a8:	08009e8b 	.word	0x08009e8b
 80094ac:	08009b45 	.word	0x08009b45
 80094b0:	080094b5 	.word	0x080094b5

080094b4 <_nx_arp_entry_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_arp_entry_allocate(NX_IP *ip_ptr, NX_ARP **arp_list_ptr, UINT is_static)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08a      	sub	sp, #40	@ 0x28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
NX_ARP *arp_entry;
UINT    status;


    /* Determine if there is an ARP entry available in the dynamic list.  */
    if (ip_ptr -> nx_ip_arp_dynamic_list)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 80b4 	beq.w	8009634 <_nx_arp_entry_allocate+0x180>
    {

        /* Yes there are one or more free entries.  */

        /* Pickup pointer to last used dynamic ARP entry.  */
        arp_entry =  (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	623b      	str	r3, [r7, #32]

        /* Remove from the dynamic list. */
        _nx_arp_dynamic_entry_delete(ip_ptr, arp_entry);
 80094d6:	6a39      	ldr	r1, [r7, #32]
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f7ff ff18 	bl	800930e <_nx_arp_dynamic_entry_delete>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80094de:	f3ef 8310 	mrs	r3, PRIMASK
 80094e2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80094e4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80094e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80094e8:	b672      	cpsid	i
    return(int_posture);
 80094ea:	697b      	ldr	r3, [r7, #20]

        /* Disable interrupts temporarily.  */
        TX_DISABLE
 80094ec:	61fb      	str	r3, [r7, #28]

        /* Link the ARP entry at the head of the IP list.  */

        /* Determine if the ARP entry is being added to an empty list.  */
        if (*arp_list_ptr)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d014      	beq.n	8009520 <_nx_arp_entry_allocate+0x6c>
        {

            /* Add the ARP entry to the beginning of the nonempty ARP
               list.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =      *arp_list_ptr;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =  (*arp_list_ptr) -> nx_arp_active_previous;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	699a      	ldr	r2, [r3, #24]
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	619a      	str	r2, [r3, #24]
            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =  arp_entry;
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	615a      	str	r2, [r3, #20]
            (*arp_list_ptr) -> nx_arp_active_previous =  arp_entry;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6a3a      	ldr	r2, [r7, #32]
 800951c:	619a      	str	r2, [r3, #24]
 800951e:	e00b      	b.n	8009538 <_nx_arp_entry_allocate+0x84>
        }
        else
        {
            /* Empty list, just put the ARP entry at the beginning.  */
            arp_entry -> nx_arp_active_list_head =  arp_list_ptr;
 8009520:	6a3b      	ldr	r3, [r7, #32]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	61da      	str	r2, [r3, #28]
            arp_entry -> nx_arp_active_next =       arp_entry;
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	6a3a      	ldr	r2, [r7, #32]
 800952a:	615a      	str	r2, [r3, #20]
            arp_entry -> nx_arp_active_previous =   arp_entry;
 800952c:	6a3b      	ldr	r3, [r7, #32]
 800952e:	6a3a      	ldr	r2, [r7, #32]
 8009530:	619a      	str	r2, [r3, #24]

            /* Now setup the list head.  */
            *arp_list_ptr =  arp_entry;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6a3a      	ldr	r2, [r7, #32]
 8009536:	601a      	str	r2, [r3, #0]
        }

        /* Determine if this is a static entry. */
        if (is_static == NX_TRUE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d141      	bne.n	80095c2 <_nx_arp_entry_allocate+0x10e>
        {

            /* Remove this entry from the ARP dynamic list.  */

            /* Determine if this is the only ARP entry on the dynamic list.  */
            if (arp_entry == arp_entry -> nx_arp_pool_next)
 800953e:	6a3b      	ldr	r3, [r7, #32]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	6a3a      	ldr	r2, [r7, #32]
 8009544:	429a      	cmp	r2, r3
 8009546:	d104      	bne.n	8009552 <_nx_arp_entry_allocate+0x9e>
            {

                /* Remove the sole entry from the dynamic list head.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  NX_NULL;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
 8009550:	e009      	b.n	8009566 <_nx_arp_entry_allocate+0xb2>
            {

                /* Remove the entry from a list of more than one entry.  */

                /* Update the links of the adjacent ARP dynamic pool entries.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	6a3a      	ldr	r2, [r7, #32]
 8009558:	6912      	ldr	r2, [r2, #16]
 800955a:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	6a3a      	ldr	r2, [r7, #32]
 8009562:	68d2      	ldr	r2, [r2, #12]
 8009564:	60da      	str	r2, [r3, #12]
            }

            /* Add the entry to the ARP static list.  */

            /* Determine if the ARP static list is empty.  */
            if (ip_ptr -> nx_ip_arp_static_list == NX_NULL)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	@ 0x6d4
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10a      	bne.n	8009586 <_nx_arp_entry_allocate+0xd2>
            {

                /* Just place this single ARP entry on the list.  */
                arp_entry -> nx_arp_pool_next =     arp_entry;
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	6a3a      	ldr	r2, [r7, #32]
 8009574:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = arp_entry;
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	6a3a      	ldr	r2, [r7, #32]
 800957a:	611a      	str	r2, [r3, #16]
                ip_ptr -> nx_ip_arp_static_list =   arp_entry;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a3a      	ldr	r2, [r7, #32]
 8009580:	f8c3 26d4 	str.w	r2, [r3, #1748]	@ 0x6d4
 8009584:	e015      	b.n	80095b2 <_nx_arp_entry_allocate+0xfe>
            }
            else
            {

                /* Add to the end of the ARP static list.  */
                arp_entry -> nx_arp_pool_next = ip_ptr -> nx_ip_arp_static_list;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8d3 26d4 	ldr.w	r2, [r3, #1748]	@ 0x6d4
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous = (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	@ 0x6d4
 8009596:	691a      	ldr	r2, [r3, #16]
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	611a      	str	r2, [r3, #16]
                ((ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	@ 0x6d4
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	6a3a      	ldr	r2, [r7, #32]
 80095a6:	60da      	str	r2, [r3, #12]
                (ip_ptr -> nx_ip_arp_static_list) -> nx_arp_pool_previous = arp_entry;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 36d4 	ldr.w	r3, [r3, #1748]	@ 0x6d4
 80095ae:	6a3a      	ldr	r2, [r7, #32]
 80095b0:	611a      	str	r2, [r3, #16]
            }

#ifndef NX_DISABLE_ARP_INFO
            /* Increment the ARP static entry count.  */
            ip_ptr -> nx_ip_arp_static_entries++;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80095c0:	e02c      	b.n	800961c <_nx_arp_entry_allocate+0x168>
        }
        else  /* Allocate entry from dynamic list. */
        {

            /* Move this ARP entry to the front of the general ARP dynamic entry pool.  */
            if (arp_entry != ip_ptr -> nx_ip_arp_dynamic_list)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 80095c8:	6a3a      	ldr	r2, [r7, #32]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d01f      	beq.n	800960e <_nx_arp_entry_allocate+0x15a>

                /* The current ARP entry is not at the front of the list, so it
                   must be moved.  */

                /* Link up the neighbors first.  */
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous = arp_entry -> nx_arp_pool_previous;
 80095ce:	6a3b      	ldr	r3, [r7, #32]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	6a3a      	ldr	r2, [r7, #32]
 80095d4:	6912      	ldr	r2, [r2, #16]
 80095d6:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next = arp_entry -> nx_arp_pool_next;
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	6a3a      	ldr	r2, [r7, #32]
 80095de:	68d2      	ldr	r2, [r2, #12]
 80095e0:	60da      	str	r2, [r3, #12]

                /* Now link this ARP entry to the head of the list.  */
                arp_entry -> nx_arp_pool_next =  ip_ptr -> nx_ip_arp_dynamic_list;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 26d8 	ldr.w	r2, [r3, #1752]	@ 0x6d8
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	60da      	str	r2, [r3, #12]
                arp_entry -> nx_arp_pool_previous =    (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous;
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	691a      	ldr	r2, [r3, #16]
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	611a      	str	r2, [r3, #16]
                (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =  arp_entry;
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	6a3a      	ldr	r2, [r7, #32]
 80095fc:	60da      	str	r2, [r3, #12]
                (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =  arp_entry;
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	6a3a      	ldr	r2, [r7, #32]
 8009604:	611a      	str	r2, [r3, #16]

                /* Now set the list head to this ARP entry.  */
                ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a3a      	ldr	r2, [r7, #32]
 800960a:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
            }

            /* Increment the number of active dynamic entries.  */
            ip_ptr -> nx_ip_arp_dynamic_active_count++;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc
        }

        /* Set the entry type.  */
        arp_entry -> nx_arp_route_static = is_static;
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	601a      	str	r2, [r3, #0]
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f383 8810 	msr	PRIMASK, r3
}
 800962c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Setup a successful status return.  */
        status =  NX_SUCCESS;
 800962e:	2300      	movs	r3, #0
 8009630:	627b      	str	r3, [r7, #36]	@ 0x24
 8009632:	e001      	b.n	8009638 <_nx_arp_entry_allocate+0x184>
    else
    {

        /* No more ARP entries are available, all the ARP entries must be
           allocated on the static list.  */
        status =  NX_NO_MORE_ENTRIES;
 8009634:	2317      	movs	r3, #23
 8009636:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Return status to the caller.  */
    return(status);
 8009638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800963a:	4618      	mov	r0, r3
 800963c:	3728      	adds	r7, #40	@ 0x28
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <_nx_arp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b088      	sub	sp, #32
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800964c:	f3ef 8310 	mrs	r3, PRIMASK
 8009650:	61bb      	str	r3, [r7, #24]
    return(posture);
 8009652:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8009654:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009656:	b672      	cpsid	i
    return(int_posture);
 8009658:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800965a:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if ARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_arp_queue_process)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d110      	bne.n	8009688 <_nx_arp_packet_deferred_receive+0x46>

        /* ARP is not enabled.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count...  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800966c:	1c5a      	adds	r2, r3, #1
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f383 8810 	msr	PRIMASK, r3
}
 800967e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since ARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009680:	6838      	ldr	r0, [r7, #0]
 8009682:	f004 f823 	bl	800d6cc <_nx_packet_release>

        /* Return to caller.  */
        return;
 8009686:	e02f      	b.n	80096e8 <_nx_arp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the ARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	@ 0x6e0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d011      	beq.n	80096b6 <_nx_arp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the ARP deferred queue.  */
        (ip_ptr -> nx_ip_arp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 36e4 	ldr.w	r3, [r3, #1764]	@ 0x6e4
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2200      	movs	r2, #0
 80096a0:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f383 8810 	msr	PRIMASK, r3
}
 80096b4:	e018      	b.n	80096e8 <_nx_arp_packet_deferred_receive+0xa6>
    {

        /* Empty ARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the ARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	f8c3 26e0 	str.w	r2, [r3, #1760]	@ 0x6e0
        ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  packet_ptr;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
        packet_ptr -> nx_packet_queue_next =                 NX_NULL;
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2200      	movs	r2, #0
 80096ca:	61da      	str	r2, [r3, #28]
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f383 8810 	msr	PRIMASK, r3
}
 80096d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the ARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ARP_REC_EVENT, TX_OR);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80096de:	2200      	movs	r2, #0
 80096e0:	2110      	movs	r1, #16
 80096e2:	4618      	mov	r0, r3
 80096e4:	f006 ff04 	bl	80104f0 <_tx_event_flags_set>
    }
}
 80096e8:	3720      	adds	r7, #32
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <_nx_arp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 80096ee:	b590      	push	{r4, r7, lr}
 80096f0:	b097      	sub	sp, #92	@ 0x5c
 80096f2:	af02      	add	r7, sp, #8
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
ULONG         sender_physical_lsw;
ULONG         sender_ip_address;
ULONG         target_ip_address;
ULONG         message_type;
ULONG         index;
UCHAR         consumed = NX_FALSE;
 80096f8:	2300      	movs	r3, #0
 80096fa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
NX_INTERFACE *interface_ptr;


#ifndef NX_DISABLE_RX_SIZE_CHECKING
    /* Determine if the packet length is valid.  */
    if (packet_ptr -> nx_packet_length < NX_ARP_MESSAGE_SIZE)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009702:	2b1b      	cmp	r3, #27
 8009704:	d80a      	bhi.n	800971c <_nx_arp_packet_receive+0x2e>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 8009714:	6838      	ldr	r0, [r7, #0]
 8009716:	f003 ffd9 	bl	800d6cc <_nx_packet_release>

        /* Return to caller.  */
        return;
 800971a:	e20f      	b.n	8009b3c <_nx_arp_packet_receive+0x44e>
    }
#endif /* NX_DISABLE_RX_SIZE_CHECKING  */

    /* Setup a pointer to the ARP message.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8009722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009724:	3304      	adds	r3, #4
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800972a:	3304      	adds	r3, #4
 800972c:	ba12      	rev	r2, r2
 800972e:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8009730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009732:	3308      	adds	r3, #8
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009738:	3308      	adds	r3, #8
 800973a:	ba12      	rev	r2, r2
 800973c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800973e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009740:	330c      	adds	r3, #12
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009746:	330c      	adds	r3, #12
 8009748:	ba12      	rev	r2, r2
 800974a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800974c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800974e:	3310      	adds	r3, #16
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009754:	3310      	adds	r3, #16
 8009756:	ba12      	rev	r2, r2
 8009758:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 800975a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800975c:	3314      	adds	r3, #20
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009762:	3314      	adds	r3, #20
 8009764:	ba12      	rev	r2, r2
 8009766:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8009768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800976a:	3318      	adds	r3, #24
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009770:	3318      	adds	r3, #24
 8009772:	ba12      	rev	r2, r2
 8009774:	601a      	str	r2, [r3, #0]

    /* Pickup the ARP message type.  */
    message_type =  (ULONG)(*(message_ptr + 1) & 0xFFFF);
 8009776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009778:	3304      	adds	r3, #4
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	b29b      	uxth	r3, r3
 800977e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if the ARP message type is valid.  */
    if ((message_type != NX_ARP_OPTION_REQUEST) && (message_type != NX_ARP_OPTION_RESPONSE))
 8009780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009782:	2b01      	cmp	r3, #1
 8009784:	d00d      	beq.n	80097a2 <_nx_arp_packet_receive+0xb4>
 8009786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009788:	2b02      	cmp	r3, #2
 800978a:	d00a      	beq.n	80097a2 <_nx_arp_packet_receive+0xb4>

        /* Invalid ARP message.  Release the packet and return.  */

#ifndef NX_DISABLE_ARP_INFO
        /* Increment the ARP invalid messages count.  */
        ip_ptr -> nx_ip_arp_invalid_messages++;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009792:	1c5a      	adds	r2, r3, #1
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif

        /* Invalid ARP message.  Just release the packet.  */
        _nx_packet_release(packet_ptr);
 800979a:	6838      	ldr	r0, [r7, #0]
 800979c:	f003 ff96 	bl	800d6cc <_nx_packet_release>

        /* Return to caller.  */
        return;
 80097a0:	e1cc      	b.n	8009b3c <_nx_arp_packet_receive+0x44e>
    }

    /* Pick up the sender's physical address from the message.  */
    sender_physical_msw =  (*(message_ptr + 2) >> 16);
 80097a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097a4:	3308      	adds	r3, #8
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	0c1b      	lsrs	r3, r3, #16
 80097aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    sender_physical_lsw =  (*(message_ptr + 2) << 16) | (*(message_ptr + 3) >> 16);
 80097ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ae:	3308      	adds	r3, #8
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	041a      	lsls	r2, r3, #16
 80097b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097b6:	330c      	adds	r3, #12
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	0c1b      	lsrs	r3, r3, #16
 80097bc:	4313      	orrs	r3, r2
 80097be:	637b      	str	r3, [r7, #52]	@ 0x34
    sender_ip_address =    (*(message_ptr + 3) << 16) | (*(message_ptr + 4) >> 16);
 80097c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c2:	330c      	adds	r3, #12
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	041a      	lsls	r2, r3, #16
 80097c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ca:	3310      	adds	r3, #16
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	0c1b      	lsrs	r3, r3, #16
 80097d0:	4313      	orrs	r3, r2
 80097d2:	633b      	str	r3, [r7, #48]	@ 0x30
    target_ip_address =    *(message_ptr + 6);
 80097d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Does the packet have an interface assigned? */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d104      	bne.n	80097ec <_nx_arp_packet_receive+0xfe>
    {

        /* No, so default it to the primary interface. */
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &ip_ptr -> nx_ip_interface[0];
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f203 7224 	addw	r2, r3, #1828	@ 0x724
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Pickup the interface information from the incoming packet. */
    interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if it is an IP address conflict when IP address probing.  */
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 80097f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d12e      	bne.n	8009858 <_nx_arp_packet_receive+0x16a>
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    if ((interface_ptr -> nx_interface_ip_address == 0) &&
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d02a      	beq.n	8009858 <_nx_arp_packet_receive+0x16a>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 8009802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        (interface_ptr -> nx_interface_ip_probe_address != 0) &&
 8009806:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009808:	429a      	cmp	r2, r3
 800980a:	d007      	beq.n	800981c <_nx_arp_packet_receive+0x12e>
        ((sender_ip_address == interface_ptr -> nx_interface_ip_probe_address) ||
 800980c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980e:	2b00      	cmp	r3, #0
 8009810:	d122      	bne.n	8009858 <_nx_arp_packet_receive+0x16a>
         ((sender_ip_address == 0) && (target_ip_address == interface_ptr -> nx_interface_ip_probe_address))))
 8009812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009818:	429a      	cmp	r2, r3
 800981a:	d11d      	bne.n	8009858 <_nx_arp_packet_receive+0x16a>
    {

        /* Make sure the sender physical address is not ours.  */
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 800981c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009822:	429a      	cmp	r2, r3
 8009824:	d104      	bne.n	8009830 <_nx_arp_packet_receive+0x142>
            (sender_physical_lsw != interface_ptr -> nx_interface_physical_address_lsw))
 8009826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009828:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != interface_ptr -> nx_interface_physical_address_msw) ||
 800982a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800982c:	429a      	cmp	r2, r3
 800982e:	d00f      	beq.n	8009850 <_nx_arp_packet_receive+0x162>
        {

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 8009830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <_nx_arp_packet_receive+0x162>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 8009838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983e:	79db      	ldrb	r3, [r3, #7]
 8009840:	4619      	mov	r1, r3
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	47a0      	blx	r4
                                                                           sender_physical_msw, sender_physical_lsw);
            }
        }

        /* Release the packet. */
        _nx_packet_release(packet_ptr);
 8009850:	6838      	ldr	r0, [r7, #0]
 8009852:	f003 ff3b 	bl	800d6cc <_nx_packet_release>

        return;
 8009856:	e171      	b.n	8009b3c <_nx_arp_packet_receive+0x44e>
    }

    /* Determine if it is an address conflict packet after set the IP address.  */
    if ((sender_ip_address != 0) && (sender_ip_address == interface_ptr -> nx_interface_ip_address))
 8009858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985a:	2b00      	cmp	r3, #0
 800985c:	d040      	beq.n	80098e0 <_nx_arp_packet_receive+0x1f2>
 800985e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009864:	429a      	cmp	r2, r3
 8009866:	d13b      	bne.n	80098e0 <_nx_arp_packet_receive+0x1f2>
    {

        /* Is it sent from other devices. */
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009870:	429a      	cmp	r2, r3
 8009872:	d105      	bne.n	8009880 <_nx_arp_packet_receive+0x192>
            (sender_physical_lsw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw))
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009878:	691b      	ldr	r3, [r3, #16]
        if ((sender_physical_msw != packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw) ||
 800987a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800987c:	429a      	cmp	r2, r3
 800987e:	d02b      	beq.n	80098d8 <_nx_arp_packet_receive+0x1ea>
        {

            /* Yes it is.  */
            if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout == 0)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <_nx_arp_packet_receive+0x1b2>
            {

                /* Set defend timeout. */
                packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_arp_defend_timeout = NX_ARP_DEFEND_INTERVAL;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800988e:	220a      	movs	r2, #10
 8009890:	645a      	str	r2, [r3, #68]	@ 0x44

                /* Send the announcement. */
                _nx_arp_packet_send(ip_ptr, sender_ip_address, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009896:	461a      	mov	r2, r3
 8009898:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f952 	bl	8009b44 <_nx_arp_packet_send>
            }

            /* Determine if there is a a IP address conflict notify handler.  */
            if (interface_ptr -> nx_interface_ip_conflict_notify_handler)
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d00b      	beq.n	80098c0 <_nx_arp_packet_receive+0x1d2>
            {

                /* A IP address conflict is present, call the notification handler.  */
                (interface_ptr -> nx_interface_ip_conflict_notify_handler)(ip_ptr, interface_ptr -> nx_interface_index, interface_ptr -> nx_interface_ip_probe_address,
 80098a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098aa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80098ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ae:	79db      	ldrb	r3, [r3, #7]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80098b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	47a0      	blx	r4

            /* This is likely in response to our previous gratuitous ARP from another entity on the
               network has the same IP address.  */

            /* Determine if there is a gratuitous ARP response handler.  */
            if (ip_ptr -> nx_ip_arp_gratuitous_response_handler)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d006      	beq.n	80098d8 <_nx_arp_packet_receive+0x1ea>
            {

                /* Yes, call the gratuitous ARP response handler. Note that it is responsible
                   for releasing the packet!  */
                (ip_ptr -> nx_ip_arp_gratuitous_response_handler)(ip_ptr, packet_ptr);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	@ 0x6f8
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3

                return;
 80098d6:	e131      	b.n	8009b3c <_nx_arp_packet_receive+0x44e>
            return;
#endif /* NX_ARP_DEFEND_BY_REPLY */
        }

        /* Release the conflict packet. */
        _nx_packet_release(packet_ptr);
 80098d8:	6838      	ldr	r0, [r7, #0]
 80098da:	f003 fef7 	bl	800d6cc <_nx_packet_release>

        return;
 80098de:	e12d      	b.n	8009b3c <_nx_arp_packet_receive+0x44e>
    }

    /* Determine what type of ARP message this is.  Note that ARP requests must
       also specify this IP instance's IP address.  */
    if ((message_type == NX_ARP_OPTION_REQUEST) && (target_ip_address == (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)))
 80098e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	f040 808f 	bne.w	8009a06 <_nx_arp_packet_receive+0x318>
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098f0:	429a      	cmp	r2, r3
 80098f2:	f040 8088 	bne.w	8009a06 <_nx_arp_packet_receive+0x318>
    {

#ifndef NX_DISABLE_ARP_INFO

        /* Increment the ARP requests received count.  */
        ip_ptr -> nx_ip_arp_requests_received++;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Increment the ARP responses sent count.  */
        ip_ptr -> nx_ip_arp_responses_sent++;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	675a      	str	r2, [r3, #116]	@ 0x74

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_RESPONSE_SEND, ip_ptr, sender_ip_address, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* Set the ARP message type to ARP response.  */
        *(message_ptr + 1) =  (*(message_ptr + 1) & 0xFFFF0000) | NX_ARP_OPTION_RESPONSE;
 800990a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800990c:	3304      	adds	r3, #4
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	0c1b      	lsrs	r3, r3, #16
 8009912:	041b      	lsls	r3, r3, #16
 8009914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009916:	3204      	adds	r2, #4
 8009918:	f043 0302 	orr.w	r3, r3, #2
 800991c:	6013      	str	r3, [r2, #0]


        /* Now fill in the new source and destination information for the ARP response.  */
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw >> 16);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 2) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_msw << 16) |
 800992e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009930:	3308      	adds	r3, #8
 8009932:	430a      	orrs	r2, r1
 8009934:	601a      	str	r2, [r3, #0]
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	0419      	lsls	r1, r3, #16
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address >> 16);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	0c1a      	lsrs	r2, r3, #16
        *(message_ptr + 3) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_physical_address_lsw << 16) |
 8009946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009948:	330c      	adds	r3, #12
 800994a:	430a      	orrs	r2, r1
 800994c:	601a      	str	r2, [r3, #0]
        *(message_ptr + 4) =  (ULONG)(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address << 16) | sender_physical_msw;
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	0419      	lsls	r1, r3, #16
 8009956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009958:	3310      	adds	r3, #16
 800995a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800995c:	430a      	orrs	r2, r1
 800995e:	601a      	str	r2, [r3, #0]
        *(message_ptr + 5) =  (ULONG)sender_physical_lsw;
 8009960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009962:	3314      	adds	r3, #20
 8009964:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009966:	601a      	str	r2, [r3, #0]
        *(message_ptr + 6) =  (ULONG)sender_ip_address;
 8009968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800996a:	3318      	adds	r3, #24
 800996c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800996e:	601a      	str	r2, [r3, #0]

        /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
           swap the endian of the ARP message.  */
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8009970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009972:	3304      	adds	r3, #4
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009978:	3304      	adds	r3, #4
 800997a:	ba12      	rev	r2, r2
 800997c:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 800997e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009980:	3308      	adds	r3, #8
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009986:	3308      	adds	r3, #8
 8009988:	ba12      	rev	r2, r2
 800998a:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 800998c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800998e:	330c      	adds	r3, #12
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009994:	330c      	adds	r3, #12
 8009996:	ba12      	rev	r2, r2
 8009998:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 800999a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800999c:	3310      	adds	r3, #16
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099a2:	3310      	adds	r3, #16
 80099a4:	ba12      	rev	r2, r2
 80099a6:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 80099a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099aa:	3314      	adds	r3, #20
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b0:	3314      	adds	r3, #20
 80099b2:	ba12      	rev	r2, r2
 80099b4:	601a      	str	r2, [r3, #0]
        NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 80099b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b8:	3318      	adds	r3, #24
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099be:	3318      	adds	r3, #24
 80099c0:	ba12      	rev	r2, r2
 80099c2:	601a      	str	r2, [r3, #0]

        /* Make sure the packet length is set properly.  */
        packet_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	221c      	movs	r2, #28
 80099c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup the append pointer, since the received ARP packet can be padded
           with unnecessary bytes.  */
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_prepend_ptr + NX_ARP_MESSAGE_SIZE;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	f103 021c 	add.w	r2, r3, #28
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	60da      	str	r2, [r3, #12]

        /* Send the ARP request to the driver.  */
        driver_request.nx_ip_driver_ptr =      ip_ptr;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command =  NX_LINK_ARP_RESPONSE_SEND;
 80099da:	2306      	movs	r3, #6
 80099dc:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet =   packet_ptr;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_physical_address_msw =  sender_physical_msw;
 80099e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e4:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  sender_physical_lsw;
 80099e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e8:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_ARP_RESPONSE_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

        /* No need to update interface.  When responding to an ARP request, use the same interface where the request was received. */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099f6:	f107 0208 	add.w	r2, r7, #8
 80099fa:	4610      	mov	r0, r2
 80099fc:	4798      	blx	r3

        /* Set the consumed as NX_TRUE, do not need to release the packet.  */
        consumed = NX_TRUE;
 80099fe:	2301      	movs	r3, #1
 8009a00:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8009a04:	e00d      	b.n	8009a22 <_nx_arp_packet_receive+0x334>
        /* We have a response to a previous ARP request or Gratuitous ARP from another network entity.  */

#ifndef NX_DISABLE_ARP_INFO

        /* Check for the message type to see which counter to increment.  */
        if (message_type == NX_ARP_OPTION_REQUEST)
 8009a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d105      	bne.n	8009a18 <_nx_arp_packet_receive+0x32a>
        {

            /* Increment the ARP requests received count.  */
            ip_ptr -> nx_ip_arp_requests_received++;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	671a      	str	r2, [r3, #112]	@ 0x70
 8009a16:	e004      	b.n	8009a22 <_nx_arp_packet_receive+0x334>
        }
        else
        {

            /* Increment the ARP responses received count.  */
            ip_ptr -> nx_ip_arp_responses_received++;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Now we need to search through the active ARP list for the IP address
       to see if there is a matching entry.  */

    /* Calculate the hash index for the sender IP address.  */
    index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8009a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a24:	0a1a      	lsrs	r2, r3, #8
 8009a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a28:	4413      	add	r3, r2
 8009a2a:	f003 031f 	and.w	r3, r3, #31
 8009a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Pickup the first ARP entry.  */
    arp_ptr = NX_NULL;
 8009a30:	2300      	movs	r3, #0
 8009a32:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Ignore anything from any ARP packet with a zero sender IP address. */
    if (sender_ip_address != 0)
 8009a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d03c      	beq.n	8009ab4 <_nx_arp_packet_receive+0x3c6>
    {
        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ROUTE_TABLE_MASK);
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3c:	0a1a      	lsrs	r2, r3, #8
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a40:	4413      	add	r3, r2
 8009a42:	f003 031f 	and.w	r3, r3, #31
 8009a46:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Pickup the first ARP entry.  */
        arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a4c:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* Loop to look for an ARP match.  */
    while (arp_ptr)
 8009a58:	e02c      	b.n	8009ab4 <_nx_arp_packet_receive+0x3c6>
    {

        /* Check for an IP match.  */
        if (arp_ptr -> nx_arp_ip_address == sender_ip_address)
 8009a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d117      	bne.n	8009a94 <_nx_arp_packet_receive+0x3a6>
                }
            }
#endif /* NX_ENABLE_ARP_MAC_CHANGE_NOTIFICATION */

            /* No need to update the static ARP entry. */
            if (arp_ptr -> nx_arp_route_static)
 8009a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d127      	bne.n	8009abc <_nx_arp_packet_receive+0x3ce>
            {
                break;
            }

            /* Save the physical address found in this ARP response.  */
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8009a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a70:	625a      	str	r2, [r3, #36]	@ 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8009a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a76:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Set the update rate to the expiration rate since we now have an ARP
               response.  */
            arp_ptr -> nx_arp_entry_next_update =  NX_ARP_EXPIRATION_RATE;
 8009a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	605a      	str	r2, [r3, #4]

            /* Reset the retry counter for this ARP entry.  */
            arp_ptr -> nx_arp_retries =  0;
 8009a7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a80:	2200      	movs	r2, #0
 8009a82:	609a      	str	r2, [r3, #8]

            /* Set the interface attached to this packet. */
            arp_ptr -> nx_arp_ip_interface = interface_ptr;
 8009a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a88:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Call queue send function to send the packet queued up.  */
            _nx_arp_queue_send(ip_ptr, arp_ptr);
 8009a8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fa2f 	bl	8009ef0 <_nx_arp_queue_send>

            /* Yes, we found a match.  Get out of the loop!  */
            break;
 8009a92:	e014      	b.n	8009abe <_nx_arp_packet_receive+0x3d0>
        }

        /* Move to the next active ARP entry.  */
        arp_ptr =  arp_ptr -> nx_arp_active_next;
 8009a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Determine if we are at the end of the ARP list.  */
        if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a9e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d102      	bne.n	8009ab4 <_nx_arp_packet_receive+0x3c6>
        {

            /* Clear the ARP pointer.  */
            arp_ptr =  NX_NULL;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8009ab2:	e004      	b.n	8009abe <_nx_arp_packet_receive+0x3d0>
    while (arp_ptr)
 8009ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1cf      	bne.n	8009a5a <_nx_arp_packet_receive+0x36c>
 8009aba:	e000      	b.n	8009abe <_nx_arp_packet_receive+0x3d0>
                break;
 8009abc:	bf00      	nop
        }
    }

    /* Determine if we have a packet to release. */
    if (consumed == NX_FALSE)
 8009abe:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d102      	bne.n	8009acc <_nx_arp_packet_receive+0x3de>
    {
        _nx_packet_release(packet_ptr);
 8009ac6:	6838      	ldr	r0, [r7, #0]
 8009ac8:	f003 fe00 	bl	800d6cc <_nx_packet_release>
    }

#ifndef NX_DISABLE_ARP_AUTO_ENTRY

    /* Determine if anything was found.  Ignore ARP messages with a zero IP sender address.   */
    if ((arp_ptr == NX_NULL) && (sender_ip_address != 0))
 8009acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d134      	bne.n	8009b3c <_nx_arp_packet_receive+0x44e>
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d031      	beq.n	8009b3c <_nx_arp_packet_receive+0x44e>
    {

        /* Calculate the hash index for the sender IP address.  */
        index =  (UINT)((sender_ip_address + (sender_ip_address >> 8)) & NX_ARP_TABLE_MASK);
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ada:	0a1a      	lsrs	r2, r3, #8
 8009adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ade:	4413      	add	r3, r2
 8009ae0:	f003 031f 	and.w	r3, r3, #31
 8009ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Allocate a new ARP entry in advance of the need to send to the IP
           address.  */
        if (((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)) == NX_SUCCESS)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	@ 0x6e8
 8009aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009aee:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 8009af2:	0092      	lsls	r2, r2, #2
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	440a      	add	r2, r1
 8009af8:	1d11      	adds	r1, r2, #4
 8009afa:	2200      	movs	r2, #0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d11a      	bne.n	8009b3c <_nx_arp_packet_receive+0x44e>
        {

            /* Setup a pointer to the new ARP entry.  */
            arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b0a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Setup the IP address and clear the physical mapping.  */
            arp_ptr -> nx_arp_ip_address =            sender_ip_address;
 8009b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b1c:	621a      	str	r2, [r3, #32]
            arp_ptr -> nx_arp_physical_address_msw =  sender_physical_msw;
 8009b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b22:	625a      	str	r2, [r3, #36]	@ 0x24
            arp_ptr -> nx_arp_physical_address_lsw =  sender_physical_lsw;
 8009b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b28:	629a      	str	r2, [r3, #40]	@ 0x28
            arp_ptr -> nx_arp_entry_next_update =     NX_ARP_EXPIRATION_RATE;
 8009b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	605a      	str	r2, [r3, #4]
            arp_ptr -> nx_arp_retries =               0;
 8009b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b32:	2200      	movs	r2, #0
 8009b34:	609a      	str	r2, [r3, #8]
            arp_ptr -> nx_arp_ip_interface         =  interface_ptr;
 8009b36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
        }
    }
#endif /* NX_DISABLE_ARP_AUTO_ENTRY */
}
 8009b3c:	3754      	adds	r7, #84	@ 0x54
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd90      	pop	{r4, r7, pc}
	...

08009b44 <_nx_arp_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_packet_send(NX_IP *ip_ptr, ULONG destination_ip, NX_INTERFACE *nx_interface)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08e      	sub	sp, #56	@ 0x38
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
NX_PACKET   *request_ptr;
ULONG       *message_ptr;
NX_IP_DRIVER driver_request;

    /* nx_interface must not be NX_NULL. */
    NX_ASSERT(nx_interface != NX_NULL);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d104      	bne.n	8009b60 <_nx_arp_packet_send+0x1c>
 8009b56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b5a:	f008 faeb 	bl	8012134 <_tx_thread_sleep>
 8009b5e:	e7fa      	b.n	8009b56 <_nx_arp_packet_send+0x12>
    if (_nx_packet_allocate(ip_ptr -> nx_ip_auxiliary_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
    {
        if (ip_ptr -> nx_ip_auxiliary_packet_pool != ip_ptr -> nx_ip_default_packet_pool)
#endif /* NX_ENABLE_DUAL_PACKET_POOL */
        {
            if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &request_ptr, (NX_PHYSICAL_HEADER + NX_ARP_MESSAGE_SIZE), NX_NO_WAIT))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f8d3 0138 	ldr.w	r0, [r3, #312]	@ 0x138
 8009b66:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	222c      	movs	r2, #44	@ 0x2c
 8009b6e:	f003 f919 	bl	800cda4 <_nx_packet_allocate>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f040 8081 	bne.w	8009c7c <_nx_arp_packet_send+0x138>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Stamp the packet with the outgoing interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "request_ptr" was initialized in _nx_packet_allocate. */
    request_ptr -> nx_packet_address.nx_packet_interface_ptr = nx_interface;
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	631a      	str	r2, [r3, #48]	@ 0x30

#ifndef NX_DISABLE_ARP_INFO
    /* Increment the ARP requests sent count.  */
    ip_ptr -> nx_ip_arp_requests_sent++;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	66da      	str	r2, [r3, #108]	@ 0x6c
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ARP_REQUEST_SEND, ip_ptr, destination_ip, request_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Build the ARP request packet.  */

    /* Setup the size of the ARP message.  */
    request_ptr -> nx_packet_length =  NX_ARP_MESSAGE_SIZE;
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8c:	221c      	movs	r2, #28
 8009b8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the prepend pointer.  */
    request_ptr -> nx_packet_prepend_ptr -= NX_ARP_MESSAGE_SIZE;
 8009b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b96:	3a1c      	subs	r2, #28
 8009b98:	609a      	str	r2, [r3, #8]

    /* Setup the pointer to the message area.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    message_ptr =  (ULONG *)request_ptr -> nx_packet_prepend_ptr;
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Write the Hardware type into the message.  */
    *message_ptr =      (ULONG)(NX_ARP_HARDWARE_TYPE << 16) | (NX_ARP_PROTOCOL_TYPE);
 8009ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba2:	f44f 3284 	mov.w	r2, #67584	@ 0x10800
 8009ba6:	601a      	str	r2, [r3, #0]
    *(message_ptr + 1) =  (ULONG)(NX_ARP_HARDWARE_SIZE << 24) | (NX_ARP_PROTOCOL_SIZE << 16) |
 8009ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009baa:	3304      	adds	r3, #4
 8009bac:	4a35      	ldr	r2, [pc, #212]	@ (8009c84 <_nx_arp_packet_send+0x140>)
 8009bae:	601a      	str	r2, [r3, #0]
        NX_ARP_OPTION_REQUEST;

    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_physical_address_lsw >> 16);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 2) =  (ULONG)(nx_interface -> nx_interface_physical_address_msw << 16) |
 8009bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	601a      	str	r2, [r3, #0]
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	0419      	lsls	r1, r3, #16
        (nx_interface -> nx_interface_ip_address >> 16);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	0c1a      	lsrs	r2, r3, #16
    *(message_ptr + 3) =  (ULONG)(nx_interface -> nx_interface_physical_address_lsw << 16) |
 8009bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd2:	330c      	adds	r3, #12
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	601a      	str	r2, [r3, #0]
    *(message_ptr + 4) =  (ULONG)(nx_interface -> nx_interface_ip_address << 16);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	695a      	ldr	r2, [r3, #20]
 8009bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bde:	3310      	adds	r3, #16
 8009be0:	0412      	lsls	r2, r2, #16
 8009be2:	601a      	str	r2, [r3, #0]
    *(message_ptr + 5) =  (ULONG)0;
 8009be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be6:	3314      	adds	r3, #20
 8009be8:	2200      	movs	r2, #0
 8009bea:	601a      	str	r2, [r3, #0]
    *(message_ptr + 6) =  (ULONG)destination_ip;
 8009bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bee:	3318      	adds	r3, #24
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	601a      	str	r2, [r3, #0]

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the ARP message.  */
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr));
 8009bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	ba1a      	rev	r2, r3
 8009bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bfc:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 1));
 8009bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c00:	3304      	adds	r3, #4
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c06:	3304      	adds	r3, #4
 8009c08:	ba12      	rev	r2, r2
 8009c0a:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 2));
 8009c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c0e:	3308      	adds	r3, #8
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c14:	3308      	adds	r3, #8
 8009c16:	ba12      	rev	r2, r2
 8009c18:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 3));
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c1c:	330c      	adds	r3, #12
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c22:	330c      	adds	r3, #12
 8009c24:	ba12      	rev	r2, r2
 8009c26:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 4));
 8009c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2a:	3310      	adds	r3, #16
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c30:	3310      	adds	r3, #16
 8009c32:	ba12      	rev	r2, r2
 8009c34:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 5));
 8009c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c38:	3314      	adds	r3, #20
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c3e:	3314      	adds	r3, #20
 8009c40:	ba12      	rev	r2, r2
 8009c42:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(*(message_ptr + 6));
 8009c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c46:	3318      	adds	r3, #24
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c4c:	3318      	adds	r3, #24
 8009c4e:	ba12      	rev	r2, r2
 8009c50:	601a      	str	r2, [r3, #0]

    /* Set up the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	62bb      	str	r3, [r7, #40]	@ 0x28
    driver_request.nx_ip_driver_command =               NX_LINK_ARP_SEND;
 8009c56:	2305      	movs	r3, #5
 8009c58:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_packet =                request_ptr;
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	623b      	str	r3, [r7, #32]
    driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 8009c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c62:	61bb      	str	r3, [r7, #24]
    driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 8009c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c68:	61fb      	str	r3, [r7, #28]
    driver_request.nx_ip_driver_interface            =  nx_interface;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, request_ptr);

    /* Send the ARP request to the driver.  */
    /*lint -e{613} suppress possible use of null pointer, since nx_interface must not be NULL.  */
    (nx_interface -> nx_interface_link_driver_entry)(&driver_request);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c72:	f107 0210 	add.w	r2, r7, #16
 8009c76:	4610      	mov	r0, r2
 8009c78:	4798      	blx	r3
 8009c7a:	e000      	b.n	8009c7e <_nx_arp_packet_send+0x13a>
                return;
 8009c7c:	bf00      	nop
}
 8009c7e:	3738      	adds	r7, #56	@ 0x38
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	06040001 	.word	0x06040001

08009c88 <_nx_arp_periodic_update>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_periodic_update(NX_IP *ip_ptr)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08a      	sub	sp, #40	@ 0x28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
NX_PACKET *packet_ptr;
NX_PACKET *next_packet_ptr;


    /* Pickup pointer to ARP dynamic list.  */
    arp_entry =  ip_ptr -> nx_ip_arp_dynamic_list;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 8009c96:	623b      	str	r3, [r7, #32]

    /* Loop through the active ARP entries to see if they need updating.  */
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c9c:	e0af      	b.n	8009dfe <_nx_arp_periodic_update+0x176>
    {

        /* Check this ARP entry to see if it need updating.  */
        if (arp_entry -> nx_arp_entry_next_update)
 8009c9e:	6a3b      	ldr	r3, [r7, #32]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f000 80a5 	beq.w	8009df2 <_nx_arp_periodic_update+0x16a>
        {

            /* Decrement the next update field.  */
            arp_entry -> nx_arp_entry_next_update--;
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	1e5a      	subs	r2, r3, #1
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	605a      	str	r2, [r3, #4]

            /* Determine if an ARP expiration is present.  */
            if (!arp_entry -> nx_arp_entry_next_update)
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f040 809b 	bne.w	8009df2 <_nx_arp_periodic_update+0x16a>
            {

                /* Yes, an ARP expiration is present.   */

                /* Determine if the retry counter has been exceeded.  */
                if (arp_entry -> nx_arp_retries == NX_ARP_MAXIMUM_RETRIES)
 8009cbc:	6a3b      	ldr	r3, [r7, #32]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	2b12      	cmp	r3, #18
 8009cc2:	f040 8086 	bne.w	8009dd2 <_nx_arp_periodic_update+0x14a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cca:	613b      	str	r3, [r7, #16]
    return(posture);
 8009ccc:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8009cce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009cd0:	b672      	cpsid	i
    return(int_posture);
 8009cd2:	68fb      	ldr	r3, [r7, #12]

                    /* The number of retries has been exceeded. The entry is removed
                       from the active list and any queued packet is released.  */

                    /* Disable interrupts.  */
                    TX_DISABLE
 8009cd4:	61bb      	str	r3, [r7, #24]

                    /* This ARP entry has expired, remove it from the active ARP list.  Check to make
                       sure it is still active.  */
                    if (arp_entry -> nx_arp_active_list_head)
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d028      	beq.n	8009d30 <_nx_arp_periodic_update+0xa8>
                    {

                        /* Determine if this is the only ARP entry on the list.  */
                        if (arp_entry == arp_entry -> nx_arp_active_next)
 8009cde:	6a3b      	ldr	r3, [r7, #32]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	6a3a      	ldr	r2, [r7, #32]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d104      	bne.n	8009cf2 <_nx_arp_periodic_update+0x6a>
                        {

                            /* Remove the entry from the list.  */
                            *(arp_entry -> nx_arp_active_list_head) =  NX_NULL;
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]
 8009cf0:	e014      	b.n	8009d1c <_nx_arp_periodic_update+0x94>
                        {

                            /* Remove the entry from a list of more than one entry.  */

                            /* Update the list head pointer.  */
                            if (*(arp_entry -> nx_arp_active_list_head) == arp_entry)
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6a3a      	ldr	r2, [r7, #32]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d104      	bne.n	8009d08 <_nx_arp_periodic_update+0x80>
                            {
                                *(arp_entry -> nx_arp_active_list_head) =  arp_entry -> nx_arp_active_next;
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	69db      	ldr	r3, [r3, #28]
 8009d02:	6a3a      	ldr	r2, [r7, #32]
 8009d04:	6952      	ldr	r2, [r2, #20]
 8009d06:	601a      	str	r2, [r3, #0]
                            }

                            /* Update the links of the adjacent ARP entries.  */
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8009d08:	6a3b      	ldr	r3, [r7, #32]
 8009d0a:	695b      	ldr	r3, [r3, #20]
                                arp_entry -> nx_arp_active_previous;
 8009d0c:	6a3a      	ldr	r2, [r7, #32]
 8009d0e:	6992      	ldr	r2, [r2, #24]
                            (arp_entry -> nx_arp_active_next) -> nx_arp_active_previous =
 8009d10:	619a      	str	r2, [r3, #24]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	699b      	ldr	r3, [r3, #24]
                                arp_entry -> nx_arp_active_next;
 8009d16:	6a3a      	ldr	r2, [r7, #32]
 8009d18:	6952      	ldr	r2, [r2, #20]
                            (arp_entry -> nx_arp_active_previous) -> nx_arp_active_next =
 8009d1a:	615a      	str	r2, [r3, #20]
                        }

                        /* Decrease the number of active ARP entries.  */
                        ip_ptr -> nx_ip_arp_dynamic_active_count--;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 8009d22:	1e5a      	subs	r2, r3, #1
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8c3 26dc 	str.w	r2, [r3, #1756]	@ 0x6dc

                        /* Clear the active head pointer.  */
                        arp_entry -> nx_arp_active_list_head =  NX_NULL;
 8009d2a:	6a3b      	ldr	r3, [r7, #32]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	61da      	str	r2, [r3, #28]
                    }

                    /* Determine if this is the only ARP entry on the dynamic list.  */
                    if (arp_entry != arp_entry -> nx_arp_pool_next)
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	6a3a      	ldr	r2, [r7, #32]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d02a      	beq.n	8009d90 <_nx_arp_periodic_update+0x108>
                        /* No. Place the ARP entry at the end of the dynamic ARP pool, which is where new
                           ARP requests are allocated from.  */

                        /* Remove the entry from a list of more than one entry.  */
                        /* Update the links of the adjacent ARP dynamic pool entries.  */
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	68db      	ldr	r3, [r3, #12]
                            arp_entry -> nx_arp_pool_previous;
 8009d3e:	6a3a      	ldr	r2, [r7, #32]
 8009d40:	6912      	ldr	r2, [r2, #16]
                        (arp_entry -> nx_arp_pool_next) -> nx_arp_pool_previous =
 8009d42:	611a      	str	r2, [r3, #16]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	691b      	ldr	r3, [r3, #16]
                            arp_entry -> nx_arp_pool_next;
 8009d48:	6a3a      	ldr	r2, [r7, #32]
 8009d4a:	68d2      	ldr	r2, [r2, #12]
                        (arp_entry -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8009d4c:	60da      	str	r2, [r3, #12]

                        /* Update the list head pointer.  */
                        if (ip_ptr -> nx_ip_arp_dynamic_list == arp_entry)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 8009d54:	6a3a      	ldr	r2, [r7, #32]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d104      	bne.n	8009d64 <_nx_arp_periodic_update+0xdc>
                        {
                            ip_ptr -> nx_ip_arp_dynamic_list =  arp_entry -> nx_arp_pool_next;
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8c3 26d8 	str.w	r2, [r3, #1752]	@ 0x6d8
                        }


                        /* Add ARP entry to the end of the list.  */
                        arp_entry -> nx_arp_pool_next =
                            ip_ptr -> nx_ip_arp_dynamic_list;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 26d8 	ldr.w	r2, [r3, #1752]	@ 0x6d8
                        arp_entry -> nx_arp_pool_next =
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	60da      	str	r2, [r3, #12]
                        arp_entry -> nx_arp_pool_previous =
                            (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 8009d74:	691a      	ldr	r2, [r3, #16]
                        arp_entry -> nx_arp_pool_previous =
 8009d76:	6a3b      	ldr	r3, [r7, #32]
 8009d78:	611a      	str	r2, [r3, #16]
                        ((ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous) -> nx_arp_pool_next =
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	6a3a      	ldr	r2, [r7, #32]
 8009d84:	60da      	str	r2, [r3, #12]
                            arp_entry;
                        (ip_ptr -> nx_ip_arp_dynamic_list) -> nx_arp_pool_previous =   arp_entry;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 36d8 	ldr.w	r3, [r3, #1752]	@ 0x6d8
 8009d8c:	6a3a      	ldr	r2, [r7, #32]
 8009d8e:	611a      	str	r2, [r3, #16]
                    }

                    /* Pickup the queued packets head pointer.  */
                    next_packet_ptr =  arp_entry -> nx_arp_packets_waiting;
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d94:	61fb      	str	r3, [r7, #28]

                    /* Clear the queued packets head pointer.  */
                    arp_entry -> nx_arp_packets_waiting =  NX_NULL;
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f383 8810 	msr	PRIMASK, r3
}
 8009da6:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Loop to remove all queued packets.  */
                    while (next_packet_ptr)
 8009da8:	e00f      	b.n	8009dca <_nx_arp_periodic_update+0x142>
                    {

                        /* Pickup the packet pointer at the head of the queue.  */
                        packet_ptr =  next_packet_ptr;
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	617b      	str	r3, [r7, #20]

                        /* Move to the next packet in the queue.  */
                        next_packet_ptr =  next_packet_ptr -> nx_packet_queue_next;
 8009dae:	69fb      	ldr	r3, [r7, #28]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	61fb      	str	r3, [r7, #28]

                        /* Clear the next packet queue pointer.  */
                        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2200      	movs	r2, #0
 8009db8:	61da      	str	r2, [r3, #28]

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

                        /* Release the packet that was queued for the expired ARP entry.  */
                        _nx_packet_transmit_release(packet_ptr);
 8009dc4:	6978      	ldr	r0, [r7, #20]
 8009dc6:	f003 fd39 	bl	800d83c <_nx_packet_transmit_release>
                    while (next_packet_ptr)
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d1ec      	bne.n	8009daa <_nx_arp_periodic_update+0x122>
 8009dd0:	e00f      	b.n	8009df2 <_nx_arp_periodic_update+0x16a>
                {

                    /* We haven't yet had a response to this ARP request so send it again!  */

                    /* Increment the ARP retry counter.  */
                    arp_entry -> nx_arp_retries++;
 8009dd2:	6a3b      	ldr	r3, [r7, #32]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	609a      	str	r2, [r3, #8]

                    /* Setup the ARP update rate to the maximum value again.  */
                    arp_entry -> nx_arp_entry_next_update =  NX_ARP_UPDATE_RATE;
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	220a      	movs	r2, #10
 8009de0:	605a      	str	r2, [r3, #4]

                    /* Send the ARP request out.  */
                    _nx_arp_packet_send(ip_ptr, arp_entry -> nx_arp_ip_address, arp_entry -> nx_arp_ip_interface);
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	6a19      	ldr	r1, [r3, #32]
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dea:	461a      	mov	r2, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff fea9 	bl	8009b44 <_nx_arp_packet_send>
                }
            }
        }

        /* Move to the next ARP entry.  */
        arp_entry =  arp_entry -> nx_arp_pool_next;
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < ip_ptr -> nx_ip_arp_dynamic_active_count; i++)
 8009df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 36dc 	ldr.w	r3, [r3, #1756]	@ 0x6dc
 8009e04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e06:	429a      	cmp	r2, r3
 8009e08:	f4ff af49 	bcc.w	8009c9e <_nx_arp_periodic_update+0x16>
    }


    /* Reduce the defend timeout of interfaces.  */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e10:	e033      	b.n	8009e7a <_nx_arp_periodic_update+0x1f2>
    {
        if (ip_ptr -> nx_ip_interface[i].nx_interface_valid == NX_FALSE)
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e16:	4613      	mov	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	440b      	add	r3, r1
 8009e20:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d021      	beq.n	8009e6e <_nx_arp_periodic_update+0x1e6>
        {
            continue;
        }

        if (ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout == 0)
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	011b      	lsls	r3, r3, #4
 8009e36:	440b      	add	r3, r1
 8009e38:	f503 63ed 	add.w	r3, r3, #1896	@ 0x768
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d017      	beq.n	8009e72 <_nx_arp_periodic_update+0x1ea>
        {
            continue;
        }

        ip_ptr -> nx_ip_interface[i].nx_interface_arp_defend_timeout--;
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e46:	4613      	mov	r3, r2
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	440b      	add	r3, r1
 8009e50:	f503 63ed 	add.w	r3, r3, #1896	@ 0x768
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	1e59      	subs	r1, r3, #1
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	4403      	add	r3, r0
 8009e66:	f503 63ed 	add.w	r3, r3, #1896	@ 0x768
 8009e6a:	6019      	str	r1, [r3, #0]
 8009e6c:	e002      	b.n	8009e74 <_nx_arp_periodic_update+0x1ec>
            continue;
 8009e6e:	bf00      	nop
 8009e70:	e000      	b.n	8009e74 <_nx_arp_periodic_update+0x1ec>
            continue;
 8009e72:	bf00      	nop
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 8009e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e76:	3301      	adds	r3, #1
 8009e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0c8      	beq.n	8009e12 <_nx_arp_periodic_update+0x18a>
    }
}
 8009e80:	bf00      	nop
 8009e82:	bf00      	nop
 8009e84:	3728      	adds	r7, #40	@ 0x28
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <_nx_arp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_process(NX_IP *ip_ptr)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b088      	sub	sp, #32
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]

NX_PACKET *packet_ptr;


    /* Loop to process all ARP deferred packet requests.  */
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8009e92:	e023      	b.n	8009edc <_nx_arp_queue_process+0x52>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009e94:	f3ef 8310 	mrs	r3, PRIMASK
 8009e98:	617b      	str	r3, [r7, #20]
    return(posture);
 8009e9a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8009e9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8009e9e:	b672      	cpsid	i
    return(int_posture);
 8009ea0:	693b      	ldr	r3, [r7, #16]
    {

        /* Remove the first packet and process it!  */

        /* Disable interrupts.  */
        TX_DISABLE
 8009ea2:	61fb      	str	r3, [r7, #28]

        /* Pickup the first packet.  */
        packet_ptr =  ip_ptr -> nx_ip_arp_deferred_received_packet_head;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	@ 0x6e0
 8009eaa:	61bb      	str	r3, [r7, #24]

        /* Move the head pointer to the next packet.  */
        ip_ptr -> nx_ip_arp_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	69da      	ldr	r2, [r3, #28]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8c3 26e0 	str.w	r2, [r3, #1760]	@ 0x6e0

        /* Check for end of ARP deferred processing queue.  */
        if (ip_ptr -> nx_ip_arp_deferred_received_packet_head == NX_NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	@ 0x6e0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d103      	bne.n	8009ec8 <_nx_arp_queue_process+0x3e>
        {

            /* Yes, the ARP deferred queue is empty.  Set the tail pointer to NULL.  */
            ip_ptr -> nx_ip_arp_deferred_received_packet_tail =  NX_NULL;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8c3 26e4 	str.w	r2, [r3, #1764]	@ 0x6e4
 8009ec8:	69fb      	ldr	r3, [r7, #28]
 8009eca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f383 8810 	msr	PRIMASK, r3
}
 8009ed2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual ARP packet receive function.  */
        _nx_arp_packet_receive(ip_ptr, packet_ptr);
 8009ed4:	69b9      	ldr	r1, [r7, #24]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff fc09 	bl	80096ee <_nx_arp_packet_receive>
    while (ip_ptr -> nx_ip_arp_deferred_received_packet_head)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 36e0 	ldr.w	r3, [r3, #1760]	@ 0x6e0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d1d6      	bne.n	8009e94 <_nx_arp_queue_process+0xa>
    }
}
 8009ee6:	bf00      	nop
 8009ee8:	bf00      	nop
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <_nx_arp_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_arp_queue_send(NX_IP *ip_ptr, NX_ARP *arp_ptr)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b090      	sub	sp, #64	@ 0x40
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
NX_PACKET   *queued_list_head;
NX_PACKET   *packet_ptr;
NX_IP_DRIVER driver_request;

    /* Initialize the queued list head to NULL.  */
    queued_list_head =  NX_NULL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8009efe:	f3ef 8310 	mrs	r3, PRIMASK
 8009f02:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 8009f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 8009f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8009f08:	b672      	cpsid	i
    return(int_posture);
 8009f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Determine if this ARP entry has a packet queued up for sending.  */

    /* Disable interrupts before checking.  */
    TX_DISABLE
 8009f0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Look at the ARP packet queue pointer.  */
    if (arp_ptr -> nx_arp_packets_waiting)
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <_nx_arp_queue_send+0x32>
    {

        /* Pickup the packet pointer and clear the ARP queue pointer.  */
        queued_list_head =  arp_ptr -> nx_arp_packets_waiting;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        arp_ptr -> nx_arp_packets_waiting =  NX_NULL;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8009f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f28:	f383 8810 	msr	PRIMASK, r3
}
 8009f2c:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Are there any packets queued to send?  */
    while (queued_list_head)
 8009f2e:	e04c      	b.n	8009fca <_nx_arp_queue_send+0xda>
    {

        /* Pickup the first entry on the list.  */
        packet_ptr =  queued_list_head;
 8009f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f32:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Move to the next entry on the ARP packet queue.  */
        queued_list_head =  queued_list_head -> nx_packet_queue_next;
 8009f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Clear the packet's queue next pointer.  */
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 8009f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	61da      	str	r2, [r3, #28]

        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = arp_ptr -> nx_arp_ip_interface;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f46:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Build the driver request packet.  */
        driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4c:	613b      	str	r3, [r7, #16]
        driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f52:	617b      	str	r3, [r7, #20]
        driver_request.nx_ip_driver_ptr                  =  ip_ptr;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	623b      	str	r3, [r7, #32]
        driver_request.nx_ip_driver_command              =  NX_LINK_PACKET_SEND;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60bb      	str	r3, [r7, #8]
        driver_request.nx_ip_driver_packet               =  packet_ptr;
 8009f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5e:	61bb      	str	r3, [r7, #24]
        driver_request.nx_ip_driver_interface            =  packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 8009f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f64:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 8009f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d915      	bls.n	8009fa0 <_nx_arp_queue_send+0xb0>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Fragmentation is needed, call the fragment routine if available. */
            if (ip_ptr -> nx_ip_fragment_processing)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d007      	beq.n	8009f8e <_nx_arp_queue_send+0x9e>
            {

                /* Call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 8009f84:	f107 0208 	add.w	r2, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	e01d      	b.n	8009fca <_nx_arp_queue_send+0xda>
#endif /* NX_DISABLE_FRAGMENTATION */

#ifndef NX_DISABLE_IP_INFO

                /* Increment the IP send packets dropped count.  */
                ip_ptr -> nx_ip_send_packets_dropped++;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f92:	1c5a      	adds	r2, r3, #1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	655a      	str	r2, [r3, #84]	@ 0x54
#endif

                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
 8009f98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8009f9a:	f003 fc4f 	bl	800d83c <_nx_packet_transmit_release>
 8009f9e:	e014      	b.n	8009fca <_nx_arp_queue_send+0xda>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	699a      	ldr	r2, [r3, #24]
 8009fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f1a3 0214 	sub.w	r2, r3, #20
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	619a      	str	r2, [r3, #24]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_PACKET_SEND, ip_ptr, packet_ptr, packet_ptr -> nx_packet_length, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Send the queued IP packet out on the network via the attached driver.  */
            (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fc2:	f107 0208 	add.w	r2, r7, #8
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	4798      	blx	r3
    while (queued_list_head)
 8009fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1af      	bne.n	8009f30 <_nx_arp_queue_send+0x40>
        }
    }
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	3740      	adds	r7, #64	@ 0x40
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <_nx_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_icmp_enable(NX_IP *ip_ptr)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_ICMP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_ICMP_EVENTS, 0, 0);

    /* Setup the ICMP packet queue processing routine.  */
    ip_ptr -> nx_ip_icmp_queue_process =  _nx_icmp_queue_process;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a09      	ldr	r2, [pc, #36]	@ (800a00c <_nx_icmp_enable+0x30>)
 8009fe8:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370

    /* Setup the ICMP packet receiving routine, thereby enabling ICMP traffic.  */
    ip_ptr -> nx_ip_icmp_packet_receive =  _nx_icmp_packet_receive;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a08      	ldr	r2, [pc, #32]	@ (800a010 <_nx_icmp_enable+0x34>)
 8009ff0:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c

    /* Setup the ICMPv4 packet process routine */
    ip_ptr -> nx_ip_icmpv4_packet_process = _nx_icmpv4_packet_process;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a07      	ldr	r2, [pc, #28]	@ (800a014 <_nx_icmp_enable+0x38>)
 8009ff8:	f8c3 2374 	str.w	r2, [r3, #884]	@ 0x374

    /* Return a successful status!  */
    return(NX_SUCCESS);
 8009ffc:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	0800a115 	.word	0x0800a115
 800a010:	0800a055 	.word	0x0800a055
 800a014:	0800a173 	.word	0x0800a173

0800a018 <_nx_icmp_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* FEATURE_NX_IPV6 not defined */
    if (ip_ptr -> nx_ip_icmpv4_packet_process)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d006      	beq.n	800a03a <_nx_icmp_packet_process+0x22>
    {
        ip_ptr -> nx_ip_icmpv4_packet_process(ip_ptr, packet_ptr);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
 800a032:	6839      	ldr	r1, [r7, #0]
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	4798      	blx	r3
        return;
 800a038:	e009      	b.n	800a04e <_nx_icmp_packet_process+0x36>
    }

#ifndef NX_DISABLE_ICMP_INFO
    ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a040:	1c5a      	adds	r2, r3, #1
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
#endif /* NX_DISABLE_ICMP_INFO */

    _nx_packet_release(packet_ptr);
 800a048:	6838      	ldr	r0, [r7, #0]
 800a04a:	f003 fb3f 	bl	800d6cc <_nx_packet_release>
}
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <_nx_icmp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b088      	sub	sp, #32
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP total messages received counter.  */
    ip_ptr -> nx_ip_icmp_total_messages_received++;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_ICMP_HEADER))
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a070:	2b07      	cmp	r3, #7
 800a072:	d80a      	bhi.n	800a08a <_nx_icmp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error.  */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800a082:	6838      	ldr	r0, [r7, #0]
 800a084:	f003 fb22 	bl	800d6cc <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800a088:	e03c      	b.n	800a104 <_nx_icmp_packet_receive+0xb0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800a08a:	f3ef 8305 	mrs	r3, IPSR
 800a08e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800a090:	69ba      	ldr	r2, [r7, #24]
        return;
    }
#endif /* NX_ENABLE_ICMP_ADDRESS_CHECK  */

    /* Determine if this routine is being called from an ISR.  */
    if ((TX_THREAD_GET_SYSTEM_STATE()) || (&(ip_ptr -> nx_ip_thread) != _tx_thread_current_ptr))
 800a092:	4b1e      	ldr	r3, [pc, #120]	@ (800a10c <_nx_icmp_packet_receive+0xb8>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4313      	orrs	r3, r2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d106      	bne.n	800a0aa <_nx_icmp_packet_receive+0x56>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 800a0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a110 <_nx_icmp_packet_receive+0xbc>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d028      	beq.n	800a0fc <_nx_icmp_packet_receive+0xa8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ae:	617b      	str	r3, [r7, #20]
    return(posture);
 800a0b0:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a0b2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a0b4:	b672      	cpsid	i
    return(int_posture);
 800a0b6:	693b      	ldr	r3, [r7, #16]
        /* If system state is non-zero, we are in an ISR. If the current thread is not the IP thread,
           we need to prevent unnecessary recursion in loopback. Just place the message at the
           end of the ICMP message queue and wakeup the IP helper thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800a0b8:	61fb      	str	r3, [r7, #28]

        /* Add the packet to the ICMP message queue.  */
        if (ip_ptr -> nx_ip_icmp_queue_head)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <_nx_icmp_packet_receive+0x7c>
        {

            /* Link the current packet to the list head.  */
            packet_ptr -> nx_packet_queue_next =  ip_ptr -> nx_ip_icmp_queue_head;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 2378 	ldr.w	r2, [r3, #888]	@ 0x378
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	61da      	str	r2, [r3, #28]
 800a0ce:	e002      	b.n	800a0d6 <_nx_icmp_packet_receive+0x82>
        }
        else
        {

            /* Empty queue, add to the head of the ICMP message queue.  */
            packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	61da      	str	r2, [r3, #28]
        }

        /* Update the queue head pointer.  */
        ip_ptr -> nx_ip_icmp_queue_head =  packet_ptr;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f383 8810 	msr	PRIMASK, r3
}
 800a0e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP thread for processing one or more messages in the ICMP queue.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_ICMP_EVENT, TX_OR);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	2104      	movs	r1, #4
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f006 f9fb 	bl	80104f0 <_tx_event_flags_set>
 800a0fa:	e003      	b.n	800a104 <_nx_icmp_packet_receive+0xb0>
    else
    {

        /* The IP message was deferred, so this routine is called from the IP helper
           thread and thus may call the ICMP processing directly.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 800a0fc:	6839      	ldr	r1, [r7, #0]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff ff8a 	bl	800a018 <_nx_icmp_packet_process>
    }
#else
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(packet_ptr);
#endif /* NX_DISABLE_IPV4 */
}
 800a104:	3720      	adds	r7, #32
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000098 	.word	0x20000098
 800a110:	2000ae14 	.word	0x2000ae14

0800a114 <_nx_icmp_queue_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmp_queue_process(NX_IP *ip_ptr)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a11c:	f3ef 8310 	mrs	r3, PRIMASK
 800a120:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a122:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800a124:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a126:	b672      	cpsid	i
    return(int_posture);
 800a128:	68bb      	ldr	r3, [r7, #8]
NX_PACKET *queue_head;
NX_PACKET *packet_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 800a12a:	61bb      	str	r3, [r7, #24]

    /* Remove the ICMP message queue from the IP structure.  */
    queue_head =  ip_ptr -> nx_ip_icmp_queue_head;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 3378 	ldr.w	r3, [r3, #888]	@ 0x378
 800a132:	61fb      	str	r3, [r7, #28]
    ip_ptr -> nx_ip_icmp_queue_head =  NX_NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f8c3 2378 	str.w	r2, [r3, #888]	@ 0x378
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	f383 8810 	msr	PRIMASK, r3
}
 800a146:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the entire ICMP message queue and process packets
       one by one.  */
    while (queue_head)
 800a148:	e00b      	b.n	800a162 <_nx_icmp_queue_process+0x4e>
    {

        /* Pickup the first queued ICMP message and remove it from the
           ICMP queue.  */
        packet_ptr =  queue_head;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	617b      	str	r3, [r7, #20]
        queue_head =  queue_head -> nx_packet_queue_next;
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	69db      	ldr	r3, [r3, #28]
 800a152:	61fb      	str	r3, [r7, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	2200      	movs	r2, #0
 800a158:	61da      	str	r2, [r3, #28]

        /* Process the packet.  */
        _nx_icmp_packet_process(ip_ptr, packet_ptr);
 800a15a:	6979      	ldr	r1, [r7, #20]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff ff5b 	bl	800a018 <_nx_icmp_packet_process>
    while (queue_head)
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1f0      	bne.n	800a14a <_nx_icmp_queue_process+0x36>
    }
}
 800a168:	bf00      	nop
 800a16a:	bf00      	nop
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <_nx_icmpv4_packet_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_packet_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b088      	sub	sp, #32
 800a176:	af02      	add	r7, sp, #8
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
USHORT            checksum;
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT              compute_checksum = 1;
 800a17c:	2301      	movs	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	613b      	str	r3, [r7, #16]
#ifdef NX_DISABLE_ICMPV4_RX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_RX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_RX_CHECKSUM)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a18a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a18c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <_nx_icmpv4_packet_process+0x26>
    {
        compute_checksum = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
    {
        compute_checksum = 1;
    }
#endif
#if defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d023      	beq.n	800a1e6 <_nx_icmpv4_packet_process+0x74>
#endif /* defined(NX_DISABLE_ICMPV4_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Calculate the ICMP message checksum.  */
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
                                            (UINT)packet_ptr -> nx_packet_length,
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800a1ac:	6838      	ldr	r0, [r7, #0]
 800a1ae:	f000 fb43 	bl	800a838 <_nx_ip_checksum_compute>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	81fb      	strh	r3, [r7, #14]
                                            /* ICMPv4 checksum does not include
                                               src/dest addresses */
                                            NX_NULL, NX_NULL);

        checksum =  ((USHORT) ~checksum) & NX_LOWER_16_MASK;
 800a1b6:	89fb      	ldrh	r3, [r7, #14]
 800a1b8:	43db      	mvns	r3, r3
 800a1ba:	81fb      	strh	r3, [r7, #14]

        /* Determine if the checksum is valid.  */
        if (checksum)
 800a1bc:	89fb      	ldrh	r3, [r7, #14]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d011      	beq.n	800a1e6 <_nx_icmpv4_packet_process+0x74>
        {

#ifndef NX_DISABLE_ICMP_INFO

            /* Increment the ICMP invalid packet error.  */
            ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec

            /* Increment the ICMP checksum error count.  */
            ip_ptr -> nx_ip_icmp_checksum_errors++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
#endif

            /* Nope, the checksum is invalid.  Toss this ICMP packet out.  */
            _nx_packet_release(packet_ptr);
 800a1de:	6838      	ldr	r0, [r7, #0]
 800a1e0:	f003 fa74 	bl	800d6cc <_nx_packet_release>
            return;
 800a1e4:	e01b      	b.n	800a21e <_nx_icmpv4_packet_process+0xac>
        }
    }

    /* Determine the message type and call the appropriate handler.  */
    if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REPLY_TYPE)
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <_nx_icmpv4_packet_process+0x86>
    {
        _nx_icmpv4_process_echo_reply(ip_ptr, packet_ptr);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f817 	bl	800a224 <_nx_icmpv4_process_echo_reply>
 800a1f6:	e012      	b.n	800a21e <_nx_icmpv4_packet_process+0xac>
    }
    else if (header_ptr -> nx_icmpv4_header_type == NX_ICMP_ECHO_REQUEST_TYPE)
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d104      	bne.n	800a20a <_nx_icmpv4_packet_process+0x98>
    {
        _nx_icmpv4_process_echo_request(ip_ptr, packet_ptr);
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 f8cc 	bl	800a3a0 <_nx_icmpv4_process_echo_request>
 800a208:	e009      	b.n	800a21e <_nx_icmpv4_packet_process+0xac>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP unhandled message count.  */
        ip_ptr -> nx_ip_icmp_unhandled_messages++;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        /* If trace is enabled, insert this event into the trace buffer.  */
        NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);
#endif /* TX_ENABLE_EVENT_TRACE  */

        /* Unhandled ICMP message, just release it.  */
        _nx_packet_release(packet_ptr);
 800a218:	6838      	ldr	r0, [r7, #0]
 800a21a:	f003 fa57 	bl	800d6cc <_nx_packet_release>
    }
}
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <_nx_icmpv4_process_echo_reply>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_reply(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b090      	sub	sp, #64	@ 0x40
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    echo_ptr =  (NX_ICMPV4_ECHO *)packet_ptr -> nx_packet_prepend_ptr;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34

#ifndef NX_DISABLE_ICMP_INFO

    /* Increment the ICMP responses received count.  */
    ip_ptr -> nx_ip_ping_responses_received++;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
#endif

    /* Pickup sequence number.  */
    sequence_num = echo_ptr -> nx_icmpv4_echo_sequence_num;
 800a242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a244:	88db      	ldrh	r3, [r3, #6]
 800a246:	867b      	strh	r3, [r7, #50]	@ 0x32

    /* Convert to host byte order, if little endian taget. */
    NX_CHANGE_USHORT_ENDIAN(sequence_num);
 800a248:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a24a:	ba5b      	rev16	r3, r3
 800a24c:	867b      	strh	r3, [r7, #50]	@ 0x32
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a24e:	f3ef 8310 	mrs	r3, PRIMASK
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800a256:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a258:	b672      	cpsid	i
    return(int_posture);
 800a25a:	6a3b      	ldr	r3, [r7, #32]

    /* Disable interrupts.  */
    TX_DISABLE
 800a25c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Pickup the head pointer and the suspended count.  */
    thread_ptr =  ip_ptr -> nx_ip_icmp_ping_suspension_list;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a264:	63fb      	str	r3, [r7, #60]	@ 0x3c
    suspended =   ip_ptr -> nx_ip_icmp_ping_suspended_count;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a26c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800a26e:	4b4b      	ldr	r3, [pc, #300]	@ (800a39c <_nx_icmpv4_process_echo_reply+0x178>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	3301      	adds	r3, #1
 800a274:	4a49      	ldr	r2, [pc, #292]	@ (800a39c <_nx_icmpv4_process_echo_reply+0x178>)
 800a276:	6013      	str	r3, [r2, #0]
 800a278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27e:	f383 8810 	msr	PRIMASK, r3
}
 800a282:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Search through the suspended threads waiting for a ECHO (ping) response
       in an attempt to find a matching sequence number.  */
    while (suspended--)
 800a284:	e05e      	b.n	800a344 <_nx_icmpv4_process_echo_reply+0x120>
    {

        /* Determine if the sequence number matches a suspended thread.  */
        if ((USHORT)(thread_ptr ->  tx_thread_suspend_info) == sequence_num)
 800a286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a28e:	429a      	cmp	r2, r3
 800a290:	d155      	bne.n	800a33e <_nx_icmpv4_process_echo_reply+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a292:	f3ef 8310 	mrs	r3, PRIMASK
 800a296:	61fb      	str	r3, [r7, #28]
    return(posture);
 800a298:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800a29a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a29c:	b672      	cpsid	i
    return(int_posture);
 800a29e:	69bb      	ldr	r3, [r7, #24]
        {

            /* Disable interrupts.  */
            TX_DISABLE
 800a2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800a2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a2a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d104      	bne.n	800a2b6 <_nx_icmpv4_process_echo_reply+0x92>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                ip_ptr -> nx_ip_icmp_ping_suspension_list =  NX_NULL;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
 800a2b4:	e014      	b.n	800a2e0 <_nx_icmpv4_process_echo_reply+0xbc>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                if (ip_ptr -> nx_ip_icmp_ping_suspension_list == thread_ptr)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a2bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d104      	bne.n	800a2cc <_nx_icmpv4_process_echo_reply+0xa8>
                {
                    ip_ptr -> nx_ip_icmp_ping_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800a2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2c4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
                }

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 800a2d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800a2d4:	675a      	str	r2, [r3, #116]	@ 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800a2da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a2dc:	6f12      	ldr	r2, [r2, #112]	@ 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800a2de:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            ip_ptr -> nx_ip_icmp_ping_suspended_count--;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a2e6:	1e5a      	subs	r2, r3, #1
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800a2f4:	4b29      	ldr	r3, [pc, #164]	@ (800a39c <_nx_icmpv4_process_echo_reply+0x178>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	4a28      	ldr	r2, [pc, #160]	@ (800a39c <_nx_icmpv4_process_echo_reply+0x178>)
 800a2fc:	6013      	str	r3, [r2, #0]
 800a2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a300:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f383 8810 	msr	PRIMASK, r3
}
 800a308:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to remove the ICMP header that is still in front of
               the response message.  */
            packet_ptr -> nx_packet_length      = packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_ICMPV4_ECHO);
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30e:	f1a3 0208 	sub.w	r2, r3, #8
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	625a      	str	r2, [r3, #36]	@ 0x24
            packet_ptr -> nx_packet_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_ICMPV4_ECHO);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f103 0208 	add.w	r2, r3, #8
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	609a      	str	r2, [r3, #8]

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800a322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a324:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	601a      	str	r2, [r3, #0]

            /* Clear packet pointer so we don't try to release it below.  */
            packet_ptr =  NX_NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	603b      	str	r3, [r7, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800a32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a330:	2200      	movs	r2, #0
 800a332:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800a336:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a338:	f008 f826 	bl	8012388 <_tx_thread_system_resume>

            /* Get out of the loop.  */
            break;
 800a33c:	e007      	b.n	800a34e <_nx_icmpv4_process_echo_reply+0x12a>
        }
        else
        {
            /* Just move to the next suspended thread.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800a33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a342:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (suspended--)
 800a344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a346:	1e5a      	subs	r2, r3, #1
 800a348:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d19b      	bne.n	800a286 <_nx_icmpv4_process_echo_reply+0x62>
        }
    }

    /* Determine if no match was made and we just have to release the packet.  */
    if (packet_ptr)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d009      	beq.n	800a368 <_nx_icmpv4_process_echo_reply+0x144>
    {

#ifndef NX_DISABLE_ICMP_INFO

        /* Increment the ICMP invalid packet error. */
        ip_ptr -> nx_ip_icmp_invalid_packets++;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
#endif /* NX_DISABLE_ICMP_INFO */

        /* Yes, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800a362:	6838      	ldr	r0, [r7, #0]
 800a364:	f003 f9b2 	bl	800d6cc <_nx_packet_release>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a368:	f3ef 8310 	mrs	r3, PRIMASK
 800a36c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800a36e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800a370:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a372:	b672      	cpsid	i
    return(int_posture);
 800a374:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800a376:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Release preemption disable.  */
    _tx_thread_preempt_disable--;
 800a378:	4b08      	ldr	r3, [pc, #32]	@ (800a39c <_nx_icmpv4_process_echo_reply+0x178>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	4a07      	ldr	r2, [pc, #28]	@ (800a39c <_nx_icmpv4_process_echo_reply+0x178>)
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a384:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f383 8810 	msr	PRIMASK, r3
}
 800a38c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800a38e:	f007 ffc1 	bl	8012314 <_tx_thread_system_preempt_check>
}
 800a392:	bf00      	nop
 800a394:	3740      	adds	r7, #64	@ 0x40
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	2000aeac 	.word	0x2000aeac

0800a3a0 <_nx_icmpv4_process_echo_request>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_icmpv4_process_echo_request(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08c      	sub	sp, #48	@ 0x30
 800a3a4:	af04      	add	r7, sp, #16
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]

NX_ICMPV4_HEADER *header_ptr;
ULONG             checksum;
ULONG             old_m;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
ULONG             compute_checksum = 1;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	61fb      	str	r3, [r7, #28]
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
NX_IPV4_HEADER   *ipv4_header;
ULONG             next_hop_address = NX_NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60bb      	str	r3, [r7, #8]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);


    /* Point to the ICMP message header.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    header_ptr =  (NX_ICMPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	61bb      	str	r3, [r7, #24]

    /* Pickup the return IP address.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3bc:	617b      	str	r3, [r7, #20]

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings received count.  */
    ip_ptr -> nx_ip_pings_received++;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
#endif

    /* Change the type to Echo Reply and send back the message to the caller.  */
    header_ptr -> nx_icmpv4_header_type = NX_ICMP_ECHO_REPLY_TYPE;
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	701a      	strb	r2, [r3, #0]
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <_nx_icmpv4_process_echo_request+0x44>
    {
        compute_checksum = 0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61fb      	str	r3, [r7, #28]
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d02c      	beq.n	800a444 <_nx_icmpv4_process_echo_request+0xa4>
           m'  - new value of a 16-bit field
           HC' = ~(C + (-m) + m')
           = ~(~HC + ~m + m') */

        /* Endian swapping logic.  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	885b      	ldrh	r3, [r3, #2]
 800a3ee:	ba5b      	rev16	r3, r3
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	805a      	strh	r2, [r3, #2]

        /* Get the old checksum (HC) in header. */
        checksum = header_ptr -> nx_icmpv4_header_checksum;
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	885b      	ldrh	r3, [r3, #2]
 800a3fa:	613b      	str	r3, [r7, #16]

        /* Get the old type(m). */
        old_m = (ULONG)(NX_ICMP_ECHO_REQUEST_TYPE << 8);
 800a3fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a400:	60fb      	str	r3, [r7, #12]

        /* Update the checksum, get the new checksum(HC'). */
        /* The m' is value of echo reply type. It is zero so can be ignored. */
        checksum = ((~checksum) & 0xFFFF) + ((~old_m) & 0xFFFF);
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	43db      	mvns	r3, r3
 800a406:	b29a      	uxth	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	43db      	mvns	r3, r3
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	4413      	add	r3, r2
 800a410:	613b      	str	r3, [r7, #16]

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	0c1a      	lsrs	r2, r3, #16
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	4413      	add	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	0c1a      	lsrs	r2, r3, #16
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	b29b      	uxth	r3, r3
 800a426:	4413      	add	r3, r2
 800a428:	613b      	str	r3, [r7, #16]

        /* Store the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = (~checksum & NX_LOWER_16_MASK);
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	43db      	mvns	r3, r3
 800a430:	b29a      	uxth	r2, r3
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	805a      	strh	r2, [r3, #2]

        /* If NX_LITTLE_ENDIAN is defined, the header need to be swapped back
           for output (network byte order).  */
        NX_CHANGE_USHORT_ENDIAN(header_ptr -> nx_icmpv4_header_checksum);
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	885b      	ldrh	r3, [r3, #2]
 800a43a:	ba5b      	rev16	r3, r3
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	805a      	strh	r2, [r3, #2]
 800a442:	e008      	b.n	800a456 <_nx_icmpv4_process_echo_request+0xb6>
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    else
    {

        /* Clear the checksum.  */
        header_ptr -> nx_icmpv4_header_checksum = 0;
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	2200      	movs	r2, #0
 800a448:	805a      	strh	r2, [r3, #2]

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a44e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
    }
#endif

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	68d9      	ldr	r1, [r3, #12]
                      &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
    _nx_ip_route_find(ip_ptr, ipv4_header -> nx_ip_header_source_ip,
 800a460:	f107 0308 	add.w	r3, r7, #8
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 fdd5 	bl	800c014 <_nx_ip_route_find>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_ICMP_RECEIVE, ip_ptr, ipv4_header -> nx_ip_header_source_ip, packet_ptr, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

#ifndef NX_DISABLE_ICMP_INFO
    /* Increment the ICMP pings responded to count.  */
    ip_ptr -> nx_ip_pings_responded_to++;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#endif

    /* Send the ICMP packet to the IP component.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, packet_ptr, ipv4_header -> nx_ip_header_source_ip,
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	68da      	ldr	r2, [r3, #12]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	9303      	str	r3, [sp, #12]
 800a480:	2300      	movs	r3, #0
 800a482:	9302      	str	r3, [sp, #8]
 800a484:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	2380      	movs	r3, #128	@ 0x80
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	2300      	movs	r3, #0
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f001 fd48 	bl	800bf28 <_nx_ip_packet_send>
                       NX_IP_NORMAL, NX_IP_TIME_TO_LIVE, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);
}
 800a498:	bf00      	nop
 800a49a:	3720      	adds	r7, #32
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <_nx_icmpv4_send_error_message>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_icmpv4_send_error_message(NX_IP *ip_ptr, NX_PACKET *offending_packet,
                                   ULONG word1, ULONG error_pointer)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b096      	sub	sp, #88	@ 0x58
 800a4a4:	af04      	add	r7, sp, #16
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	603b      	str	r3, [r7, #0]

NX_PACKET       *pkt_ptr;
USHORT           checksum;
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT             compute_checksum = 1;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	647b      	str	r3, [r7, #68]	@ 0x44
NX_ICMPV4_ERROR *icmpv4_error;
NX_IPV4_HEADER  *ip_header_ptr;
UINT             ip_header_size;
UINT             bytes_to_copy, i;
ULONG            src_ip;
ULONG            next_hop_address = NX_NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	617b      	str	r3, [r7, #20]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, offending_packet);

    /* Do not send ICMPv4 error message if ICMPv4 is not enabled. */
    if (ip_ptr -> nx_ip_icmpv4_packet_process == NX_NULL)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f000 8113 	beq.w	800a6e8 <_nx_icmpv4_send_error_message+0x248>
        return;
    }

    /* Find out the source and destination IP addresses of the offending packet. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(offending_packet -> nx_packet_ip_header);
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4c6:	633b      	str	r3, [r7, #48]	@ 0x30
    src_ip = ip_header_ptr -> nx_ip_header_source_ip;
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the incoming interface. */
    if_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* An ICMP error message MUST NOT be sent as the result of receiving:
       RFC1122, Section3.2.2, Page39.  */

    /* A datagram destined to an IP broadcast or IP multicast address.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4dc:	f000 8106 	beq.w	800a6ec <_nx_icmpv4_send_error_message+0x24c>
        ((ip_header_ptr -> nx_ip_header_destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e2:	691b      	ldr	r3, [r3, #16]
 800a4e4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
    if ((ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800a4e8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800a4ec:	f000 80fe 	beq.w	800a6ec <_nx_icmpv4_send_error_message+0x24c>
    {
        return;
    }

    /* A datagram sent as a link-layer broadcast.  */
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	691a      	ldr	r2, [r3, #16]
 800a4f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	401a      	ands	r2, r3
         if_ptr -> nx_interface_ip_network) &&
 800a4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fc:	69db      	ldr	r3, [r3, #28]
    if (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d10b      	bne.n	800a51a <_nx_icmpv4_send_error_message+0x7a>
        ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	691a      	ldr	r2, [r3, #16]
 800a506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	43db      	mvns	r3, r3
 800a50c:	401a      	ands	r2, r3
         ~(if_ptr -> nx_interface_ip_network_mask)))
 800a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	43db      	mvns	r3, r3
         if_ptr -> nx_interface_ip_network) &&
 800a514:	429a      	cmp	r2, r3
 800a516:	f000 80eb 	beq.w	800a6f0 <_nx_icmpv4_send_error_message+0x250>
    {
        return;
    }

    /* A non-initial fragment.  */
    if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_OFFSET_MASK)
 800a51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a522:	2b00      	cmp	r3, #0
 800a524:	f040 80e6 	bne.w	800a6f4 <_nx_icmpv4_send_error_message+0x254>
    }

    /* A datagram whose source address does not define a single host,
       e.g., a zero address, a loopback address, a broadcast address,
       a multicast address, or a Class E address.  */
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 800a528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80e3 	beq.w	800a6f8 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	68db      	ldr	r3, [r3, #12]
    if ((ip_header_ptr -> nx_ip_header_source_ip == 0) ||
 800a536:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a53a:	d304      	bcc.n	800a546 <_nx_icmpv4_send_error_message+0xa6>
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 800a53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a53e:	68db      	ldr	r3, [r3, #12]
        ((ip_header_ptr -> nx_ip_header_source_ip >= NX_IP_LOOPBACK_FIRST) &&
 800a540:	2b00      	cmp	r3, #0
 800a542:	f280 80d9 	bge.w	800a6f8 <_nx_icmpv4_send_error_message+0x258>
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	68db      	ldr	r3, [r3, #12]
         (ip_header_ptr -> nx_ip_header_source_ip <= NX_IP_LOOPBACK_LAST)) ||
 800a54a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a54e:	f000 80d3 	beq.w	800a6f8 <_nx_icmpv4_send_error_message+0x258>
        ((ip_header_ptr -> nx_ip_header_source_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE))
 800a552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
        (ip_header_ptr -> nx_ip_header_source_ip == NX_IP_LIMITED_BROADCAST) ||
 800a55a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800a55e:	f000 80cb 	beq.w	800a6f8 <_nx_icmpv4_send_error_message+0x258>
    {
        return;
    }

    /* Allocate a packet to build the ICMPv4 error message in.  */
    if (_nx_packet_allocate(ip_ptr -> nx_ip_default_packet_pool, &pkt_ptr, NX_IPv4_ICMP_PACKET, NX_NO_WAIT))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8d3 0138 	ldr.w	r0, [r3, #312]	@ 0x138
 800a568:	f107 0118 	add.w	r1, r7, #24
 800a56c:	2300      	movs	r3, #0
 800a56e:	2224      	movs	r2, #36	@ 0x24
 800a570:	f002 fc18 	bl	800cda4 <_nx_packet_allocate>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	f040 80c0 	bne.w	800a6fc <_nx_icmpv4_send_error_message+0x25c>
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, pkt_ptr);

    /* Mark the packet as IPv4. */
    /*lint -e{644} suppress variable might not be initialized, since "pkt_ptr" was initialized in _nx_packet_allocate. */
    pkt_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	2204      	movs	r2, #4
 800a580:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Size of the message is ICMPv4 */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    icmpv4_error = (NX_ICMPV4_ERROR *)(pkt_ptr -> nx_packet_prepend_ptr);
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_type = (UCHAR)((word1 >> 24) & 0xFF);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	0e1b      	lsrs	r3, r3, #24
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	701a      	strb	r2, [r3, #0]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_code = (UCHAR)((word1 >> 16) & 0xFF);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	0c1b      	lsrs	r3, r3, #16
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59c:	705a      	strb	r2, [r3, #1]
    icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = 0;
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	805a      	strh	r2, [r3, #2]
    icmpv4_error -> nx_icmpv4_error_pointer = (error_pointer << 24);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	061a      	lsls	r2, r3, #24
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5aa:	605a      	str	r2, [r3, #4]

    /* Change to network byte order. */
    NX_CHANGE_ULONG_ENDIAN(icmpv4_error -> nx_icmpv4_error_pointer);
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	ba1a      	rev	r2, r3
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b4:	605a      	str	r2, [r3, #4]

    /* IP Header + 64 bits (64 bits = 2 ULONGs) of Data Datagram.  */
    ip_header_size = ((ip_header_ptr -> nx_ip_header_word_0 & 0x0F000000) >> 24);
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	0e1b      	lsrs	r3, r3, #24
 800a5bc:	f003 030f 	and.w	r3, r3, #15
 800a5c0:	623b      	str	r3, [r7, #32]
    bytes_to_copy = (UINT)((ip_header_size + 2) * sizeof(ULONG));
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	3302      	adds	r3, #2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Set the packet length and pointers.  The length will be increased to include
       the IPv4 header in the IP send function.  The Prepend function will be similarly
       updated in the IP send function. */
    pkt_ptr -> nx_packet_length = bytes_to_copy + (ULONG)sizeof(NX_ICMPV4_ERROR);
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5ce:	3208      	adds	r2, #8
 800a5d0:	625a      	str	r2, [r3, #36]	@ 0x24
    pkt_ptr -> nx_packet_append_ptr = pkt_ptr -> nx_packet_prepend_ptr + pkt_ptr -> nx_packet_length;
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	6899      	ldr	r1, [r3, #8]
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	440a      	add	r2, r1
 800a5de:	60da      	str	r2, [r3, #12]

    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /*lint -e{923} suppress cast between pointer and ULONG, since it is necessary  */
    dest_packet = (ULONG *)NX_UCHAR_POINTER_ADD(icmpv4_error, sizeof(NX_ICMPV4_ERROR));
 800a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Endian swap the incoming IPv4 normal header to network byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5f0:	e00a      	b.n	800a608 <_nx_icmpv4_send_error_message+0x168>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	ba1a      	rev	r2, r3
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fa:	601a      	str	r2, [r3, #0]
        src_packet++;
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fe:	3304      	adds	r3, #4
 800a600:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800a602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a604:	3301      	adds	r3, #1
 800a606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d9f1      	bls.n	800a5f2 <_nx_icmpv4_send_error_message+0x152>
    }

    /* Reset the packet pointer to the received packet IP header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a612:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Copy the data from the received packet to the ICMPv4 error packet. */
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800a614:	e00a      	b.n	800a62c <_nx_icmpv4_send_error_message+0x18c>
    {

        *dest_packet++ = *src_packet++;
 800a616:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a618:	1d13      	adds	r3, r2, #4
 800a61a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61e:	1d19      	adds	r1, r3, #4
 800a620:	6379      	str	r1, [r7, #52]	@ 0x34
 800a622:	6812      	ldr	r2, [r2, #0]
 800a624:	601a      	str	r2, [r3, #0]
    for (; bytes_to_copy > 0; bytes_to_copy -= 4)
 800a626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a628:	3b04      	subs	r3, #4
 800a62a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a62c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1f1      	bne.n	800a616 <_nx_icmpv4_send_error_message+0x176>
    }

    /* Get the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    src_packet  = (ULONG *)(offending_packet -> nx_packet_ip_header);
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a636:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Endian swap the IPv4 normal header back to host byte order. */
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800a638:	2300      	movs	r3, #0
 800a63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a63c:	e00a      	b.n	800a654 <_nx_icmpv4_send_error_message+0x1b4>
    {
        NX_CHANGE_ULONG_ENDIAN(*src_packet);
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	ba1a      	rev	r2, r3
 800a644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a646:	601a      	str	r2, [r3, #0]
        src_packet++;
 800a648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a64a:	3304      	adds	r3, #4
 800a64c:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (i = 0; i < NX_IP_NORMAL_LENGTH; i++)
 800a64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a650:	3301      	adds	r3, #1
 800a652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a656:	2b04      	cmp	r3, #4
 800a658:	d9f1      	bls.n	800a63e <_nx_icmpv4_send_error_message+0x19e>
    }

    /* Use the corresponding interface address as sender's address. */
    pkt_ptr -> nx_packet_address.nx_packet_interface_ptr = offending_packet -> nx_packet_address.nx_packet_interface_ptr;
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a660:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Figure out the best interface to send the ICMP packet on. */
    _nx_ip_route_find(ip_ptr, src_ip,
                      &pkt_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	f103 0230 	add.w	r2, r3, #48	@ 0x30
    _nx_ip_route_find(ip_ptr, src_ip,
 800a668:	f107 0314 	add.w	r3, r7, #20
 800a66c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f001 fcd0 	bl	800c014 <_nx_ip_route_find>
#ifdef NX_DISABLE_ICMPV4_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_ICMPV4_TX_CHECKSUM */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (pkt_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <_nx_icmpv4_send_error_message+0x1e6>
    {
        compute_checksum = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	647b      	str	r3, [r7, #68]	@ 0x44
    {
        compute_checksum = 1;
    }
#endif /* NX_IPSEC_ENABLE */
#if defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800a686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d017      	beq.n	800a6bc <_nx_icmpv4_send_error_message+0x21c>
#endif /* defined(NX_DISABLE_ICMPV4_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {

        /* Compute the checksum of the ICMP packet.  */
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 800a68c:	69b8      	ldr	r0, [r7, #24]
                                           (UINT)pkt_ptr -> nx_packet_length,
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        checksum = _nx_ip_checksum_compute(pkt_ptr, NX_IP_ICMP,
 800a692:	2300      	movs	r3, #0
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	2300      	movs	r3, #0
 800a698:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800a69c:	f000 f8cc 	bl	800a838 <_nx_ip_checksum_compute>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	83fb      	strh	r3, [r7, #30]
                                           /* ICMPV4 checksum does not include
                                              src/dest addresses */
                                           NX_NULL, NX_NULL);

        icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum = (USHORT)(~checksum);
 800a6a4:	8bfb      	ldrh	r3, [r7, #30]
 800a6a6:	43db      	mvns	r3, r3
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ac:	805a      	strh	r2, [r3, #2]

        /* Swap to network byte order. */
        NX_CHANGE_USHORT_ENDIAN(icmpv4_error -> nx_icmpv4_error_header.nx_icmpv4_header_checksum);
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b0:	885b      	ldrh	r3, [r3, #2]
 800a6b2:	ba5b      	rev16	r3, r3
 800a6b4:	b29a      	uxth	r2, r3
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b8:	805a      	strh	r2, [r3, #2]
 800a6ba:	e005      	b.n	800a6c8 <_nx_icmpv4_send_error_message+0x228>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        pkt_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM;
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6c6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Send the ICMP packet to the IP component. The time to live is set to 255.  */
    /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
    _nx_ip_packet_send(ip_ptr, pkt_ptr, src_ip,
 800a6c8:	69b9      	ldr	r1, [r7, #24]
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	9303      	str	r3, [sp, #12]
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9302      	str	r3, [sp, #8]
 800a6d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	23ff      	movs	r3, #255	@ 0xff
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f001 fc21 	bl	800bf28 <_nx_ip_packet_send>
                       NX_IP_NORMAL, 255, NX_IP_ICMP, NX_FRAGMENT_OKAY, next_hop_address);

    return;
 800a6e6:	e00a      	b.n	800a6fe <_nx_icmpv4_send_error_message+0x25e>
        return;
 800a6e8:	bf00      	nop
 800a6ea:	e008      	b.n	800a6fe <_nx_icmpv4_send_error_message+0x25e>
        return;
 800a6ec:	bf00      	nop
 800a6ee:	e006      	b.n	800a6fe <_nx_icmpv4_send_error_message+0x25e>
        return;
 800a6f0:	bf00      	nop
 800a6f2:	e004      	b.n	800a6fe <_nx_icmpv4_send_error_message+0x25e>
        return;
 800a6f4:	bf00      	nop
 800a6f6:	e002      	b.n	800a6fe <_nx_icmpv4_send_error_message+0x25e>
        return;
 800a6f8:	bf00      	nop
 800a6fa:	e000      	b.n	800a6fe <_nx_icmpv4_send_error_message+0x25e>
        return;
 800a6fc:	bf00      	nop
}
 800a6fe:	3748      	adds	r7, #72	@ 0x48
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <_nx_igmp_multicast_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_igmp_multicast_check(NX_IP *ip_ptr, ULONG group, NX_INTERFACE *nx_interface)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]

UINT i;

    /* Check for "all hosts" group.  We always assume all hosts membership.  */
    /*lint -e{835} -e{845} suppress operating on zero. */
    if (group ==  NX_ALL_HOSTS_ADDRESS)
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	4a18      	ldr	r2, [pc, #96]	@ (800a774 <_nx_igmp_multicast_check+0x70>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d101      	bne.n	800a71c <_nx_igmp_multicast_check+0x18>
    {
        return(NX_TRUE);
 800a718:	2301      	movs	r3, #1
 800a71a:	e025      	b.n	800a768 <_nx_igmp_multicast_check+0x64>
    }

    /* Loop through the IP multicast join list to find the matching group that is being
       responded to by another host on this same network.  */

    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 800a71c:	2300      	movs	r3, #0
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	e01e      	b.n	800a760 <_nx_igmp_multicast_check+0x5c>
    {

        /* Check for a match.  */
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 800a722:	68f9      	ldr	r1, [r7, #12]
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	4613      	mov	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	4413      	add	r3, r2
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	440b      	add	r3, r1
 800a730:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68ba      	ldr	r2, [r7, #8]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d10e      	bne.n	800a75a <_nx_igmp_multicast_check+0x56>
            (nx_interface == ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_interface_list))
 800a73c:	68f9      	ldr	r1, [r7, #12]
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	440b      	add	r3, r1
 800a74a:	f503 7333 	add.w	r3, r3, #716	@ 0x2cc
 800a74e:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ipv4_multicast_entry[i].nx_ipv4_multicast_join_list == group) &&
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	429a      	cmp	r2, r3
 800a754:	d101      	bne.n	800a75a <_nx_igmp_multicast_check+0x56>
        {
            return(NX_TRUE);
 800a756:	2301      	movs	r3, #1
 800a758:	e006      	b.n	800a768 <_nx_igmp_multicast_check+0x64>
    for (i = 0; i < NX_MAX_MULTICAST_GROUPS; i++)
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	3301      	adds	r3, #1
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	2b06      	cmp	r3, #6
 800a764:	d9dd      	bls.n	800a722 <_nx_igmp_multicast_check+0x1e>
        }
    }

    /* Otherwise, we have searched the entire list, return false.  */
    return(NX_FALSE);
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	371c      	adds	r7, #28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	e0000001 	.word	0xe0000001

0800a778 <_nx_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_CHANGE_NOTIFY, ip_ptr, ip_address_change_notify, additional_info, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800a78a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a78e:	4618      	mov	r0, r3
 800a790:	f006 fb10 	bl	8010db4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a794:	f3ef 8310 	mrs	r3, PRIMASK
 800a798:	617b      	str	r3, [r7, #20]
    return(posture);
 800a79a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a79c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a79e:	b672      	cpsid	i
    return(int_posture);
 800a7a0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a7a2:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address change callback function and the additional information pointers. */
    ip_ptr -> nx_ip_address_change_notify =                  ip_address_change_notify;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
    ip_ptr -> nx_ip_address_change_notify_additional_info =  additional_info;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	f383 8810 	msr	PRIMASK, r3
}
 800a7be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f006 fd6c 	bl	80112a4 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a7cc:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3720      	adds	r7, #32
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <_nx_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b088      	sub	sp, #32
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	607a      	str	r2, [r7, #4]

#ifndef NX_DISABLE_IPV4
TX_INTERRUPT_SAVE_AREA

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800a7e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f006 fae1 	bl	8010db4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a7f2:	f3ef 8310 	mrs	r3, PRIMASK
 800a7f6:	617b      	str	r3, [r7, #20]
    return(posture);
 800a7f8:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800a7fa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a7fc:	b672      	cpsid	i
    return(int_posture);
 800a7fe:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800a800:	61fb      	str	r3, [r7, #28]

    /* Pickup the IP address and the network mask.  This service assumes
       the operation on the primary interface. */
    *ip_address =    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 2738 	ldr.w	r2, [r3, #1848]	@ 0x738
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 273c 	ldr.w	r2, [r3, #1852]	@ 0x73c
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	f383 8810 	msr	PRIMASK, r3
}
 800a820:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800a828:	4618      	mov	r0, r3
 800a82a:	f006 fd3b 	bl	80112a4 <_tx_mutex_put>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_GET, ip_ptr, ip_ptr -> nx_ip_interface[0].nx_interface_ip_address,
                            ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Return completion status.  */
    return(NX_SUCCESS);
 800a82e:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800a830:	4618      	mov	r0, r3
 800a832:	3720      	adds	r7, #32
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <_nx_ip_checksum_compute>:
/*                                                                        */
/**************************************************************************/
USHORT  _nx_ip_checksum_compute(NX_PACKET *packet_ptr, ULONG protocol,
                                UINT data_length, ULONG *src_ip_addr,
                                ULONG *dest_ip_addr)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08e      	sub	sp, #56	@ 0x38
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	603b      	str	r3, [r7, #0]

ULONG      checksum = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	637b      	str	r3, [r7, #52]	@ 0x34
UINT       i;
#endif

    /* For computing TCP/UDP/ICMPv6, we need to include the pseudo header.
       The ICMPv4 checksum does not cover the pseudo header. */
    if ((protocol == NX_PROTOCOL_UDP) ||
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	2b11      	cmp	r3, #17
 800a84e:	d002      	beq.n	800a856 <_nx_ip_checksum_compute+0x1e>
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2b06      	cmp	r3, #6
 800a854:	d143      	bne.n	800a8de <_nx_ip_checksum_compute+0xa6>
        (protocol == NX_PROTOCOL_TCP))
    {

    USHORT *src_ip_short, *dest_ip_short;

        checksum = protocol;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	637b      	str	r3, [r7, #52]	@ 0x34

        /* The addresses must not be null.  */
        NX_ASSERT((src_ip_addr != NX_NULL) && (dest_ip_addr != NX_NULL));
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d100      	bne.n	800a862 <_nx_ip_checksum_compute+0x2a>
 800a860:	e003      	b.n	800a86a <_nx_ip_checksum_compute+0x32>
 800a862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a864:	2b00      	cmp	r3, #0
 800a866:	d000      	beq.n	800a86a <_nx_ip_checksum_compute+0x32>
 800a868:	e004      	b.n	800a874 <_nx_ip_checksum_compute+0x3c>
 800a86a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a86e:	f007 fc61 	bl	8012134 <_tx_thread_sleep>
 800a872:	e7fa      	b.n	800a86a <_nx_ip_checksum_compute+0x32>

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        src_ip_short = (USHORT *)src_ip_addr;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	623b      	str	r3, [r7, #32]

        /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
        dest_ip_short = (USHORT *)dest_ip_addr;
 800a878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a87a:	61fb      	str	r3, [r7, #28]


        checksum += src_ip_short[0];
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	461a      	mov	r2, r3
 800a882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a884:	4413      	add	r3, r2
 800a886:	637b      	str	r3, [r7, #52]	@ 0x34
        checksum += src_ip_short[1];
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	3302      	adds	r3, #2
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a892:	4413      	add	r3, r2
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
        checksum += dest_ip_short[0];
 800a896:	69fb      	ldr	r3, [r7, #28]
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a89e:	4413      	add	r3, r2
 800a8a0:	637b      	str	r3, [r7, #52]	@ 0x34
        checksum += dest_ip_short[1];
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	3302      	adds	r3, #2
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ac:	4413      	add	r3, r2
 800a8ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
#endif /* FEATURE_NX_IPV6 */

        /* Take care of data length */
        checksum += data_length;
 800a8b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Fold a 4-byte value into a two byte value */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ba:	0c1a      	lsrs	r2, r3, #16
 800a8bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	4413      	add	r3, r2
 800a8c2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Do it again in case previous operation generates an overflow */
        checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8c6:	0c1a      	lsrs	r2, r3, #16
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	4413      	add	r3, r2
 800a8ce:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Convert to network byte order. */
        tmp = (USHORT)checksum;
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8d2:	837b      	strh	r3, [r7, #26]
        NX_CHANGE_USHORT_ENDIAN(tmp);
 800a8d4:	8b7b      	ldrh	r3, [r7, #26]
 800a8d6:	ba5b      	rev16	r3, r3
 800a8d8:	837b      	strh	r3, [r7, #26]
        checksum = tmp;
 800a8da:	8b7b      	ldrh	r3, [r7, #26]
 800a8dc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Now we need to go through the payloads */

    /* Setup the pointer to the start of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    long_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Initialize the current packet to the input packet pointer.  */
    current_packet =  packet_ptr;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	62bb      	str	r3, [r7, #40]	@ 0x28

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop the packet. */
    while (current_packet)
 800a8e8:	e058      	b.n	800a99c <_nx_ip_checksum_compute+0x164>
    {

        /* Calculate current packet size. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_size = (ULONG)(current_packet -> nx_packet_append_ptr - current_packet -> nx_packet_prepend_ptr);
 800a8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	617b      	str	r3, [r7, #20]

        /* Calculate the end address in this packet. */
        if (data_length > (UINT)packet_size)
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d905      	bls.n	800a90a <_nx_ip_checksum_compute+0xd2>
        {

            /*lint -e{927} -e{923} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = ((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & (ALIGN_TYPE)(~3);
 800a8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f023 0303 	bic.w	r3, r3, #3
 800a906:	627b      	str	r3, [r7, #36]	@ 0x24
 800a908:	e006      	b.n	800a918 <_nx_ip_checksum_compute+0xe0>
        }
        else
        {
#endif /* NX_DISABLE_PACKET_CHAIN */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            end_ptr = (ALIGN_TYPE)current_packet -> nx_packet_prepend_ptr + data_length - 3;
 800a90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4413      	add	r3, r2
 800a914:	3b03      	subs	r3, #3
 800a916:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Set the start address in this packet. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        long_ptr = (ULONG *)current_packet -> nx_packet_prepend_ptr;
 800a918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ALIGN_TYPE)long_ptr < end_ptr)
 800a91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a922:	429a      	cmp	r2, r3
 800a924:	d91c      	bls.n	800a960 <_nx_ip_checksum_compute+0x128>
        {

            /* Calculate the data_length. */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            data_length -= (UINT)(((end_ptr + 3) & (ALIGN_TYPE)(~3llu)) - (ALIGN_TYPE)long_ptr);
 800a926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92a:	3303      	adds	r3, #3
 800a92c:	f023 0303 	bic.w	r3, r3, #3
 800a930:	1ad3      	subs	r3, r2, r3
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	4413      	add	r3, r2
 800a936:	607b      	str	r3, [r7, #4]

            /* Loop to calculate the packet's checksum.  */
            /*lint -e{946} suppress pointer subtraction, since it is necessary. */
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 800a938:	e00e      	b.n	800a958 <_nx_ip_checksum_compute+0x120>
            {
                checksum += (*long_ptr & NX_LOWER_16_MASK);
 800a93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	b29b      	uxth	r3, r3
 800a940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a942:	4413      	add	r3, r2
 800a944:	637b      	str	r3, [r7, #52]	@ 0x34
                checksum += (*long_ptr >> NX_SHIFT_BY_16);
 800a946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	0c1b      	lsrs	r3, r3, #16
 800a94c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a94e:	4413      	add	r3, r2
 800a950:	637b      	str	r3, [r7, #52]	@ 0x34
                long_ptr++;
 800a952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a954:	3304      	adds	r3, #4
 800a956:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while ((ALIGN_TYPE)long_ptr < end_ptr)
 800a958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d8ec      	bhi.n	800a93a <_nx_ip_checksum_compute+0x102>
            }
        }
#ifndef NX_DISABLE_PACKET_CHAIN

        /* Determine if we are at the end of the current packet.  */
        if ((data_length > 0) && (current_packet -> nx_packet_next))
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d018      	beq.n	800a998 <_nx_ip_checksum_compute+0x160>
 800a966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d014      	beq.n	800a998 <_nx_ip_checksum_compute+0x160>
        {

            /* Is append_ptr two bytes aligned but not four bytes aligned? */
            /*lint -e{923} suppress cast of pointer to ULONG.  */
            if ((((ALIGN_TYPE)current_packet -> nx_packet_append_ptr) & 3) == 2)
 800a96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d10a      	bne.n	800a990 <_nx_ip_checksum_compute+0x158>
            {

                /* Yes it is. Process the last two bytes in chaining packets. */
                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                short_ptr = (USHORT *)long_ptr;
 800a97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a97c:	633b      	str	r3, [r7, #48]	@ 0x30

                /*lint -e{929} -e{740} suppress cast of pointer to pointer, since it is necessary  */
                checksum += *short_ptr;
 800a97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a986:	4413      	add	r3, r2
 800a988:	637b      	str	r3, [r7, #52]	@ 0x34
                data_length -= 2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3b02      	subs	r3, #2
 800a98e:	607b      	str	r3, [r7, #4]
            }

            /* We have crossed the packet boundary.  Move to the next packet
               structure.  */
            current_packet =  current_packet -> nx_packet_next;
 800a990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a996:	e001      	b.n	800a99c <_nx_ip_checksum_compute+0x164>
        }
        else
        {

            /* End the loop.  */
            current_packet = NX_NULL;
 800a998:	2300      	movs	r3, #0
 800a99a:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (current_packet)
 800a99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1a3      	bne.n	800a8ea <_nx_ip_checksum_compute+0xb2>
        }
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if there is only one byte left. */
    if (data_length)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01f      	beq.n	800a9e8 <_nx_ip_checksum_compute+0x1b0>
    {

        /* Set the short_ptr. */
        short_ptr = (USHORT *)(long_ptr);
 800a9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9aa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Check the data length.  */
        if (data_length == 1)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d104      	bne.n	800a9bc <_nx_ip_checksum_compute+0x184>
        {
            *((UCHAR *)short_ptr + 1) = 0;
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	701a      	strb	r2, [r3, #0]
 800a9ba:	e00f      	b.n	800a9dc <_nx_ip_checksum_compute+0x1a4>
        }
        else if (data_length == 3)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	d10c      	bne.n	800a9dc <_nx_ip_checksum_compute+0x1a4>
        {
            checksum += *short_ptr;
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c4:	881b      	ldrh	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ca:	4413      	add	r3, r2
 800a9cc:	637b      	str	r3, [r7, #52]	@ 0x34
            short_ptr++;
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d0:	3302      	adds	r3, #2
 800a9d2:	633b      	str	r3, [r7, #48]	@ 0x30

            *((UCHAR *)short_ptr + 1) = 0;
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	2200      	movs	r2, #0
 800a9da:	701a      	strb	r2, [r3, #0]
        }

        checksum += *short_ptr;
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e4:	4413      	add	r3, r2
 800a9e6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Fold a 4-byte value into a two byte value */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ea:	0c1a      	lsrs	r2, r3, #16
 800a9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	4413      	add	r3, r2
 800a9f2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Do it again in case previous operation generates an overflow */
    checksum = (checksum >> 16) + (checksum & 0xFFFF);
 800a9f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f6:	0c1a      	lsrs	r2, r3, #16
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4413      	add	r3, r2
 800a9fe:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Convert to host byte order. */
    tmp = (USHORT)checksum;
 800aa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa02:	837b      	strh	r3, [r7, #26]
    NX_CHANGE_USHORT_ENDIAN(tmp);
 800aa04:	8b7b      	ldrh	r3, [r7, #26]
 800aa06:	ba5b      	rev16	r3, r3
 800aa08:	837b      	strh	r3, [r7, #26]

    /* Return the computed checksum.  */
    return(tmp);
 800aa0a:	8b7b      	ldrh	r3, [r7, #26]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3738      	adds	r7, #56	@ 0x38
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}

0800aa14 <_nx_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                    NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                    VOID *memory_ptr, ULONG memory_size, UINT priority)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b092      	sub	sp, #72	@ 0x48
 800aa18:	af06      	add	r7, sp, #24
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
 800aa20:	603b      	str	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA

NX_IP     *tail_ptr;
UINT       i;
UINT       old_threshold = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	613b      	str	r3, [r7, #16]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);
#endif /* NX_DISABLE_IPV4 */

    /* Reference the version ID and option words to ensure they are linked in.  */
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800aa26:	4b8a      	ldr	r3, [pc, #552]	@ (800ac50 <_nx_ip_create+0x23c>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b8a      	ldr	r3, [pc, #552]	@ (800ac54 <_nx_ip_create+0x240>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	4b89      	ldr	r3, [pc, #548]	@ (800ac58 <_nx_ip_create+0x244>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 800aa36:	4b89      	ldr	r3, [pc, #548]	@ (800ac5c <_nx_ip_create+0x248>)
 800aa38:	681b      	ldr	r3, [r3, #0]
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800aa3a:	431a      	orrs	r2, r3
         (ULONG)_nx_system_build_options_4 | (ULONG)_nx_system_build_options_5 | (ULONG)_nx_version_id[0]) == 0)
 800aa3c:	4b88      	ldr	r3, [pc, #544]	@ (800ac60 <_nx_ip_create+0x24c>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	4a88      	ldr	r2, [pc, #544]	@ (800ac64 <_nx_ip_create+0x250>)
 800aa44:	7812      	ldrb	r2, [r2, #0]
 800aa46:	4313      	orrs	r3, r2
    if (((ULONG)_nx_system_build_options_1 | (ULONG)_nx_system_build_options_2 | (ULONG)_nx_system_build_options_3 |
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d101      	bne.n	800aa50 <_nx_ip_create+0x3c>
    {

        /* We should never get here!  */
        return(NX_NOT_IMPLEMENTED);
 800aa4c:	234a      	movs	r3, #74	@ 0x4a
 800aa4e:	e0fb      	b.n	800ac48 <_nx_ip_create+0x234>
    }

    /* Initialize the IP control block to zero.  */
    memset((void *)ip_ptr, 0, sizeof(NX_IP));
 800aa50:	f240 72cc 	movw	r2, #1996	@ 0x7cc
 800aa54:	2100      	movs	r1, #0
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f009 fc8e 	bl	8014378 <memset>

    /* Configure the primary interface. */
    ip_ptr -> nx_ip_interface[0].nx_interface_valid = 1;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 2728 	strb.w	r2, [r3, #1832]	@ 0x728

#ifndef NX_DISABLE_IPV4
    /* Save the IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_address =   ip_address;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	f8c3 2738 	str.w	r2, [r3, #1848]	@ 0x738

    /* Save the network mask.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network_mask =  network_mask;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	f8c3 273c 	str.w	r2, [r3, #1852]	@ 0x73c

    /* Derive the network bits of this IP address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_ip_network =  ip_address & network_mask;
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	401a      	ands	r2, r3
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8c3 2740 	str.w	r2, [r3, #1856]	@ 0x740

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_arp_defend_timeout = 0;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 2768 	str.w	r2, [r3, #1896]	@ 0x768
#endif /* !NX_DISABLE_IPV4  */

    /* Setup the link driver address.  */
    ip_ptr -> nx_ip_interface[0].nx_interface_link_driver_entry =  ip_link_driver;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aa8c:	f8c3 2760 	str.w	r2, [r3, #1888]	@ 0x760

    /* Set the device interface name to "PRI". */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[0].nx_interface_name = (CHAR *)"PRI";
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4a75      	ldr	r2, [pc, #468]	@ (800ac68 <_nx_ip_create+0x254>)
 800aa94:	f8c3 2724 	str.w	r2, [r3, #1828]	@ 0x724

    /* Set index of each interface. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa9c:	e00f      	b.n	800aabe <_nx_ip_create+0xaa>
    {
        ip_ptr -> nx_ip_interface[i].nx_interface_index = (UCHAR)i;
 800aa9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa0:	b2d8      	uxtb	r0, r3
 800aaa2:	68f9      	ldr	r1, [r7, #12]
 800aaa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	011b      	lsls	r3, r3, #4
 800aaae:	440b      	add	r3, r1
 800aab0:	f203 732b 	addw	r3, r3, #1835	@ 0x72b
 800aab4:	4602      	mov	r2, r0
 800aab6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800aab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaba:	3301      	adds	r3, #1
 800aabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d9ec      	bls.n	800aa9e <_nx_ip_create+0x8a>

#ifndef NX_DISABLE_LOOPBACK_INTERFACE

    /* Set the Loopback interface name. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_name = (CHAR *)"Internal IP Loopback";
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4a69      	ldr	r2, [pc, #420]	@ (800ac6c <_nx_ip_create+0x258>)
 800aac8:	f8c3 2774 	str.w	r2, [r3, #1908]	@ 0x774


    /* Mark the loopback interface as valid. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_valid = 1;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2778 	strb.w	r2, [r3, #1912]	@ 0x778

#ifndef NX_DISABLE_IPV4
    /* Set the loopback interface address. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_address = 0x7F000001;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4a66      	ldr	r2, [pc, #408]	@ (800ac70 <_nx_ip_create+0x25c>)
 800aad8:	f8c3 2788 	str.w	r2, [r3, #1928]	@ 0x788
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network_mask = 0xFF000000;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800aae2:	f8c3 278c 	str.w	r2, [r3, #1932]	@ 0x78c
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_network = 0x7F000000;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f04f 42fe 	mov.w	r2, #2130706432	@ 0x7f000000
 800aaec:	f8c3 2790 	str.w	r2, [r3, #1936]	@ 0x790
#endif /* !NX_DISABLE_IPV4  */

    /* Loopback interface is a special case. Therefore no dedicated link driver needed. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_driver_entry = NX_NULL;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 27b0 	str.w	r2, [r3, #1968]	@ 0x7b0

    /* Loopback interface does not need IP/MAC address mapping. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_address_mapping_needed = 0;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2779 	strb.w	r2, [r3, #1913]	@ 0x779

    /* There is actually no MTU limit for the loopback interface. */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_ip_mtu_size = 65535;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab06:	f8c3 2798 	str.w	r2, [r3, #1944]	@ 0x798

    /* Mark the loopback interface as LINK UP */
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_link_up = 1;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 277a 	strb.w	r2, [r3, #1914]	@ 0x77a

    /* Set all the link capability. */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    ip_ptr -> nx_ip_interface[NX_LOOPBACK_INTERFACE].nx_interface_capability_flag = (NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM |
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800ab18:	f8c3 27b4 	str.w	r2, [r3, #1972]	@ 0x7b4
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#endif /* !NX_DISABLE_LOOPBACK_INTERFACE */

    /* Save the supplied IP name.  */
    ip_ptr -> nx_ip_name =  name;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	605a      	str	r2, [r3, #4]

    /* Set the initial IP packet ID.  */
    ip_ptr -> nx_ip_packet_id =  NX_INIT_PACKET_ID;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134

    /* Setup the default packet pool for this IP instance.  */
    ip_ptr -> nx_ip_default_packet_pool =  default_pool;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab2e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    /* Setup the auxiliary packet pool for this IP instance. By default it pointers to default pool. */
    ip_ptr -> nx_ip_auxiliary_packet_pool = default_pool;
#endif /* NX_ENABLE_DUAL_PACKET_POOL */

    /* Create the internal IP protection mutex.  */
    tx_mutex_create(&(ip_ptr -> nx_ip_protection), name, TX_NO_INHERIT);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800ab38:	2200      	movs	r2, #0
 800ab3a:	68b9      	ldr	r1, [r7, #8]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f006 f835 	bl	8010bac <_tx_mutex_create>

    /* Create the internal IP event flag object.  */
    tx_event_flags_create(&(ip_ptr -> nx_ip_events), name);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800ab48:	68b9      	ldr	r1, [r7, #8]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f005 fba0 	bl	8010290 <_tx_event_flags_create>

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800ab50:	f007 f8ea 	bl	8011d28 <_tx_thread_identify>
 800ab54:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* Disable preemption temporarily.  */
    if (current_thread)
 800ab56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d006      	beq.n	800ab6a <_nx_ip_create+0x156>
    {
        tx_thread_preemption_change(current_thread, priority, &old_threshold);
 800ab5c:	f107 0310 	add.w	r3, r7, #16
 800ab60:	461a      	mov	r2, r3
 800ab62:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ab64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab66:	f007 f93b 	bl	8011de0 <_tx_thread_preemption_change>
    }

    /* Create the internal IP thread for handling more processing intensive
       duties.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_thread_create(&(ip_ptr -> nx_ip_thread), name, _nx_ip_thread_entry, (ULONG)(ALIGN_TYPE)(ip_ptr),
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f503 70cc 	add.w	r0, r3, #408	@ 0x198
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	2301      	movs	r3, #1
 800ab74:	9305      	str	r3, [sp, #20]
 800ab76:	2301      	movs	r3, #1
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab7c:	9303      	str	r3, [sp, #12]
 800ab7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab80:	9302      	str	r3, [sp, #8]
 800ab82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab84:	9301      	str	r3, [sp, #4]
 800ab86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	4a39      	ldr	r2, [pc, #228]	@ (800ac74 <_nx_ip_create+0x260>)
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	f006 ff7a 	bl	8011a88 <_tx_thread_create>

    NX_THREAD_EXTENSION_PTR_SET(&(ip_ptr -> nx_ip_thread), ip_ptr)

    /* Create the periodic timer for this IP instance.  */
    /*lint -e{923} suppress cast of pointer to ULONG.  */
    tx_timer_create(&(ip_ptr -> nx_ip_periodic_timer), name,
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f503 701d 	add.w	r0, r3, #628	@ 0x274
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	9202      	str	r2, [sp, #8]
 800aba0:	2264      	movs	r2, #100	@ 0x64
 800aba2:	9201      	str	r2, [sp, #4]
 800aba4:	2264      	movs	r2, #100	@ 0x64
 800aba6:	9200      	str	r2, [sp, #0]
 800aba8:	4a33      	ldr	r2, [pc, #204]	@ (800ac78 <_nx_ip_create+0x264>)
 800abaa:	68b9      	ldr	r1, [r7, #8]
 800abac:	f007 febe 	bl	801292c <_tx_timer_create>
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_CREATE, ip_ptr, ip_address, network_mask, default_pool, NX_TRACE_IP_EVENTS, 0, 0);

#ifndef NX_DISABLE_IPV4
    /* Install IPv4 packet receive processing function pointer */
    ip_ptr -> nx_ipv4_packet_receive = _nx_ipv4_packet_receive;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4a32      	ldr	r2, [pc, #200]	@ (800ac7c <_nx_ip_create+0x268>)
 800abb4:	f8c3 27c4 	str.w	r2, [r3, #1988]	@ 0x7c4
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800abb8:	f3ef 8310 	mrs	r3, PRIMASK
 800abbc:	61fb      	str	r3, [r7, #28]
    return(posture);
 800abbe:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800abc0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800abc2:	b672      	cpsid	i
    return(int_posture);
 800abc4:	69bb      	ldr	r3, [r7, #24]
#endif

    /* Otherwise, the IP initialization was successful.  Place the
       IP control block on the list of created IP instances.  */
    TX_DISABLE
 800abc6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Load the IP ID field in the IP control block.  */
    ip_ptr -> nx_ip_id =  NX_IP_ID;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4a2d      	ldr	r2, [pc, #180]	@ (800ac80 <_nx_ip_create+0x26c>)
 800abcc:	601a      	str	r2, [r3, #0]

    /* Place the new IP control block on the list of created IPs.  First,
       check for an empty list.  */
    if (_nx_ip_created_ptr)
 800abce:	4b2d      	ldr	r3, [pc, #180]	@ (800ac84 <_nx_ip_create+0x270>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d017      	beq.n	800ac06 <_nx_ip_create+0x1f2>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_ip_created_ptr -> nx_ip_created_previous;
 800abd6:	4b2b      	ldr	r3, [pc, #172]	@ (800ac84 <_nx_ip_create+0x270>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f8d3 3718 	ldr.w	r3, [r3, #1816]	@ 0x718
 800abde:	623b      	str	r3, [r7, #32]

        /* Place the new IP control block in the list.  */
        _nx_ip_created_ptr -> nx_ip_created_previous =  ip_ptr;
 800abe0:	4b28      	ldr	r3, [pc, #160]	@ (800ac84 <_nx_ip_create+0x270>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	f8c3 2718 	str.w	r2, [r3, #1816]	@ 0x718
        tail_ptr -> nx_ip_created_next =  ip_ptr;
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	f8c3 2714 	str.w	r2, [r3, #1812]	@ 0x714

        /* Setup this IP's created links.  */
        ip_ptr -> nx_ip_created_previous =  tail_ptr;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6a3a      	ldr	r2, [r7, #32]
 800abf6:	f8c3 2718 	str.w	r2, [r3, #1816]	@ 0x718
        ip_ptr -> nx_ip_created_next =      _nx_ip_created_ptr;
 800abfa:	4b22      	ldr	r3, [pc, #136]	@ (800ac84 <_nx_ip_create+0x270>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8c3 2714 	str.w	r2, [r3, #1812]	@ 0x714
 800ac04:	e00a      	b.n	800ac1c <_nx_ip_create+0x208>
    }
    else
    {

        /* The created IP list is empty.  Add IP control block to empty list.  */
        _nx_ip_created_ptr =                ip_ptr;
 800ac06:	4a1f      	ldr	r2, [pc, #124]	@ (800ac84 <_nx_ip_create+0x270>)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6013      	str	r3, [r2, #0]
        ip_ptr -> nx_ip_created_next =      ip_ptr;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	f8c3 2714 	str.w	r2, [r3, #1812]	@ 0x714
        ip_ptr -> nx_ip_created_previous =  ip_ptr;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	f8c3 2718 	str.w	r2, [r3, #1816]	@ 0x718
    }

    /* Increment the created IP counter.  */
    _nx_ip_created_count++;
 800ac1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ac88 <_nx_ip_create+0x274>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	4a19      	ldr	r2, [pc, #100]	@ (800ac88 <_nx_ip_create+0x274>)
 800ac24:	6013      	str	r3, [r2, #0]
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f383 8810 	msr	PRIMASK, r3
}
 800ac30:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Restore preemption.  */
    if (current_thread)
 800ac32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d006      	beq.n	800ac46 <_nx_ip_create+0x232>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized in previous tx_thread_preemption_change call. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	f107 0210 	add.w	r2, r7, #16
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac42:	f007 f8cd 	bl	8011de0 <_tx_thread_preemption_change>
    }

    /* Return success to the caller.  */
    return(NX_SUCCESS);
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3730      	adds	r7, #48	@ 0x30
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	2000adc8 	.word	0x2000adc8
 800ac54:	2000adcc 	.word	0x2000adcc
 800ac58:	2000add0 	.word	0x2000add0
 800ac5c:	2000add4 	.word	0x2000add4
 800ac60:	2000add8 	.word	0x2000add8
 800ac64:	20000030 	.word	0x20000030
 800ac68:	08015530 	.word	0x08015530
 800ac6c:	08015534 	.word	0x08015534
 800ac70:	7f000001 	.word	0x7f000001
 800ac74:	0800c319 	.word	0x0800c319
 800ac78:	0800bff1 	.word	0x0800bff1
 800ac7c:	0800c8e1 	.word	0x0800c8e1
 800ac80:	49502020 	.word	0x49502020
 800ac84:	2000adb8 	.word	0x2000adb8
 800ac88:	2000adbc 	.word	0x2000adbc

0800ac8c <_nx_ip_deferred_link_status_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID _nx_ip_deferred_link_status_process(NX_IP *ip_ptr)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08c      	sub	sp, #48	@ 0x30
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]

UINT         i;
NX_IP_DRIVER driver_request;
ULONG        link_up;

    if (ip_ptr -> nx_ip_link_status_change_callback == NX_NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 37c8 	ldr.w	r3, [r3, #1992]	@ 0x7c8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d053      	beq.n	800ad46 <_nx_ip_deferred_link_status_process+0xba>

        /* Callback function is not set. */
        return;
    }

    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ac9e:	2300      	movs	r3, #0
 800aca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aca2:	e04c      	b.n	800ad3e <_nx_ip_deferred_link_status_process+0xb2>
    {
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aca8:	4613      	mov	r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	4413      	add	r3, r2
 800acae:	011b      	lsls	r3, r3, #4
 800acb0:	440b      	add	r3, r1
 800acb2:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d03d      	beq.n	800ad38 <_nx_ip_deferred_link_status_process+0xac>
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change))
 800acbc:	6879      	ldr	r1, [r7, #4]
 800acbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acc0:	4613      	mov	r3, r2
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	4413      	add	r3, r2
 800acc6:	011b      	lsls	r3, r3, #4
 800acc8:	440b      	add	r3, r1
 800acca:	f203 732c 	addw	r3, r3, #1836	@ 0x72c
 800acce:	781b      	ldrb	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d031      	beq.n	800ad38 <_nx_ip_deferred_link_status_process+0xac>
        {

            /* Reset the flag. */
            ip_ptr -> nx_ip_interface[i].nx_interface_link_status_change = NX_FALSE;
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acd8:	4613      	mov	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	4413      	add	r3, r2
 800acde:	011b      	lsls	r3, r3, #4
 800ace0:	440b      	add	r3, r1
 800ace2:	f203 732c 	addw	r3, r3, #1836	@ 0x72c
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]

            driver_request.nx_ip_driver_ptr       = ip_ptr;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
            driver_request.nx_ip_driver_command   = NX_LINK_GET_STATUS;
 800acee:	230a      	movs	r3, #10
 800acf0:	60fb      	str	r3, [r7, #12]
            driver_request.nx_ip_driver_interface = &(ip_ptr -> nx_ip_interface[i]);
 800acf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	4413      	add	r3, r2
 800ad04:	3304      	adds	r3, #4
 800ad06:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_return_ptr = &link_up;
 800ad08:	f107 0308 	add.w	r3, r7, #8
 800ad0c:	623b      	str	r3, [r7, #32]

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	011b      	lsls	r3, r3, #4
 800ad1a:	440b      	add	r3, r1
 800ad1c:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f107 020c 	add.w	r2, r7, #12
 800ad26:	4610      	mov	r0, r2
 800ad28:	4798      	blx	r3

            /* Invoke the callback function. */
            /*lint -e{644} suppress variable might not be initialized, since "link_up" was initialized in nx_interface_link_driver_entry. */
            ip_ptr -> nx_ip_link_status_change_callback(ip_ptr, i, link_up);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 37c8 	ldr.w	r3, [r3, #1992]	@ 0x7c8
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800ad38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d0af      	beq.n	800aca4 <_nx_ip_deferred_link_status_process+0x18>
 800ad44:	e000      	b.n	800ad48 <_nx_ip_deferred_link_status_process+0xbc>
        return;
 800ad46:	bf00      	nop
        }
    }
}
 800ad48:	3730      	adds	r7, #48	@ 0x30
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
	...

0800ad50 <_nx_ip_dispatch_process>:
/*                                            packet,                     */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT _nx_ip_dispatch_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr, UINT protocol)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b086      	sub	sp, #24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
#endif /* FEATURE_NX_IPV6 */
#endif /* NX_IPSEC_ENABLE */


    /* Initialize local variables. */
    drop_packet = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	617b      	str	r3, [r7, #20]
    next_option_offset = (UINT)sizeof(NX_IPV6_HEADER);
    incoming_addr = packet_ptr -> nx_packet_address.nx_packet_ipv6_address_ptr;
#endif /* FEATURE_NX_IPV6 */

    /* Parse all options in the packet till we're done or an error is encountered. */
    while (!drop_packet)
 800ad60:	e09a      	b.n	800ae98 <_nx_ip_dispatch_process+0x148>

#if defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE)
        /* Set a local variable for convenience. */
        nx_packet_option_offset = packet_ptr -> nx_packet_option_offset;
#endif /* defined(FEATURE_NX_IPV6) && !defined(NX_DISABLE_ICMPV6_ERROR_MESSAGE) */
        switch (protocol)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b32      	cmp	r3, #50	@ 0x32
 800ad66:	d005      	beq.n	800ad74 <_nx_ip_dispatch_process+0x24>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b33      	cmp	r3, #51	@ 0x33
 800ad6c:	d104      	bne.n	800ad78 <_nx_ip_dispatch_process+0x28>
                /* Continue processing the packet if status = NX_IPSEC_PKT_CONT */
            }
#else /* NX_IPSEC_ENABLE */

            /* Drop this packet if IPsec module is not present. */
            drop_packet = 1;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	617b      	str	r3, [r7, #20]
#endif /* NX_IPSEC_ENABLE */

            break;
 800ad72:	e07d      	b.n	800ae70 <_nx_ip_dispatch_process+0x120>
            }
            break;

#else /* NX_IPSEC_ENABLE */
            /* Drop this packet if IPsec module is not present. */
            return(1);
 800ad74:	2301      	movs	r3, #1
 800ad76:	e094      	b.n	800aea2 <_nx_ip_dispatch_process+0x152>
                    return(0);
                }
            }
#endif /* defined(NX_ENABLE_IP_RAW_PACKET_ALL_STACK) && defined(NX_ENABLE_IP_RAW_PACKET_FILTER) */

            if (protocol == NX_PROTOCOL_TCP)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b06      	cmp	r3, #6
 800ad7c:	d10f      	bne.n	800ad9e <_nx_ip_dispatch_process+0x4e>
                     (incoming_addr -> nxd_ipv6_address_state == NX_IPV6_ADDR_STATE_VALID)))
                {
#endif /* FEATURE_NX_IPV6 */

                    /* Check that the host is enabled for TCP. */
                    if (ip_ptr -> nx_ip_tcp_packet_receive)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d007      	beq.n	800ad98 <_nx_ip_dispatch_process+0x48>
                    {

                        /* Dispatch the packet to the TCP packet handler. */
                        (ip_ptr -> nx_ip_tcp_packet_receive)(ip_ptr, packet_ptr);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	4798      	blx	r3

                        /* No need to free the packet as it is consumed by TCP packet receive.  */
                        return(0);
 800ad94:	2300      	movs	r3, #0
 800ad96:	e084      	b.n	800aea2 <_nx_ip_dispatch_process+0x152>
#ifdef FEATURE_NX_IPV6
                }
#endif /* FEATURE_NX_IPV6 */

                /* TCP is not enabled.  Drop the packet. */
                drop_packet = 1;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	617b      	str	r3, [r7, #20]
#endif /* NX_DISABLE_IP_INFO */


                drop_packet = 1;
            }
            break;
 800ad9c:	e067      	b.n	800ae6e <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d112      	bne.n	800adce <_nx_ip_dispatch_process+0x7e>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d10f      	bne.n	800adce <_nx_ip_dispatch_process+0x7e>
                if (ip_ptr -> nx_ip_icmp_packet_receive != NX_NULL)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d007      	beq.n	800adc8 <_nx_ip_dispatch_process+0x78>
                    ip_ptr -> nx_ip_icmp_packet_receive(ip_ptr, packet_ptr);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	4798      	blx	r3
                    return(0);
 800adc4:	2300      	movs	r3, #0
 800adc6:	e06c      	b.n	800aea2 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 800adc8:	2301      	movs	r3, #1
 800adca:	617b      	str	r3, [r7, #20]
 800adcc:	e04f      	b.n	800ae6e <_nx_ip_dispatch_process+0x11e>
            else if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800add4:	2b04      	cmp	r3, #4
 800add6:	d112      	bne.n	800adfe <_nx_ip_dispatch_process+0xae>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b02      	cmp	r3, #2
 800addc:	d10f      	bne.n	800adfe <_nx_ip_dispatch_process+0xae>
                if (ip_ptr -> nx_ip_igmp_packet_receive != NX_NULL)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d007      	beq.n	800adf8 <_nx_ip_dispatch_process+0xa8>
                    ip_ptr -> nx_ip_igmp_packet_receive(ip_ptr, packet_ptr);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800adee:	68b9      	ldr	r1, [r7, #8]
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	4798      	blx	r3
                    return(0);
 800adf4:	2300      	movs	r3, #0
 800adf6:	e054      	b.n	800aea2 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 800adf8:	2301      	movs	r3, #1
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	e037      	b.n	800ae6e <_nx_ip_dispatch_process+0x11e>
            else if (protocol == NX_PROTOCOL_UDP)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2b11      	cmp	r3, #17
 800ae02:	d10f      	bne.n	800ae24 <_nx_ip_dispatch_process+0xd4>
                    if (ip_ptr -> nx_ip_udp_packet_receive)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d007      	beq.n	800ae1e <_nx_ip_dispatch_process+0xce>
                        (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800ae14:	68b9      	ldr	r1, [r7, #8]
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	4798      	blx	r3
                        return(0);
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	e041      	b.n	800aea2 <_nx_ip_dispatch_process+0x152>
                drop_packet = 1;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	617b      	str	r3, [r7, #20]
            break;
 800ae22:	e024      	b.n	800ae6e <_nx_ip_dispatch_process+0x11e>
                if (ip_ptr -> nx_ip_raw_ip_processing)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00c      	beq.n	800ae48 <_nx_ip_dispatch_process+0xf8>
                        if ((ip_ptr -> nx_ip_raw_ip_processing)(ip_ptr, protocol << 16, packet_ptr) == NX_SUCCESS)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	0411      	lsls	r1, r2, #16
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	4798      	blx	r3
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d101      	bne.n	800ae48 <_nx_ip_dispatch_process+0xf8>
                            return(0);
 800ae44:	2300      	movs	r3, #0
 800ae46:	e02c      	b.n	800aea2 <_nx_ip_dispatch_process+0x152>
                if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	d105      	bne.n	800ae5e <_nx_ip_dispatch_process+0x10e>
                    NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PROTOCOL_UNREACH_CODE);
 800ae52:	2300      	movs	r3, #0
 800ae54:	4a15      	ldr	r2, [pc, #84]	@ (800aeac <_nx_ip_dispatch_process+0x15c>)
 800ae56:	68b9      	ldr	r1, [r7, #8]
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f7ff fb21 	bl	800a4a0 <_nx_icmpv4_send_error_message>
                ip_ptr -> nx_ip_unknown_protocols_received++;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae62:	1c5a      	adds	r2, r3, #1
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	641a      	str	r2, [r3, #64]	@ 0x40
                drop_packet = 1;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	617b      	str	r3, [r7, #20]
            break;
 800ae6c:	e7ff      	b.n	800ae6e <_nx_ip_dispatch_process+0x11e>
 800ae6e:	bf00      	nop
        }


        /* If the previous header is processed without errors, move on to the next optional
           header. */
        if (!drop_packet)
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d010      	beq.n	800ae98 <_nx_ip_dispatch_process+0x148>
        else
        {
#ifndef NX_DISABLE_IP_INFO

            /* Decrement the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered--;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	1e5a      	subs	r2, r3, #1
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	621a      	str	r2, [r3, #32]

            /* Decrement the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae88:	1ad2      	subs	r2, r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	64da      	str	r2, [r3, #76]	@ 0x4c
    while (!drop_packet)
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f43f af61 	beq.w	800ad62 <_nx_ip_dispatch_process+0x12>
#endif /* NX_DISABLE_IP_INFO */
        }
    }

    return(drop_packet);
 800aea0:	697b      	ldr	r3, [r7, #20]
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3718      	adds	r7, #24
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	03020000 	.word	0x03020000

0800aeb0 <_nx_ip_driver_deferred_processing>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_deferred_processing(NX_IP *ip_ptr)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]

    /* Set event flags to wake the IP helper thread, which will in turn
       call the driver with the NX_LINK_DEFERRED_PROCESSING command.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_DRIVER_DEFERRED_EVENT, TX_OR);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800aebe:	2200      	movs	r2, #0
 800aec0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800aec4:	4618      	mov	r0, r3
 800aec6:	f005 fb13 	bl	80104f0 <_tx_event_flags_set>
}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <_nx_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b084      	sub	sp, #16
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	60f8      	str	r0, [r7, #12]
 800aeda:	60b9      	str	r1, [r7, #8]
 800aedc:	607a      	str	r2, [r7, #4]

    return(_nx_ip_driver_interface_direct_command(ip_ptr, command, 0, return_value_ptr));
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	68b9      	ldr	r1, [r7, #8]
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 f805 	bl	800aef4 <_nx_ip_driver_interface_direct_command>
 800aeea:	4603      	mov	r3, r0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <_nx_ip_driver_interface_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_driver_interface_direct_command(NX_IP *ip_ptr, UINT command, UINT interface_index, ULONG *return_value_ptr)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b08c      	sub	sp, #48	@ 0x30
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	607a      	str	r2, [r7, #4]
 800af00:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_DRIVER_DIRECT_COMMAND, ip_ptr, command, 0, 0, NX_TRACE_IP_EVENTS, &trace_event, &trace_timestamp);

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800af08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800af0c:	4618      	mov	r0, r3
 800af0e:	f005 ff51 	bl	8010db4 <_tx_mutex_get>

    /* Build the driver request structure.  */
    driver_request.nx_ip_driver_ptr =         ip_ptr;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	62bb      	str	r3, [r7, #40]	@ 0x28
    driver_request.nx_ip_driver_command =     command;
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	613b      	str	r3, [r7, #16]
    driver_request.nx_ip_driver_return_ptr =  return_value_ptr;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	627b      	str	r3, [r7, #36]	@ 0x24
    driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	4613      	mov	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	011b      	lsls	r3, r3, #4
 800af28:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	3304      	adds	r3, #4
 800af32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 800af34:	68f9      	ldr	r1, [r7, #12]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	440b      	add	r3, r1
 800af42:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f107 0210 	add.w	r2, r7, #16
 800af4c:	4610      	mov	r0, r2
 800af4e:	4798      	blx	r3

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800af56:	4618      	mov	r0, r3
 800af58:	f006 f9a4 	bl	80112a4 <_tx_mutex_put>
    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_DRIVER_DIRECT_COMMAND, 0, 0, driver_request.nx_ip_driver_status, 0);

    /* Return status to the caller.  */
    /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
    return(driver_request.nx_ip_driver_status);
 800af5c:	697b      	ldr	r3, [r7, #20]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3730      	adds	r7, #48	@ 0x30
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <_nx_ip_driver_packet_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_driver_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG destination_ip, ULONG fragment, ULONG next_hop_address)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b09e      	sub	sp, #120	@ 0x78
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	607a      	str	r2, [r7, #4]
 800af72:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA
NX_IP_DRIVER driver_request;
UINT         index;
ULONG        network_mask;
ULONG        network;
UCHAR        loopback = NX_FALSE;
 800af74:	2300      	movs	r3, #0
 800af76:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Initialize the driver request. */
    driver_request.nx_ip_driver_ptr =                   ip_ptr;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	633b      	str	r3, [r7, #48]	@ 0x30
    driver_request.nx_ip_driver_packet =                packet_ptr;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	62bb      	str	r3, [r7, #40]	@ 0x28
    driver_request.nx_ip_driver_interface =             packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af86:	637b      	str	r3, [r7, #52]	@ 0x34
    driver_request.nx_ip_driver_command =               NX_LINK_PACKET_SEND;
 800af88:	2300      	movs	r3, #0
 800af8a:	61bb      	str	r3, [r7, #24]

    /* Determine if physical mapping is needed by the link driver.  */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_address_mapping_needed)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af90:	795b      	ldrb	r3, [r3, #5]
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 8179 	beq.w	800b28a <_nx_ip_driver_packet_send+0x324>
    {

        /* Get the network and network mask.*/
        network_mask = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network_mask;
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af9c:	699b      	ldr	r3, [r3, #24]
 800af9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
        network = packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_network;
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa4:	69db      	ldr	r3, [r3, #28]
 800afa6:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* Determine if an IP limited or directed broadcast is requested.  */
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afae:	d00d      	beq.n	800afcc <_nx_ip_driver_packet_send+0x66>
            (((destination_ip & network_mask) == network) &&
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afb4:	4013      	ands	r3, r2
        if ((destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800afb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afb8:	429a      	cmp	r2, r3
 800afba:	d110      	bne.n	800afde <_nx_ip_driver_packet_send+0x78>
             ((destination_ip & ~network_mask) == ~network_mask)))
 800afbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afbe:	43da      	mvns	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	401a      	ands	r2, r3
 800afc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afc6:	43db      	mvns	r3, r3
            (((destination_ip & network_mask) == network) &&
 800afc8:	429a      	cmp	r2, r3
 800afca:	d108      	bne.n	800afde <_nx_ip_driver_packet_send+0x78>
        {

            /* Build the driver request.  */
            driver_request.nx_ip_driver_command =               NX_LINK_PACKET_BROADCAST;
 800afcc:	2304      	movs	r3, #4
 800afce:	61bb      	str	r3, [r7, #24]
            driver_request.nx_ip_driver_physical_address_msw =  0xFFFFUL;
 800afd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afd4:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  0xFFFFFFFFUL;
 800afd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afda:	627b      	str	r3, [r7, #36]	@ 0x24
 800afdc:	e167      	b.n	800b2ae <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a loopback address.  */
        else if (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address)
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe2:	695b      	ldr	r3, [r3, #20]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d105      	bne.n	800aff6 <_nx_ip_driver_packet_send+0x90>
        {
            loopback = NX_TRUE;
 800afea:	2301      	movs	r3, #1
 800afec:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff4:	e15b      	b.n	800b2ae <_nx_ip_driver_packet_send+0x348>
        }
        /* Determine if we have a class D multicast address.  */
        else if ((destination_ip & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800affc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800b000:	d133      	bne.n	800b06a <_nx_ip_driver_packet_send+0x104>

            /* Yes, we have a class D multicast address.  Derive the physical mapping from
               the class D address.  */

            /* Determine if the group address has been joined in this IP instance.  */
            index =  0;
 800b002:	2300      	movs	r3, #0
 800b004:	677b      	str	r3, [r7, #116]	@ 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800b006:	e00f      	b.n	800b028 <_nx_ip_driver_packet_send+0xc2>
            {

                /* Determine if the destination address matches the requested address.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_join_list == destination_ip)
 800b008:	68f9      	ldr	r1, [r7, #12]
 800b00a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b00c:	4613      	mov	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	4413      	add	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	440b      	add	r3, r1
 800b016:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d006      	beq.n	800b030 <_nx_ip_driver_packet_send+0xca>
                    /* Yes, break the loop!  */
                    break;
                }

                /* Increment the join list index.  */
                index++;
 800b022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b024:	3301      	adds	r3, #1
 800b026:	677b      	str	r3, [r7, #116]	@ 0x74
            while (index < NX_MAX_MULTICAST_GROUPS)
 800b028:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b02a:	2b06      	cmp	r3, #6
 800b02c:	d9ec      	bls.n	800b008 <_nx_ip_driver_packet_send+0xa2>
 800b02e:	e000      	b.n	800b032 <_nx_ip_driver_packet_send+0xcc>
                    break;
 800b030:	bf00      	nop
            }

            /* Determine if the group was joined by this IP instance.  */
            if (index < NX_MAX_MULTICAST_GROUPS)
 800b032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b034:	2b06      	cmp	r3, #6
 800b036:	d80e      	bhi.n	800b056 <_nx_ip_driver_packet_send+0xf0>
            {

                /* Determine if the group has loopback enabled.  */
                if (ip_ptr -> nx_ipv4_multicast_entry[index].nx_ipv4_multicast_loopback_enable)
 800b038:	68f9      	ldr	r1, [r7, #12]
 800b03a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b03c:	4613      	mov	r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	4413      	add	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	440b      	add	r3, r1
 800b046:	f503 7336 	add.w	r3, r3, #728	@ 0x2d8
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <_nx_ip_driver_packet_send+0xf0>
                {
                    loopback = NX_TRUE;
 800b050:	2301      	movs	r3, #1
 800b052:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
                }
            }

            /* Build the driver request. Derive the physical mapping from
               the class D address.  */
            driver_request.nx_ip_driver_physical_address_msw =  NX_IP_MULTICAST_UPPER;
 800b056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b05a:	623b      	str	r3, [r7, #32]
            driver_request.nx_ip_driver_physical_address_lsw =  NX_IP_MULTICAST_LOWER | (destination_ip & NX_IP_MULTICAST_MASK);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b062:	f043 43bc 	orr.w	r3, r3, #1577058304	@ 0x5e000000
 800b066:	627b      	str	r3, [r7, #36]	@ 0x24
 800b068:	e121      	b.n	800b2ae <_nx_ip_driver_packet_send+0x348>

            NX_PARAMETER_NOT_USED(fragment);
            /* Look into the ARP Routing Table to derive the physical address.  */

            /* If we get here, the packet destination is a unicast address.  */
            destination_ip = next_hop_address;
 800b06a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b06e:	607b      	str	r3, [r7, #4]

            /* Calculate the hash index for the destination IP address.  */
            index =  (UINT)((destination_ip + (destination_ip >> 8)) & NX_ARP_TABLE_MASK);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	0a1a      	lsrs	r2, r3, #8
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	4413      	add	r3, r2
 800b078:	f003 031f 	and.w	r3, r3, #31
 800b07c:	677b      	str	r3, [r7, #116]	@ 0x74

            /* Determine if there is an entry for this IP address.  */
            arp_ptr =  ip_ptr -> nx_ip_arp_table[index];
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b082:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Loop to look for an ARP match.  */
            while (arp_ptr)
 800b08e:	e014      	b.n	800b0ba <_nx_ip_driver_packet_send+0x154>
            {

                /* Determine if this arp entry matches the destination IP address.  */
                if (arp_ptr -> nx_arp_ip_address == destination_ip)
 800b090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b092:	6a1b      	ldr	r3, [r3, #32]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	429a      	cmp	r2, r3
 800b098:	d013      	beq.n	800b0c2 <_nx_ip_driver_packet_send+0x15c>
                    /* Yes, we found a match.  Get out of the loop!  */
                    break;
                }

                /* Move to the next active ARP entry.  */
                arp_ptr =  arp_ptr -> nx_arp_active_next;
 800b09a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Determine if we are at the end of the ARP list.  */
                if (arp_ptr == ip_ptr -> nx_ip_arp_table[index])
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0a4:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d102      	bne.n	800b0ba <_nx_ip_driver_packet_send+0x154>
                {
                    /* Clear the ARP pointer.  */
                    arp_ptr =  NX_NULL;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    break;
 800b0b8:	e004      	b.n	800b0c4 <_nx_ip_driver_packet_send+0x15e>
            while (arp_ptr)
 800b0ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e7      	bne.n	800b090 <_nx_ip_driver_packet_send+0x12a>
 800b0c0:	e000      	b.n	800b0c4 <_nx_ip_driver_packet_send+0x15e>
                    break;
 800b0c2:	bf00      	nop
                }
            }

            /* Determine if we actually found a matching and effective ARP entry.  */
            if ((arp_ptr) && (arp_ptr -> nx_arp_physical_address_msw | arp_ptr -> nx_arp_physical_address_lsw))
 800b0c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d023      	beq.n	800b112 <_nx_ip_driver_packet_send+0x1ac>
 800b0ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01c      	beq.n	800b112 <_nx_ip_driver_packet_send+0x1ac>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b0d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 800b0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 800b0e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b0e2:	b672      	cpsid	i
    return(int_posture);
 800b0e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
            {

                /* Disable interrupts temporarily.  */
                TX_DISABLE
 800b0e6:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Yes, we have a physical mapping.  Copy the physical address into the driver
                   request structure.  */
                driver_request.nx_ip_driver_physical_address_msw =  arp_ptr -> nx_arp_physical_address_msw;
 800b0e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ec:	623b      	str	r3, [r7, #32]
                driver_request.nx_ip_driver_physical_address_lsw =  arp_ptr -> nx_arp_physical_address_lsw;
 800b0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f2:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Move this ARP entry to the head of the list.  */
                ip_ptr -> nx_ip_arp_table[index] =  arp_ptr;
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b0f8:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b102:	605a      	str	r2, [r3, #4]
 800b104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b106:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b10a:	f383 8810 	msr	PRIMASK, r3
}
 800b10e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE
 800b110:	e0cd      	b.n	800b2ae <_nx_ip_driver_packet_send+0x348>
            }
            else
            {

                /* Determine if fragmentation is needed before queue the packet on the ARP waiting queue.  */
                if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d910      	bls.n	800b142 <_nx_ip_driver_packet_send+0x1dc>
                {

#ifndef NX_DISABLE_FRAGMENTATION
                    /* Check the DF bit flag.  */
                    if ((ip_ptr -> nx_ip_fragment_processing == NX_NULL) || (fragment != NX_FRAGMENT_OKAY))
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <_nx_ip_driver_packet_send+0x1ca>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d008      	beq.n	800b142 <_nx_ip_driver_packet_send+0x1dc>
                    {

#ifndef NX_DISABLE_IP_INFO

                        /* Increment the IP send packets dropped count.  */
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b134:	1c5a      	adds	r2, r3, #1
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	655a      	str	r2, [r3, #84]	@ 0x54
#endif
                        /* Just release the packet.  */
                        _nx_packet_transmit_release(packet_ptr);
 800b13a:	68b8      	ldr	r0, [r7, #8]
 800b13c:	f002 fb7e 	bl	800d83c <_nx_packet_transmit_release>

                        /* Return... nothing more can be done!  */
                        return;
 800b140:	e134      	b.n	800b3ac <_nx_ip_driver_packet_send+0x446>
                    }
                }

                /* Determine if we actually found a matching ARP entry.  */
                if (arp_ptr)
 800b142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b144:	2b00      	cmp	r3, #0
 800b146:	d052      	beq.n	800b1ee <_nx_ip_driver_packet_send+0x288>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b148:	f3ef 8310 	mrs	r3, PRIMASK
 800b14c:	647b      	str	r3, [r7, #68]	@ 0x44
    return(posture);
 800b14e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    int_posture = __get_interrupt_posture();
 800b150:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 800b152:	b672      	cpsid	i
    return(int_posture);
 800b154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
                {

                    /* Yes, we have an existing ARP mapping entry.  */

                    /* Disable interrupts temporarily.  */
                    TX_DISABLE
 800b156:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Ensure the current packet's queue next pointer to NULL.  */
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	2200      	movs	r2, #0
 800b15c:	61da      	str	r2, [r3, #28]

                    /* Determine if the queue is empty.  */
                    if (arp_ptr -> nx_arp_packets_waiting == NX_NULL)
 800b15e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b162:	2b00      	cmp	r3, #0
 800b164:	d109      	bne.n	800b17a <_nx_ip_driver_packet_send+0x214>
                    {

                        /* Yes, we have an empty ARP packet queue.  Simply place the
                           packet at the head of the list.  */
                        arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800b166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b168:	68ba      	ldr	r2, [r7, #8]
 800b16a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b16c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b172:	f383 8810 	msr	PRIMASK, r3
}
 800b176:	bf00      	nop
                    /* Call ARP send to send an ARP request.  */
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
                }

                /* Just return!  */
                return;
 800b178:	e117      	b.n	800b3aa <_nx_ip_driver_packet_send+0x444>
                        last_packet =  arp_ptr -> nx_arp_packets_waiting;
 800b17a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b17e:	66bb      	str	r3, [r7, #104]	@ 0x68
                        queued_count = 1;
 800b180:	2301      	movs	r3, #1
 800b182:	663b      	str	r3, [r7, #96]	@ 0x60
                        while (last_packet -> nx_packet_queue_next)
 800b184:	e005      	b.n	800b192 <_nx_ip_driver_packet_send+0x22c>
                            queued_count++;
 800b186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b188:	3301      	adds	r3, #1
 800b18a:	663b      	str	r3, [r7, #96]	@ 0x60
                            last_packet =  last_packet -> nx_packet_queue_next;
 800b18c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	66bb      	str	r3, [r7, #104]	@ 0x68
                        while (last_packet -> nx_packet_queue_next)
 800b192:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1f5      	bne.n	800b186 <_nx_ip_driver_packet_send+0x220>
                        last_packet -> nx_packet_queue_next =  packet_ptr;
 800b19a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	61da      	str	r2, [r3, #28]
                        remove_packet =  NX_NULL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	667b      	str	r3, [r7, #100]	@ 0x64
                        if (queued_count >= NX_ARP_MAX_QUEUE_DEPTH)
 800b1a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1a6:	2b03      	cmp	r3, #3
 800b1a8:	d913      	bls.n	800b1d2 <_nx_ip_driver_packet_send+0x26c>
                            remove_packet =  arp_ptr -> nx_arp_packets_waiting;
 800b1aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ae:	667b      	str	r3, [r7, #100]	@ 0x64
                            arp_ptr -> nx_arp_packets_waiting =  remove_packet -> nx_packet_queue_next;
 800b1b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1b2:	69da      	ldr	r2, [r3, #28]
 800b1b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1b6:	631a      	str	r2, [r3, #48]	@ 0x30
                            remove_packet -> nx_packet_queue_next =  NX_NULL;
 800b1b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	61da      	str	r2, [r3, #28]
                            ip_ptr -> nx_ip_transmit_resource_errors++;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	645a      	str	r2, [r3, #68]	@ 0x44
                            ip_ptr -> nx_ip_send_packets_dropped++;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	655a      	str	r2, [r3, #84]	@ 0x54
 800b1d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1d8:	f383 8810 	msr	PRIMASK, r3
}
 800b1dc:	bf00      	nop
                        if (remove_packet)
 800b1de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f000 80e2 	beq.w	800b3aa <_nx_ip_driver_packet_send+0x444>
                            _nx_packet_transmit_release(remove_packet);
 800b1e6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800b1e8:	f002 fb28 	bl	800d83c <_nx_packet_transmit_release>
                return;
 800b1ec:	e0dd      	b.n	800b3aa <_nx_ip_driver_packet_send+0x444>
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	@ 0x6e8
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00f      	beq.n	800b218 <_nx_ip_driver_packet_send+0x2b2>
                        ((ip_ptr -> nx_ip_arp_allocate)(ip_ptr, &(ip_ptr -> nx_ip_arp_table[index]), NX_FALSE)))
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	@ 0x6e8
 800b1fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b200:	f502 72ca 	add.w	r2, r2, #404	@ 0x194
 800b204:	0092      	lsls	r2, r2, #2
 800b206:	68f9      	ldr	r1, [r7, #12]
 800b208:	440a      	add	r2, r1
 800b20a:	1d11      	adds	r1, r2, #4
 800b20c:	2200      	movs	r2, #0
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	4798      	blx	r3
 800b212:	4603      	mov	r3, r0
                    if ((!ip_ptr -> nx_ip_arp_allocate) ||
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00d      	beq.n	800b234 <_nx_ip_driver_packet_send+0x2ce>
                        ip_ptr -> nx_ip_transmit_resource_errors++;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	645a      	str	r2, [r3, #68]	@ 0x44
                        ip_ptr -> nx_ip_send_packets_dropped++;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	655a      	str	r2, [r3, #84]	@ 0x54
                        _nx_packet_transmit_release(packet_ptr);
 800b22c:	68b8      	ldr	r0, [r7, #8]
 800b22e:	f002 fb05 	bl	800d83c <_nx_packet_transmit_release>
                        return;
 800b232:	e0bb      	b.n	800b3ac <_nx_ip_driver_packet_send+0x446>
                    arp_ptr =  (ip_ptr -> nx_ip_arp_table[index]) -> nx_arp_active_previous;
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b238:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4413      	add	r3, r2
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    arp_ptr -> nx_arp_ip_address =            destination_ip;
 800b246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	621a      	str	r2, [r3, #32]
                    arp_ptr -> nx_arp_physical_address_msw =  0;
 800b24c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b24e:	2200      	movs	r2, #0
 800b250:	625a      	str	r2, [r3, #36]	@ 0x24
                    arp_ptr -> nx_arp_physical_address_lsw =  0;
 800b252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b254:	2200      	movs	r2, #0
 800b256:	629a      	str	r2, [r3, #40]	@ 0x28
                    arp_ptr -> nx_arp_entry_next_update =     NX_ARP_UPDATE_RATE;
 800b258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b25a:	220a      	movs	r2, #10
 800b25c:	605a      	str	r2, [r3, #4]
                    arp_ptr -> nx_arp_retries =               0;
 800b25e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b260:	2200      	movs	r2, #0
 800b262:	609a      	str	r2, [r3, #8]
                    arp_ptr -> nx_arp_ip_interface =          packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b26a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2200      	movs	r2, #0
 800b270:	61da      	str	r2, [r3, #28]
                    arp_ptr -> nx_arp_packets_waiting =  packet_ptr;
 800b272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	631a      	str	r2, [r3, #48]	@ 0x30
                    (ip_ptr -> nx_ip_arp_packet_send)(ip_ptr, destination_ip, packet_ptr -> nx_packet_address.nx_packet_interface_ptr);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 36f4 	ldr.w	r3, [r3, #1780]	@ 0x6f4
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	68f8      	ldr	r0, [r7, #12]
 800b286:	4798      	blx	r3
                return;
 800b288:	e08f      	b.n	800b3aa <_nx_ip_driver_packet_send+0x444>
    {

        /* This IP instance does not require any IP-to-physical mapping.  */

        /* Determine if we have a loopback address.  */
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800b290:	d302      	bcc.n	800b298 <_nx_ip_driver_packet_send+0x332>
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800b292:	687b      	ldr	r3, [r7, #4]
        if ((((destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800b294:	2b00      	cmp	r3, #0
 800b296:	da05      	bge.n	800b2a4 <_nx_ip_driver_packet_send+0x33e>
            (destination_ip == packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_address))
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b29c:	695b      	ldr	r3, [r3, #20]
              (destination_ip <= NX_IP_LOOPBACK_LAST))) ||
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d104      	bne.n	800b2ae <_nx_ip_driver_packet_send+0x348>
        {

            /* Yes, we have an internal loopback address.  */
            loopback = NX_TRUE;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
            driver_request.nx_ip_driver_interface = NX_NULL;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Check whether the packet should be loop back. */
    if (loopback == NX_TRUE)
 800b2ae:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d131      	bne.n	800b31a <_nx_ip_driver_packet_send+0x3b4>
    {

        /* Copy the packet so it can be enqueued properly by the receive
           processing.  */
        if (_nx_packet_copy(packet_ptr, &packet_copy, ip_ptr -> nx_ip_default_packet_pool, NX_NO_WAIT) == NX_SUCCESS)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 800b2bc:	f107 0114 	add.w	r1, r7, #20
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	68b8      	ldr	r0, [r7, #8]
 800b2c4:	f001 fe38 	bl	800cf38 <_nx_packet_copy>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d11b      	bne.n	800b306 <_nx_ip_driver_packet_send+0x3a0>

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

            /* Compute checksum for upper layer protocol. */
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            if (packet_copy -> nx_packet_interface_capability_flag)
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d003      	beq.n	800b2de <_nx_ip_driver_packet_send+0x378>
            {
                _nx_ip_packet_checksum_compute(packet_copy);
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 fc15 	bl	800bb08 <_nx_ip_packet_checksum_compute>
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP packet sent count.  */
            ip_ptr -> nx_ip_total_packets_sent++;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	615a      	str	r2, [r3, #20]

            /* Increment the IP bytes sent count.  */
            ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	699a      	ldr	r2, [r3, #24]
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f1a3 0214 	sub.w	r2, r3, #20
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	619a      	str	r2, [r3, #24]
            /*lint --e{644} suppress variable might not be initialized, since "packet_copy" was initialized as long as return value is NX_SUCCESS. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, packet_copy);

            /* Send the packet to this IP's receive processing like it came in from the
               driver.  */
            _nx_ip_packet_deferred_receive(ip_ptr, packet_copy);
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f000 fd8e 	bl	800be20 <_nx_ip_packet_deferred_receive>
 800b304:	e009      	b.n	800b31a <_nx_ip_driver_packet_send+0x3b4>
#ifndef NX_DISABLE_IP_INFO
        else
        {

            /* Increment the IP send packets dropped count.  */
            ip_ptr -> nx_ip_send_packets_dropped++;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Increment the IP transmit resource error count.  */
            ip_ptr -> nx_ip_transmit_resource_errors++;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	645a      	str	r2, [r3, #68]	@ 0x44
        }
#endif
    }

    /* Check whether the packet should be sent through driver. */
    if (driver_request.nx_ip_driver_interface)
 800b31a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d040      	beq.n	800b3a2 <_nx_ip_driver_packet_send+0x43c>
    {

        /* Determine if fragmentation is needed.  */
        if (packet_ptr -> nx_packet_length > packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_ip_mtu_size)
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d919      	bls.n	800b362 <_nx_ip_driver_packet_send+0x3fc>
        {

#ifndef NX_DISABLE_FRAGMENTATION
            /* Check the DF bit flag.  */
            if ((ip_ptr -> nx_ip_fragment_processing) && (fragment != NX_DONT_FRAGMENT))
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <_nx_ip_driver_packet_send+0x3ea>
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b33e:	d007      	beq.n	800b350 <_nx_ip_driver_packet_send+0x3ea>
            {

                /* Fragmentation is needed, call the IP fragment processing routine.  */
                (ip_ptr -> nx_ip_fragment_processing)(&driver_request);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f8d3 32a0 	ldr.w	r3, [r3, #672]	@ 0x2a0
 800b346:	f107 0218 	add.w	r2, r7, #24
 800b34a:	4610      	mov	r0, r2
 800b34c:	4798      	blx	r3
                /* Just release the packet.  */
                _nx_packet_transmit_release(packet_ptr);
            }

            /* In either case, this packet send is complete, just return.  */
            return;
 800b34e:	e02d      	b.n	800b3ac <_nx_ip_driver_packet_send+0x446>
                ip_ptr -> nx_ip_send_packets_dropped++;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b354:	1c5a      	adds	r2, r3, #1
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	655a      	str	r2, [r3, #84]	@ 0x54
                _nx_packet_transmit_release(packet_ptr);
 800b35a:	68b8      	ldr	r0, [r7, #8]
 800b35c:	f002 fa6e 	bl	800d83c <_nx_packet_transmit_release>
            return;
 800b360:	e024      	b.n	800b3ac <_nx_ip_driver_packet_send+0x446>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packet sent count.  */
        ip_ptr -> nx_ip_total_packets_sent++;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	615a      	str	r2, [r3, #20]

        /* Increment the IP bytes sent count.  */
        ip_ptr -> nx_ip_total_bytes_sent +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	699a      	ldr	r2, [r3, #24]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b374:	4413      	add	r3, r2
 800b376:	f1a3 0214 	sub.w	r2, r3, #20
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	619a      	str	r2, [r3, #24]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Driver entry must not be NULL. */
        NX_ASSERT(packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry != NX_NULL);
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b384:	2b00      	cmp	r3, #0
 800b386:	d104      	bne.n	800b392 <_nx_ip_driver_packet_send+0x42c>
 800b388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b38c:	f006 fed2 	bl	8012134 <_tx_thread_sleep>
 800b390:	e7fa      	b.n	800b388 <_nx_ip_driver_packet_send+0x422>

        /* Broadcast packet.  */
        (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_link_driver_entry)(&driver_request);
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b398:	f107 0218 	add.w	r2, r7, #24
 800b39c:	4610      	mov	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	e004      	b.n	800b3ac <_nx_ip_driver_packet_send+0x446>
    }
    else
    {

        /* Release the transmit packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800b3a2:	68b8      	ldr	r0, [r7, #8]
 800b3a4:	f002 fa4a 	bl	800d83c <_nx_packet_transmit_release>
 800b3a8:	e000      	b.n	800b3ac <_nx_ip_driver_packet_send+0x446>
                return;
 800b3aa:	bf00      	nop
    }
}
 800b3ac:	3778      	adds	r7, #120	@ 0x78
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <_nx_ip_gateway_address_clear>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_clear(NX_IP *ip_ptr)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b086      	sub	sp, #24
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, 0, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be cleared.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b3c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f005 fcf5 	bl	8010db4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b3ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ce:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b3d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b3d4:	b672      	cpsid	i
    return(int_posture);
 800b3d6:	68bb      	ldr	r3, [r7, #8]

    /* Disable interrupts.  */
    TX_DISABLE
 800b3d8:	617b      	str	r3, [r7, #20]

    /* Clear the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  0;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = NX_NULL;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	60da      	str	r2, [r3, #12]
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f383 8810 	msr	PRIMASK, r3
}
 800b3f0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f005 ff53 	bl	80112a4 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800b3fe:	2300      	movs	r3, #0
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b400:	4618      	mov	r0, r3
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <_nx_ip_gateway_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_get(NX_IP *ip_ptr, ULONG *ip_address)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
UINT status;


    /* Initialize the return value to be NX_NOT_FOUND.  If the gateway address
       is set, the return value changes to NX_SUCCESS. */
    status = NX_NOT_FOUND;
 800b412:	234e      	movs	r3, #78	@ 0x4e
 800b414:	60fb      	str	r3, [r7, #12]

    /* Obtain the IP internal mutex to get the Gateway IP address.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b41c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b420:	4618      	mov	r0, r3
 800b422:	f005 fcc7 	bl	8010db4 <_tx_mutex_get>

    if (ip_ptr -> nx_ip_gateway_address)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d005      	beq.n	800b43a <_nx_ip_gateway_address_get+0x32>
    {

        /* Setup the Gateway IP address.  */
        *ip_address = ip_ptr -> nx_ip_gateway_address;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	689a      	ldr	r2, [r3, #8]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	601a      	str	r2, [r3, #0]

        status = NX_SUCCESS;
 800b436:	2300      	movs	r3, #0
 800b438:	60fb      	str	r3, [r7, #12]
    }

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b440:	4618      	mov	r0, r3
 800b442:	f005 ff2f 	bl	80112a4 <_tx_mutex_put>

    /* Return completion status.  */
    return(status);
 800b446:	68fb      	ldr	r3, [r7, #12]
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <_nx_ip_gateway_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_gateway_address_set(NX_IP *ip_ptr, ULONG ip_address)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]

#ifndef NX_DISABLE_IPV4
INT           i;
TX_INTERRUPT_SAVE_AREA

NX_INTERFACE *ip_interface_ptr = NX_NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	61bb      	str	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_GATEWAY_ADDRESS_SET, ip_ptr, ip_address, 0, 0, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP internal mutex so the Gateway IP address can be setup.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b464:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b468:	4618      	mov	r0, r3
 800b46a:	f005 fca3 	bl	8010db4 <_tx_mutex_get>

    /* Loop through all the interfaces to find the one for the input gateway address. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800b46e:	2300      	movs	r3, #0
 800b470:	61fb      	str	r3, [r7, #28]
 800b472:	e033      	b.n	800b4dc <_nx_ip_gateway_address_set+0x8c>
    {

        /* Must be a valid interface. Match the network subnet of the interface and input address. */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800b474:	6879      	ldr	r1, [r7, #4]
 800b476:	69fa      	ldr	r2, [r7, #28]
 800b478:	4613      	mov	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4413      	add	r3, r2
 800b47e:	011b      	lsls	r3, r3, #4
 800b480:	440b      	add	r3, r1
 800b482:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d024      	beq.n	800b4d6 <_nx_ip_gateway_address_set+0x86>
            ((ip_address & (ip_ptr -> nx_ip_interface[i].nx_interface_ip_network_mask)) ==
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	69fa      	ldr	r2, [r7, #28]
 800b490:	4613      	mov	r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4413      	add	r3, r2
 800b496:	011b      	lsls	r3, r3, #4
 800b498:	440b      	add	r3, r1
 800b49a:	f203 733c 	addw	r3, r3, #1852	@ 0x73c
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	ea02 0103 	and.w	r1, r2, r3
             ip_ptr -> nx_ip_interface[i].nx_interface_ip_network))
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	69fa      	ldr	r2, [r7, #28]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4413      	add	r3, r2
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	4403      	add	r3, r0
 800b4b4:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 800b4b8:	681b      	ldr	r3, [r3, #0]
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	d10b      	bne.n	800b4d6 <_nx_ip_gateway_address_set+0x86>
        {

            /* This is the interface for the gateway.  */
            ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800b4be:	69fa      	ldr	r2, [r7, #28]
 800b4c0:	4613      	mov	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	4413      	add	r3, r2
 800b4c6:	011b      	lsls	r3, r3, #4
 800b4c8:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	61bb      	str	r3, [r7, #24]

            /* Break out of the search. */
            break;
 800b4d4:	e005      	b.n	800b4e2 <_nx_ip_gateway_address_set+0x92>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	61fb      	str	r3, [r7, #28]
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	ddc8      	ble.n	800b474 <_nx_ip_gateway_address_set+0x24>
        }
    }

    /* Check if we found an interface. */
    if (ip_interface_ptr == NX_NULL)
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d107      	bne.n	800b4f8 <_nx_ip_gateway_address_set+0xa8>
    {

        /* None found. Unlock the mutex, and return the error status. */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f005 fed8 	bl	80112a4 <_tx_mutex_put>

        return(NX_IP_ADDRESS_ERROR);
 800b4f4:	2321      	movs	r3, #33	@ 0x21
 800b4f6:	e01a      	b.n	800b52e <_nx_ip_gateway_address_set+0xde>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b4fc:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b500:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b502:	b672      	cpsid	i
    return(int_posture);
 800b504:	68bb      	ldr	r3, [r7, #8]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800b506:	617b      	str	r3, [r7, #20]

    /* Setup the Gateway IP address.  */
    ip_ptr -> nx_ip_gateway_address =  ip_address;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	609a      	str	r2, [r3, #8]

    ip_ptr -> nx_ip_gateway_interface = ip_interface_ptr;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69ba      	ldr	r2, [r7, #24]
 800b512:	60da      	str	r2, [r3, #12]
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	f383 8810 	msr	PRIMASK, r3
}
 800b51e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release the protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b526:	4618      	mov	r0, r3
 800b528:	f005 febc 	bl	80112a4 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800b52c:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_ptr);
    NX_PARAMETER_NOT_USED(ip_address);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3720      	adds	r7, #32
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
	...

0800b538 <_nx_ip_header_add>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_header_add(NX_IP *ip_ptr, NX_PACKET *packet_ptr, ULONG source_ip, ULONG destination_ip,
                        ULONG type_of_service, ULONG time_to_live,  ULONG protocol, ULONG fragment)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b08c      	sub	sp, #48	@ 0x30
 800b53c:	af02      	add	r7, sp, #8
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
 800b544:	603b      	str	r3, [r7, #0]
ULONG           router_alert = 0;
 800b546:	2300      	movs	r3, #0
 800b548:	627b      	str	r3, [r7, #36]	@ 0x24
NX_IPV4_HEADER *ip_header_ptr;
ULONG           checksum;
#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT            compute_checksum = 1;
 800b54a:	2301      	movs	r3, #1
 800b54c:	623b      	str	r3, [r7, #32]
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
ULONG           val;

#ifndef NX_DISABLE_IGMPV2
    /* Check IGMPv2 protocol. */
    if ((protocol == NX_IP_IGMP) && (ip_ptr -> nx_ip_igmp_router_version == NX_IGMP_HOST_VERSION_2))
 800b54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b554:	d106      	bne.n	800b564 <_nx_ip_header_add+0x2c>
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d101      	bne.n	800b564 <_nx_ip_header_add+0x2c>
    {
        router_alert = 4;
 800b560:	2304      	movs	r3, #4
 800b562:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Prepend the IP header to the packet.  First, make room for the IP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  (packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER)) - router_alert;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	689a      	ldr	r2, [r3, #8]
 800b568:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b56a:	f06f 0313 	mvn.w	r3, #19
 800b56e:	1a5b      	subs	r3, r3, r1
 800b570:	441a      	add	r2, r3
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	609a      	str	r2, [r3, #8]

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER) + router_alert;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57c:	4413      	add	r3, r2
 800b57e:	f103 0214 	add.w	r2, r3, #20
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Assert prepend pointer is no less than data start pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    NX_ASSERT(packet_ptr -> nx_packet_prepend_ptr >= packet_ptr -> nx_packet_data_start);
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	429a      	cmp	r2, r3
 800b590:	d204      	bcs.n	800b59c <_nx_ip_header_add+0x64>
 800b592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b596:	f006 fdcd 	bl	8012134 <_tx_thread_sleep>
 800b59a:	e7fa      	b.n	800b592 <_nx_ip_header_add+0x5a>

    /* Setup the IP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr =  (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	61fb      	str	r3, [r7, #28]
    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	689a      	ldr	r2, [r3, #8]
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	635a      	str	r2, [r3, #52]	@ 0x34
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
                                                       sizeof(NX_IPV4_HEADER) + router_alert);
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	4413      	add	r3, r2
 800b5b6:	b2db      	uxtb	r3, r3
    packet_ptr -> nx_packet_ip_header_length = (UCHAR)(packet_ptr -> nx_packet_ip_header_length +
 800b5b8:	3314      	adds	r3, #20
 800b5ba:	b2da      	uxtb	r2, r3
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

    /* Determine if this is an identical copy for TCP retransmission.
       RFC1122, Section3.2.1.5, Page32-33. RFC1122, Section4.2.2.15, Page90-91.  */
    if (packet_ptr -> nx_packet_identical_copy == NX_TRUE)
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <_nx_ip_header_add+0x98>
    {

        /* Yes, this an identical copy for TCP retransmission.
           The IP header has been added, return.  */
        return(NX_SUCCESS);
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e089      	b.n	800b6e4 <_nx_ip_header_add+0x1ac>
    }

    /* Build the IP header.  */

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800b5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d009      	beq.n	800b5ea <_nx_ip_header_add+0xb2>

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
                                                        (NX_IP_HEADER_LENGTH_ENCODE_6 << 24) |
                                                        type_of_service |
                                                        (0xFFFF & packet_ptr -> nx_packet_length));
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5da:	b29a      	uxth	r2, r3
        ip_header_ptr -> nx_ip_header_word_0 =  (ULONG)((NX_IP_VERSION_V4 << 28) |
 800b5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	f043 428c 	orr.w	r2, r3, #1174405120	@ 0x46000000
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	601a      	str	r2, [r3, #0]
 800b5e8:	e008      	b.n	800b5fc <_nx_ip_header_add+0xc4>
    else
#endif
    {

        /* Build the first 32-bit word of the IP header.  */
        ip_header_ptr -> nx_ip_header_word_0 =  (NX_IP_VERSION | type_of_service | (0xFFFF & packet_ptr -> nx_packet_length));
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ee:	b29a      	uxth	r2, r3
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	f043 428a 	orr.w	r2, r3, #1157627904	@ 0x45000000
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	601a      	str	r2, [r3, #0]
    }

    /* Build the second 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_1 =  (ip_ptr -> nx_ip_packet_id++ << NX_SHIFT_BY_16) | fragment;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800b602:	1c59      	adds	r1, r3, #1
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	f8c2 1134 	str.w	r1, [r2, #308]	@ 0x134
 800b60a:	041a      	lsls	r2, r3, #16
 800b60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b60e:	431a      	orrs	r2, r3
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	605a      	str	r2, [r3, #4]

    /* Build the third 32-bit word of the IP header.  */
    ip_header_ptr -> nx_ip_header_word_2 =  ((time_to_live << NX_IP_TIME_TO_LIVE_SHIFT) | protocol);
 800b614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b616:	061a      	lsls	r2, r3, #24
 800b618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61a:	431a      	orrs	r2, r3
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	609a      	str	r2, [r3, #8]

    /* Place the source IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_source_ip =  source_ip;
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	60da      	str	r2, [r3, #12]

    /* Place the destination IP address in the IP header.  */
    ip_header_ptr -> nx_ip_header_destination_ip =  destination_ip;
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	683a      	ldr	r2, [r7, #0]
 800b62a:	611a      	str	r2, [r3, #16]

#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800b62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d004      	beq.n	800b63c <_nx_ip_header_add+0x104>
    {

        /* Append Router Alert Option. */
        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        *((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))) = (NX_IP_OPTION_COPY_FLAG |
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	3314      	adds	r3, #20
 800b638:	4a2c      	ldr	r2, [pc, #176]	@ (800b6ec <_nx_ip_header_add+0x1b4>)
 800b63a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	ba1a      	rev	r2, r3
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800b646:	69fb      	ldr	r3, [r7, #28]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	ba1a      	rev	r2, r3
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	ba1a      	rev	r2, r3
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	ba1a      	rev	r2, r3
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	ba1a      	rev	r2, r3
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	611a      	str	r2, [r3, #16]
#ifndef NX_DISABLE_IGMPV2
    if (router_alert)
 800b66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b670:	2b00      	cmp	r3, #0
 800b672:	d008      	beq.n	800b686 <_nx_ip_header_add+0x14e>
    {

        /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        NX_CHANGE_ULONG_ENDIAN(*((ULONG *)(packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER))));
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	3314      	adds	r3, #20
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	3314      	adds	r3, #20
 800b682:	ba12      	rev	r2, r2
 800b684:	601a      	str	r2, [r3, #0]

#ifdef NX_DISABLE_IP_TX_CHECKSUM
    compute_checksum = 0;
#endif /* NX_DISABLE_IP_TX_CHECKSUM */
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b68c:	f003 0301 	and.w	r3, r3, #1
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <_nx_ip_header_add+0x160>
    {
        compute_checksum = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	623b      	str	r3, [r7, #32]
    }

#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
    if (compute_checksum)
 800b698:	6a3b      	ldr	r3, [r7, #32]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d01b      	beq.n	800b6d6 <_nx_ip_header_add+0x19e>
#endif /* defined(NX_DISABLE_IP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE) */
    {
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* Length is the size of IP header, including options */
                                           (UINT)(20 + router_alert),
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a0:	f103 0214 	add.w	r2, r3, #20
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	2104      	movs	r1, #4
 800b6ac:	68b8      	ldr	r0, [r7, #8]
 800b6ae:	f7ff f8c3 	bl	800a838 <_nx_ip_checksum_compute>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	61bb      	str	r3, [r7, #24]
                                           /* IPv4 header checksum does not use src/dest addresses */
                                           NULL, NULL);

        val = (ULONG)(~checksum);
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	43db      	mvns	r3, r3
 800b6ba:	617b      	str	r3, [r7, #20]
        val = val & NX_LOWER_16_MASK;
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	617b      	str	r3, [r7, #20]

        /* Convert to network byte order. */
        NX_CHANGE_ULONG_ENDIAN(val);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	ba1b      	rev	r3, r3
 800b6c6:	617b      	str	r3, [r7, #20]

        /* Now store the checksum in the IP header.  */
        ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	689a      	ldr	r2, [r3, #8]
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	609a      	str	r2, [r3, #8]
 800b6d4:	e005      	b.n	800b6e2 <_nx_ip_header_add+0x1aa>
    }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    else
    {
        packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM;
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6da:	f043 0201 	orr.w	r2, r3, #1
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */

    /* Return...  */
    return(NX_SUCCESS);
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3728      	adds	r7, #40	@ 0x28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	94040000 	.word	0x94040000

0800b6f0 <_nx_ip_interface_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_get(NX_IP *ip_ptr, UINT interface_index, ULONG *ip_address, ULONG *network_mask)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b088      	sub	sp, #32
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
 800b6fc:	603b      	str	r3, [r7, #0]
                            ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);



    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b704:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b708:	4618      	mov	r0, r3
 800b70a:	f005 fb53 	bl	8010db4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b70e:	f3ef 8310 	mrs	r3, PRIMASK
 800b712:	617b      	str	r3, [r7, #20]
    return(posture);
 800b714:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b716:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b718:	b672      	cpsid	i
    return(int_posture);
 800b71a:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b71c:	61fb      	str	r3, [r7, #28]


    /* Pickup the IP address and the network mask. */
    *ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 800b71e:	68f9      	ldr	r1, [r7, #12]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	4613      	mov	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	011b      	lsls	r3, r3, #4
 800b72a:	440b      	add	r3, r1
 800b72c:	f503 63e7 	add.w	r3, r3, #1848	@ 0x738
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	601a      	str	r2, [r3, #0]
    *network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 800b736:	68f9      	ldr	r1, [r7, #12]
 800b738:	68ba      	ldr	r2, [r7, #8]
 800b73a:	4613      	mov	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	011b      	lsls	r3, r3, #4
 800b742:	440b      	add	r3, r1
 800b744:	f203 733c 	addw	r3, r3, #1852	@ 0x73c
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	f383 8810 	msr	PRIMASK, r3
}
 800b758:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b760:	4618      	mov	r0, r3
 800b762:	f005 fd9f 	bl	80112a4 <_tx_mutex_put>

    /* Return completion status.  */
    return(NX_SUCCESS);
 800b766:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}

0800b770 <_nx_ip_interface_address_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_address_set(NX_IP *ip_ptr, UINT interface_index, ULONG ip_address, ULONG network_mask)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08c      	sub	sp, #48	@ 0x30
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	603b      	str	r3, [r7, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_IP_ADDRESS_SET, ip_ptr, ip_address, network_mask, 0, NX_TRACE_IP_EVENTS, 0, 0);


    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b784:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b788:	4618      	mov	r0, r3
 800b78a:	f005 fb13 	bl	8010db4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b78e:	f3ef 8310 	mrs	r3, PRIMASK
 800b792:	617b      	str	r3, [r7, #20]
    return(posture);
 800b794:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b796:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b798:	b672      	cpsid	i
    return(int_posture);
 800b79a:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b79c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Save previous IP address and network mask.  */
    previous_ip_address =    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address;
 800b79e:	68f9      	ldr	r1, [r7, #12]
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	011b      	lsls	r3, r3, #4
 800b7aa:	440b      	add	r3, r1
 800b7ac:	f503 63e7 	add.w	r3, r3, #1848	@ 0x738
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    previous_network_mask =  ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask;
 800b7b4:	68f9      	ldr	r1, [r7, #12]
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4413      	add	r3, r2
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	440b      	add	r3, r1
 800b7c2:	f203 733c 	addw	r3, r3, #1852	@ 0x73c
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Pickup the current notification callback and additional information pointers.  */
    address_change_notify =  ip_ptr -> nx_ip_address_change_notify;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b7d0:	623b      	str	r3, [r7, #32]
    additional_info =        ip_ptr -> nx_ip_address_change_notify_additional_info;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b7d8:	61fb      	str	r3, [r7, #28]

    /* Setup the IP address and the network mask. */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address      =  ip_address;
 800b7da:	68f9      	ldr	r1, [r7, #12]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	4613      	mov	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4413      	add	r3, r2
 800b7e4:	011b      	lsls	r3, r3, #4
 800b7e6:	440b      	add	r3, r1
 800b7e8:	f503 63e7 	add.w	r3, r3, #1848	@ 0x738
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network_mask =  network_mask;
 800b7f0:	68f9      	ldr	r1, [r7, #12]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	440b      	add	r3, r1
 800b7fe:	f203 733c 	addw	r3, r3, #1852	@ 0x73c
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	601a      	str	r2, [r3, #0]
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_network      =  ip_address & network_mask;
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	ea02 0103 	and.w	r1, r2, r3
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	4613      	mov	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	011b      	lsls	r3, r3, #4
 800b81a:	4403      	add	r3, r0
 800b81c:	f503 63e8 	add.w	r3, r3, #1856	@ 0x740
 800b820:	6019      	str	r1, [r3, #0]

    /* Ensure the RARP function is disabled.  */
    ip_ptr -> nx_ip_rarp_periodic_update =  NX_NULL;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	f8c3 2704 	str.w	r2, [r3, #1796]	@ 0x704
    ip_ptr -> nx_ip_rarp_queue_process =    NX_NULL;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2200      	movs	r2, #0
 800b82e:	f8c3 2708 	str.w	r2, [r3, #1800]	@ 0x708
 800b832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b834:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f383 8810 	msr	PRIMASK, r3
}
 800b83c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b844:	4618      	mov	r0, r3
 800b846:	f005 fd2d 	bl	80112a4 <_tx_mutex_put>

    /* Determine if the application should be notified of the IP address and/or
       network mask change.  */
    if ((address_change_notify) &&
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00b      	beq.n	800b868 <_nx_ip_interface_address_set+0xf8>
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b854:	429a      	cmp	r2, r3
 800b856:	d103      	bne.n	800b860 <_nx_ip_interface_address_set+0xf0>
        ((ip_address != previous_ip_address) || (network_mask != previous_network_mask)))
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d003      	beq.n	800b868 <_nx_ip_interface_address_set+0xf8>
    {

        /* Yes, call the application's IP address change notify function.  */
        (address_change_notify)(ip_ptr, additional_info);
 800b860:	6a3b      	ldr	r3, [r7, #32]
 800b862:	69f9      	ldr	r1, [r7, #28]
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	4798      	blx	r3
    }

    /* Initialize the ARP defend timeout.  */
    ip_ptr -> nx_ip_interface[interface_index].nx_interface_arp_defend_timeout = 0;
 800b868:	68f9      	ldr	r1, [r7, #12]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	4613      	mov	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	011b      	lsls	r3, r3, #4
 800b874:	440b      	add	r3, r1
 800b876:	f503 63ed 	add.w	r3, r3, #1896	@ 0x768
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]

    /* Return completion status.  */
    return(NX_SUCCESS);
 800b87e:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800b880:	4618      	mov	r0, r3
 800b882:	3730      	adds	r7, #48	@ 0x30
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <_nx_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                    ULONG *actual_status, ULONG wait_option)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08e      	sub	sp, #56	@ 0x38
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
    /* Loop to keep checking for the proper status bits.  */
    for (;;)
    {

        /* Clear the current status.  */
        current_status =  0;
 800b896:	2300      	movs	r3, #0
 800b898:	637b      	str	r3, [r7, #52]	@ 0x34

        /*  Process according to the status option specified.  */

        if (needed_status & NX_IP_INITIALIZE_DONE)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d008      	beq.n	800b8b6 <_nx_ip_interface_status_check+0x2e>
        {

            /* Check for initialization complete.  */
            if (ip_ptr -> nx_ip_initialize_done)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <_nx_ip_interface_status_check+0x2e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_INITIALIZE_DONE;
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b0:	f043 0301 	orr.w	r3, r3, #1
 800b8b4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

#ifndef NX_DISABLE_IPV4
        if (needed_status & NX_IP_ADDRESS_RESOLVED)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00f      	beq.n	800b8e0 <_nx_ip_interface_status_check+0x58>
        {

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 800b8c0:	68f9      	ldr	r1, [r7, #12]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4413      	add	r3, r2
 800b8ca:	011b      	lsls	r3, r3, #4
 800b8cc:	440b      	add	r3, r1
 800b8ce:	f503 63e7 	add.w	r3, r3, #1848	@ 0x738
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d003      	beq.n	800b8e0 <_nx_ip_interface_status_check+0x58>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ADDRESS_RESOLVED;
 800b8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8da:	f043 0302 	orr.w	r3, r3, #2
 800b8de:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        if (needed_status & NX_IP_ARP_ENABLED)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f003 0308 	and.w	r3, r3, #8
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d008      	beq.n	800b8fc <_nx_ip_interface_status_check+0x74>
        {

            /* Check for ARP being enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	@ 0x6ec
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <_nx_ip_interface_status_check+0x74>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_ARP_ENABLED;
 800b8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f6:	f043 0308 	orr.w	r3, r3, #8
 800b8fa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        if (needed_status & NX_IP_RARP_COMPLETE)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00f      	beq.n	800b926 <_nx_ip_interface_status_check+0x9e>
        {

            /* This is effectively the same as the IP address resolved...  */

            /* Check for a non-zero IP address.  */
            if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_ip_address)
 800b906:	68f9      	ldr	r1, [r7, #12]
 800b908:	68ba      	ldr	r2, [r7, #8]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	011b      	lsls	r3, r3, #4
 800b912:	440b      	add	r3, r1
 800b914:	f503 63e7 	add.w	r3, r3, #1848	@ 0x738
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d003      	beq.n	800b926 <_nx_ip_interface_status_check+0x9e>
            {

                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_RARP_COMPLETE;
 800b91e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b924:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        if (needed_status & NX_IP_IGMP_ENABLED)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d008      	beq.n	800b942 <_nx_ip_interface_status_check+0xba>
        {

            /* Check for IGMP being enabled.  */
            if (ip_ptr -> nx_ip_igmp_packet_receive)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8d3 3358 	ldr.w	r3, [r3, #856]	@ 0x358
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <_nx_ip_interface_status_check+0xba>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_IGMP_ENABLED;
 800b93a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b93c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b940:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        if (needed_status & NX_IP_LINK_ENABLED)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d04b      	beq.n	800b9e4 <_nx_ip_interface_status_check+0x15c>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b952:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800b956:	4618      	mov	r0, r3
 800b958:	f005 fa2c 	bl	8010db4 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 800b960:	230a      	movs	r3, #10
 800b962:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	4613      	mov	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	011b      	lsls	r3, r3, #4
 800b974:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	4413      	add	r3, r2
 800b97c:	3304      	adds	r3, #4
 800b97e:	633b      	str	r3, [r7, #48]	@ 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 800b980:	68f9      	ldr	r1, [r7, #12]
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	4613      	mov	r3, r2
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4413      	add	r3, r2
 800b98a:	011b      	lsls	r3, r3, #4
 800b98c:	440b      	add	r3, r1
 800b98e:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f107 0214 	add.w	r2, r7, #20
 800b998:	4610      	mov	r0, r2
 800b99a:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d013      	beq.n	800b9ca <_nx_ip_interface_status_check+0x142>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	2b44      	cmp	r3, #68	@ 0x44
 800b9a6:	d117      	bne.n	800b9d8 <_nx_ip_interface_status_check+0x150>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 800b9a8:	68f9      	ldr	r1, [r7, #12]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	4613      	mov	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	440b      	add	r3, r1
 800b9b6:	f203 732a 	addw	r3, r3, #1834	@ 0x72a
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00b      	beq.n	800b9d8 <_nx_ip_interface_status_check+0x150>
                    {
                        current_status = current_status | NX_IP_LINK_ENABLED;
 800b9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9c2:	f043 0304 	orr.w	r3, r3, #4
 800b9c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9c8:	e006      	b.n	800b9d8 <_nx_ip_interface_status_check+0x150>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d103      	bne.n	800b9d8 <_nx_ip_interface_status_check+0x150>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_LINK_ENABLED;
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d2:	f043 0304 	orr.w	r3, r3, #4
 800b9d6:	637b      	str	r3, [r7, #52]	@ 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f005 fc60 	bl	80112a4 <_tx_mutex_put>
        }

        if (needed_status &  NX_IP_UDP_ENABLED)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f003 0310 	and.w	r3, r3, #16
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d008      	beq.n	800ba00 <_nx_ip_interface_status_check+0x178>
        {

            /* Check for UDP being enabled.  */
            if (ip_ptr -> nx_ip_udp_packet_receive)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d003      	beq.n	800ba00 <_nx_ip_interface_status_check+0x178>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_UDP_ENABLED;
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fa:	f043 0310 	orr.w	r3, r3, #16
 800b9fe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        if (needed_status & NX_IP_TCP_ENABLED)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f003 0320 	and.w	r3, r3, #32
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d008      	beq.n	800ba1c <_nx_ip_interface_status_check+0x194>
        {

            /* Check for TCP being enabled.  */
            if (ip_ptr -> nx_ip_tcp_packet_receive)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <_nx_ip_interface_status_check+0x194>
            {
                /* Yes, set the appropriate bit in the current status.  */
                current_status =  current_status | NX_IP_TCP_ENABLED;
 800ba14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba16:	f043 0320 	orr.w	r3, r3, #32
 800ba1a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }

        if (needed_status & NX_IP_INTERFACE_LINK_ENABLED)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d04b      	beq.n	800babe <_nx_ip_interface_status_check+0x236>
        {

            /* Get mutex protection.  */
            tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800ba2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ba30:	4618      	mov	r0, r3
 800ba32:	f005 f9bf 	bl	8010db4 <_tx_mutex_get>

            /* Build the driver request structure.  */
            driver_request.nx_ip_driver_ptr =         ip_ptr;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	62fb      	str	r3, [r7, #44]	@ 0x2c
            driver_request.nx_ip_driver_command =     NX_LINK_GET_STATUS;
 800ba3a:	230a      	movs	r3, #10
 800ba3c:	617b      	str	r3, [r7, #20]
            driver_request.nx_ip_driver_return_ptr =  &return_value;
 800ba3e:	f107 0310 	add.w	r3, r7, #16
 800ba42:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_interface  =  &(ip_ptr -> nx_ip_interface[interface_index]);
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	011b      	lsls	r3, r3, #4
 800ba4e:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	4413      	add	r3, r2
 800ba56:	3304      	adds	r3, #4
 800ba58:	633b      	str	r3, [r7, #48]	@ 0x30

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_GET_STATUS, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Call link level driver.  */
            (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_driver_entry)(&driver_request);
 800ba5a:	68f9      	ldr	r1, [r7, #12]
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	011b      	lsls	r3, r3, #4
 800ba66:	440b      	add	r3, r1
 800ba68:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f107 0214 	add.w	r2, r7, #20
 800ba72:	4610      	mov	r0, r2
 800ba74:	4798      	blx	r3

            /* If the driver does not recognize this keyword, we fall back to reading the IP link status.*/
            /*lint -e{644} suppress variable might not be initialized, since "nx_ip_driver_status" was initialized in nx_interface_link_driver_entry. */
            if (driver_request.nx_ip_driver_status != NX_SUCCESS)
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d013      	beq.n	800baa4 <_nx_ip_interface_status_check+0x21c>
            {
                if (driver_request.nx_ip_driver_status == NX_UNHANDLED_COMMAND)
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	2b44      	cmp	r3, #68	@ 0x44
 800ba80:	d117      	bne.n	800bab2 <_nx_ip_interface_status_check+0x22a>
                {
                    if (ip_ptr -> nx_ip_interface[interface_index].nx_interface_link_up)
 800ba82:	68f9      	ldr	r1, [r7, #12]
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	4613      	mov	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	011b      	lsls	r3, r3, #4
 800ba8e:	440b      	add	r3, r1
 800ba90:	f203 732a 	addw	r3, r3, #1834	@ 0x72a
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00b      	beq.n	800bab2 <_nx_ip_interface_status_check+0x22a>
                    {
                        current_status = current_status | NX_IP_INTERFACE_LINK_ENABLED;
 800ba9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800baa0:	637b      	str	r3, [r7, #52]	@ 0x34
 800baa2:	e006      	b.n	800bab2 <_nx_ip_interface_status_check+0x22a>
            else
            {

                /* Check for a link up condition.  */
                /*lint -e{644} suppress variable might not be initialized, since "return_value" was initialized in nx_interface_link_driver_entry. */
                if (return_value == NX_TRUE)
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d103      	bne.n	800bab2 <_nx_ip_interface_status_check+0x22a>
                {

                    /* Yes, set the appropriate bit in the current status.  */
                    current_status =  current_status | NX_IP_INTERFACE_LINK_ENABLED;
 800baaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bab0:	637b      	str	r3, [r7, #52]	@ 0x34
                }
            }

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800bab8:	4618      	mov	r0, r3
 800baba:	f005 fbf3 	bl	80112a4 <_tx_mutex_put>
        }

        /* Determine if current status is the same.  If so, break out
           of this polling loop.  */
        if (current_status == needed_status)
 800babe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d00f      	beq.n	800bae6 <_nx_ip_interface_status_check+0x25e>
        {
            break;
        }

        /* Check for suspension request.  */
        if (wait_option)
 800bac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d00e      	beq.n	800baea <_nx_ip_interface_status_check+0x262>
        {

            /* Decrease the wait time and sleep.  */
            if (wait_option > NX_IP_STATUS_CHECK_WAIT_TIME)
 800bacc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d903      	bls.n	800bada <_nx_ip_interface_status_check+0x252>
            {
                wait_option -= NX_IP_STATUS_CHECK_WAIT_TIME;
 800bad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bad4:	3b01      	subs	r3, #1
 800bad6:	643b      	str	r3, [r7, #64]	@ 0x40
 800bad8:	e001      	b.n	800bade <_nx_ip_interface_status_check+0x256>
            }
            else
            {
                wait_option = 0;
 800bada:	2300      	movs	r3, #0
 800badc:	643b      	str	r3, [r7, #64]	@ 0x40
            }

            /* Sleep for a tick and check again.  */
            tx_thread_sleep(NX_IP_STATUS_CHECK_WAIT_TIME);
 800bade:	2001      	movs	r0, #1
 800bae0:	f006 fb28 	bl	8012134 <_tx_thread_sleep>
        current_status =  0;
 800bae4:	e6d7      	b.n	800b896 <_nx_ip_interface_status_check+0xe>
            break;
 800bae6:	bf00      	nop
 800bae8:	e000      	b.n	800baec <_nx_ip_interface_status_check+0x264>
        }
        else
        {

            /* Get out of the loop.  */
            break;
 800baea:	bf00      	nop
        }
    }

    /* Place the current status in the return destination.  */
    *actual_status =  current_status;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baf0:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_IP_STATUS_CHECK, 0, 0, current_status, 0);

    /* Determine what status to return.  */
    if (needed_status == current_status)
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d101      	bne.n	800bafe <_nx_ip_interface_status_check+0x276>
    {

        /* Return a success.  */
        return(NX_SUCCESS);
 800bafa:	2300      	movs	r3, #0
 800bafc:	e000      	b.n	800bb00 <_nx_ip_interface_status_check+0x278>
    }
    else
    {

        /* Return an error.  */
        return(NX_NOT_SUCCESSFUL);
 800bafe:	2343      	movs	r3, #67	@ 0x43
    }
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3738      	adds	r7, #56	@ 0x38
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <_nx_ip_packet_checksum_compute>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_checksum_compute(NX_PACKET *packet_ptr)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b098      	sub	sp, #96	@ 0x60
 800bb0c:	af02      	add	r7, sp, #8
 800bb0e:	6078      	str	r0, [r7, #4]
ULONG             next_protocol;
UCHAR            *org_prepend_ptr;
ULONG             checksum;
ULONG             val;
UCHAR             is_done = NX_FALSE;
 800bb10:	2300      	movs	r3, #0
 800bb12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
ULONG             ip_header_length;
ULONG             ip_src_addr[4];
ULONG             ip_dst_addr[4];
ULONG             data_length = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Get IP version. */
#ifdef FEATURE_NX_IPV6
    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
    {
#endif
        next_protocol = NX_PROTOCOL_IPV4;
 800bb1a:	2304      	movs	r3, #4
 800bb1c:	657b      	str	r3, [r7, #84]	@ 0x54
        next_protocol = NX_PROTOCOL_IPV6;
    }
#endif

    /* Store original prepend_ptr. */
    org_prepend_ptr = packet_ptr -> nx_packet_prepend_ptr;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Loop to process headers. */
    while (!is_done)
 800bb24:	e170      	b.n	800be08 <_nx_ip_packet_checksum_compute+0x300>
    {
        switch (next_protocol)
 800bb26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	2b10      	cmp	r3, #16
 800bb2c:	f200 8168 	bhi.w	800be00 <_nx_ip_packet_checksum_compute+0x2f8>
 800bb30:	a201      	add	r2, pc, #4	@ (adr r2, 800bb38 <_nx_ip_packet_checksum_compute+0x30>)
 800bb32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb36:	bf00      	nop
 800bb38:	0800bcfb 	.word	0x0800bcfb
 800bb3c:	0800bd5b 	.word	0x0800bd5b
 800bb40:	0800be01 	.word	0x0800be01
 800bb44:	0800bb7d 	.word	0x0800bb7d
 800bb48:	0800be01 	.word	0x0800be01
 800bb4c:	0800bc2d 	.word	0x0800bc2d
 800bb50:	0800be01 	.word	0x0800be01
 800bb54:	0800be01 	.word	0x0800be01
 800bb58:	0800be01 	.word	0x0800be01
 800bb5c:	0800be01 	.word	0x0800be01
 800bb60:	0800be01 	.word	0x0800be01
 800bb64:	0800be01 	.word	0x0800be01
 800bb68:	0800be01 	.word	0x0800be01
 800bb6c:	0800be01 	.word	0x0800be01
 800bb70:	0800be01 	.word	0x0800be01
 800bb74:	0800be01 	.word	0x0800be01
 800bb78:	0800bc97 	.word	0x0800bc97
        {

            /* It's assumed that the IP link driver has positioned the top pointer in the
               packet to the start of the IP address... so that's where we will start.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	63bb      	str	r3, [r7, #56]	@ 0x38

            /* Pick up the first word in the IP header. */
            val = ip_header_ptr -> nx_ip_header_word_0;
 800bb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Convert to host byte order. */
            NX_CHANGE_ULONG_ENDIAN(val);
 800bb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb8a:	ba1b      	rev	r3, r3
 800bb8c:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Obtain IP header length. */
            ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800bb8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb90:	0e1b      	lsrs	r3, r3, #24
 800bb92:	f003 030f 	and.w	r3, r3, #15
 800bb96:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check if IPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb9c:	f003 0301 	and.w	r3, r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d01f      	beq.n	800bbe4 <_nx_ip_packet_checksum_compute+0xdc>
            {

                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                                   /* length is the size of IP header, including options */
                                                   ip_header_length << 2,
 800bba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba6:	009a      	lsls	r2, r3, #2
                checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800bba8:	2300      	movs	r3, #0
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	2300      	movs	r3, #0
 800bbae:	2104      	movs	r1, #4
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7fe fe41 	bl	800a838 <_nx_ip_checksum_compute>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	647b      	str	r3, [r7, #68]	@ 0x44
                                                   /* IPv4 header checksum doesn't care src/dest addresses */
                                                   NULL, NULL);

                val = (ULONG)(~checksum);
 800bbba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbbc:	43db      	mvns	r3, r3
 800bbbe:	637b      	str	r3, [r7, #52]	@ 0x34
                val = val & NX_LOWER_16_MASK;
 800bbc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Convert to network byte order. */
                NX_CHANGE_ULONG_ENDIAN(val);
 800bbc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbc8:	ba1b      	rev	r3, r3
 800bbca:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Now store the checksum in the IP header.  */
                ip_header_ptr -> nx_ip_header_word_2 =  ip_header_ptr -> nx_ip_header_word_2 | val;
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd6:	609a      	str	r2, [r3, #8]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IPV4_TX_CHECKSUM);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbdc:	f023 0201 	bic.w	r2, r3, #1
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	639a      	str	r2, [r3, #56]	@ 0x38
            }


            /* Get src and dst addresses. */
            ip_src_addr[0] = ip_header_ptr -> nx_ip_header_source_ip;
 800bbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	61bb      	str	r3, [r7, #24]
            ip_dst_addr[0] = ip_header_ptr -> nx_ip_header_destination_ip;
 800bbea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	60bb      	str	r3, [r7, #8]
            NX_CHANGE_ULONG_ENDIAN(ip_src_addr[0]);
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	ba1b      	rev	r3, r3
 800bbf4:	61bb      	str	r3, [r7, #24]
            NX_CHANGE_ULONG_ENDIAN(ip_dst_addr[0]);
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	ba1b      	rev	r3, r3
 800bbfa:	60bb      	str	r3, [r7, #8]

            /* Get next protocol. */
            val = ip_header_ptr -> nx_ip_header_word_2;
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	637b      	str	r3, [r7, #52]	@ 0x34
            NX_CHANGE_ULONG_ENDIAN(val);
 800bc02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc04:	ba1b      	rev	r3, r3
 800bc06:	637b      	str	r3, [r7, #52]	@ 0x34
            next_protocol = (val >> 16) & 0xFF;
 800bc08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0a:	0c1b      	lsrs	r3, r3, #16
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Remove IPv4 header. */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + (ip_header_length << 2);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	689a      	ldr	r2, [r3, #8]
 800bc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	441a      	add	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	609a      	str	r2, [r3, #8]
            data_length = packet_ptr -> nx_packet_length - (ip_header_length << 2);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	64fb      	str	r3, [r7, #76]	@ 0x4c
            break;
 800bc2a:	e0ed      	b.n	800be08 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_TCP:
        {

            /* Check if TCP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc30:	f003 0304 	and.w	r3, r3, #4
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d02a      	beq.n	800bc8e <_nx_ip_packet_checksum_compute+0x186>
            {

                /* Calculate the TCP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_TCP,
 800bc38:	f107 0218 	add.w	r2, r7, #24
 800bc3c:	f107 0308 	add.w	r3, r7, #8
 800bc40:	9300      	str	r3, [sp, #0]
 800bc42:	4613      	mov	r3, r2
 800bc44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc46:	2106      	movs	r1, #6
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7fe fdf5 	bl	800a838 <_nx_ip_checksum_compute>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	647b      	str	r3, [r7, #68]	@ 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the TCP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                tcp_header_ptr =  (NX_TCP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	63fb      	str	r3, [r7, #60]	@ 0x3c

                checksum = ~checksum & NX_LOWER_16_MASK;
 800bc58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc5a:	43db      	mvns	r3, r3
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800bc60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	ba1a      	rev	r2, r3
 800bc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc68:	611a      	str	r2, [r3, #16]
                tcp_header_ptr -> nx_tcp_header_word_4 |=  (checksum << NX_SHIFT_BY_16);
 800bc6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc6c:	691a      	ldr	r2, [r3, #16]
 800bc6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc70:	041b      	lsls	r3, r3, #16
 800bc72:	431a      	orrs	r2, r3
 800bc74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc76:	611a      	str	r2, [r3, #16]
                NX_CHANGE_ULONG_ENDIAN(tcp_header_ptr -> nx_tcp_header_word_4);
 800bc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	ba1a      	rev	r2, r3
 800bc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc80:	611a      	str	r2, [r3, #16]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_TCP_TX_CHECKSUM);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc86:	f023 0204 	bic.w	r2, r3, #4
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            break;
 800bc94:	e0b8      	b.n	800be08 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_UDP:
        {

            /* Check if UDP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9a:	f003 0310 	and.w	r3, r3, #16
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d027      	beq.n	800bcf2 <_nx_ip_packet_checksum_compute+0x1ea>
            {

                /* Calculate the UDP checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_PROTOCOL_UDP,
 800bca2:	f107 0218 	add.w	r2, r7, #24
 800bca6:	f107 0308 	add.w	r3, r7, #8
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	4613      	mov	r3, r2
 800bcae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bcb0:	2111      	movs	r1, #17
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7fe fdc0 	bl	800a838 <_nx_ip_checksum_compute>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	647b      	str	r3, [r7, #68]	@ 0x44
                                                    data_length,
                                                    ip_src_addr, ip_dst_addr);

                /* Pickup the pointer to the head of the UDP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800bcc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	ba1a      	rev	r2, r3
 800bcc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcca:	605a      	str	r2, [r3, #4]
                udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | (~checksum & NX_LOWER_16_MASK);
 800bccc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd2:	43db      	mvns	r3, r3
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcda:	605a      	str	r2, [r3, #4]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800bcdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	ba1a      	rev	r2, r3
 800bce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bce4:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcea:	f023 0210 	bic.w	r2, r3, #16
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            break;
 800bcf8:	e086      	b.n	800be08 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_ICMP:
        {

            /* Check if ICMPv4 checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d025      	beq.n	800bd52 <_nx_ip_packet_checksum_compute+0x24a>
            {

                /* Calculate the ICMPv4 checksum without protection.  */
                checksum =  _nx_ip_checksum_compute(packet_ptr, NX_IP_ICMP,
 800bd06:	2300      	movs	r3, #0
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd0e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7fe fd90 	bl	800a838 <_nx_ip_checksum_compute>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	647b      	str	r3, [r7, #68]	@ 0x44
                                                    /* ICMPV4 header checksum doesn't care src/dest addresses */
                                                    NULL, NULL);

                /* Pickup the pointer to the head of the ICMPv4 packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                icmpv4_header_ptr =  (NX_ICMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Move the checksum into header.  */
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 800bd22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	ba1a      	rev	r2, r3
 800bd28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2a:	601a      	str	r2, [r3, #0]
                icmpv4_header_ptr -> nx_icmp_header_word_0 =  icmpv4_header_ptr -> nx_icmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 800bd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd32:	43db      	mvns	r3, r3
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	431a      	orrs	r2, r3
 800bd38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3a:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(icmpv4_header_ptr -> nx_icmp_header_word_0);
 800bd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	ba1a      	rev	r2, r3
 800bd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd44:	601a      	str	r2, [r3, #0]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_ICMPV4_TX_CHECKSUM);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd4a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800bd52:	2301      	movs	r3, #1
 800bd54:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            break;
 800bd58:	e056      	b.n	800be08 <_nx_ip_packet_checksum_compute+0x300>

        case NX_PROTOCOL_IGMP:
        {

            /* Check if IGMP checksum is enabled. */
            if (packet_ptr -> nx_packet_interface_capability_flag  & NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d048      	beq.n	800bdf8 <_nx_ip_packet_checksum_compute+0x2f0>
            {

                /* Pickup the pointer to the head of the IGMP packet.  */
                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                igmp_header_ptr =  (NX_IGMP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 800bd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	ba1a      	rev	r2, r3
 800bd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd74:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 800bd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	ba1a      	rev	r2, r3
 800bd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7e:	605a      	str	r2, [r3, #4]

                /* Calculate the checksum.  */
                val =       igmp_header_ptr -> nx_igmp_header_word_0;
 800bd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	637b      	str	r3, [r7, #52]	@ 0x34
                checksum =  (val >> NX_SHIFT_BY_16);
 800bd86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd88:	0c1b      	lsrs	r3, r3, #16
 800bd8a:	647b      	str	r3, [r7, #68]	@ 0x44
                checksum += (val & NX_LOWER_16_MASK);
 800bd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd92:	4413      	add	r3, r2
 800bd94:	647b      	str	r3, [r7, #68]	@ 0x44
                val =      igmp_header_ptr -> nx_igmp_header_word_1;
 800bd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	637b      	str	r3, [r7, #52]	@ 0x34
                checksum += (val >> NX_SHIFT_BY_16);
 800bd9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd9e:	0c1b      	lsrs	r3, r3, #16
 800bda0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bda2:	4413      	add	r3, r2
 800bda4:	647b      	str	r3, [r7, #68]	@ 0x44
                checksum += (val & NX_LOWER_16_MASK);
 800bda6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdac:	4413      	add	r3, r2
 800bdae:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Add in the carry bits into the checksum.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 800bdb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdb2:	0c1a      	lsrs	r2, r3, #16
 800bdb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	4413      	add	r3, r2
 800bdba:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Do it again in case previous operation generates an overflow.  */
                checksum = (checksum >> NX_SHIFT_BY_16) + (checksum & NX_LOWER_16_MASK);
 800bdbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdbe:	0c1a      	lsrs	r2, r3, #16
 800bdc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	4413      	add	r3, r2
 800bdc6:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Place the checksum into the first header word.  */
                igmp_header_ptr -> nx_igmp_header_word_0 =  igmp_header_ptr -> nx_igmp_header_word_0 | (~checksum & NX_LOWER_16_MASK);
 800bdc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdce:	43db      	mvns	r3, r3
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	431a      	orrs	r2, r3
 800bdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd6:	601a      	str	r2, [r3, #0]

                /* Change the endian.  */
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_0);
 800bdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	ba1a      	rev	r2, r3
 800bdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde0:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(igmp_header_ptr -> nx_igmp_header_word_1);
 800bde2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	ba1a      	rev	r2, r3
 800bde8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdea:	605a      	str	r2, [r3, #4]

                /* Clear checksum flag. */
                packet_ptr -> nx_packet_interface_capability_flag  &= (ULONG)(~NX_INTERFACE_CAPABILITY_IGMP_TX_CHECKSUM);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* No necessary to process next protocol. */
            is_done = NX_TRUE;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            break;
 800bdfe:	e003      	b.n	800be08 <_nx_ip_packet_checksum_compute+0x300>
        }
#endif

        default:
            /* Unsupported protocol. */
            is_done = NX_TRUE;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            break;
 800be06:	bf00      	nop
    while (!is_done)
 800be08:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f43f ae8a 	beq.w	800bb26 <_nx_ip_packet_checksum_compute+0x1e>
        }
    }


    /* Restore origianl prepend_ptr. */
    packet_ptr -> nx_packet_prepend_ptr = org_prepend_ptr;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be16:	609a      	str	r2, [r3, #8]
    return;
 800be18:	bf00      	nop
}
 800be1a:	3758      	adds	r7, #88	@ 0x58
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <_nx_ip_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be2a:	f3ef 8310 	mrs	r3, PRIMASK
 800be2e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800be30:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800be32:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be34:	b672      	cpsid	i
    return(int_posture);
 800be36:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800be38:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if the deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_deferred_received_packet_head)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800be40:	2b00      	cmp	r3, #0
 800be42:	d011      	beq.n	800be68 <_nx_ip_packet_deferred_receive+0x48>
    {

        /* Not empty, just place the packet at the end of the queue.  */
        (ip_ptr -> nx_ip_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2200      	movs	r2, #0
 800be52:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f383 8810 	msr	PRIMASK, r3
}
 800be66:	e019      	b.n	800be9c <_nx_ip_packet_deferred_receive+0x7c>
    {

        /* Empty deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the deferred processing
           queue.  */
        ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
        ip_ptr -> nx_ip_deferred_received_packet_tail =  packet_ptr;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
        packet_ptr -> nx_packet_queue_next =             NX_NULL;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2200      	movs	r2, #0
 800be7c:	61da      	str	r2, [r3, #28]
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f383 8810 	msr	PRIMASK, r3
}
 800be88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the IP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RECEIVE_EVENT, TX_OR);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800be90:	2200      	movs	r2, #0
 800be92:	2108      	movs	r1, #8
 800be94:	4618      	mov	r0, r3
 800be96:	f004 fb2b 	bl	80104f0 <_tx_event_flags_set>
    }
}
 800be9a:	bf00      	nop
 800be9c:	bf00      	nop
 800be9e:	3720      	adds	r7, #32
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <_nx_ip_packet_receive>:
/*                                            added new ip filter,        */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
UCHAR version_byte;


#ifndef NX_DISABLE_IP_INFO
    /* Increment the IP packet count.  */
    ip_ptr -> nx_ip_total_packets_received++;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	69db      	ldr	r3, [r3, #28]
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	61da      	str	r2, [r3, #28]
    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* If packet_ptr -> nx_packet_interface_ptr is not set, stamp the packet with interface[0].
       Legacy Ethernet drivers do not stamp incoming packets. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d104      	bne.n	800beca <_nx_ip_packet_receive+0x26>
    {
        packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[0]);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f203 7224 	addw	r2, r3, #1828	@ 0x724
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    version_byte =  *(packet_ptr -> nx_packet_prepend_ptr);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	73fb      	strb	r3, [r7, #15]

    /* Check the version number */
    ip_version = (version_byte >> 4);
 800bed2:	7bfb      	ldrb	r3, [r7, #15]
 800bed4:	091b      	lsrs	r3, r3, #4
 800bed6:	73bb      	strb	r3, [r7, #14]

    packet_ptr -> nx_packet_ip_version = ip_version;
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	7bba      	ldrb	r2, [r7, #14]
 800bedc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	689a      	ldr	r2, [r3, #8]
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* NX_ENABLE_IP_PACKET_FILTER */

#ifndef NX_DISABLE_IPV4

    /* Process the packet according to IP version. */
    if (ip_version == NX_IP_VERSION_V4 && ip_ptr -> nx_ipv4_packet_receive)
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
 800beea:	2b04      	cmp	r3, #4
 800beec:	d10b      	bne.n	800bf06 <_nx_ip_packet_receive+0x62>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	@ 0x7c4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d006      	beq.n	800bf06 <_nx_ip_packet_receive+0x62>
    {

        /* Call the IPv4 packet handler. */
        (ip_ptr -> nx_ipv4_packet_receive)(ip_ptr, packet_ptr);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 37c4 	ldr.w	r3, [r3, #1988]	@ 0x7c4
 800befe:	6839      	ldr	r1, [r7, #0]
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	4798      	blx	r3
        return;
 800bf04:	e00d      	b.n	800bf22 <_nx_ip_packet_receive+0x7e>
        not defined.  In this case, the packet is reclaimed. */

#ifndef NX_DISABLE_IP_INFO

    /* Increment the IP invalid packet error.  */
    ip_ptr -> nx_ip_invalid_packets++;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Increment the IP receive packets dropped count.  */
    ip_ptr -> nx_ip_receive_packets_dropped++;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf14:	1c5a      	adds	r2, r3, #1
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

    _nx_packet_release(packet_ptr);
 800bf1a:	6838      	ldr	r0, [r7, #0]
 800bf1c:	f001 fbd6 	bl	800d6cc <_nx_packet_release>

    return;
 800bf20:	bf00      	nop
}
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <_nx_ip_packet_send>:
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_packet_send(NX_IP *ip_ptr, NX_PACKET *packet_ptr,
                         ULONG destination_ip, ULONG type_of_service, ULONG time_to_live,
                         ULONG protocol, ULONG fragment, ULONG next_hop_address)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b088      	sub	sp, #32
 800bf2c:	af04      	add	r7, sp, #16
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_IP_INFO

    /* Increment the total send requests counter.  */
    ip_ptr -> nx_ip_total_packet_send_requests++;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	1c5a      	adds	r2, r3, #1
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	611a      	str	r2, [r3, #16]
#endif

    /* Make sure the packet interface is set. */
    if (packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL)
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d114      	bne.n	800bf72 <_nx_ip_packet_send+0x4a>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_transmit_packets++;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* !NX_DISABLE_IP_INFO */

        /* Prepend the IP header to the packet.  First, make room for the IP header.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_IPV4_HEADER);
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	f1a3 0214 	sub.w	r2, r3, #20
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	609a      	str	r2, [r3, #8]

        /* Increase the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_IPV4_HEADER);
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf62:	f103 0214 	add.w	r2, r3, #20
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Release the packet.  */
        _nx_packet_transmit_release(packet_ptr);
 800bf6a:	68b8      	ldr	r0, [r7, #8]
 800bf6c:	f001 fc66 	bl	800d83c <_nx_packet_transmit_release>

        /* Return... nothing more can be done!  */
        return;
 800bf70:	e03b      	b.n	800bfea <_nx_ip_packet_send+0xc2>
    if (!is_hw_processed)
#endif /* NX_IPSEC_ENABLE  */
    {

        /* Add the IP Header to the packet.  */
        _nx_ip_header_add(ip_ptr, packet_ptr, packet_ptr -> nx_packet_ip_interface -> nx_interface_ip_address,
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf76:	695a      	ldr	r2, [r3, #20]
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	9303      	str	r3, [sp, #12]
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	9302      	str	r3, [sp, #8]
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	68b9      	ldr	r1, [r7, #8]
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f7ff fad3 	bl	800b538 <_nx_ip_header_add>
    }

#endif

    /* If the next hop address is null, indicates the specified interface is unreached.  */
    if (next_hop_address == 0)
 800bf92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d120      	bne.n	800bfda <_nx_ip_packet_send+0xb2>
    {

        /* Check whether the forward feature is enabled.  */
        if (ip_ptr -> nx_ip_forward_packet_process)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00b      	beq.n	800bfba <_nx_ip_packet_send+0x92>
        {

            /* Initialize the interface.  */
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	631a      	str	r2, [r3, #48]	@ 0x30

            /* Figure out the best interface to send the packet on. */
            _nx_ip_route_find(ip_ptr, destination_ip, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr, &next_hop_address);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfb2:	6879      	ldr	r1, [r7, #4]
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 f82d 	bl	800c014 <_nx_ip_route_find>
        }

        /* Make sure the packet interface and next hop address are set. */
        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        if ((packet_ptr -> nx_packet_address.nx_packet_interface_ptr == NX_NULL) || (next_hop_address == 0))
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d002      	beq.n	800bfc8 <_nx_ip_packet_send+0xa0>
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d108      	bne.n	800bfda <_nx_ip_packet_send+0xb2>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_transmit_packets++;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* !NX_DISABLE_IP_INFO */

            /* Release the packet.  */
            _nx_packet_transmit_release(packet_ptr);
 800bfd2:	68b8      	ldr	r0, [r7, #8]
 800bfd4:	f001 fc32 	bl	800d83c <_nx_packet_transmit_release>

            /* Return... nothing more can be done!  */
            return;
 800bfd8:	e007      	b.n	800bfea <_nx_ip_packet_send+0xc2>
        }
    }

    /* Directly send the packet.  */
    _nx_ip_driver_packet_send(ip_ptr, packet_ptr, destination_ip, fragment, next_hop_address);
 800bfda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	6a3b      	ldr	r3, [r7, #32]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	68b9      	ldr	r1, [r7, #8]
 800bfe4:	68f8      	ldr	r0, [r7, #12]
 800bfe6:	f7fe ffbe 	bl	800af66 <_nx_ip_driver_packet_send>
}
 800bfea:	3710      	adds	r7, #16
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <_nx_ip_periodic_timer_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_periodic_timer_entry(ULONG ip_address)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup IP pointer.  */
    NX_TIMER_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_address)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	60fb      	str	r3, [r7, #12]

    /* Wakeup this IP's helper thread.  */
    tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_PERIODIC_EVENT, TX_OR);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800c002:	2200      	movs	r2, #0
 800c004:	2101      	movs	r1, #1
 800c006:	4618      	mov	r0, r3
 800c008:	f004 fa72 	bl	80104f0 <_tx_event_flags_set>
}
 800c00c:	bf00      	nop
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <_nx_ip_route_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _nx_ip_route_find(NX_IP *ip_ptr, ULONG destination_address, NX_INTERFACE **ip_interface_ptr, ULONG *next_hop_address)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	60f8      	str	r0, [r7, #12]
 800c01c:	60b9      	str	r1, [r7, #8]
 800c01e:	607a      	str	r2, [r7, #4]
 800c020:	603b      	str	r3, [r7, #0]

NX_INTERFACE *interface_ptr;
ULONG         i;

    /* Initialize the next hop address. */
    *next_hop_address = 0;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2200      	movs	r2, #0
 800c026:	601a      	str	r2, [r3, #0]

    /* Determine if the destination_address is multicast or directed broadcast. */
    if (((destination_address & NX_IP_CLASS_D_MASK) == NX_IP_CLASS_D_TYPE) ||
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c02e:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800c032:	d003      	beq.n	800c03c <_nx_ip_route_find+0x28>
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c03a:	d133      	bne.n	800c0a4 <_nx_ip_route_find+0x90>
        (destination_address  == NX_IP_LIMITED_BROADCAST))
    {

        *next_hop_address = destination_address;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	68ba      	ldr	r2, [r7, #8]
 800c040:	601a      	str	r2, [r3, #0]

        /* If the caller did not set the ip_interface value, find a link enabled 
           interface, starting with the primary interface, for transmission.  */
        if (*ip_interface_ptr == NX_NULL)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d123      	bne.n	800c092 <_nx_ip_route_find+0x7e>
        {

            /* Find an interface whose link is up. */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c04a:	2300      	movs	r3, #0
 800c04c:	617b      	str	r3, [r7, #20]
 800c04e:	e01c      	b.n	800c08a <_nx_ip_route_find+0x76>
            {

                if (ip_ptr -> nx_ip_interface[i].nx_interface_link_up)
 800c050:	68f9      	ldr	r1, [r7, #12]
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	4613      	mov	r3, r2
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	011b      	lsls	r3, r3, #4
 800c05c:	440b      	add	r3, r1
 800c05e:	f203 732a 	addw	r3, r3, #1834	@ 0x72a
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00d      	beq.n	800c084 <_nx_ip_route_find+0x70>
                {
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	4613      	mov	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4413      	add	r3, r2
 800c070:	011b      	lsls	r3, r3, #4
 800c072:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800c076:	68fa      	ldr	r2, [r7, #12]
 800c078:	4413      	add	r3, r2
 800c07a:	1d1a      	adds	r2, r3, #4
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	601a      	str	r2, [r3, #0]
                    return(NX_SUCCESS);
 800c080:	2300      	movs	r3, #0
 800c082:	e141      	b.n	800c308 <_nx_ip_route_find+0x2f4>
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	3301      	adds	r3, #1
 800c088:	617b      	str	r3, [r7, #20]
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d0df      	beq.n	800c050 <_nx_ip_route_find+0x3c>
 800c090:	e006      	b.n	800c0a0 <_nx_ip_route_find+0x8c>
                }
            }
        }
        /* If the specified interface is up, return success. */
        else if ((*ip_interface_ptr) -> nx_interface_link_up)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	799b      	ldrb	r3, [r3, #6]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d001      	beq.n	800c0a0 <_nx_ip_route_find+0x8c>
        {
            return(NX_SUCCESS);
 800c09c:	2300      	movs	r3, #0
 800c09e:	e133      	b.n	800c308 <_nx_ip_route_find+0x2f4>
        }

        /* No available interface. */
        return(NX_IP_ADDRESS_ERROR);
 800c0a0:	2321      	movs	r3, #33	@ 0x21
 800c0a2:	e131      	b.n	800c308 <_nx_ip_route_find+0x2f4>
    }

    /* Search through the interfaces associated with the IP instance,
       check if the the destination address is one of the local interface addresses. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	e02b      	b.n	800c102 <_nx_ip_route_find+0xee>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800c0aa:	697a      	ldr	r2, [r7, #20]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	011b      	lsls	r3, r3, #4
 800c0b4:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	3304      	adds	r3, #4
 800c0be:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	791b      	ldrb	r3, [r3, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d019      	beq.n	800c0fc <_nx_ip_route_find+0xe8>
            (interface_ptr -> nx_interface_link_up) &&
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d015      	beq.n	800c0fc <_nx_ip_route_find+0xe8>
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	695b      	ldr	r3, [r3, #20]
            (interface_ptr -> nx_interface_link_up) &&
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d110      	bne.n	800c0fc <_nx_ip_route_find+0xe8>
            ((*ip_interface_ptr == NX_NULL) ||
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
            (interface_ptr -> nx_interface_ip_address == destination_address) &&
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d004      	beq.n	800c0ec <_nx_ip_route_find+0xd8>
             (*ip_interface_ptr == interface_ptr)))
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
            ((*ip_interface_ptr == NX_NULL) ||
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d107      	bne.n	800c0fc <_nx_ip_route_find+0xe8>
        {

            /* Yes, use the entry information for interface and next hop. */
            *ip_interface_ptr = interface_ptr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	693a      	ldr	r2, [r7, #16]
 800c0f0:	601a      	str	r2, [r3, #0]
            *next_hop_address = destination_address;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	e105      	b.n	800c308 <_nx_ip_route_find+0x2f4>
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	3301      	adds	r3, #1
 800c100:	617b      	str	r3, [r7, #20]
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d0d0      	beq.n	800c0aa <_nx_ip_route_find+0x96>

#endif /* NX_ENABLE_IP_STATIC_ROUTING */

    /* Search through the interfaces associated with the IP instance,
       check if the entry exists. */
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800c108:	2300      	movs	r3, #0
 800c10a:	617b      	str	r3, [r7, #20]
 800c10c:	e037      	b.n	800c17e <_nx_ip_route_find+0x16a>
    {

        /* Use a local variable for convenience. */
        interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	4613      	mov	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	011b      	lsls	r3, r3, #4
 800c118:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	3304      	adds	r3, #4
 800c122:	613b      	str	r3, [r7, #16]

        /* Check for a valid interface that maps onto the same network domain as the destination address. */
        if ((interface_ptr -> nx_interface_valid) &&
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	791b      	ldrb	r3, [r3, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d025      	beq.n	800c178 <_nx_ip_route_find+0x164>
            (interface_ptr -> nx_interface_link_up) &&
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	799b      	ldrb	r3, [r3, #6]
        if ((interface_ptr -> nx_interface_valid) &&
 800c130:	2b00      	cmp	r3, #0
 800c132:	d021      	beq.n	800c178 <_nx_ip_route_find+0x164>
            ((interface_ptr -> nx_interface_ip_network_mask & destination_address) == interface_ptr -> nx_interface_ip_network))
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	699a      	ldr	r2, [r3, #24]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	401a      	ands	r2, r3
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	69db      	ldr	r3, [r3, #28]
            (interface_ptr -> nx_interface_link_up) &&
 800c140:	429a      	cmp	r2, r3
 800c142:	d119      	bne.n	800c178 <_nx_ip_route_find+0x164>
        {

            /* Yes, use the entry information for interface and next hop. */
            if (*ip_interface_ptr == NX_NULL)
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d103      	bne.n	800c154 <_nx_ip_route_find+0x140>
            {
                *ip_interface_ptr = interface_ptr;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	e00b      	b.n	800c16c <_nx_ip_route_find+0x158>
            }
            /* Match loopback interface.  */
            /* Suppress constant value, since "NX_MAX_IP_INTERFACES" can be redefined. */
#if (NX_MAX_IP_INTERFACES == (NX_MAX_PHYSICAL_INTERFACES + 1))
            else if (i == NX_MAX_PHYSICAL_INTERFACES)
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d103      	bne.n	800c162 <_nx_ip_route_find+0x14e>
            {
                *ip_interface_ptr = interface_ptr;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	e004      	b.n	800c16c <_nx_ip_route_find+0x158>
            }
#endif
            else if (*ip_interface_ptr != interface_ptr)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d104      	bne.n	800c176 <_nx_ip_route_find+0x162>
            {
                continue;
            }

            *next_hop_address = destination_address;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800c172:	2300      	movs	r3, #0
 800c174:	e0c8      	b.n	800c308 <_nx_ip_route_find+0x2f4>
                continue;
 800c176:	bf00      	nop
    for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	3301      	adds	r3, #1
 800c17c:	617b      	str	r3, [r7, #20]
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2b01      	cmp	r3, #1
 800c182:	d9c4      	bls.n	800c10e <_nx_ip_route_find+0xfa>
        }
    }

    /* Search the interfaces for IPv4 Link-Local Address according to RFC3927, section2.6.  */
    /* Determine if destination addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if ((destination_address & 0xFFFF0000) == 0xA9FE0000)
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	0c1b      	lsrs	r3, r3, #16
 800c188:	041b      	lsls	r3, r3, #16
 800c18a:	4a62      	ldr	r2, [pc, #392]	@ (800c314 <_nx_ip_route_find+0x300>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d144      	bne.n	800c21a <_nx_ip_route_find+0x206>
    {

        /* Yes, check if the interface is set.  */
        if (*ip_interface_ptr)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00e      	beq.n	800c1b6 <_nx_ip_route_find+0x1a2>
        {

            /* Determine if the interface is valid.  */
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	791b      	ldrb	r3, [r3, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d03b      	beq.n	800c21a <_nx_ip_route_find+0x206>
                ((*ip_interface_ptr) -> nx_interface_link_up))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	799b      	ldrb	r3, [r3, #6]
            if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d036      	beq.n	800c21a <_nx_ip_route_find+0x206>
            {

                /* Set the next hop address.  */
                *next_hop_address = destination_address;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e0a8      	b.n	800c308 <_nx_ip_route_find+0x2f4>
        }
        else
        {

            /* Search through the interfaces associated with the IP instance, set the inteface as first valid interface.  */
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	617b      	str	r3, [r7, #20]
 800c1ba:	e02b      	b.n	800c214 <_nx_ip_route_find+0x200>
            {

                /* Check for a valid interface that the address is link-local address.  */
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800c1bc:	68f9      	ldr	r1, [r7, #12]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	011b      	lsls	r3, r3, #4
 800c1c8:	440b      	add	r3, r1
 800c1ca:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d01c      	beq.n	800c20e <_nx_ip_route_find+0x1fa>
                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_up))
 800c1d4:	68f9      	ldr	r1, [r7, #12]
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	011b      	lsls	r3, r3, #4
 800c1e0:	440b      	add	r3, r1
 800c1e2:	f203 732a 	addw	r3, r3, #1834	@ 0x72a
 800c1e6:	781b      	ldrb	r3, [r3, #0]
                if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) &&
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d010      	beq.n	800c20e <_nx_ip_route_find+0x1fa>
                {

                    /* Yes, use the entry information for interface and next hop. */
                    *ip_interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	011b      	lsls	r3, r3, #4
 800c1f6:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	1d1a      	adds	r2, r3, #4
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	601a      	str	r2, [r3, #0]
                    *next_hop_address = destination_address;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	601a      	str	r2, [r3, #0]

                    return(NX_SUCCESS);
 800c20a:	2300      	movs	r3, #0
 800c20c:	e07c      	b.n	800c308 <_nx_ip_route_find+0x2f4>
            for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	3301      	adds	r3, #1
 800c212:	617b      	str	r3, [r7, #20]
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	2b01      	cmp	r3, #1
 800c218:	d9d0      	bls.n	800c1bc <_nx_ip_route_find+0x1a8>
            }
        }
    }

    /* Does the IP instance have a gateway? */
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d02b      	beq.n	800c27a <_nx_ip_route_find+0x266>
        (ip_ptr -> nx_ip_gateway_interface) &&
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	68db      	ldr	r3, [r3, #12]
    if ((ip_ptr -> nx_ip_gateway_address) &&
 800c226:	2b00      	cmp	r3, #0
 800c228:	d027      	beq.n	800c27a <_nx_ip_route_find+0x266>
        (ip_ptr -> nx_ip_gateway_interface -> nx_interface_link_up))
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	799b      	ldrb	r3, [r3, #6]
        (ip_ptr -> nx_ip_gateway_interface) &&
 800c230:	2b00      	cmp	r3, #0
 800c232:	d022      	beq.n	800c27a <_nx_ip_route_find+0x266>
    {

        /* Get the interface. */
        interface_ptr = ip_ptr -> nx_ip_gateway_interface;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	613b      	str	r3, [r7, #16]

        /* Yes, is gateway address still reachable? */
        if (interface_ptr -> nx_interface_ip_network !=
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	69da      	ldr	r2, [r3, #28]
            (ip_ptr -> nx_ip_gateway_address &
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	6899      	ldr	r1, [r3, #8]
             interface_ptr -> nx_interface_ip_network_mask))
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	699b      	ldr	r3, [r3, #24]
            (ip_ptr -> nx_ip_gateway_address &
 800c246:	400b      	ands	r3, r1
        if (interface_ptr -> nx_interface_ip_network !=
 800c248:	429a      	cmp	r2, r3
 800c24a:	d001      	beq.n	800c250 <_nx_ip_route_find+0x23c>
        {
            return(NX_IP_ADDRESS_ERROR);
 800c24c:	2321      	movs	r3, #33	@ 0x21
 800c24e:	e05b      	b.n	800c308 <_nx_ip_route_find+0x2f4>
        }

        /* Use the gateway as default. */
        if (*ip_interface_ptr == NX_NULL)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d103      	bne.n	800c260 <_nx_ip_route_find+0x24c>
        {
            *ip_interface_ptr = interface_ptr;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e006      	b.n	800c26e <_nx_ip_route_find+0x25a>
        }
        else if (*ip_interface_ptr != interface_ptr)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	693a      	ldr	r2, [r7, #16]
 800c266:	429a      	cmp	r2, r3
 800c268:	d001      	beq.n	800c26e <_nx_ip_route_find+0x25a>
        {
            return(NX_IP_ADDRESS_ERROR);
 800c26a:	2321      	movs	r3, #33	@ 0x21
 800c26c:	e04c      	b.n	800c308 <_nx_ip_route_find+0x2f4>
        }

        *next_hop_address = ip_ptr -> nx_ip_gateway_address;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	689a      	ldr	r2, [r3, #8]
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	601a      	str	r2, [r3, #0]

        return(NX_SUCCESS);
 800c276:	2300      	movs	r3, #0
 800c278:	e046      	b.n	800c308 <_nx_ip_route_find+0x2f4>
    }

    /* Determine if source addrss is link-local address(169.254/16 Hexadecimal:0xA9FE0000).  */
    if (*ip_interface_ptr)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d016      	beq.n	800c2b0 <_nx_ip_route_find+0x29c>
    {

        /* Determine if the interface is valid and the address of interface is link-local address.  */
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	791b      	ldrb	r3, [r3, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d03c      	beq.n	800c306 <_nx_ip_route_find+0x2f2>
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	799b      	ldrb	r3, [r3, #6]
        if (((*ip_interface_ptr) -> nx_interface_valid) &&
 800c292:	2b00      	cmp	r3, #0
 800c294:	d037      	beq.n	800c306 <_nx_ip_route_find+0x2f2>
            (((*ip_interface_ptr) -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	0c1b      	lsrs	r3, r3, #16
 800c29e:	041b      	lsls	r3, r3, #16
            ((*ip_interface_ptr) -> nx_interface_link_up) &&
 800c2a0:	4a1c      	ldr	r2, [pc, #112]	@ (800c314 <_nx_ip_route_find+0x300>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d12f      	bne.n	800c306 <_nx_ip_route_find+0x2f2>
        {

            /* Set the next hop address.  */
            *next_hop_address = destination_address;
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	601a      	str	r2, [r3, #0]

            return(NX_SUCCESS);
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	e02b      	b.n	800c308 <_nx_ip_route_find+0x2f4>
    else
    {

        /* Search through the interfaces associated with the IP instance,
           check if interface is valid and the address of interface is link-local address. */
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	617b      	str	r3, [r7, #20]
 800c2b4:	e024      	b.n	800c300 <_nx_ip_route_find+0x2ec>
        {

            /* Use a local variable for convenience. */
            interface_ptr = &(ip_ptr -> nx_ip_interface[i]);
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	009b      	lsls	r3, r3, #2
 800c2bc:	4413      	add	r3, r2
 800c2be:	011b      	lsls	r3, r3, #4
 800c2c0:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	613b      	str	r3, [r7, #16]

            /* Check for a valid interface that the address is link-local address.  */
            if ((interface_ptr -> nx_interface_valid) &&
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	791b      	ldrb	r3, [r3, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d012      	beq.n	800c2fa <_nx_ip_route_find+0x2e6>
                (interface_ptr -> nx_interface_link_up) &&
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	799b      	ldrb	r3, [r3, #6]
            if ((interface_ptr -> nx_interface_valid) &&
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00e      	beq.n	800c2fa <_nx_ip_route_find+0x2e6>
                ((interface_ptr -> nx_interface_ip_address & 0xFFFF0000) == 0xA9FE0000))
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	695b      	ldr	r3, [r3, #20]
 800c2e0:	0c1b      	lsrs	r3, r3, #16
 800c2e2:	041b      	lsls	r3, r3, #16
                (interface_ptr -> nx_interface_link_up) &&
 800c2e4:	4a0b      	ldr	r2, [pc, #44]	@ (800c314 <_nx_ip_route_find+0x300>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d107      	bne.n	800c2fa <_nx_ip_route_find+0x2e6>
            {

                /* Yes, use the entry information for interface and next hop. */
                *ip_interface_ptr = interface_ptr;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	601a      	str	r2, [r3, #0]
                *next_hop_address = destination_address;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	601a      	str	r2, [r3, #0]

                return(NX_SUCCESS);
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	e006      	b.n	800c308 <_nx_ip_route_find+0x2f4>
        for (i = 0; i < NX_MAX_IP_INTERFACES; i++)
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	2b01      	cmp	r3, #1
 800c304:	d9d7      	bls.n	800c2b6 <_nx_ip_route_find+0x2a2>
        }
    }

    /* Cannot find a proper way to transmit this packet.
       Return the error status. */
    return(NX_IP_ADDRESS_ERROR);
 800c306:	2321      	movs	r3, #33	@ 0x21
}
 800c308:	4618      	mov	r0, r3
 800c30a:	371c      	adds	r7, #28
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	a9fe0000 	.word	0xa9fe0000

0800c318 <_nx_ip_thread_entry>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ip_thread_entry(ULONG ip_ptr_value)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b096      	sub	sp, #88	@ 0x58
 800c31c:	af02      	add	r7, sp, #8
 800c31e:	6078      	str	r0, [r7, #4]
NXD_IPV6_ADDRESS *interface_ipv6_address;
#endif /* FEATURE_NX_IPV6 */


    /* Setup IP pointer.  */
    NX_THREAD_EXTENSION_PTR_GET(ip_ptr, NX_IP, ip_ptr_value)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Obtain the IP internal mutex before calling the driver.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800c324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c326:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800c32a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c32e:	4618      	mov	r0, r3
 800c330:	f004 fd40 	bl	8010db4 <_tx_mutex_get>

    /* Set the IP initialization done flag to true.  */
    ip_ptr -> nx_ip_initialize_done =  NX_TRUE;
 800c334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c336:	2201      	movs	r2, #1
 800c338:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170

    /* Loop through all physical interfaces to initialize and enable the hardware. */
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c33c:	2300      	movs	r3, #0
 800c33e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c340:	e071      	b.n	800c426 <_nx_ip_thread_entry+0x10e>
    {

        /* Is this a valid interface with a link driver associated with it? */
        if ((ip_ptr -> nx_ip_interface[i].nx_interface_valid) && (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry))
 800c342:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c344:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	011b      	lsls	r3, r3, #4
 800c34e:	440b      	add	r3, r1
 800c350:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d062      	beq.n	800c420 <_nx_ip_thread_entry+0x108>
 800c35a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c35c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c35e:	4613      	mov	r3, r2
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	4413      	add	r3, r2
 800c364:	011b      	lsls	r3, r3, #4
 800c366:	440b      	add	r3, r1
 800c368:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d056      	beq.n	800c420 <_nx_ip_thread_entry+0x108>
        {

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            /* Clear capability flag first.  */
            ip_ptr -> nx_ip_interface[i].nx_interface_capability_flag = 0;
 800c372:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c374:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c376:	4613      	mov	r3, r2
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	011b      	lsls	r3, r3, #4
 800c37e:	440b      	add	r3, r1
 800c380:	f203 7364 	addw	r3, r3, #1892	@ 0x764
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */


            ip_ptr -> nx_ip_interface[i].nx_interface_link_up = NX_TRUE;
 800c388:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c38a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c38c:	4613      	mov	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	011b      	lsls	r3, r3, #4
 800c394:	440b      	add	r3, r1
 800c396:	f203 732a 	addw	r3, r3, #1834	@ 0x72a
 800c39a:	2201      	movs	r2, #1
 800c39c:	701a      	strb	r2, [r3, #0]

            /* Yes; attach the interface to the device. */
            driver_request.nx_ip_driver_ptr        =  ip_ptr;
 800c39e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3a0:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_command    =  NX_LINK_INTERFACE_ATTACH;
 800c3a2:	2313      	movs	r3, #19
 800c3a4:	613b      	str	r3, [r7, #16]
            driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[i]);
 800c3a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	011b      	lsls	r3, r3, #4
 800c3b0:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800c3b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3b6:	4413      	add	r3, r2
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800c3bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c3be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	011b      	lsls	r3, r3, #4
 800c3c8:	440b      	add	r3, r1
 800c3ca:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f107 0210 	add.w	r2, r7, #16
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
            /* Call the link driver to initialize the hardware. Among other
               responsibilities, the driver is required to provide the
               Maximum Transfer Unit (MTU) for the physical layer. The MTU
               should represent the actual physical layer transfer size
               less the physical layer headers and trailers.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800c3d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3da:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_INITIALIZE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	613b      	str	r3, [r7, #16]
               When an IP instance is created, the first interface (nx_ip_interface[0]) is configured using parameters
               provided in the IP create call.

               When IP thread runs, it invokes the first interface link driver for link initialization.
             */
            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800c3e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c3e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	011b      	lsls	r3, r3, #4
 800c3ec:	440b      	add	r3, r1
 800c3ee:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f107 0210 	add.w	r2, r7, #16
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	4798      	blx	r3

            /* Call the link driver again to enable the interface.  */
            driver_request.nx_ip_driver_ptr =      ip_ptr;
 800c3fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3fe:	62bb      	str	r3, [r7, #40]	@ 0x28
            driver_request.nx_ip_driver_command =  NX_LINK_ENABLE;
 800c400:	2302      	movs	r3, #2
 800c402:	613b      	str	r3, [r7, #16]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_LINK_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800c404:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c406:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c408:	4613      	mov	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4413      	add	r3, r2
 800c40e:	011b      	lsls	r3, r3, #4
 800c410:	440b      	add	r3, r1
 800c412:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f107 0210 	add.w	r2, r7, #16
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
    for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c420:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c422:	3301      	adds	r3, #1
 800c424:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d08a      	beq.n	800c342 <_nx_ip_thread_entry+0x2a>
    /* Loop to process events for this IP instance.  */
    for (;;)
    {

        /* Release the IP internal mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800c42c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c42e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800c432:	4618      	mov	r0, r3
 800c434:	f004 ff36 	bl	80112a4 <_tx_mutex_put>

        /* Pickup IP event flags.  */
        tx_event_flags_get(&(ip_ptr -> nx_ip_events), NX_IP_ALL_EVENTS, TX_OR_CLEAR, &ip_events, TX_WAIT_FOREVER);
 800c438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c43a:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800c43e:	f107 030c 	add.w	r3, r7, #12
 800c442:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c446:	9200      	str	r2, [sp, #0]
 800c448:	2201      	movs	r2, #1
 800c44a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c44e:	f003 ff6d 	bl	801032c <_tx_event_flags_get>

        /* Obtain the IP internal mutex before processing the IP event.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800c452:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c454:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800c458:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c45c:	4618      	mov	r0, r3
 800c45e:	f004 fca9 	bl	8010db4 <_tx_mutex_get>
        }
#endif

        /* Check for an IP receive packet event.  */
        /*lint -e{644} suppress variable might not be initialized, since "ip_events" was initialized by tx_event_flags_get. */
        if (ip_events & NX_IP_RECEIVE_EVENT)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f003 0308 	and.w	r3, r3, #8
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d031      	beq.n	800c4d0 <_nx_ip_thread_entry+0x1b8>
        {

            /* Loop to process all deferred packet requests.  */
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800c46c:	e023      	b.n	800c4b6 <_nx_ip_thread_entry+0x19e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c46e:	f3ef 8310 	mrs	r3, PRIMASK
 800c472:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 800c474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 800c476:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c478:	b672      	cpsid	i
    return(int_posture);
 800c47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
            {

                /* Remove the first packet and process it!  */

                /* Disable interrupts.  */
                TX_DISABLE
 800c47c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Pickup the first packet.  */
                packet_ptr =  ip_ptr -> nx_ip_deferred_received_packet_head;
 800c47e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c480:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800c484:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Move the head pointer to the next packet.  */
                ip_ptr -> nx_ip_deferred_received_packet_head =  packet_ptr -> nx_packet_queue_next;
 800c486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c488:	69da      	ldr	r2, [r3, #28]
 800c48a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c48c:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174

                /* Check for end of deferred processing queue.  */
                if (ip_ptr -> nx_ip_deferred_received_packet_head == NX_NULL)
 800c490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c492:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800c496:	2b00      	cmp	r3, #0
 800c498:	d103      	bne.n	800c4a2 <_nx_ip_thread_entry+0x18a>
                {

                    /* Yes, the queue is empty.  Set the tail pointer to NULL.  */
                    ip_ptr -> nx_ip_deferred_received_packet_tail =  NX_NULL;
 800c49a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c49c:	2200      	movs	r2, #0
 800c49e:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
 800c4a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a8:	f383 8810 	msr	PRIMASK, r3
}
 800c4ac:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call the actual IP packet receive function.  */
                _nx_ip_packet_receive(ip_ptr, packet_ptr);
 800c4ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c4b0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c4b2:	f7ff fcf7 	bl	800bea4 <_nx_ip_packet_receive>
            while (ip_ptr -> nx_ip_deferred_received_packet_head)
 800c4b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4b8:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1d6      	bne.n	800c46e <_nx_ip_thread_entry+0x156>
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_RECEIVE_EVENT);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f023 0308 	bic.w	r3, r3, #8
 800c4c6:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 8133 	beq.w	800c736 <_nx_ip_thread_entry+0x41e>
                continue;
            }
        }

        /* Check for a TCP message event.  */
        if (ip_events & NX_IP_TCP_EVENT)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00c      	beq.n	800c4f4 <_nx_ip_thread_entry+0x1dc>
        {

            /* Process the TCP packet queue.  */
            (ip_ptr -> nx_ip_tcp_queue_process)(ip_ptr);
 800c4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4dc:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	@ 0x4a4
 800c4e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c4e2:	4798      	blx	r3

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_TCP_EVENT);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4ea:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f000 8123 	beq.w	800c73a <_nx_ip_thread_entry+0x422>
                continue;
            }
        }

        /* Check for a fast TCP event.  */
        if (ip_events & NX_IP_FAST_EVENT)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d011      	beq.n	800c522 <_nx_ip_thread_entry+0x20a>
            }

#endif /* FEATURE_NX_IPV6 */

            /* Process the fast TCP processing.  */
            if (ip_ptr -> nx_ip_tcp_fast_periodic_processing)
 800c4fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c500:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d004      	beq.n	800c512 <_nx_ip_thread_entry+0x1fa>
            {
                (ip_ptr -> nx_ip_tcp_fast_periodic_processing)(ip_ptr);
 800c508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c50a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	@ 0x4a0
 800c50e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c510:	4798      	blx	r3
            }

            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_FAST_EVENT);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c518:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 810e 	beq.w	800c73e <_nx_ip_thread_entry+0x426>
                continue;
            }
        }

        /* Check for a periodic events.  */
        if (ip_events & NX_IP_PERIODIC_EVENT)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f003 0301 	and.w	r3, r3, #1
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d039      	beq.n	800c5a0 <_nx_ip_thread_entry+0x288>
        {

#ifndef NX_DISABLE_IPV4
            /* Process the ARP periodic update, if ARP has been enabled.  */
            if (ip_ptr -> nx_ip_arp_periodic_update)
 800c52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c52e:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	@ 0x6ec
 800c532:	2b00      	cmp	r3, #0
 800c534:	d004      	beq.n	800c540 <_nx_ip_thread_entry+0x228>
            {
                (ip_ptr -> nx_ip_arp_periodic_update)(ip_ptr);
 800c536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c538:	f8d3 36ec 	ldr.w	r3, [r3, #1772]	@ 0x6ec
 800c53c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c53e:	4798      	blx	r3
            }

            /* Process the RARP periodic update, if RARP has been enabled.  */
            if (ip_ptr -> nx_ip_rarp_periodic_update)
 800c540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c542:	f8d3 3704 	ldr.w	r3, [r3, #1796]	@ 0x704
 800c546:	2b00      	cmp	r3, #0
 800c548:	d004      	beq.n	800c554 <_nx_ip_thread_entry+0x23c>
            {
                (ip_ptr -> nx_ip_rarp_periodic_update)(ip_ptr);
 800c54a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c54c:	f8d3 3704 	ldr.w	r3, [r3, #1796]	@ 0x704
 800c550:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c552:	4798      	blx	r3
            }

            /* Process IGMP periodic events, if IGMP has been enabled.  */
            if (ip_ptr -> nx_ip_igmp_periodic_processing)
 800c554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c556:	f8d3 335c 	ldr.w	r3, [r3, #860]	@ 0x35c
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d004      	beq.n	800c568 <_nx_ip_thread_entry+0x250>
            {
                (ip_ptr -> nx_ip_igmp_periodic_processing)(ip_ptr);
 800c55e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c560:	f8d3 335c 	ldr.w	r3, [r3, #860]	@ 0x35c
 800c564:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c566:	4798      	blx	r3
            }
#endif /* !NX_DISABLE_IPV4  */

            /* Process IP fragmentation timeouts, if IP fragmenting has been
               enabled.  */
            if (ip_ptr -> nx_ip_fragment_timeout_check)
 800c568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c56a:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d004      	beq.n	800c57c <_nx_ip_thread_entry+0x264>
            {
                (ip_ptr -> nx_ip_fragment_timeout_check)(ip_ptr);
 800c572:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c574:	f8d3 32a8 	ldr.w	r3, [r3, #680]	@ 0x2a8
 800c578:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c57a:	4798      	blx	r3
            }

            /* Process TCP periodic events, if TCP has been enabled.  */
            if (ip_ptr -> nx_ip_tcp_periodic_processing)
 800c57c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c57e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	@ 0x49c
 800c582:	2b00      	cmp	r3, #0
 800c584:	d004      	beq.n	800c590 <_nx_ip_thread_entry+0x278>
            {
                (ip_ptr -> nx_ip_tcp_periodic_processing)(ip_ptr);
 800c586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c588:	f8d3 349c 	ldr.w	r3, [r3, #1180]	@ 0x49c
 800c58c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c58e:	4798      	blx	r3
            }
#endif /* NX_ENABLE_IPV6_PATH_MTU_DISCOVERY */

#endif /* FEATURE_NX_IPV6 */
            /* Determine if there is anything else to do in the loop.  */
            ip_events =  ip_events & ~(NX_IP_PERIODIC_EVENT);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f023 0301 	bic.w	r3, r3, #1
 800c596:	60fb      	str	r3, [r7, #12]
            if (!ip_events)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f000 80d1 	beq.w	800c742 <_nx_ip_thread_entry+0x42a>
        }
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Check for an ARP receive packet event.  */
        if ((ip_events & NX_IP_ARP_REC_EVENT) && (ip_ptr -> nx_ip_arp_queue_process))
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f003 0310 	and.w	r3, r3, #16
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d009      	beq.n	800c5be <_nx_ip_thread_entry+0x2a6>
 800c5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5ac:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d004      	beq.n	800c5be <_nx_ip_thread_entry+0x2a6>
        {

            /* Process the ARP queue.  */
            (ip_ptr -> nx_ip_arp_queue_process)(ip_ptr);
 800c5b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5b6:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	@ 0x6f0
 800c5ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c5bc:	4798      	blx	r3
        }

        /* Check for an RARP receive packet event.  */
        if ((ip_events & NX_IP_RARP_REC_EVENT) && (ip_ptr -> nx_ip_rarp_queue_process))
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f003 0320 	and.w	r3, r3, #32
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d009      	beq.n	800c5dc <_nx_ip_thread_entry+0x2c4>
 800c5c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5ca:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d004      	beq.n	800c5dc <_nx_ip_thread_entry+0x2c4>
        {

            /* Process the RARP queue.  */
            (ip_ptr -> nx_ip_rarp_queue_process)(ip_ptr);
 800c5d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5d4:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800c5d8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c5da:	4798      	blx	r3
        }

        /* Check for an IGMP message event.  */
        if (ip_events & NX_IP_IGMP_EVENT)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d004      	beq.n	800c5f0 <_nx_ip_thread_entry+0x2d8>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_igmp_queue_process)(ip_ptr);
 800c5e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5e8:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 800c5ec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c5ee:	4798      	blx	r3
        }

        /* Check for an IGMP enable event.  */
        if (ip_events & NX_IP_IGMP_ENABLE_EVENT)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d036      	beq.n	800c668 <_nx_ip_thread_entry+0x350>
        {

            /* Call the associated driver for this IP instance to register the "all hosts"
               multicast address.  */
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5fe:	e030      	b.n	800c662 <_nx_ip_thread_entry+0x34a>
            {
                /* Enable the hardware for IGMP for all valid interfaces. */
                if (ip_ptr -> nx_ip_interface[i].nx_interface_valid)
 800c600:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c602:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c604:	4613      	mov	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	011b      	lsls	r3, r3, #4
 800c60c:	440b      	add	r3, r1
 800c60e:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d021      	beq.n	800c65c <_nx_ip_thread_entry+0x344>
                {
                    driver_request.nx_ip_driver_ptr =                    ip_ptr;
 800c618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c61a:	62bb      	str	r3, [r7, #40]	@ 0x28
                    driver_request.nx_ip_driver_command =                NX_LINK_MULTICAST_JOIN;
 800c61c:	2308      	movs	r3, #8
 800c61e:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_physical_address_msw =   NX_IP_MULTICAST_UPPER;
 800c620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c624:	61bb      	str	r3, [r7, #24]
                    /*lint -e{835} -e{845} suppress operating on zero. */
                    driver_request.nx_ip_driver_physical_address_lsw =   NX_IP_MULTICAST_LOWER | (NX_ALL_HOSTS_ADDRESS & NX_IP_MULTICAST_MASK);
 800c626:	4b48      	ldr	r3, [pc, #288]	@ (800c748 <_nx_ip_thread_entry+0x430>)
 800c628:	61fb      	str	r3, [r7, #28]
                    driver_request.nx_ip_driver_interface            =   &(ip_ptr -> nx_ip_interface[i]);
 800c62a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c62c:	4613      	mov	r3, r2
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	011b      	lsls	r3, r3, #4
 800c634:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800c638:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c63a:	4413      	add	r3, r2
 800c63c:	3304      	adds	r3, #4
 800c63e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IO_DRIVER_MULTICAST_JOIN, ip_ptr, 0, 0, 0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

                    (ip_ptr -> nx_ip_interface[i].nx_interface_link_driver_entry)(&driver_request);
 800c640:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c642:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c644:	4613      	mov	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	440b      	add	r3, r1
 800c64e:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f107 0210 	add.w	r2, r7, #16
 800c658:	4610      	mov	r0, r2
 800c65a:	4798      	blx	r3
            for (i = 0; i < NX_MAX_PHYSICAL_INTERFACES; i++)
 800c65c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c65e:	3301      	adds	r3, #1
 800c660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c664:	2b00      	cmp	r3, #0
 800c666:	d0cb      	beq.n	800c600 <_nx_ip_thread_entry+0x2e8>
            }
        }
#endif /* !NX_DISABLE_IPV4  */

        /* Check for an IP unfragment event.  */
        if (ip_events & NX_IP_UNFRAG_EVENT)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f003 0302 	and.w	r3, r3, #2
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d009      	beq.n	800c686 <_nx_ip_thread_entry+0x36e>
        {

            /* Process the IP fragment reassemble, if fragment has been enabled.  */
            if (ip_ptr -> nx_ip_fragment_assembly)
 800c672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c674:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <_nx_ip_thread_entry+0x36e>
            {
                (ip_ptr -> nx_ip_fragment_assembly)(ip_ptr);
 800c67c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c67e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c682:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c684:	4798      	blx	r3
            }
        }

#ifndef NX_DISABLE_IPV4
        /* Check for an ICMP message event.  */
        if (ip_events & NX_IP_ICMP_EVENT)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	f003 0304 	and.w	r3, r3, #4
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d004      	beq.n	800c69a <_nx_ip_thread_entry+0x382>
        {

            /* Process the ICMP packet queue.  */
            (ip_ptr -> nx_ip_icmp_queue_process)(ip_ptr);
 800c690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c692:	f8d3 3370 	ldr.w	r3, [r3, #880]	@ 0x370
 800c696:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c698:	4798      	blx	r3
        }
#endif /* NX_DISABLE_IPV4 */

        /* Check for a deferred processing request from the driver.  */
        if (ip_events & NX_IP_DRIVER_DEFERRED_EVENT)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d034      	beq.n	800c70e <_nx_ip_thread_entry+0x3f6>
        {

            /* Go through each valid interface. */
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6a8:	e02e      	b.n	800c708 <_nx_ip_thread_entry+0x3f0>
            {
                if (ip_ptr -> nx_ip_interface[index].nx_interface_valid)
 800c6aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4413      	add	r3, r2
 800c6b4:	011b      	lsls	r3, r3, #4
 800c6b6:	440b      	add	r3, r1
 800c6b8:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d01f      	beq.n	800c702 <_nx_ip_thread_entry+0x3ea>
                {

                    /* Yes, there is a deferred processing event from the driver. The only valid information
                       fields are the IP pointer and the command.  */
                    driver_request.nx_ip_driver_ptr =        ip_ptr;
 800c6c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6c4:	62bb      	str	r3, [r7, #40]	@ 0x28
                    driver_request.nx_ip_driver_command =    NX_LINK_DEFERRED_PROCESSING;
 800c6c6:	2312      	movs	r3, #18
 800c6c8:	613b      	str	r3, [r7, #16]
                    driver_request.nx_ip_driver_interface  = &(ip_ptr -> nx_ip_interface[index]);
 800c6ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6cc:	4613      	mov	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4413      	add	r3, r2
 800c6d2:	011b      	lsls	r3, r3, #4
 800c6d4:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800c6d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6da:	4413      	add	r3, r2
 800c6dc:	3304      	adds	r3, #4
 800c6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    driver_request.nx_ip_driver_return_ptr = &foo;
 800c6e0:	f107 0308 	add.w	r3, r7, #8
 800c6e4:	627b      	str	r3, [r7, #36]	@ 0x24

                    (ip_ptr -> nx_ip_interface[index].nx_interface_link_driver_entry)(&driver_request);
 800c6e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4413      	add	r3, r2
 800c6f0:	011b      	lsls	r3, r3, #4
 800c6f2:	440b      	add	r3, r1
 800c6f4:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f107 0210 	add.w	r2, r7, #16
 800c6fe:	4610      	mov	r0, r2
 800c700:	4798      	blx	r3
            for (index = 0; index < NX_MAX_PHYSICAL_INTERFACES; index++)
 800c702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c704:	3301      	adds	r3, #1
 800c706:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c708:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d0cd      	beq.n	800c6aa <_nx_ip_thread_entry+0x392>
                }
            }
        }

        /* Check for a deferred TCP cleanup processing request from the driver.  */
        if (ip_events & NX_IP_TCP_CLEANUP_DEFERRED)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d004      	beq.n	800c722 <_nx_ip_thread_entry+0x40a>
        {

            /* Yes, there is a deferred cleanup processing event. Call the TCP deferred cleanup
               processing function.  */
            (ip_ptr -> nx_tcp_deferred_cleanup_check)(ip_ptr);
 800c718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c71a:	f8d3 3720 	ldr.w	r3, [r3, #1824]	@ 0x720
 800c71e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c720:	4798      	blx	r3
        }

        /* Check for a link status change request from the driver.  */
        if (ip_events & NX_IP_LINK_STATUS_EVENT)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f43f ae7f 	beq.w	800c42c <_nx_ip_thread_entry+0x114>
        {

            /* Yes, there is a link status change  event. Call the deferred link status processing function. */
            _nx_ip_deferred_link_status_process(ip_ptr);
 800c72e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c730:	f7fe faac 	bl	800ac8c <_nx_ip_deferred_link_status_process>
 800c734:	e67a      	b.n	800c42c <_nx_ip_thread_entry+0x114>
                continue;
 800c736:	bf00      	nop
 800c738:	e678      	b.n	800c42c <_nx_ip_thread_entry+0x114>
                continue;
 800c73a:	bf00      	nop
 800c73c:	e676      	b.n	800c42c <_nx_ip_thread_entry+0x114>
                continue;
 800c73e:	bf00      	nop
 800c740:	e674      	b.n	800c42c <_nx_ip_thread_entry+0x114>
                continue;
 800c742:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800c744:	e672      	b.n	800c42c <_nx_ip_thread_entry+0x114>
 800c746:	bf00      	nop
 800c748:	5e000001 	.word	0x5e000001

0800c74c <_nx_ipv4_option_process>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_ipv4_option_process(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08a      	sub	sp, #40	@ 0x28
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]

NX_IPV4_HEADER *ip_header_ptr;
UCHAR          *option_ptr;
ULONG           ip_option_length;
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
ULONG           ip_normal_length = 20;
 800c756:	2314      	movs	r3, #20
 800c758:	61bb      	str	r3, [r7, #24]
#endif /* NX_DISABLE_ICMPV4_ERROR_MESSAGE */
UINT            index = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	623b      	str	r3, [r7, #32]
UCHAR           op_type;
UCHAR           op_length;
UCHAR           op_timestamp_offset;
UCHAR           op_timestamp_overflow;
UCHAR           op_timestamp_flags;
UINT            op_timestamp_counter = 0;
 800c75e:	2300      	movs	r3, #0
 800c760:	61fb      	str	r3, [r7, #28]

    /* Set the IPv4 header and IPv4 option pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)(packet_ptr -> nx_packet_prepend_ptr);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	617b      	str	r3, [r7, #20]
    option_ptr = packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	3314      	adds	r3, #20
 800c76e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the IPv4 option length.  */
    ip_option_length = ((((ip_header_ptr -> nx_ip_header_word_0 & NX_IP_LENGTH_MASK) >> 24) - NX_IP_NORMAL_LENGTH) & 0xFF) * (ULONG)sizeof(ULONG);
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	0e1b      	lsrs	r3, r3, #24
 800c776:	f003 030f 	and.w	r3, r3, #15
 800c77a:	3b05      	subs	r3, #5
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	613b      	str	r3, [r7, #16]

    /* Loop to process the IPv4 option.  */
    while (index < ip_option_length)
 800c782:	e0a3      	b.n	800c8cc <_nx_ipv4_option_process+0x180>
    {

        /* Get the option type.  */
        op_type = *option_ptr;
 800c784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	73fb      	strb	r3, [r7, #15]

        /* Process the option type. */
        switch (op_type)
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
 800c78c:	2b44      	cmp	r3, #68	@ 0x44
 800c78e:	d010      	beq.n	800c7b2 <_nx_ipv4_option_process+0x66>
 800c790:	2b44      	cmp	r3, #68	@ 0x44
 800c792:	f300 8082 	bgt.w	800c89a <_nx_ipv4_option_process+0x14e>
 800c796:	2b00      	cmp	r3, #0
 800c798:	d002      	beq.n	800c7a0 <_nx_ipv4_option_process+0x54>
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d002      	beq.n	800c7a4 <_nx_ipv4_option_process+0x58>
                return(NX_FALSE);
            }
            break;
        }
        default:
            break;
 800c79e:	e07c      	b.n	800c89a <_nx_ipv4_option_process+0x14e>
            return(NX_TRUE);
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e099      	b.n	800c8d8 <_nx_ipv4_option_process+0x18c>
            option_ptr++;
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	627b      	str	r3, [r7, #36]	@ 0x24
            index++;
 800c7aa:	6a3b      	ldr	r3, [r7, #32]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	623b      	str	r3, [r7, #32]
            continue;
 800c7b0:	e08c      	b.n	800c8cc <_nx_ipv4_option_process+0x180>
            op_timestamp_counter++;
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	61fb      	str	r3, [r7, #28]
            if (op_timestamp_counter > 1)
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d90b      	bls.n	800c7d6 <_nx_ipv4_option_process+0x8a>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800c7be:	69ba      	ldr	r2, [r7, #24]
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	3302      	adds	r3, #2
 800c7c6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7fd fe67 	bl	800a4a0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	e080      	b.n	800c8d8 <_nx_ipv4_option_process+0x18c>
            op_length = *(option_ptr + 1);
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d8:	785b      	ldrb	r3, [r3, #1]
 800c7da:	73bb      	strb	r3, [r7, #14]
            op_timestamp_offset = *(option_ptr + 2);
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7de:	789b      	ldrb	r3, [r3, #2]
 800c7e0:	737b      	strb	r3, [r7, #13]
            op_timestamp_overflow = (*(option_ptr + 3)) >> 4;
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e4:	3303      	adds	r3, #3
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	091b      	lsrs	r3, r3, #4
 800c7ea:	733b      	strb	r3, [r7, #12]
            op_timestamp_flags = (*(option_ptr + 3)) & 0xF;
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ee:	3303      	adds	r3, #3
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	f003 030f 	and.w	r3, r3, #15
 800c7f6:	72fb      	strb	r3, [r7, #11]
            if ((op_length < 8) || (op_length > 40) || ((op_length % 4) != 0))
 800c7f8:	7bbb      	ldrb	r3, [r7, #14]
 800c7fa:	2b07      	cmp	r3, #7
 800c7fc:	d908      	bls.n	800c810 <_nx_ipv4_option_process+0xc4>
 800c7fe:	7bbb      	ldrb	r3, [r7, #14]
 800c800:	2b28      	cmp	r3, #40	@ 0x28
 800c802:	d805      	bhi.n	800c810 <_nx_ipv4_option_process+0xc4>
 800c804:	7bbb      	ldrb	r3, [r7, #14]
 800c806:	f003 0303 	and.w	r3, r3, #3
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00b      	beq.n	800c828 <_nx_ipv4_option_process+0xdc>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 2));
 800c810:	69ba      	ldr	r2, [r7, #24]
 800c812:	6a3b      	ldr	r3, [r7, #32]
 800c814:	4413      	add	r3, r2
 800c816:	3302      	adds	r3, #2
 800c818:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7fd fe3e 	bl	800a4a0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800c824:	2300      	movs	r3, #0
 800c826:	e057      	b.n	800c8d8 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_offset < 5) || ((op_timestamp_offset % 2) == 0))
 800c828:	7b7b      	ldrb	r3, [r7, #13]
 800c82a:	2b04      	cmp	r3, #4
 800c82c:	d905      	bls.n	800c83a <_nx_ipv4_option_process+0xee>
 800c82e:	7b7b      	ldrb	r3, [r7, #13]
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	b2db      	uxtb	r3, r3
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10b      	bne.n	800c852 <_nx_ipv4_option_process+0x106>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 3));
 800c83a:	69ba      	ldr	r2, [r7, #24]
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	4413      	add	r3, r2
 800c840:	3303      	adds	r3, #3
 800c842:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800c846:	6839      	ldr	r1, [r7, #0]
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7fd fe29 	bl	800a4a0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800c84e:	2300      	movs	r3, #0
 800c850:	e042      	b.n	800c8d8 <_nx_ipv4_option_process+0x18c>
            if (op_timestamp_overflow == 15)
 800c852:	7b3b      	ldrb	r3, [r7, #12]
 800c854:	2b0f      	cmp	r3, #15
 800c856:	d10b      	bne.n	800c870 <_nx_ipv4_option_process+0x124>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800c858:	69ba      	ldr	r2, [r7, #24]
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	4413      	add	r3, r2
 800c85e:	3304      	adds	r3, #4
 800c860:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800c864:	6839      	ldr	r1, [r7, #0]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f7fd fe1a 	bl	800a4a0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800c86c:	2300      	movs	r3, #0
 800c86e:	e033      	b.n	800c8d8 <_nx_ipv4_option_process+0x18c>
            if ((op_timestamp_flags != 0) && (op_timestamp_flags != 1) && (op_timestamp_flags != 3))
 800c870:	7afb      	ldrb	r3, [r7, #11]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d013      	beq.n	800c89e <_nx_ipv4_option_process+0x152>
 800c876:	7afb      	ldrb	r3, [r7, #11]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d010      	beq.n	800c89e <_nx_ipv4_option_process+0x152>
 800c87c:	7afb      	ldrb	r3, [r7, #11]
 800c87e:	2b03      	cmp	r3, #3
 800c880:	d00d      	beq.n	800c89e <_nx_ipv4_option_process+0x152>
                NX_ICMPV4_SEND_PARAMETER_PROBLEM(ip_ptr, packet_ptr, NX_ICMP_ZERO_CODE, (ip_normal_length + index + 4));
 800c882:	69ba      	ldr	r2, [r7, #24]
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	4413      	add	r3, r2
 800c888:	3304      	adds	r3, #4
 800c88a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7fd fe05 	bl	800a4a0 <_nx_icmpv4_send_error_message>
                return(NX_FALSE);
 800c896:	2300      	movs	r3, #0
 800c898:	e01e      	b.n	800c8d8 <_nx_ipv4_option_process+0x18c>
            break;
 800c89a:	bf00      	nop
 800c89c:	e000      	b.n	800c8a0 <_nx_ipv4_option_process+0x154>
            break;
 800c89e:	bf00      	nop
        }

        /* Get the option length.  */
        op_length = *(option_ptr + 1);
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a2:	785b      	ldrb	r3, [r3, #1]
 800c8a4:	73bb      	strb	r3, [r7, #14]

        /* Check for invalid option length.
           RFC 791: The option-length octet counts the option-type octet and the 
           option-length octet as well as the option-data octets.  */
        if ((op_length < 2) || ((index + op_length) > ip_option_length))
 800c8a6:	7bbb      	ldrb	r3, [r7, #14]
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d905      	bls.n	800c8b8 <_nx_ipv4_option_process+0x16c>
 800c8ac:	7bba      	ldrb	r2, [r7, #14]
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d201      	bcs.n	800c8bc <_nx_ipv4_option_process+0x170>
        {
            return(NX_FALSE);
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e00d      	b.n	800c8d8 <_nx_ipv4_option_process+0x18c>
        }

        /* Move to the next top level option. */
        option_ptr += op_length;
 800c8bc:	7bbb      	ldrb	r3, [r7, #14]
 800c8be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8c0:	4413      	add	r3, r2
 800c8c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Update the index.  */
        index += op_length;
 800c8c4:	7bbb      	ldrb	r3, [r7, #14]
 800c8c6:	6a3a      	ldr	r2, [r7, #32]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	623b      	str	r3, [r7, #32]
    while (index < ip_option_length)
 800c8cc:	6a3a      	ldr	r2, [r7, #32]
 800c8ce:	693b      	ldr	r3, [r7, #16]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	f4ff af57 	bcc.w	800c784 <_nx_ipv4_option_process+0x38>
    }

    /* Return NX_TRUE.  */
    return(NX_TRUE);
 800c8d6:	2301      	movs	r3, #1
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3728      	adds	r7, #40	@ 0x28
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <_nx_ipv4_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_ipv4_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b098      	sub	sp, #96	@ 0x60
 800c8e4:	af02      	add	r7, sp, #8
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
NX_INTERFACE   *if_ptr;
NX_UDP_HEADER  *udp_header_ptr;
UINT            dest_port;
UINT            option_processed;
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
UINT            compute_checksum = 1;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	64bb      	str	r3, [r7, #72]	@ 0x48
#endif /* NX_DISABLE_IP_RX_CHECKSUM */

    /* It's assumed that the IP link driver has positioned the top pointer in the
       packet to the start of the IP address... so that's where we will start.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ip_header_ptr = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	653b      	str	r3, [r7, #80]	@ 0x50
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_IP_RECEIVE, ip_ptr, ip_header_ptr -> nx_ip_header_source_ip, packet_ptr, packet_ptr -> nx_packet_length, NX_TRACE_INTERNAL_EVENTS, 0, 0);


    /* Pick up the first word in the IP header. */
    val = ip_header_ptr -> nx_ip_header_word_0;
 800c8f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Convert to host byte order. */
    NX_CHANGE_ULONG_ENDIAN(val);
 800c8fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8fc:	ba1b      	rev	r3, r3
 800c8fe:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Obtain packet length. */
    pkt_length = val & NX_LOWER_16_MASK;
 800c900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c902:	b29b      	uxth	r3, r3
 800c904:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Make sure the IP length matches the packet length.  Some Ethernet devices
       add padding to small packets, which results in a discrepancy between the
       packet length and the IP header length.  */
    if (packet_ptr -> nx_packet_length != pkt_length)
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d066      	beq.n	800c9de <_nx_ipv4_packet_receive+0xfe>
    {

        /* Determine if the packet length is less than the size reported in the IP header.  */
        if (packet_ptr -> nx_packet_length < pkt_length)
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c916:	429a      	cmp	r2, r3
 800c918:	d90d      	bls.n	800c936 <_nx_ipv4_packet_receive+0x56>
            /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c91e:	1c5a      	adds	r2, r3, #1
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

            /* Invalid packet length, just release it.  */
            _nx_packet_release(packet_ptr);
 800c92e:	6838      	ldr	r0, [r7, #0]
 800c930:	f000 fecc 	bl	800d6cc <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800c934:	e233      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Calculate the difference in the length.  */
        delta =  packet_ptr -> nx_packet_length - pkt_length;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c93a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Adjust the packet length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - delta;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c946:	1ad2      	subs	r2, r2, r3
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Adjust the append pointer.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Loop to process adjustment that spans multiple packets.  */
        while (delta)
 800c94c:	e044      	b.n	800c9d8 <_nx_ipv4_packet_receive+0xf8>
        {

            /* Determine if the packet is chained (or still chained after the adjustment).  */
            if (packet_ptr -> nx_packet_last == NX_NULL)
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d107      	bne.n	800c966 <_nx_ipv4_packet_receive+0x86>
            {

                /* No, packet is not chained, simply adjust the append pointer in the packet.  */
                packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	68da      	ldr	r2, [r3, #12]
 800c95a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c95c:	425b      	negs	r3, r3
 800c95e:	441a      	add	r2, r3
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	60da      	str	r2, [r3, #12]

                /* Break out of the loop, since the adjustment is complete.  */
                break;
 800c964:	e03b      	b.n	800c9de <_nx_ipv4_packet_receive+0xfe>
            }

            /* Pickup the pointer to the last packet.  */
            last_packet =  packet_ptr -> nx_packet_last;
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Determine if the amount to adjust is less than the payload in the last packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            if (((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr)) > delta)
 800c96c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	461a      	mov	r2, r3
 800c978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c97a:	4293      	cmp	r3, r2
 800c97c:	d207      	bcs.n	800c98e <_nx_ipv4_packet_receive+0xae>
            {

                /* Yes, simply adjust the append pointer of the last packet in the chain.  */
                /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
                last_packet -> nx_packet_append_ptr =  last_packet -> nx_packet_append_ptr - delta;
 800c97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c980:	68da      	ldr	r2, [r3, #12]
 800c982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c984:	425b      	negs	r3, r3
 800c986:	441a      	add	r2, r3
 800c988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c98a:	60da      	str	r2, [r3, #12]

                /* Get out of the loop, since the adjustment is complete.  */
                break;
 800c98c:	e027      	b.n	800c9de <_nx_ipv4_packet_receive+0xfe>
            }
            else
            {

                /* Adjust the delta by the amount in the last packet.  */
                delta =  delta - ((ULONG)(last_packet -> nx_packet_append_ptr - last_packet -> nx_packet_prepend_ptr));
 800c98e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c990:	68da      	ldr	r2, [r3, #12]
 800c992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	461a      	mov	r2, r3
 800c99a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c99c:	1a9b      	subs	r3, r3, r2
 800c99e:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Find the packet before the last packet.  */
                before_last_packet =  packet_ptr;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	657b      	str	r3, [r7, #84]	@ 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 800c9a4:	e002      	b.n	800c9ac <_nx_ipv4_packet_receive+0xcc>
                {

                    /* Move to the next packet in the chain.  */
                    before_last_packet =  before_last_packet -> nx_packet_next;
 800c9a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	657b      	str	r3, [r7, #84]	@ 0x54
                while (before_last_packet -> nx_packet_next != last_packet)
 800c9ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d1f7      	bne.n	800c9a6 <_nx_ipv4_packet_receive+0xc6>

                /* At this point, we need to release the last packet and adjust the other packet
                   pointers.  */

                /* Ensure the next packet pointer is NULL in what is now the last packet.  */
                before_last_packet -> nx_packet_next =  NX_NULL;
 800c9b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	605a      	str	r2, [r3, #4]

                /* Determine if the packet is still chained.  */
                if (packet_ptr != before_last_packet)
 800c9bc:	683a      	ldr	r2, [r7, #0]
 800c9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d003      	beq.n	800c9cc <_nx_ipv4_packet_receive+0xec>
                {

                    /* Yes, the packet is still chained, setup the last packet pointer.  */
                    packet_ptr -> nx_packet_last =  before_last_packet;
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9c8:	619a      	str	r2, [r3, #24]
 800c9ca:	e002      	b.n	800c9d2 <_nx_ipv4_packet_receive+0xf2>
                }
                else
                {

                    /* The packet is no longer chained, set the last packet pointer to NULL.  */
                    packet_ptr -> nx_packet_last =  NX_NULL;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	619a      	str	r2, [r3, #24]
                }

                /* Release the last packet.   */
                _nx_packet_release(last_packet);
 800c9d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c9d4:	f000 fe7a 	bl	800d6cc <_nx_packet_release>
        while (delta)
 800c9d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1b7      	bne.n	800c94e <_nx_ipv4_packet_receive+0x6e>
        packet_ptr -> nx_packet_append_ptr =  packet_ptr -> nx_packet_append_ptr - delta;
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Get the incoming interface. */
    if_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9e2:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Obtain IP header length. */
    ip_header_length =  (val & NX_IP_LENGTH_MASK) >> 24;
 800c9e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9e6:	0e1b      	lsrs	r3, r3, #24
 800c9e8:	f003 030f 	and.w	r3, r3, #15
 800c9ec:	637b      	str	r3, [r7, #52]	@ 0x34
    /* Check for minimal packet length. The check is done after the endian swapping
       since the compiler may possibly be able to optimize the lookup of
       "nx_packet_length" and therefore reduce the amount of work performing these
       size checks. The endian logic is okay since packets must always have
       payloads greater than the IP header in size.  */
    if ((packet_ptr -> nx_packet_length <= (ip_header_length << 2)) ||
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d902      	bls.n	800ca00 <_nx_ipv4_packet_receive+0x120>
 800c9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9fc:	2b04      	cmp	r3, #4
 800c9fe:	d80d      	bhi.n	800ca1c <_nx_ipv4_packet_receive+0x13c>
        /* Packet is too small!  */

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid packet error.  */
        ip_ptr -> nx_ip_invalid_packets++;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca0e:	1c5a      	adds	r2, r3, #1
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800ca14:	6838      	ldr	r0, [r7, #0]
 800ca16:	f000 fe59 	bl	800d6cc <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800ca1a:	e1c0      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
    }
#endif

#ifdef NX_ENABLE_INTERFACE_CAPABILITY
    if (if_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_IPV4_RX_CHECKSUM)
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca20:	f003 0302 	and.w	r3, r3, #2
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <_nx_ipv4_packet_receive+0x14c>
    {
        compute_checksum = 0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	64bb      	str	r3, [r7, #72]	@ 0x48
    }
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_IP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY)
    if (compute_checksum == 1)
 800ca2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d124      	bne.n	800ca7c <_nx_ipv4_packet_receive+0x19c>
    {


        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
                                           /* length is the size of IP header, including options */
                                           (UINT)(ip_header_length << 2),
 800ca32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca34:	009a      	lsls	r2, r3, #2
        checksum = _nx_ip_checksum_compute(packet_ptr, NX_IP_VERSION_V4,
 800ca36:	2300      	movs	r3, #0
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	2104      	movs	r1, #4
 800ca3e:	6838      	ldr	r0, [r7, #0]
 800ca40:	f7fd fefa 	bl	800a838 <_nx_ip_checksum_compute>
 800ca44:	4603      	mov	r3, r0
 800ca46:	633b      	str	r3, [r7, #48]	@ 0x30
                                           /* IPv4 header checksum doesn't care src/dest addresses */
                                           NULL, NULL);
        checksum =  ~checksum & NX_LOWER_16_MASK;
 800ca48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4a:	43db      	mvns	r3, r3
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Check the checksum again.  */
        if (checksum)
 800ca50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d012      	beq.n	800ca7c <_nx_ipv4_packet_receive+0x19c>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP invalid packet error.  */
            ip_ptr -> nx_ip_invalid_packets++;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca5a:	1c5a      	adds	r2, r3, #1
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Increment the IP checksum error.  */
            ip_ptr -> nx_ip_receive_checksum_errors++;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca64:	1c5a      	adds	r2, r3, #1
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca6e:	1c5a      	adds	r2, r3, #1
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

            /* Checksum error, just release it.  */
            _nx_packet_release(packet_ptr);
 800ca74:	6838      	ldr	r0, [r7, #0]
 800ca76:	f000 fe29 	bl	800d6cc <_nx_packet_release>

            /* The function is complete, just return!  */
            return;
 800ca7a:	e190      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
    /* IP receive checksum processing is disabled... just check for and remove if
       necessary the IP option words.  */

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the IP header.  */
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_0);
 800ca7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	ba1a      	rev	r2, r3
 800ca82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca84:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_1);
 800ca86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	ba1a      	rev	r2, r3
 800ca8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca8e:	605a      	str	r2, [r3, #4]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_word_2);
 800ca90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca92:	689b      	ldr	r3, [r3, #8]
 800ca94:	ba1a      	rev	r2, r3
 800ca96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca98:	609a      	str	r2, [r3, #8]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_source_ip);
 800ca9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca9c:	68db      	ldr	r3, [r3, #12]
 800ca9e:	ba1a      	rev	r2, r3
 800caa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caa2:	60da      	str	r2, [r3, #12]
    NX_CHANGE_ULONG_ENDIAN(ip_header_ptr -> nx_ip_header_destination_ip);
 800caa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	ba1a      	rev	r2, r3
 800caaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800caac:	611a      	str	r2, [r3, #16]
    }
#endif /* NX_ENABLE_SOURCE_ADDRESS_CHECK */

    /* Determine if there are options in the IP header that make the length greater
       than the default length.  */
    if (ip_header_length > NX_IP_NORMAL_LENGTH)
 800caae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab0:	2b05      	cmp	r3, #5
 800cab2:	d949      	bls.n	800cb48 <_nx_ipv4_packet_receive+0x268>
    {

        /* Process the IPv4 option.  */
        option_processed = _nx_ipv4_option_process(ip_ptr, packet_ptr);
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7ff fe48 	bl	800c74c <_nx_ipv4_option_process>
 800cabc:	62f8      	str	r0, [r7, #44]	@ 0x2c

        /* Check the status.  */
        if (option_processed == NX_FALSE)
 800cabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d108      	bne.n	800cad6 <_nx_ipv4_packet_receive+0x1f6>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive packets dropped count.  */
            ip_ptr -> nx_ip_receive_packets_dropped++;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cac8:	1c5a      	adds	r2, r3, #1
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

            /* IPv4 option error, toss the packet!  */
            _nx_packet_release(packet_ptr);
 800cace:	6838      	ldr	r0, [r7, #0]
 800cad0:	f000 fdfc 	bl	800d6cc <_nx_packet_release>

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800cad4:	e163      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Setup a pointer to the last option word.  */
        word_ptr = ((ULONG *)((VOID *)ip_header_ptr)) + ip_header_length - 1;
 800cad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cadc:	3b01      	subs	r3, #1
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cae2:	4413      	add	r3, r2
 800cae4:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Remove the option words prior to handling the IP header.  */
        *word_ptr-- = ip_header_ptr -> nx_ip_header_destination_ip;
 800cae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae8:	1f1a      	subs	r2, r3, #4
 800caea:	62ba      	str	r2, [r7, #40]	@ 0x28
 800caec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800caee:	6912      	ldr	r2, [r2, #16]
 800caf0:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_source_ip;
 800caf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf4:	1f1a      	subs	r2, r3, #4
 800caf6:	62ba      	str	r2, [r7, #40]	@ 0x28
 800caf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cafa:	68d2      	ldr	r2, [r2, #12]
 800cafc:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_2;
 800cafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb00:	1f1a      	subs	r2, r3, #4
 800cb02:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cb04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb06:	6892      	ldr	r2, [r2, #8]
 800cb08:	601a      	str	r2, [r3, #0]
        *word_ptr-- = ip_header_ptr -> nx_ip_header_word_1;
 800cb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb0c:	1f1a      	subs	r2, r3, #4
 800cb0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 800cb10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb12:	6852      	ldr	r2, [r2, #4]
 800cb14:	601a      	str	r2, [r3, #0]
        *word_ptr = (ULONG)(((ip_header_ptr -> nx_ip_header_word_0) & (~NX_IP_LENGTH_MASK)) | NX_IP_VERSION);
 800cb16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f023 439e 	bic.w	r3, r3, #1325400064	@ 0x4f000000
 800cb1e:	f043 428a 	orr.w	r2, r3, #1157627904	@ 0x45000000
 800cb22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb24:	601a      	str	r2, [r3, #0]

        /* Update the ip_header_ptr and the packet and the packet prepend pointer, ip header pointer and length.  */
        /*lint -e{929} -e{740} -e{826} suppress cast from pointer to pointer, since it is necessary  */
        ip_header_ptr =  (NX_IPV4_HEADER *)word_ptr;
 800cb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb28:	653b      	str	r3, [r7, #80]	@ 0x50

        /*lint -e{928} suppress cast from pointer to pointer, since it is necessary  */
        packet_ptr -> nx_packet_prepend_ptr = (UCHAR *)word_ptr;
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb2e:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_ip_header = packet_ptr -> nx_packet_prepend_ptr;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	689a      	ldr	r2, [r3, #8]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	635a      	str	r2, [r3, #52]	@ 0x34
        packet_ptr -> nx_packet_length = packet_ptr -> nx_packet_length - ((ip_header_length -  NX_IP_NORMAL_LENGTH) * (ULONG)sizeof(ULONG));
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb3e:	3b05      	subs	r3, #5
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	1ad2      	subs	r2, r2, r3
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	625a      	str	r2, [r3, #36]	@ 0x24
    }
#endif

    /* Determine if the IP datagram is for this IP address or a broadcast IP on this
       network.  */
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800cb48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb4a:	691a      	ldr	r2, [r3, #16]
 800cb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d02f      	beq.n	800cbb4 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for incoming IP address of zero.  Incoming IP address of zero should
           be received regardless of our current IP address.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800cb54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb56:	691b      	ldr	r3, [r3, #16]
    if ((ip_header_ptr -> nx_ip_header_destination_ip == if_ptr -> nx_interface_ip_address) ||
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d02b      	beq.n	800cbb4 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for IP broadcast.  */
        (((ip_header_ptr -> nx_ip_header_destination_ip & if_ptr -> nx_interface_ip_network_mask) ==
 800cb5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb5e:	691a      	ldr	r2, [r3, #16]
 800cb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb62:	699b      	ldr	r3, [r3, #24]
 800cb64:	401a      	ands	r2, r3
          if_ptr -> nx_interface_ip_network) &&
 800cb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb68:	69db      	ldr	r3, [r3, #28]
        (ip_header_ptr -> nx_ip_header_destination_ip == 0) ||
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d10a      	bne.n	800cb84 <_nx_ipv4_packet_receive+0x2a4>
         ((ip_header_ptr -> nx_ip_header_destination_ip & ~(if_ptr -> nx_interface_ip_network_mask)) ==
 800cb6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb70:	691a      	ldr	r2, [r3, #16]
 800cb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb74:	699b      	ldr	r3, [r3, #24]
 800cb76:	43db      	mvns	r3, r3
 800cb78:	401a      	ands	r2, r3
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	43db      	mvns	r3, r3
          if_ptr -> nx_interface_ip_network) &&
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d017      	beq.n	800cbb4 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for limited broadcast.  */
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800cb84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb86:	691b      	ldr	r3, [r3, #16]
          ~(if_ptr -> nx_interface_ip_network_mask))) ||
 800cb88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb8c:	d012      	beq.n	800cbb4 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for loopback address.  */
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800cb8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb90:	691b      	ldr	r3, [r3, #16]
        (ip_header_ptr -> nx_ip_header_destination_ip == NX_IP_LIMITED_BROADCAST) ||
 800cb92:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800cb96:	d303      	bcc.n	800cba0 <_nx_ipv4_packet_receive+0x2c0>
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800cb98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb9a:	691b      	ldr	r3, [r3, #16]
        ((ip_header_ptr -> nx_ip_header_destination_ip >= NX_IP_LOOPBACK_FIRST) &&
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	da09      	bge.n	800cbb4 <_nx_ipv4_packet_receive+0x2d4>

        /* Check for valid Multicast address.  */
        (_nx_igmp_multicast_check(ip_ptr, ip_header_ptr -> nx_ip_header_destination_ip, if_ptr)))
 800cba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cba2:	691b      	ldr	r3, [r3, #16]
 800cba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7fd fdab 	bl	800a704 <_nx_igmp_multicast_check>
 800cbae:	4603      	mov	r3, r0
         (ip_header_ptr -> nx_ip_header_destination_ip <= NX_IP_LOOPBACK_LAST)) ||
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d076      	beq.n	800cca2 <_nx_ipv4_packet_receive+0x3c2>
    {

        /* Determine if this packet is fragmented.  If so, place it on the deferred processing
           queue.  The input packet will then be processed by an IP system thread.  */
        if (ip_header_ptr -> nx_ip_header_word_1 & NX_IP_FRAGMENT_MASK)
 800cbb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d046      	beq.n	800cc4e <_nx_ipv4_packet_receive+0x36e>
        {

#ifndef NX_DISABLE_IP_INFO

            /* Increment the IP receive fragments count.  */
            ip_ptr -> nx_ip_total_fragments_received++;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbc4:	1c5a      	adds	r2, r3, #1
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	669a      	str	r2, [r3, #104]	@ 0x68
#ifdef NX_ENABLE_LOW_WATERMARK
            if (ip_ptr -> nx_ip_fragment_assembly &&
                (packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_available >=
                 packet_ptr -> nx_packet_pool_owner -> nx_packet_pool_low_watermark))
#else
            if (ip_ptr -> nx_ip_fragment_assembly)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d033      	beq.n	800cc3c <_nx_ipv4_packet_receive+0x35c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbd4:	f3ef 8310 	mrs	r3, PRIMASK
 800cbd8:	617b      	str	r3, [r7, #20]
    return(posture);
 800cbda:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800cbdc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbde:	b672      	cpsid	i
    return(int_posture);
 800cbe0:	693b      	ldr	r3, [r7, #16]

                /* Yes, fragmenting is available.  Place the packet on the incoming
                   fragment queue.  */

                /* Disable interrupts.  */
                TX_DISABLE
 800cbe2:	61bb      	str	r3, [r7, #24]

                /* Determine if the queue is empty.  */
                if (ip_ptr -> nx_ip_received_fragment_head)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00c      	beq.n	800cc08 <_nx_ipv4_packet_receive+0x328>
                {

                    /* Reassembly queue is not empty, add this packet to the end of
                       the queue.  */
                    (ip_ptr -> nx_ip_received_fragment_tail) -> nx_packet_queue_next =  packet_ptr;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	61da      	str	r2, [r3, #28]
                    packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	61da      	str	r2, [r3, #28]
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
 800cc06:	e00a      	b.n	800cc1e <_nx_ipv4_packet_receive+0x33e>
                else
                {

                    /* Reassembly queue is empty.  Just setup the head and tail pointers
                       to point to this packet.  */
                    ip_ptr -> nx_ip_received_fragment_head =  packet_ptr;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	683a      	ldr	r2, [r7, #0]
 800cc0c:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
                    ip_ptr -> nx_ip_received_fragment_tail =  packet_ptr;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
                    packet_ptr -> nx_packet_queue_next =      NX_NULL;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	61da      	str	r2, [r3, #28]
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f383 8810 	msr	PRIMASK, r3
}
 800cc28:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

#ifndef NX_FRAGMENT_IMMEDIATE_ASSEMBLY
                /* Wakeup IP helper thread to process the IP fragment re-assembly.  */
                tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_UNFRAG_EVENT, TX_OR);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800cc30:	2200      	movs	r2, #0
 800cc32:	2102      	movs	r1, #2
 800cc34:	4618      	mov	r0, r3
 800cc36:	f003 fc5b 	bl	80104f0 <_tx_event_flags_set>
                /* Fragmentation has not been enabled, toss the packet!  */
                _nx_packet_release(packet_ptr);
            }

            /* In all cases, receive processing is finished.  Return to caller.  */
            return;
 800cc3a:	e0b0      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
                ip_ptr -> nx_ip_receive_packets_dropped++;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc40:	1c5a      	adds	r2, r3, #1
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	64da      	str	r2, [r3, #76]	@ 0x4c
                _nx_packet_release(packet_ptr);
 800cc46:	6838      	ldr	r0, [r7, #0]
 800cc48:	f000 fd40 	bl	800d6cc <_nx_packet_release>
            return;
 800cc4c:	e0a7      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
        }

        /* Determine what protocol the current IP datagram is.  */
        protocol =  (ip_header_ptr -> nx_ip_header_word_2 >> 16) & 0xFF;
 800cc4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	0c1b      	lsrs	r3, r3, #16
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the IP header from the packet.  */
        packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	f103 0214 	add.w	r2, r3, #20
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	609a      	str	r2, [r3, #8]

        /* Adjust the length.  */
        packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc68:	f1a3 0214 	sub.w	r2, r3, #20
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifndef NX_DISABLE_IP_INFO

        /* Increment the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered++;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	1c5a      	adds	r2, r3, #1
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	621a      	str	r2, [r3, #32]

        /* Increment the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc82:	441a      	add	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	625a      	str	r2, [r3, #36]	@ 0x24
#endif
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800cc88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7fe f85f 	bl	800ad50 <_nx_ip_dispatch_process>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	f000 8082 	beq.w	800cd9e <_nx_ipv4_packet_receive+0x4be>
        {
            _nx_packet_release(packet_ptr);
 800cc9a:	6838      	ldr	r0, [r7, #0]
 800cc9c:	f000 fd16 	bl	800d6cc <_nx_packet_release>
        if (_nx_ip_dispatch_process(ip_ptr, packet_ptr, (UINT)protocol))
 800cca0:	e07d      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
    }
    /* Try to receive the DHCP message before release this packet.
       NetX should receive the unicast DHCP message when interface IP address is zero.  */

    /* Check if this IP interface has IP address.  */
    else if (if_ptr -> nx_interface_ip_address == 0)
 800cca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d15a      	bne.n	800cd60 <_nx_ipv4_packet_receive+0x480>
    {

        /* Determine what protocol the current IP datagram is.  */
        protocol =  ip_header_ptr -> nx_ip_header_word_2 & NX_IP_PROTOCOL_MASK;
 800ccaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ccb2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check if this packet is UDP message.  */
        if (protocol == NX_IP_UDP)
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800ccba:	d137      	bne.n	800cd2c <_nx_ipv4_packet_receive+0x44c>
        {

            /* Remove the IP header from the packet.  */
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr + sizeof(NX_IPV4_HEADER);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	f103 0214 	add.w	r2, r3, #20
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	609a      	str	r2, [r3, #8]

            /* Adjust the length.  */
            packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_IPV4_HEADER);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cccc:	f1a3 0214 	sub.w	r2, r3, #20
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifndef NX_DISABLE_IP_INFO

            /* Increment the number of packets delivered.  */
            ip_ptr -> nx_ip_total_packets_delivered++;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6a1b      	ldr	r3, [r3, #32]
 800ccd8:	1c5a      	adds	r2, r3, #1
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	621a      	str	r2, [r3, #32]

            /* Increment the IP packet bytes received (not including the header).  */
            ip_ptr -> nx_ip_total_bytes_received +=  packet_ptr -> nx_packet_length;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cce6:	441a      	add	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	625a      	str	r2, [r3, #36]	@ 0x24
#endif

            /* Pickup the pointer to the head of the UDP packet.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	623b      	str	r3, [r7, #32]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	ba1a      	rev	r2, r3
 800ccf8:	6a3b      	ldr	r3, [r7, #32]
 800ccfa:	601a      	str	r2, [r3, #0]

            /* Pickup the destination UDP port.  */
            dest_port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800ccfc:	6a3b      	ldr	r3, [r7, #32]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	61fb      	str	r3, [r7, #28]

            /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
               swap the endian of the UDP header.  */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	ba1a      	rev	r2, r3
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	601a      	str	r2, [r3, #0]

            /* Check if this packet is DHCP message.  */
            if (dest_port == 68)
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	2b44      	cmp	r3, #68	@ 0x44
 800cd12:	d10b      	bne.n	800cd2c <_nx_ipv4_packet_receive+0x44c>
            {
                if (ip_ptr -> nx_ip_udp_packet_receive)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d006      	beq.n	800cd2c <_nx_ipv4_packet_receive+0x44c>
                {

                    /* Yes, dispatch it to the appropriate UDP handler if present.  */
                    (ip_ptr -> nx_ip_udp_packet_receive)(ip_ptr, packet_ptr);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	4798      	blx	r3

                    return;
 800cd2a:	e038      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
        }

#ifndef NX_DISABLE_IP_INFO

        /* Decrement the number of packets delivered.  */
        ip_ptr -> nx_ip_total_packets_delivered--;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a1b      	ldr	r3, [r3, #32]
 800cd30:	1e5a      	subs	r2, r3, #1
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	621a      	str	r2, [r3, #32]

        /* Decrement the IP packet bytes received (not including the header).  */
        ip_ptr -> nx_ip_total_bytes_received -=  packet_ptr -> nx_packet_length;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd3e:	1ad2      	subs	r2, r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd48:	1c5a      	adds	r2, r3, #1
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd52:	1c5a      	adds	r2, r3, #1
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800cd58:	6838      	ldr	r0, [r7, #0]
 800cd5a:	f000 fcb7 	bl	800d6cc <_nx_packet_release>

        /* Return to caller.  */
        return;
 800cd5e:	e01e      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
    }
    else if (ip_ptr -> nx_ip_forward_packet_process)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00b      	beq.n	800cd82 <_nx_ipv4_packet_receive+0x4a2>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP packets forwarded counter.  */
        ip_ptr -> nx_ip_packets_forwarded++;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd6e:	1c5a      	adds	r2, r3, #1
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

        /* The packet is not for this IP instance so call the
           forward IP packet processing routine.  */
        (ip_ptr -> nx_ip_forward_packet_process)(ip_ptr, packet_ptr);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800cd7a:	6839      	ldr	r1, [r7, #0]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	4798      	blx	r3
 800cd80:	e00d      	b.n	800cd9e <_nx_ipv4_packet_receive+0x4be>
    {

#ifndef NX_DISABLE_IP_INFO

        /* Increment the IP invalid address error.  */
        ip_ptr -> nx_ip_invalid_receive_address++;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Increment the IP receive packets dropped count.  */
        ip_ptr -> nx_ip_receive_packets_dropped++;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd90:	1c5a      	adds	r2, r3, #1
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

        /* Toss the IP packet since we don't know what to do with it!  */
        _nx_packet_release(packet_ptr);
 800cd96:	6838      	ldr	r0, [r7, #0]
 800cd98:	f000 fc98 	bl	800d6cc <_nx_packet_release>

        /* Return to caller.  */
        return;
 800cd9c:	bf00      	nop
    }
}
 800cd9e:	3758      	adds	r7, #88	@ 0x58
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <_nx_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                          ULONG packet_type, ULONG wait_option)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08c      	sub	sp, #48	@ 0x30
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	603b      	str	r3, [r7, #0]
TX_TRACE_BUFFER_ENTRY *trace_event;
ULONG                  trace_timestamp;
#endif

    /* Make sure the packet_type does not go beyond nx_packet_data_end. */
    if (pool_ptr -> nx_packet_pool_payload_size < packet_type)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d901      	bls.n	800cdc0 <_nx_packet_allocate+0x1c>
    {
        return(NX_INVALID_PARAMETERS);
 800cdbc:	234d      	movs	r3, #77	@ 0x4d
 800cdbe:	e0b1      	b.n	800cf24 <_nx_packet_allocate+0x180>
    }

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cdc6:	f3ef 8310 	mrs	r3, PRIMASK
 800cdca:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cdcc:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cdce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cdd0:	b672      	cpsid	i
    return(int_posture);
 800cdd2:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_ALLOCATE, pool_ptr, 0, packet_type, pool_ptr -> nx_packet_pool_available, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Disable interrupts to get a packet from the pool.  */
    TX_DISABLE
 800cdd4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there is an available packet.  */
    if (pool_ptr -> nx_packet_pool_available)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d03d      	beq.n	800ce5a <_nx_packet_allocate+0xb6>
    {

        /* Yes, a packet is available.  Decrement the available count.  */
        pool_ptr -> nx_packet_pool_available--;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	1e5a      	subs	r2, r3, #1
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	609a      	str	r2, [r3, #8]

        /* Pickup the current packet pointer.  */
        work_ptr =  pool_ptr -> nx_packet_pool_available_list;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	69db      	ldr	r3, [r3, #28]
 800cdec:	623b      	str	r3, [r7, #32]

        /* Modify the available list to point at the next packet in the pool. */
        pool_ptr -> nx_packet_pool_available_list =  work_ptr -> nx_packet_queue_next;
 800cdee:	6a3b      	ldr	r3, [r7, #32]
 800cdf0:	69da      	ldr	r2, [r3, #28]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	61da      	str	r2, [r3, #28]

        /* Setup various fields for this packet.  */
        work_ptr -> nx_packet_queue_next =   NX_NULL;
 800cdf6:	6a3b      	ldr	r3, [r7, #32]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
        work_ptr -> nx_packet_next =         NX_NULL;
 800cdfc:	6a3b      	ldr	r3, [r7, #32]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	605a      	str	r2, [r3, #4]
        work_ptr -> nx_packet_last =         NX_NULL;
 800ce02:	6a3b      	ldr	r3, [r7, #32]
 800ce04:	2200      	movs	r2, #0
 800ce06:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr -> nx_packet_length =       0;
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	625a      	str	r2, [r3, #36]	@ 0x24
        work_ptr -> nx_packet_prepend_ptr =  work_ptr -> nx_packet_data_start + packet_type;
 800ce0e:	6a3b      	ldr	r3, [r7, #32]
 800ce10:	691a      	ldr	r2, [r3, #16]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	441a      	add	r2, r3
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	609a      	str	r2, [r3, #8]
        work_ptr -> nx_packet_append_ptr =   work_ptr -> nx_packet_prepend_ptr;
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	689a      	ldr	r2, [r3, #8]
 800ce1e:	6a3b      	ldr	r3, [r7, #32]
 800ce20:	60da      	str	r2, [r3, #12]
        work_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	2200      	movs	r2, #0
 800ce26:	631a      	str	r2, [r3, #48]	@ 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        work_ptr -> nx_packet_interface_capability_flag = 0;
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
        /* Set the TCP queue to the value that indicates it has been allocated.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        work_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800ce2e:	6a3b      	ldr	r3, [r7, #32]
 800ce30:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800ce34:	621a      	str	r2, [r3, #32]
        work_ptr -> nx_packet_ipsec_sa_ptr = NX_NULL;
#endif /* NX_IPSEC_ENABLE */

#ifndef NX_DISABLE_IPV4
        /* Initialize the IP version field */
        work_ptr -> nx_packet_ip_version = NX_IP_VERSION_V4;
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	2204      	movs	r2, #4
 800ce3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
#endif /* !NX_DISABLE_IPV4  */

        /* Initialize the IP identification flag.  */
        work_ptr -> nx_packet_identical_copy = NX_FALSE;
 800ce3e:	6a3b      	ldr	r3, [r7, #32]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* Initialize the IP header length. */
        work_ptr -> nx_packet_ip_header_length = 0;
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
#ifdef NX_ENABLE_THREAD
        work_ptr -> nx_packet_type = 0;
#endif /* NX_ENABLE_THREAD  */

        /* Place the new packet pointer in the return destination.  */
        *packet_ptr =  work_ptr;
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	6a3a      	ldr	r2, [r7, #32]
 800ce52:	601a      	str	r2, [r3, #0]

        /* Set status to success.  */
        status =  NX_SUCCESS;
 800ce54:	2300      	movs	r3, #0
 800ce56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce58:	e05d      	b.n	800cf16 <_nx_packet_allocate+0x172>
    else
    {

#ifndef NX_DISABLE_PACKET_INFO
        /* Increment the packet pool empty request count.  */
        pool_ptr -> nx_packet_pool_empty_requests++;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	611a      	str	r2, [r3, #16]
#endif

        /* Determine if the request specifies suspension.  */
        if (wait_option)
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d053      	beq.n	800cf12 <_nx_packet_allocate+0x16e>

            /* Prepare for suspension of this thread.  */

#ifndef NX_DISABLE_PACKET_INFO
            /* Increment the packet pool empty request suspension count.  */
            pool_ptr -> nx_packet_pool_empty_suspensions++;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	695b      	ldr	r3, [r3, #20]
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	615a      	str	r2, [r3, #20]
#endif

            /* Pickup thread pointer.  */
            thread_ptr =  _tx_thread_current_ptr;
 800ce74:	4b2d      	ldr	r3, [pc, #180]	@ (800cf2c <_nx_packet_allocate+0x188>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  _nx_packet_pool_cleanup;
 800ce7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7c:	4a2c      	ldr	r2, [pc, #176]	@ (800cf30 <_nx_packet_allocate+0x18c>)
 800ce7e:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this pool control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (void *)pool_ptr;
 800ce80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	66da      	str	r2, [r3, #108]	@ 0x6c

            /* Save the return packet pointer address as well.  */
            thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800ce86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	67da      	str	r2, [r3, #124]	@ 0x7c

            /* Save the packet type (or prepend offset) so this can be added
               after a new packet becomes available.  */
            thread_ptr -> tx_thread_suspend_info =  packet_type;
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	679a      	str	r2, [r3, #120]	@ 0x78

            /* Setup suspension list.  */
            if (pool_ptr -> nx_packet_pool_suspension_list)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d012      	beq.n	800cec0 <_nx_packet_allocate+0x11c>
            {

                /* This list is not NULL, add current thread to the end. */
                thread_ptr -> tx_thread_suspended_next =
                    pool_ptr -> nx_packet_pool_suspension_list;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_next =
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea0:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =
                    (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cea6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_previous =
 800cea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceaa:	675a      	str	r2, [r3, #116]	@ 0x74
                ((pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ceb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceb4:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr;
                (pool_ptr -> nx_packet_pool_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ceba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cebc:	675a      	str	r2, [r3, #116]	@ 0x74
 800cebe:	e008      	b.n	800ced2 <_nx_packet_allocate+0x12e>
            else
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cec4:	62da      	str	r2, [r3, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_next =            thread_ptr;
 800cec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceca:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =        thread_ptr;
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ced0:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            pool_ptr -> nx_packet_pool_suspended_count++;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	631a      	str	r2, [r3, #48]	@ 0x30

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800cedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cede:	220c      	movs	r2, #12
 800cee0:	631a      	str	r2, [r3, #48]	@ 0x30

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee4:	2201      	movs	r2, #1
 800cee6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cee8:	4b12      	ldr	r3, [pc, #72]	@ (800cf34 <_nx_packet_allocate+0x190>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	3301      	adds	r3, #1
 800ceee:	4a11      	ldr	r2, [pc, #68]	@ (800cf34 <_nx_packet_allocate+0x190>)
 800cef0:	6013      	str	r3, [r2, #0]

            /* Save the timeout value.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800cef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef4:	683a      	ldr	r2, [r7, #0]
 800cef6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800cef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cefa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	f383 8810 	msr	PRIMASK, r3
}
 800cf02:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800cf04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf06:	f005 fb3f 	bl	8012588 <_tx_thread_system_suspend>
                NX_PACKET_DEBUG(__FILE__, __LINE__, *packet_ptr);
            }
#endif /* NX_ENABLE_PACKET_DEBUG_INFO */

            /* Return the completion status.  */
            return(thread_ptr -> tx_thread_suspend_status);
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cf10:	e008      	b.n	800cf24 <_nx_packet_allocate+0x180>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  NX_NO_PACKET;
 800cf12:	2301      	movs	r3, #1
 800cf14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	f383 8810 	msr	PRIMASK, r3
}
 800cf20:	bf00      	nop

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_ALLOCATE, 0, *packet_ptr, 0, 0);

    /* Return completion status.  */
    return(status);
 800cf22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3730      	adds	r7, #48	@ 0x30
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	2000ae14 	.word	0x2000ae14
 800cf30:	0800d351 	.word	0x0800d351
 800cf34:	2000aeac 	.word	0x2000aeac

0800cf38 <_nx_packet_copy>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_copy(NX_PACKET *packet_ptr, NX_PACKET **new_packet_ptr,
                      NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b08e      	sub	sp, #56	@ 0x38
 800cf3c:	af02      	add	r7, sp, #8
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	607a      	str	r2, [r7, #4]
 800cf44:	603b      	str	r3, [r7, #0]
ULONG                  trace_timestamp;
#endif


    /* Default the return packet pointer to NULL.  */
    *new_packet_ptr =  NX_NULL;
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]

    /* Default the first packet to TRUE.  */
    first_packet = NX_TRUE;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_COPY, packet_ptr, 0, pool_ptr, wait_option, NX_TRACE_PACKET_EVENTS, &trace_event, &trace_timestamp);

    /* Determine if there is anything to copy.  */
    if (packet_ptr -> nx_packet_length == 0)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <_nx_packet_copy+0x24>
    {

        /* Empty source packet, return an error.  */
        return(NX_INVALID_PACKET);
 800cf58:	2312      	movs	r3, #18
 800cf5a:	e079      	b.n	800d050 <_nx_packet_copy+0x118>
    }

    /* Allocate a new packet from the default packet pool supplied.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800cf5c:	f107 0114 	add.w	r1, r7, #20
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	2200      	movs	r2, #0
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff ff1d 	bl	800cda4 <_nx_packet_allocate>
 800cf6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Determine if the packet was not allocated.  */
    if (status != NX_SUCCESS)
 800cf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <_nx_packet_copy+0x3e>
    {

        /* Return the error code from the packet allocate routine.  */
        return(status);
 800cf72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf74:	e06c      	b.n	800d050 <_nx_packet_copy+0x118>
    }

    /* Copy the packet interface information. */
    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized by _nx_packet_allocate. */
    work_ptr -> nx_packet_address.nx_packet_interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cf7c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* FEATURE_NX_IPV6 */

#ifdef NX_ENABLE_INTERFACE_CAPABILITY

    /* Copy the packet interface capability. */
    work_ptr -> nx_packet_interface_capability_flag = packet_ptr -> nx_packet_interface_capability_flag;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800cf84:	639a      	str	r2, [r3, #56]	@ 0x38
#ifdef NX_IPSEC_ENABLE
    work_ptr -> nx_packet_ipsec_sa_ptr = packet_ptr -> nx_packet_ipsec_sa_ptr;
#endif /* NX_IPSEC_ENABLE */

    /* Save the source packet pointer.  */
    source_ptr =  packet_ptr;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	627b      	str	r3, [r7, #36]	@ 0x24
    do
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check if it is the first packet.  */
        if (first_packet == NX_TRUE)
 800cf8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d110      	bne.n	800cfb2 <_nx_packet_copy+0x7a>

            /* Yes, it is, copied the data beginning at data starting position.  */

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_data_start);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	68da      	ldr	r2, [r3, #12]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	691b      	ldr	r3, [r3, #16]
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_data_start, size, pool_ptr, wait_option);
 800cf9c:	6978      	ldr	r0, [r7, #20]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	6919      	ldr	r1, [r3, #16]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a3a      	ldr	r2, [r7, #32]
 800cfaa:	f000 f855 	bl	800d058 <_nx_packet_data_append>
 800cfae:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800cfb0:	e00f      	b.n	800cfd2 <_nx_packet_copy+0x9a>
        else
        {

            /* Calculate this packet's data size.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            size =  (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	68da      	ldr	r2, [r3, #12]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	689b      	ldr	r3, [r3, #8]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	623b      	str	r3, [r7, #32]

            /* Copy the data from the source packet into the new packet using
               the data append feature.  */
            status =  _nx_packet_data_append(work_ptr, packet_ptr -> nx_packet_prepend_ptr, size, pool_ptr, wait_option);
 800cfbe:	6978      	ldr	r0, [r7, #20]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6899      	ldr	r1, [r3, #8]
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a3a      	ldr	r2, [r7, #32]
 800cfcc:	f000 f844 	bl	800d058 <_nx_packet_data_append>
 800cfd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
        }

        /* Determine if there was an error in the data append.  */
        if (status != NX_SUCCESS)
 800cfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d005      	beq.n	800cfe4 <_nx_packet_copy+0xac>
        {

            /* An error is present, release the new packet.  */
            _nx_packet_release(work_ptr);
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fb76 	bl	800d6cc <_nx_packet_release>

            /* Return the error code from the packet data append service.  */
            return(status);
 800cfe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe2:	e035      	b.n	800d050 <_nx_packet_copy+0x118>
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the packet chain.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	60fb      	str	r3, [r7, #12]

        /* Set the first packet to FALSE.  */
        first_packet = NX_FALSE;
 800cfea:	2300      	movs	r3, #0
 800cfec:	62bb      	str	r3, [r7, #40]	@ 0x28
    } while (packet_ptr);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1ca      	bne.n	800cf8a <_nx_packet_copy+0x52>
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Adjust the prepend pointer and data length.  */
    /*lint --e{946} --e{947} --e{732} suppress pointer subtraction, since it is necessary. */
    data_prepend_offset = (UINT)(source_ptr -> nx_packet_prepend_ptr - source_ptr -> nx_packet_data_start);
 800cff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cff6:	689a      	ldr	r2, [r3, #8]
 800cff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	61fb      	str	r3, [r7, #28]
    work_ptr -> nx_packet_prepend_ptr = work_ptr -> nx_packet_data_start + data_prepend_offset;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	6919      	ldr	r1, [r3, #16]
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	69fa      	ldr	r2, [r7, #28]
 800d008:	440a      	add	r2, r1
 800d00a:	609a      	str	r2, [r3, #8]
    work_ptr -> nx_packet_length =  work_ptr -> nx_packet_length - data_prepend_offset;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	69fa      	ldr	r2, [r7, #28]
 800d014:	1a8a      	subs	r2, r1, r2
 800d016:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the ip_header information. */
    ip_header_offset = (UINT)(source_ptr -> nx_packet_ip_header - source_ptr -> nx_packet_data_start);
 800d018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	61bb      	str	r3, [r7, #24]
    work_ptr -> nx_packet_ip_header = work_ptr -> nx_packet_data_start + ip_header_offset;
 800d024:	697b      	ldr	r3, [r7, #20]
 800d026:	6919      	ldr	r1, [r3, #16]
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	69ba      	ldr	r2, [r7, #24]
 800d02c:	440a      	add	r2, r1
 800d02e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Determine if the packet copy was successful.  */
    if (source_ptr -> nx_packet_length != work_ptr -> nx_packet_length)
 800d030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d038:	429a      	cmp	r2, r3
 800d03a:	d005      	beq.n	800d048 <_nx_packet_copy+0x110>
    {

        /* An error is present, release the new packet.  */
        _nx_packet_release(work_ptr);
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 fb44 	bl	800d6cc <_nx_packet_release>

        /* Return an error code.  */
        return(NX_INVALID_PACKET);
 800d044:	2312      	movs	r3, #18
 800d046:	e003      	b.n	800d050 <_nx_packet_copy+0x118>
    }
    else
    {

        /* Everything is okay, return the new packet pointer.  */
        *new_packet_ptr =  work_ptr;
 800d048:	697a      	ldr	r2, [r7, #20]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	601a      	str	r2, [r3, #0]

        /* Update the trace event with the status.  */
        NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_PACKET_COPY, 0, work_ptr, 0, 0);

        /* Return success status.  */
        return(NX_SUCCESS);
 800d04e:	2300      	movs	r3, #0
    }
}
 800d050:	4618      	mov	r0, r3
 800d052:	3730      	adds	r7, #48	@ 0x30
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <_nx_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                             NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b08c      	sub	sp, #48	@ 0x30
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	603b      	str	r3, [r7, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
UINT       status;                 /* Return status              */
NX_PACKET *new_list_ptr;           /* Head of new list pointer   */
NX_PACKET *last_packet =  NX_NULL; /* Last supplied packet       */
 800d066:	2300      	movs	r3, #0
 800d068:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_APPEND, packet_ptr, data_start, data_size, pool_ptr, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Calculate the number of bytes available at the end of the supplied packet.  */
    if (packet_ptr -> nx_packet_last)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d016      	beq.n	800d0a0 <_nx_packet_data_append+0x48>
    {

        /* More than one packet.  Walk the packet chain starting at the last packet
           to calculate the remaining bytes.  */
        available_bytes =  0;
 800d072:	2300      	movs	r3, #0
 800d074:	627b      	str	r3, [r7, #36]	@ 0x24
        work_ptr =  packet_ptr -> nx_packet_last;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	699b      	ldr	r3, [r3, #24]
 800d07a:	617b      	str	r3, [r7, #20]

            /* Calculate the available bytes in this packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	695a      	ldr	r2, [r3, #20]
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08a:	4413      	add	r3, r2
 800d08c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Remember the last packet.  */
            last_packet =  work_ptr;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Move to the next packet.   There typically won't be another packet, but just in
               case the logic is here for it!  */
            work_ptr =  work_ptr -> nx_packet_next;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	617b      	str	r3, [r7, #20]
        } while (work_ptr);
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1ee      	bne.n	800d07c <_nx_packet_data_append+0x24>
 800d09e:	e005      	b.n	800d0ac <_nx_packet_data_append+0x54>
#endif /* NX_DISABLE_PACKET_CHAIN */
    {

        /* Just calculate the number of bytes available in the first packet.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        available_bytes =  (ULONG)(packet_ptr -> nx_packet_data_end - packet_ptr -> nx_packet_append_ptr);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	695a      	ldr	r2, [r3, #20]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Determine if any new packets are required to satisfy this request. */
    if (available_bytes < data_size)
 800d0ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d247      	bcs.n	800d144 <_nx_packet_data_append+0xec>
    {

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Setup a temporary head pointer.  */
        new_list_ptr =  NX_NULL;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Loop to pickup enough packets to complete the append request.  */
        while (available_bytes < data_size)
 800d0b8:	e033      	b.n	800d122 <_nx_packet_data_append+0xca>
        {

            /* Allocate a new packet.  */
            status =  _nx_packet_allocate(pool_ptr, &work_ptr, 0, wait_option);
 800d0ba:	f107 0114 	add.w	r1, r7, #20
 800d0be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	6838      	ldr	r0, [r7, #0]
 800d0c4:	f7ff fe6e 	bl	800cda4 <_nx_packet_allocate>
 800d0c8:	61b8      	str	r0, [r7, #24]

            /* Determine if an error is present.  */
            if (status)
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d007      	beq.n	800d0e0 <_nx_packet_data_append+0x88>
            {

                /* Yes, an error is present.   */

                /* First release any packets that have been allocated so far.  */
                if (new_list_ptr)
 800d0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <_nx_packet_data_append+0x84>
                {
                    _nx_packet_release(new_list_ptr);
 800d0d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d0d8:	f000 faf8 	bl	800d6cc <_nx_packet_release>
                }

                /* Return the error status to the caller of this service.  */
                return(status);
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	e078      	b.n	800d1d2 <_nx_packet_data_append+0x17a>

            /* Add debug information. */
            NX_PACKET_DEBUG(__FILE__, __LINE__, work_ptr);

            /* No error is present.  Link the new packet to the temporary list being built.  */
            if (new_list_ptr)
 800d0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d012      	beq.n	800d10c <_nx_packet_data_append+0xb4>
            {

                /* Determine if there is already more than one packet on the list.  */
                if (new_list_ptr -> nx_packet_last)
 800d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d007      	beq.n	800d0fe <_nx_packet_data_append+0xa6>
                {

                    /* Yes, link up the last packet to the new packet and update the
                       last pointer.  */
                    /*lint -e{644} suppress variable might not be initialized, since "work_ptr" was initialized in _nx_packet_allocate. */
                    (new_list_ptr -> nx_packet_last) -> nx_packet_next =  work_ptr;
 800d0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	605a      	str	r2, [r3, #4]
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fa:	619a      	str	r2, [r3, #24]
 800d0fc:	e008      	b.n	800d110 <_nx_packet_data_append+0xb8>
                else
                {

                    /* Second packet allocated.  Just setup the last and next in the
                       head pointer.  */
                    new_list_ptr -> nx_packet_last =  work_ptr;
 800d0fe:	697a      	ldr	r2, [r7, #20]
 800d100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d102:	619a      	str	r2, [r3, #24]
                    new_list_ptr -> nx_packet_next =  work_ptr;
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d108:	605a      	str	r2, [r3, #4]
 800d10a:	e001      	b.n	800d110 <_nx_packet_data_append+0xb8>
            }
            else
            {

                /* Just setup the temporary list head.  */
                new_list_ptr =  work_ptr;
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
               is in the new packet.  */
            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            /*lint -e{737} suppress loss of sign, since nx_packet_data_end is assumed to be larger than nx_packet_append_ptr. */
            /*lint -e{613} suppress possible use of null pointer, since "work_ptr" was set in _nx_packet_allocate. */
            available_bytes =  available_bytes +
                (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	695a      	ldr	r2, [r3, #20]
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	1ad3      	subs	r3, r2, r3
 800d11a:	461a      	mov	r2, r3
            available_bytes =  available_bytes +
 800d11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11e:	4413      	add	r3, r2
 800d120:	627b      	str	r3, [r7, #36]	@ 0x24
        while (available_bytes < data_size)
 800d122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	429a      	cmp	r2, r3
 800d128:	d3c7      	bcc.n	800d0ba <_nx_packet_data_append+0x62>
        }

        /* At this point, all the necessary packets have been allocated and are present
           on the temporary list.  We need to link this new list to the end of the supplied
           packet.  */
        if (last_packet)
 800d12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d003      	beq.n	800d138 <_nx_packet_data_append+0xe0>
        {

            /* Already more than one packet.  Add the new packet list to the end.  */
            last_packet -> nx_packet_next =  new_list_ptr;
 800d130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d134:	605a      	str	r2, [r3, #4]
 800d136:	e002      	b.n	800d13e <_nx_packet_data_append+0xe6>
        }
        else
        {

            /* Link the new packet list to the head packet.  */
            packet_ptr -> nx_packet_next =  new_list_ptr;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d13c:	605a      	str	r2, [r3, #4]
        }

        /* Clear the last packet that was used to maintain the new list.  */
        /*lint -e{613} suppress possible use of null pointer, since "new_list_ptr" was set in previous loop. */
        new_list_ptr -> nx_packet_last =  NX_NULL;
 800d13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d140:	2200      	movs	r2, #0
 800d142:	619a      	str	r2, [r3, #24]
        return(NX_SIZE_ERROR);
#endif /* NX_DISABLE_PACKET_CHAIN */
    }

    /* Setup the new data length in the packet.  */
    packet_ptr -> nx_packet_length =   packet_ptr -> nx_packet_length + data_size;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	441a      	add	r2, r3
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Now copy the supplied data buffer at the end of the packet.  */
    source_ptr =  (UCHAR *)data_start;
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	61fb      	str	r3, [r7, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
    if (packet_ptr -> nx_packet_last)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d003      	beq.n	800d164 <_nx_packet_data_append+0x10c>
    {
        work_ptr =    packet_ptr -> nx_packet_last;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	617b      	str	r3, [r7, #20]
 800d162:	e032      	b.n	800d1ca <_nx_packet_data_append+0x172>
    }
    else
    {
#endif /* NX_DISABLE_PACKET_CHAIN */
        work_ptr =    packet_ptr;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	617b      	str	r3, [r7, #20]
#ifndef NX_DISABLE_PACKET_CHAIN
    }
    while (data_size)
 800d168:	e02f      	b.n	800d1ca <_nx_packet_data_append+0x172>
    {

        /* Determine the amount of memory to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        if (data_size < (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr))
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	695a      	ldr	r2, [r3, #20]
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	1ad3      	subs	r3, r2, r3
 800d174:	461a      	mov	r2, r3
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4293      	cmp	r3, r2
 800d17a:	d202      	bcs.n	800d182 <_nx_packet_data_append+0x12a>
        {
            copy_size =  data_size;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	623b      	str	r3, [r7, #32]
 800d180:	e005      	b.n	800d18e <_nx_packet_data_append+0x136>
        }
        else
        {

            /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
            copy_size =  (ULONG)(work_ptr -> nx_packet_data_end - work_ptr -> nx_packet_append_ptr);
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	695a      	ldr	r2, [r3, #20]
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	623b      	str	r3, [r7, #32]
#else
        copy_size = data_size;
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Copy the data into the current packet buffer.  */
        memcpy(work_ptr -> nx_packet_append_ptr, source_ptr, copy_size); /* Use case of memcpy is verified. */
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	6a3a      	ldr	r2, [r7, #32]
 800d194:	69f9      	ldr	r1, [r7, #28]
 800d196:	4618      	mov	r0, r3
 800d198:	f007 f923 	bl	80143e2 <memcpy>

        /* Adjust the remaining data size.  */
        data_size =  data_size - copy_size;
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	6a3b      	ldr	r3, [r7, #32]
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	607b      	str	r3, [r7, #4]

        /* Update this packets append pointer.  */
        work_ptr -> nx_packet_append_ptr =  work_ptr -> nx_packet_append_ptr + copy_size;
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	68d9      	ldr	r1, [r3, #12]
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	6a3a      	ldr	r2, [r7, #32]
 800d1ac:	440a      	add	r2, r1
 800d1ae:	60da      	str	r2, [r3, #12]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Any more data left to append?  */
        if (data_size)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d009      	beq.n	800d1ca <_nx_packet_data_append+0x172>
        {

            /* Yes, there is more to move.  Update the source pointer, move the work pointer
               to the next packet in the chain and update the last packet pointer.  */
            source_ptr =  source_ptr + copy_size;
 800d1b6:	69fa      	ldr	r2, [r7, #28]
 800d1b8:	6a3b      	ldr	r3, [r7, #32]
 800d1ba:	4413      	add	r3, r2
 800d1bc:	61fb      	str	r3, [r7, #28]
            work_ptr =  work_ptr -> nx_packet_next;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	617b      	str	r3, [r7, #20]
            packet_ptr -> nx_packet_last =  work_ptr;
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	619a      	str	r2, [r3, #24]
    while (data_size)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1cc      	bne.n	800d16a <_nx_packet_data_append+0x112>

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Return successful status.  */
    return(NX_SUCCESS);
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3730      	adds	r7, #48	@ 0x30
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <_nx_packet_data_extract_offset>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_extract_offset(NX_PACKET *packet_ptr, ULONG offset, VOID *buffer_start, ULONG buffer_length, ULONG *bytes_copied)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b08c      	sub	sp, #48	@ 0x30
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	60f8      	str	r0, [r7, #12]
 800d1e2:	60b9      	str	r1, [r7, #8]
 800d1e4:	607a      	str	r2, [r7, #4]
 800d1e6:	603b      	str	r3, [r7, #0]
#endif /* NX_DISABLE_PACKET_CHAIN */
ULONG      bytes_to_copy;
NX_PACKET *working_packet_ptr;


    working_packet_ptr =  packet_ptr;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	61bb      	str	r3, [r7, #24]

    /* Check for an invalid offset or packet length.  */
    if (offset >= working_packet_ptr -> nx_packet_length)
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d309      	bcc.n	800d20a <_nx_packet_data_extract_offset+0x30>
    {

        /* Note: A zero offset with a packet of zero length is ok. */
        if (offset == 0)
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d104      	bne.n	800d206 <_nx_packet_data_extract_offset+0x2c>
        {

            *bytes_copied = 0;
 800d1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fe:	2200      	movs	r2, #0
 800d200:	601a      	str	r2, [r3, #0]
            return(NX_SUCCESS);
 800d202:	2300      	movs	r3, #0
 800d204:	e064      	b.n	800d2d0 <_nx_packet_data_extract_offset+0xf6>
        }

        /* Otherwise, this is an invalid offset or packet length. */
        return(NX_PACKET_OFFSET_ERROR);
 800d206:	2353      	movs	r3, #83	@ 0x53
 800d208:	e062      	b.n	800d2d0 <_nx_packet_data_extract_offset+0xf6>
    }


    /* Initialize the source pointer to NULL.  */
    source_ptr =  NX_NULL;
 800d20a:	2300      	movs	r3, #0
 800d20c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Traverse packet chain to offset.  */
    offset_bytes =  offset;
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	623b      	str	r3, [r7, #32]
#ifndef NX_DISABLE_PACKET_CHAIN
    while (working_packet_ptr)
 800d212:	e016      	b.n	800d242 <_nx_packet_data_extract_offset+0x68>
    {

        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        packet_fragment_length =  (ULONG)((working_packet_ptr -> nx_packet_append_ptr - working_packet_ptr -> nx_packet_prepend_ptr));
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	68da      	ldr	r2, [r3, #12]
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	617b      	str	r3, [r7, #20]

        /* Determine if we are at the offset location fragment in the packet chain  */
        if (packet_fragment_length > offset_bytes)
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	6a3b      	ldr	r3, [r7, #32]
 800d224:	429a      	cmp	r2, r3
 800d226:	d905      	bls.n	800d234 <_nx_packet_data_extract_offset+0x5a>
        {

            /* Setup loop to copy from this packet.  */
            source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	689a      	ldr	r2, [r3, #8]
 800d22c:	6a3b      	ldr	r3, [r7, #32]
 800d22e:	4413      	add	r3, r2
 800d230:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Yes, get out of this  loop.  */
            break;
 800d232:	e009      	b.n	800d248 <_nx_packet_data_extract_offset+0x6e>
        }


        /* Decrement the remaining offset bytes*/
        offset_bytes = offset_bytes - packet_fragment_length;
 800d234:	6a3a      	ldr	r2, [r7, #32]
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	1ad3      	subs	r3, r2, r3
 800d23a:	623b      	str	r3, [r7, #32]

        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800d23c:	69bb      	ldr	r3, [r7, #24]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	61bb      	str	r3, [r7, #24]
    while (working_packet_ptr)
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1e5      	bne.n	800d214 <_nx_packet_data_extract_offset+0x3a>
    source_ptr =  working_packet_ptr -> nx_packet_prepend_ptr + offset_bytes;

#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Check for a valid source pointer.  */
    if (source_ptr == NX_NULL)
 800d248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <_nx_packet_data_extract_offset+0x78>
    {
        return(NX_PACKET_OFFSET_ERROR);
 800d24e:	2353      	movs	r3, #83	@ 0x53
 800d250:	e03e      	b.n	800d2d0 <_nx_packet_data_extract_offset+0xf6>
    }

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	627b      	str	r3, [r7, #36]	@ 0x24
    bytes_to_copy =   (packet_ptr -> nx_packet_length - offset);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	61fb      	str	r3, [r7, #28]

    /* Pickup the amount of bytes to copy.  */
    if (bytes_to_copy < buffer_length)
 800d260:	69fa      	ldr	r2, [r7, #28]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	429a      	cmp	r2, r3
 800d266:	d205      	bcs.n	800d274 <_nx_packet_data_extract_offset+0x9a>
    {
        *bytes_copied =  bytes_to_copy;     /* the amount of bytes returned to the caller */
 800d268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26a:	69fa      	ldr	r2, [r7, #28]
 800d26c:	601a      	str	r2, [r3, #0]
        remaining_bytes =  bytes_to_copy;   /* for use in the copy loop */
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d272:	e026      	b.n	800d2c2 <_nx_packet_data_extract_offset+0xe8>
    }
    else
    {
        *bytes_copied =  buffer_length;
 800d274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	601a      	str	r2, [r3, #0]
        remaining_bytes =  buffer_length;
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (working_packet_ptr && remaining_bytes)
 800d27e:	e020      	b.n	800d2c2 <_nx_packet_data_extract_offset+0xe8>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate bytes to copy.  */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(working_packet_ptr -> nx_packet_append_ptr - source_ptr);
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	68da      	ldr	r2, [r3, #12]
 800d284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	61fb      	str	r3, [r7, #28]
        if (remaining_bytes < bytes_to_copy)
 800d28a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d201      	bcs.n	800d296 <_nx_packet_data_extract_offset+0xbc>
        {
            bytes_to_copy = remaining_bytes;
 800d292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d294:	61fb      	str	r3, [r7, #28]
        }

        /* Copy data from this packet.  */
        memcpy(destination_ptr, source_ptr, bytes_to_copy); /* Use case of memcpy is verified. */
 800d296:	69fa      	ldr	r2, [r7, #28]
 800d298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d29a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d29c:	f007 f8a1 	bl	80143e2 <memcpy>

        /* Update the pointers. */
        destination_ptr += bytes_to_copy;
 800d2a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	627b      	str	r3, [r7, #36]	@ 0x24
        remaining_bytes -= bytes_to_copy;
 800d2a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	1ad3      	subs	r3, r2, r3
 800d2ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        working_packet_ptr =  working_packet_ptr -> nx_packet_next;
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	61bb      	str	r3, [r7, #24]

        /* Check for a next packet.  */
        if (working_packet_ptr)
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <_nx_packet_data_extract_offset+0xe8>
        {

            /* Setup new source pointer.  */
            source_ptr = working_packet_ptr -> nx_packet_prepend_ptr;
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (working_packet_ptr && remaining_bytes)
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <_nx_packet_data_extract_offset+0xf4>
 800d2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1d8      	bne.n	800d280 <_nx_packet_data_extract_offset+0xa6>

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_EXTRACT_OFFSET, packet_ptr, buffer_length, *bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3730      	adds	r7, #48	@ 0x30
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <_nx_packet_data_retrieve>:
/*                                            verified memcpy use cases,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b088      	sub	sp, #32
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_DATA_RETRIEVE, packet_ptr, buffer_start, bytes_copied, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Setup the destination pointer.  */
    destination_ptr =  buffer_start;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	61bb      	str	r3, [r7, #24]

    /* Pickup the amount of bytes to copy.  */
    *bytes_copied =  packet_ptr -> nx_packet_length;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	601a      	str	r2, [r3, #0]

    /* Setup the remaining bytes.  */
    remaining_bytes =  packet_ptr -> nx_packet_length;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2f4:	61fb      	str	r3, [r7, #28]

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to copy bytes from packet(s).  */
    while (packet_ptr)
 800d2f6:	e017      	b.n	800d328 <_nx_packet_data_retrieve+0x50>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Calculate the bytes to copy in this packet. */
        /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
        bytes_to_copy = (ULONG)(packet_ptr -> nx_packet_append_ptr - packet_ptr -> nx_packet_prepend_ptr);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	68da      	ldr	r2, [r3, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	617b      	str	r3, [r7, #20]

        /* Copy data to destination. */
        /* Note: The buffer size must be not less than packet_ptr -> nx_packet_length.  */
        memcpy(destination_ptr, packet_ptr -> nx_packet_prepend_ptr, bytes_to_copy); /* Use case of memcpy is verified. The buffer is provided by user.  */
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	697a      	ldr	r2, [r7, #20]
 800d30a:	4619      	mov	r1, r3
 800d30c:	69b8      	ldr	r0, [r7, #24]
 800d30e:	f007 f868 	bl	80143e2 <memcpy>

        remaining_bytes -= bytes_to_copy;
 800d312:	69fa      	ldr	r2, [r7, #28]
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	61fb      	str	r3, [r7, #28]
        destination_ptr += bytes_to_copy;
 800d31a:	69ba      	ldr	r2, [r7, #24]
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	4413      	add	r3, r2
 800d320:	61bb      	str	r3, [r7, #24]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to next packet.  */
        packet_ptr =  packet_ptr -> nx_packet_next;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	60fb      	str	r3, [r7, #12]
    while (packet_ptr)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1e4      	bne.n	800d2f8 <_nx_packet_data_retrieve+0x20>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Determine if the packet chain was valid.  */
    if (remaining_bytes)
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d007      	beq.n	800d344 <_nx_packet_data_retrieve+0x6c>
    {

        /* Invalid packet chain.  Calculate the actual number of bytes
           copied.  */
        *bytes_copied =  *bytes_copied - remaining_bytes;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	69fb      	ldr	r3, [r7, #28]
 800d33a:	1ad2      	subs	r2, r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	601a      	str	r2, [r3, #0]

        /* Return an error.  */
        return(NX_INVALID_PACKET);
 800d340:	2312      	movs	r3, #18
 800d342:	e000      	b.n	800d346 <_nx_packet_data_retrieve+0x6e>
    }

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800d344:	2300      	movs	r3, #0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3720      	adds	r7, #32
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
	...

0800d350 <_nx_packet_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_packet_pool_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
NX_PACKET_POOL *pool_ptr;   /* Working packet pool pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to packet pool control block.  */
    pool_ptr =  (NX_PACKET_POOL *)thread_ptr -> tx_thread_suspend_control_block;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d35e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d360:	f3ef 8310 	mrs	r3, PRIMASK
 800d364:	617b      	str	r3, [r7, #20]
    return(posture);
 800d366:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d368:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d36a:	b672      	cpsid	i
    return(int_posture);
 800d36c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the packet pool.  */
    TX_DISABLE
 800d36e:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d374:	2b00      	cmp	r3, #0
 800d376:	d042      	beq.n	800d3fe <_nx_packet_pool_cleanup+0xae>
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d03f      	beq.n	800d3fe <_nx_packet_pool_cleanup+0xae>
        (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (pool_ptr) &&
 800d382:	4a23      	ldr	r2, [pc, #140]	@ (800d410 <_nx_packet_pool_cleanup+0xc0>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d13a      	bne.n	800d3fe <_nx_packet_pool_cleanup+0xae>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	429a      	cmp	r2, r3
 800d396:	d103      	bne.n	800d3a0 <_nx_packet_pool_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	2200      	movs	r2, #0
 800d39c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d39e:	e012      	b.n	800d3c6 <_nx_packet_pool_cleanup+0x76>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer if necessary.  */
            if (pool_ptr -> nx_packet_pool_suspension_list == thread_ptr)
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d103      	bne.n	800d3b2 <_nx_packet_pool_cleanup+0x62>
            {
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	62da      	str	r2, [r3, #44]	@ 0x2c
            }

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d3ba:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d3c4:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3ca:	1e5a      	subs	r2, r3, #1
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3d4:	2b0c      	cmp	r3, #12
 800d3d6:	d112      	bne.n	800d3fe <_nx_packet_pool_cleanup+0xae>

            /* Thread still suspended on the packet pool.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800d414 <_nx_packet_pool_cleanup+0xc4>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	4a0b      	ldr	r2, [pc, #44]	@ (800d414 <_nx_packet_pool_cleanup+0xc4>)
 800d3e8:	6013      	str	r3, [r2, #0]
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f383 8810 	msr	PRIMASK, r3
}
 800d3f4:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f004 ffc6 	bl	8012388 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800d3fc:	e005      	b.n	800d40a <_nx_packet_pool_cleanup+0xba>
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	f383 8810 	msr	PRIMASK, r3
}
 800d408:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800d40a:	3720      	adds	r7, #32
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	5041434b 	.word	0x5041434b
 800d414:	2000aeac 	.word	0x2000aeac

0800d418 <_nx_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                             VOID *pool_start, ULONG pool_size)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b092      	sub	sp, #72	@ 0x48
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
 800d424:	603b      	str	r3, [r7, #0]
CHAR           *payload_address;       /* Address of the first payload*/
VOID           *rounded_pool_start;    /* Rounded stating address     */


    /* Save the original payload size.  */
    original_payload_size =  payload_size;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	3303      	adds	r3, #3
 800d42e:	f023 0303 	bic.w	r3, r3, #3
 800d432:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d438:	1ad2      	subs	r2, r2, r3
 800d43a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d43c:	4413      	add	r3, r2
 800d43e:	f023 0303 	bic.w	r3, r3, #3
 800d442:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Set the pool starting address. */
    pool_start = rounded_pool_start;
 800d444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d446:	603b      	str	r3, [r7, #0]

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800d448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44a:	333c      	adds	r3, #60	@ 0x3c
 800d44c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800d44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d450:	3303      	adds	r3, #3
 800d452:	f023 0303 	bic.w	r3, r3, #3
 800d456:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800d458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45c:	1ad3      	subs	r3, r2, r3
 800d45e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    payload_size = (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800d460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	4413      	add	r3, r2
 800d466:	3303      	adds	r3, #3
 800d468:	f023 0203 	bic.w	r2, r3, #3
 800d46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	607b      	str	r3, [r7, #4]

    /* Clear pool fields. */
    memset(pool_ptr, 0, sizeof(NX_PACKET_POOL));
 800d472:	223c      	movs	r2, #60	@ 0x3c
 800d474:	2100      	movs	r1, #0
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f006 ff7e 	bl	8014378 <memset>

    /* Setup the basic packet pool fields.  */
    pool_ptr -> nx_packet_pool_name =             name_ptr;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	605a      	str	r2, [r3, #4]
    pool_ptr -> nx_packet_pool_suspension_list =  TX_NULL;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	2200      	movs	r2, #0
 800d486:	62da      	str	r2, [r3, #44]	@ 0x2c
    pool_ptr -> nx_packet_pool_suspended_count =  0;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	2200      	movs	r2, #0
 800d48c:	631a      	str	r2, [r3, #48]	@ 0x30
    pool_ptr -> nx_packet_pool_start =            (CHAR *)pool_start;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	683a      	ldr	r2, [r7, #0]
 800d492:	621a      	str	r2, [r3, #32]
    pool_ptr -> nx_packet_pool_size =             pool_size;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d498:	625a      	str	r2, [r3, #36]	@ 0x24
    pool_ptr -> nx_packet_pool_payload_size =     original_payload_size;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d49e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Calculate the end of the pool's memory area.  */
    end_of_pool =  ((CHAR *)pool_start) + pool_size;
 800d4a0:	683a      	ldr	r2, [r7, #0]
 800d4a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a4:	4413      	add	r3, r2
 800d4a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Walk through the pool area, setting up the available packet list.  */
    packets =            0;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	647b      	str	r3, [r7, #68]	@ 0x44
    packet_ptr =         (CHAR *)rounded_pool_start;
 800d4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ae:	643b      	str	r3, [r7, #64]	@ 0x40
    next_packet_ptr =    packet_ptr + (payload_size + header_size);
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4b4:	4413      	add	r3, r2
 800d4b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4b8:	4413      	add	r3, r2
 800d4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    while (next_packet_ptr <= end_of_pool)
 800d4bc:	e023      	b.n	800d506 <_nx_packet_pool_create+0xee>
    {

        /* Yes, we have another packet.  Increment the packet count.  */
        packets++;
 800d4be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Setup the link to the next packet.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  (NX_PACKET *)next_packet_ptr;
 800d4c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d4c8:	61da      	str	r2, [r3, #28]

        /* Remember that this packet pool is the owner.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_pool_owner =  pool_ptr;
 800d4ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	601a      	str	r2, [r3, #0]

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Clear the next packet pointer.  */
        /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_next =  (NX_PACKET *)NX_NULL;
 800d4d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	605a      	str	r2, [r3, #4]
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Mark the packet as free.  */
        /*lint -e{929} -e{923} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800d4d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d4dc:	621a      	str	r2, [r3, #32]

        /* Setup the packet data pointers.  */
        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_start =  (UCHAR *)(packet_ptr + header_size);
 800d4de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e2:	441a      	add	r2, r3
 800d4e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4e6:	611a      	str	r2, [r3, #16]

        /*lint -e{929} -e{928} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
        ((NX_PACKET *)packet_ptr) -> nx_packet_data_end =    (UCHAR *)(packet_ptr + header_size + original_payload_size);
 800d4e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ec:	4413      	add	r3, r2
 800d4ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4f0:	441a      	add	r2, r3
 800d4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4f4:	615a      	str	r2, [r3, #20]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, (NX_PACKET *)packet_ptr);

        /* Advance to the next packet.  */
        packet_ptr =   next_packet_ptr;
 800d4f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4f8:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Update the next packet pointer.  */
        next_packet_ptr =  packet_ptr + (payload_size + header_size);
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4fe:	4413      	add	r3, r2
 800d500:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d502:	4413      	add	r3, r2
 800d504:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (next_packet_ptr <= end_of_pool)
 800d506:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d9d7      	bls.n	800d4be <_nx_packet_pool_create+0xa6>
    }

    /* Backup to the last packet in the pool.  */
    packet_ptr =  packet_ptr - (payload_size + header_size);
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d512:	4413      	add	r3, r2
 800d514:	425b      	negs	r3, r3
 800d516:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d518:	4413      	add	r3, r2
 800d51a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Set the last packet's forward pointer to NULL.  */
    /*lint -e{929} -e{740} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ((NX_PACKET *)packet_ptr) -> nx_packet_queue_next =  NX_NULL;
 800d51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d51e:	2200      	movs	r2, #0
 800d520:	61da      	str	r2, [r3, #28]

    /* Save the remaining information in the pool control packet.  */
    pool_ptr -> nx_packet_pool_available =  packets;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d526:	609a      	str	r2, [r3, #8]
    pool_ptr -> nx_packet_pool_total =      packets;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d52c:	60da      	str	r2, [r3, #12]

    /* Set the packet pool available list.  */
    pool_ptr -> nx_packet_pool_available_list =  (NX_PACKET *)pool_start;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	61da      	str	r2, [r3, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d534:	f3ef 8310 	mrs	r3, PRIMASK
 800d538:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d53a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d53c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d53e:	b672      	cpsid	i
    return(int_posture);
 800d540:	69bb      	ldr	r3, [r7, #24]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_POOL_CREATE, pool_ptr, payload_size, pool_start, pool_size, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts to place the packet pool on the created list.  */
    TX_DISABLE
 800d542:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the packet pool ID to make it valid.  */
    pool_ptr -> nx_packet_pool_id =  NX_PACKET_POOL_ID;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	4a19      	ldr	r2, [pc, #100]	@ (800d5ac <_nx_packet_pool_create+0x194>)
 800d548:	601a      	str	r2, [r3, #0]

    /* Place the packet pool on the list of created packet pools.  First,
       check for an empty list.  */
    if (_nx_packet_pool_created_ptr)
 800d54a:	4b19      	ldr	r3, [pc, #100]	@ (800d5b0 <_nx_packet_pool_create+0x198>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d012      	beq.n	800d578 <_nx_packet_pool_create+0x160>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous;
 800d552:	4b17      	ldr	r3, [pc, #92]	@ (800d5b0 <_nx_packet_pool_create+0x198>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d558:	623b      	str	r3, [r7, #32]

        /* Place the new packet pool in the list.  */
        _nx_packet_pool_created_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800d55a:	4b15      	ldr	r3, [pc, #84]	@ (800d5b0 <_nx_packet_pool_create+0x198>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	639a      	str	r2, [r3, #56]	@ 0x38
        tail_ptr -> nx_packet_pool_created_next =  pool_ptr;
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Setup this packet pool's created links.  */
        pool_ptr -> nx_packet_pool_created_previous =  tail_ptr;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6a3a      	ldr	r2, [r7, #32]
 800d56c:	639a      	str	r2, [r3, #56]	@ 0x38
        pool_ptr -> nx_packet_pool_created_next =      _nx_packet_pool_created_ptr;
 800d56e:	4b10      	ldr	r3, [pc, #64]	@ (800d5b0 <_nx_packet_pool_create+0x198>)
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	635a      	str	r2, [r3, #52]	@ 0x34
 800d576:	e008      	b.n	800d58a <_nx_packet_pool_create+0x172>
    }
    else
    {

        /* The created packet pool list is empty.  Add packet pool to empty list.  */
        _nx_packet_pool_created_ptr =                  pool_ptr;
 800d578:	4a0d      	ldr	r2, [pc, #52]	@ (800d5b0 <_nx_packet_pool_create+0x198>)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6013      	str	r3, [r2, #0]
        pool_ptr -> nx_packet_pool_created_next =      pool_ptr;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	68fa      	ldr	r2, [r7, #12]
 800d582:	635a      	str	r2, [r3, #52]	@ 0x34
        pool_ptr -> nx_packet_pool_created_previous =  pool_ptr;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	68fa      	ldr	r2, [r7, #12]
 800d588:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Increment the number of packet pools created.  */
    _nx_packet_pool_created_count++;
 800d58a:	4b0a      	ldr	r3, [pc, #40]	@ (800d5b4 <_nx_packet_pool_create+0x19c>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	3301      	adds	r3, #1
 800d590:	4a08      	ldr	r2, [pc, #32]	@ (800d5b4 <_nx_packet_pool_create+0x19c>)
 800d592:	6013      	str	r3, [r2, #0]
 800d594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d596:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	f383 8810 	msr	PRIMASK, r3
}
 800d59e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3748      	adds	r7, #72	@ 0x48
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	5041434b 	.word	0x5041434b
 800d5b0:	2000adc0 	.word	0x2000adc0
 800d5b4:	2000adc4 	.word	0x2000adc4

0800d5b8 <_nx_packet_pool_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_pool_delete(NX_PACKET_POOL *pool_ptr)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b08e      	sub	sp, #56	@ 0x38
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d5c0:	f3ef 8310 	mrs	r3, PRIMASK
 800d5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800d5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800d5c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800d5ca:	b672      	cpsid	i
    return(int_posture);
 800d5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

TX_THREAD *thread_ptr;      /* Working thread pointer  */


    /* Disable interrupts to remove the packet pool from the created list.  */
    TX_DISABLE
 800d5ce:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Decrement the number of packet pools created.  */
    _nx_packet_pool_created_count--;
 800d5d0:	4b3b      	ldr	r3, [pc, #236]	@ (800d6c0 <_nx_packet_pool_delete+0x108>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	4a3a      	ldr	r2, [pc, #232]	@ (800d6c0 <_nx_packet_pool_delete+0x108>)
 800d5d8:	6013      	str	r3, [r2, #0]

    /* Clear the packet pool ID to make it invalid.  */
    pool_ptr -> nx_packet_pool_id =  0;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	601a      	str	r2, [r3, #0]

    /* See if the packet pool only one on the list.  */
    if (pool_ptr == pool_ptr -> nx_packet_pool_created_next)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d103      	bne.n	800d5f2 <_nx_packet_pool_delete+0x3a>
    {

        /* Only created packet pool, just set the created list to NULL.  */
        _nx_packet_pool_created_ptr =  NX_NULL;
 800d5ea:	4b36      	ldr	r3, [pc, #216]	@ (800d6c4 <_nx_packet_pool_delete+0x10c>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	601a      	str	r2, [r3, #0]
 800d5f0:	e012      	b.n	800d618 <_nx_packet_pool_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            pool_ptr -> nx_packet_pool_created_previous;
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
        (pool_ptr -> nx_packet_pool_created_next) -> nx_packet_pool_created_previous =
 800d5fa:	639a      	str	r2, [r3, #56]	@ 0x38
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            pool_ptr -> nx_packet_pool_created_next;
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	6b52      	ldr	r2, [r2, #52]	@ 0x34
        (pool_ptr -> nx_packet_pool_created_previous) -> nx_packet_pool_created_next =
 800d604:	635a      	str	r2, [r3, #52]	@ 0x34

        /* See if we have to update the created list head pointer.  */
        if (_nx_packet_pool_created_ptr == pool_ptr)
 800d606:	4b2f      	ldr	r3, [pc, #188]	@ (800d6c4 <_nx_packet_pool_delete+0x10c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d103      	bne.n	800d618 <_nx_packet_pool_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _nx_packet_pool_created_ptr =  pool_ptr -> nx_packet_pool_created_next;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d614:	4a2b      	ldr	r2, [pc, #172]	@ (800d6c4 <_nx_packet_pool_delete+0x10c>)
 800d616:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800d618:	4b2b      	ldr	r3, [pc, #172]	@ (800d6c8 <_nx_packet_pool_delete+0x110>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3301      	adds	r3, #1
 800d61e:	4a2a      	ldr	r2, [pc, #168]	@ (800d6c8 <_nx_packet_pool_delete+0x110>)
 800d620:	6013      	str	r3, [r2, #0]
 800d622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d624:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d628:	f383 8810 	msr	PRIMASK, r3
}
 800d62c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the packet pool suspension list to resume any and all
       threads suspended on this packet pool.  */
    thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d632:	637b      	str	r3, [r7, #52]	@ 0x34
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800d634:	e026      	b.n	800d684 <_nx_packet_pool_delete+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d636:	f3ef 8310 	mrs	r3, PRIMASK
 800d63a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800d63c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800d63e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d640:	b672      	cpsid	i
    return(int_posture);
 800d642:	69bb      	ldr	r3, [r7, #24]
    {
        /* Lockout interrupts.  */
        TX_DISABLE
 800d644:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d648:	2200      	movs	r2, #0
 800d64a:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800d64c:	4b1e      	ldr	r3, [pc, #120]	@ (800d6c8 <_nx_packet_pool_delete+0x110>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	4a1d      	ldr	r2, [pc, #116]	@ (800d6c8 <_nx_packet_pool_delete+0x110>)
 800d654:	6013      	str	r3, [r2, #0]
 800d656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d658:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d65a:	6a3b      	ldr	r3, [r7, #32]
 800d65c:	f383 8810 	msr	PRIMASK, r3
}
 800d660:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the return status in the thread to NX_POOL_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  NX_POOL_DELETED;
 800d662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d664:	2230      	movs	r2, #48	@ 0x30
 800d666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800d66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d66e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800d670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d674:	4618      	mov	r0, r3
 800d676:	f004 fe87 	bl	8012388 <_tx_thread_system_resume>

        /* Decrease the suspended count.  */
        pool_ptr -> nx_packet_pool_suspended_count--;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d67e:	1e5a      	subs	r2, r3, #1
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	631a      	str	r2, [r3, #48]	@ 0x30
    while (pool_ptr -> nx_packet_pool_suspended_count)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1d4      	bne.n	800d636 <_nx_packet_pool_delete+0x7e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d68c:	f3ef 8310 	mrs	r3, PRIMASK
 800d690:	613b      	str	r3, [r7, #16]
    return(posture);
 800d692:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800d694:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d696:	b672      	cpsid	i
    return(int_posture);
 800d698:	68fb      	ldr	r3, [r7, #12]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800d69a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800d69c:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c8 <_nx_packet_pool_delete+0x110>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	4a09      	ldr	r2, [pc, #36]	@ (800d6c8 <_nx_packet_pool_delete+0x110>)
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	f383 8810 	msr	PRIMASK, r3
}
 800d6b0:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(pool_ptr);

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800d6b2:	f004 fe2f 	bl	8012314 <_tx_thread_system_preempt_check>

    /* Return NX_SUCCESS.  */
    return(NX_SUCCESS);
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3738      	adds	r7, #56	@ 0x38
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	2000adc4 	.word	0x2000adc4
 800d6c4:	2000adc0 	.word	0x2000adc0
 800d6c8:	2000aeac 	.word	0x2000aeac

0800d6cc <_nx_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_release(NX_PACKET *packet_ptr)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08a      	sub	sp, #40	@ 0x28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

#ifndef NX_DISABLE_PACKET_CHAIN
    /* Loop to free all packets chained together, not assuming they are
       from the same pool.  */
    while (packet_ptr)
 800d6d4:	e0a5      	b.n	800d822 <_nx_packet_release+0x156>
    {
#endif /* NX_DISABLE_PACKET_CHAIN */

        /* Check to see if the packet is releasable.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        if (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED))
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	f1b3 3faa 	cmp.w	r3, #2863311530	@ 0xaaaaaaaa
 800d6de:	d011      	beq.n	800d704 <_nx_packet_release+0x38>
        {

#ifndef NX_DISABLE_PACKET_INFO
            /* Pickup the pool pointer.  */
            pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	61fb      	str	r3, [r7, #28]

            /* Check for a good pool pointer...  error must be the packet!  */
            if ((pool_ptr) && (pool_ptr -> nx_packet_pool_id == NX_PACKET_POOL_ID))
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d009      	beq.n	800d700 <_nx_packet_release+0x34>
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4a50      	ldr	r2, [pc, #320]	@ (800d834 <_nx_packet_release+0x168>)
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	d104      	bne.n	800d700 <_nx_packet_release+0x34>
            {

                /* Increment the packet pool invalid release error count.  */
                pool_ptr -> nx_packet_pool_invalid_releases++;
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	1c5a      	adds	r2, r3, #1
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	619a      	str	r2, [r3, #24]
            }
#endif

            /* Return an error indicating the packet could not be released.  */
            return(NX_PTR_ERROR);
 800d700:	2307      	movs	r3, #7
 800d702:	e093      	b.n	800d82c <_nx_packet_release+0x160>
        }
        /* End of packet check.  */

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Pickup the next packet. */
        next_packet =  packet_ptr -> nx_packet_next;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d70a:	f3ef 8310 	mrs	r3, PRIMASK
 800d70e:	617b      	str	r3, [r7, #20]
    return(posture);
 800d710:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d712:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d714:	b672      	cpsid	i
    return(int_posture);
 800d716:	693b      	ldr	r3, [r7, #16]

        /* Add debug information. */
        NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

        /* Disable interrupts to put this packet back in the packet pool.  */
        TX_DISABLE
 800d718:	623b      	str	r3, [r7, #32]

        /* Pickup the pool pointer.  */
        pool_ptr =  packet_ptr -> nx_packet_pool_owner;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	61fb      	str	r3, [r7, #28]

        /* Determine if there are any threads suspended on the block pool.  */
        thread_ptr =  pool_ptr -> nx_packet_pool_suspension_list;
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d724:	61bb      	str	r3, [r7, #24]
        if (thread_ptr)
 800d726:	69bb      	ldr	r3, [r7, #24]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d062      	beq.n	800d7f2 <_nx_packet_release+0x126>
        {

            /* Remove the suspended thread from the list.  */

            /* See if this is the only suspended thread on the list.  */
            if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d730:	69ba      	ldr	r2, [r7, #24]
 800d732:	429a      	cmp	r2, r3
 800d734:	d103      	bne.n	800d73e <_nx_packet_release+0x72>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  NX_NULL;
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	2200      	movs	r2, #0
 800d73a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d73c:	e00d      	b.n	800d75a <_nx_packet_release+0x8e>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                pool_ptr -> nx_packet_pool_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Update the links of the adjacent threads.  */
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous;
 800d74a:	69ba      	ldr	r2, [r7, #24]
 800d74c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
                (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d74e:	675a      	str	r2, [r3, #116]	@ 0x74
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_next;
 800d754:	69ba      	ldr	r2, [r7, #24]
 800d756:	6f12      	ldr	r2, [r2, #112]	@ 0x70
                (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d758:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            pool_ptr -> nx_packet_pool_suspended_count--;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d75e:	1e5a      	subs	r2, r3, #1
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	631a      	str	r2, [r3, #48]	@ 0x30

            /* Prepare for resumption of the first thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	2200      	movs	r2, #0
 800d768:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800d76a:	4b33      	ldr	r3, [pc, #204]	@ (800d838 <_nx_packet_release+0x16c>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	3301      	adds	r3, #1
 800d770:	4a31      	ldr	r2, [pc, #196]	@ (800d838 <_nx_packet_release+0x16c>)
 800d772:	6013      	str	r3, [r2, #0]
 800d774:	6a3b      	ldr	r3, [r7, #32]
 800d776:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	f383 8810 	msr	PRIMASK, r3
}
 800d77e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust this packet to look just like a new packet.  */
            packet_ptr -> nx_packet_queue_next  =  NX_NULL;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	61da      	str	r2, [r3, #28]
#ifndef NX_DISABLE_PACKET_CHAIN
            packet_ptr -> nx_packet_next        =  NX_NULL;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	605a      	str	r2, [r3, #4]
            packet_ptr -> nx_packet_last        =  NX_NULL;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	619a      	str	r2, [r3, #24]
#endif /* NX_DISABLE_PACKET_CHAIN */
            packet_ptr -> nx_packet_length      =  0;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	625a      	str	r2, [r3, #36]	@ 0x24
            packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_data_start + (thread_ptr -> tx_thread_suspend_info);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	691a      	ldr	r2, [r3, #16]
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7a0:	441a      	add	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	609a      	str	r2, [r3, #8]
            packet_ptr -> nx_packet_append_ptr  =  packet_ptr -> nx_packet_prepend_ptr;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	689a      	ldr	r2, [r3, #8]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	60da      	str	r2, [r3, #12]
            packet_ptr -> nx_packet_address.nx_packet_interface_ptr = NX_NULL;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	631a      	str	r2, [r3, #48]	@ 0x30
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
            packet_ptr -> nx_packet_interface_capability_flag = 0;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
            /* Set the TCP queue to the value that indicates it has been allocated.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_ALLOCATED;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 800d7c0:	621a      	str	r2, [r3, #32]
            /* Clear the ipsec state. */
            packet_ptr -> nx_packet_ipsec_state = 0;
#endif /* NX_IPSEC_ENABLE */

            /* Clear the IP version.  */
            packet_ptr -> nx_packet_ip_version  =  0;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

            /* Clear the IP identification flag.  */
            packet_ptr -> nx_packet_identical_copy = NX_FALSE;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

            /* Initialize the IP header length. */
            packet_ptr -> nx_packet_ip_header_length = 0;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

            /* Return this block pointer to the suspended thread waiting for
               a block.  */
            *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	601a      	str	r2, [r3, #0]

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800d7e2:	69bb      	ldr	r3, [r7, #24]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 800d7ea:	69b8      	ldr	r0, [r7, #24]
 800d7ec:	f004 fdcc 	bl	8012388 <_tx_thread_system_resume>
 800d7f0:	e015      	b.n	800d81e <_nx_packet_release+0x152>

            /* No thread is suspended for a memory block.  */

            /* Mark the packet as free.  */
            /*lint -e{923} suppress cast of ULONG to pointer.  */
            packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next =  (NX_PACKET *)NX_PACKET_FREE;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7f8:	621a      	str	r2, [r3, #32]

            /* Put the packet back in the available list.  */
            packet_ptr -> nx_packet_queue_next =  pool_ptr -> nx_packet_pool_available_list;
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	69da      	ldr	r2, [r3, #28]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	61da      	str	r2, [r3, #28]

            /* Adjust the head pointer.  */
            pool_ptr -> nx_packet_pool_available_list =  packet_ptr;
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	61da      	str	r2, [r3, #28]

            /* Increment the count of available blocks.  */
            pool_ptr -> nx_packet_pool_available++;
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	1c5a      	adds	r2, r3, #1
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	609a      	str	r2, [r3, #8]
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	f383 8810 	msr	PRIMASK, r3
}
 800d81c:	bf00      	nop
            TX_RESTORE
        }

#ifndef NX_DISABLE_PACKET_CHAIN
        /* Move to the next packet in the list.  */
        packet_ptr =  next_packet;
 800d81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d820:	607b      	str	r3, [r7, #4]
    while (packet_ptr)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f47f af56 	bne.w	800d6d6 <_nx_packet_release+0xa>
    }
#endif /* NX_DISABLE_PACKET_CHAIN */

    /* Return completion status.  */
    return(NX_SUCCESS);
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3728      	adds	r7, #40	@ 0x28
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}
 800d834:	5041434b 	.word	0x5041434b
 800d838:	2000aeac 	.word	0x2000aeac

0800d83c <_nx_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_packet_transmit_release(NX_PACKET *packet_ptr)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b088      	sub	sp, #32
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d844:	f3ef 8310 	mrs	r3, PRIMASK
 800d848:	617b      	str	r3, [r7, #20]
    return(posture);
 800d84a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d84c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d84e:	b672      	cpsid	i
    return(int_posture);
 800d850:	693b      	ldr	r3, [r7, #16]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_PACKET_TRANSMIT_RELEASE, packet_ptr, packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next, (packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_available, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    /* Disable interrupts temporarily.  */
    TX_DISABLE
 800d852:	61bb      	str	r3, [r7, #24]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the packet is a queued TCP data packet.  Such packets cannot be released
       immediately, since they may need to be resent.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	6a1b      	ldr	r3, [r3, #32]
 800d858:	f1b3 3faa 	cmp.w	r3, #2863311530	@ 0xaaaaaaaa
 800d85c:	d025      	beq.n	800d8aa <_nx_packet_transmit_release+0x6e>
        (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_FREE)))
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
    if ((packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)) &&
 800d862:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d866:	d020      	beq.n	800d8aa <_nx_packet_transmit_release+0x6e>
    {

        /* Yes, this is indeed a TCP packet.  Just mark this with the NX_DRIVER_TX_DONE
           value to let the TCP layer know it is no longer queued up.  */
        /*lint -e{923} suppress cast of ULONG to pointer.  */
        packet_ptr -> nx_packet_queue_next =  (NX_PACKET *)NX_DRIVER_TX_DONE;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f04f 32dd 	mov.w	r2, #3722304989	@ 0xdddddddd
 800d86e:	61da      	str	r2, [r3, #28]

        /* Remove the IP header and adjust the length.  */
        packet_ptr -> nx_packet_prepend_ptr += packet_ptr -> nx_packet_ip_header_length;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 800d87a:	441a      	add	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	609a      	str	r2, [r3, #8]
        packet_ptr -> nx_packet_length -= packet_ptr -> nx_packet_ip_header_length;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d884:	687a      	ldr	r2, [r7, #4]
 800d886:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 800d88a:	1a9a      	subs	r2, r3, r2
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Reset the IP header length. */
        packet_ptr -> nx_packet_ip_header_length = 0;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f383 8810 	msr	PRIMASK, r3
}
 800d8a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  NX_SUCCESS;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	61fb      	str	r3, [r7, #28]
 800d8a8:	e009      	b.n	800d8be <_nx_packet_transmit_release+0x82>
 800d8aa:	69bb      	ldr	r3, [r7, #24]
 800d8ac:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	f383 8810 	msr	PRIMASK, r3
}
 800d8b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual packet release function.  */
        status =  _nx_packet_release(packet_ptr);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7ff ff08 	bl	800d6cc <_nx_packet_release>
 800d8bc:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 800d8be:	69fb      	ldr	r3, [r7, #28]
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3720      	adds	r7, #32
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <_nx_rarp_packet_deferred_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_rarp_packet_deferred_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8d2:	f3ef 8310 	mrs	r3, PRIMASK
 800d8d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d8d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d8da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8dc:	b672      	cpsid	i
    return(int_posture);
 800d8de:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800d8e0:	61fb      	str	r3, [r7, #28]

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Check to see if RARP is enabled on this IP instance.  */
    if (!ip_ptr -> nx_ip_rarp_queue_process)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d110      	bne.n	800d90e <_nx_rarp_packet_deferred_receive+0x46>

        /* RARP is not enabled.  */

#ifndef NX_DISABLE_RARP_INFO
        /* Increment the RARP invalid messages count...  */
        ip_ptr -> nx_ip_rarp_invalid_messages++;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800d8f2:	1c5a      	adds	r2, r3, #1
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	f383 8810 	msr	PRIMASK, r3
}
 800d904:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Since RARP is not enabled, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800d906:	6838      	ldr	r0, [r7, #0]
 800d908:	f7ff fee0 	bl	800d6cc <_nx_packet_release>

        /* Return to caller.  */
        return;
 800d90c:	e02f      	b.n	800d96e <_nx_rarp_packet_deferred_receive+0xa6>
    }

    /* Check to see if the RARP deferred processing queue is empty.  */
    if (ip_ptr -> nx_ip_rarp_deferred_received_packet_head)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 370c 	ldr.w	r3, [r3, #1804]	@ 0x70c
 800d914:	2b00      	cmp	r3, #0
 800d916:	d011      	beq.n	800d93c <_nx_rarp_packet_deferred_receive+0x74>
    {

        /* Not empty, just place the packet at the end of the RARP deferred queue.  */
        (ip_ptr -> nx_ip_rarp_deferred_received_packet_tail) -> nx_packet_queue_next =  packet_ptr;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 800d91e:	683a      	ldr	r2, [r7, #0]
 800d920:	61da      	str	r2, [r3, #28]
        packet_ptr -> nx_packet_queue_next =  NX_NULL;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2200      	movs	r2, #0
 800d926:	61da      	str	r2, [r3, #28]
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	683a      	ldr	r2, [r7, #0]
 800d92c:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f383 8810 	msr	PRIMASK, r3
}
 800d93a:	e018      	b.n	800d96e <_nx_rarp_packet_deferred_receive+0xa6>
    {

        /* Empty RARP deferred receive processing queue.  Just setup the head pointers and
           set the event flags to ensure the IP helper thread looks at the RARP deferred
           processing queue.  */
        ip_ptr -> nx_ip_rarp_deferred_received_packet_head =  packet_ptr;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
        ip_ptr -> nx_ip_rarp_deferred_received_packet_tail =  packet_ptr;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
        packet_ptr -> nx_packet_queue_next =                  NX_NULL;
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2200      	movs	r2, #0
 800d950:	61da      	str	r2, [r3, #28]
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	f383 8810 	msr	PRIMASK, r3
}
 800d95c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Wakeup IP helper thread to process the RARP deferred receive.  */
        tx_event_flags_set(&(ip_ptr -> nx_ip_events), NX_IP_RARP_REC_EVENT, TX_OR);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800d964:	2200      	movs	r2, #0
 800d966:	2120      	movs	r1, #32
 800d968:	4618      	mov	r0, r3
 800d96a:	f002 fdc1 	bl	80104f0 <_tx_event_flags_set>
    }
}
 800d96e:	3720      	adds	r7, #32
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <_nx_udp_bind_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_bind_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b08a      	sub	sp, #40	@ 0x28
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *owning_socket_ptr; /* Socket owning the port  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d982:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d984:	f3ef 8310 	mrs	r3, PRIMASK
 800d988:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d98a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d98c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d98e:	b672      	cpsid	i
    return(int_posture);
 800d990:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800d992:	623b      	str	r3, [r7, #32]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d043      	beq.n	800da24 <_nx_udp_bind_cleanup+0xb0>
 800d99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d040      	beq.n	800da24 <_nx_udp_bind_cleanup+0xb0>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a4:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800d9a6:	4a24      	ldr	r2, [pc, #144]	@ (800da38 <_nx_udp_bind_cleanup+0xc4>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d13b      	bne.n	800da24 <_nx_udp_bind_cleanup+0xb0>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the socket bind in progress flag.  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Pickup the socket owning the port. This pointer was
           saved in the bind processing prior to suspension.  */
        owning_socket_ptr =  socket_ptr -> nx_udp_socket_bound_previous;
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9bc:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d103      	bne.n	800d9d0 <_nx_udp_bind_cleanup+0x5c>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	661a      	str	r2, [r3, #96]	@ 0x60
 800d9ce:	e00d      	b.n	800d9ec <_nx_udp_bind_cleanup+0x78>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            owning_socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800d9e0:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800d9ea:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        owning_socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d9f0:	1e5a      	subs	r2, r3, #1
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9fa:	2b0c      	cmp	r3, #12
 800d9fc:	d112      	bne.n	800da24 <_nx_udp_bind_cleanup+0xb0>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_PORT_UNAVAILABLE;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2223      	movs	r2, #35	@ 0x23
 800da02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800da06:	4b0d      	ldr	r3, [pc, #52]	@ (800da3c <_nx_udp_bind_cleanup+0xc8>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	3301      	adds	r3, #1
 800da0c:	4a0b      	ldr	r2, [pc, #44]	@ (800da3c <_nx_udp_bind_cleanup+0xc8>)
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	6a3b      	ldr	r3, [r7, #32]
 800da12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	f383 8810 	msr	PRIMASK, r3
}
 800da1a:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f004 fcb3 	bl	8012388 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800da22:	e005      	b.n	800da30 <_nx_udp_bind_cleanup+0xbc>
 800da24:	6a3b      	ldr	r3, [r7, #32]
 800da26:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f383 8810 	msr	PRIMASK, r3
}
 800da2e:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800da30:	3728      	adds	r7, #40	@ 0x28
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	55445020 	.word	0x55445020
 800da3c:	2000aeac 	.word	0x2000aeac

0800da40 <_nx_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_enable(NX_IP *ip_ptr)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_ENABLE, ip_ptr, 0, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Set the UDP packet receive function in the IP structure to indicate
       we are ready to receive UDP packets.  */
    ip_ptr -> nx_ip_udp_packet_receive =  _nx_udp_packet_receive;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a05      	ldr	r2, [pc, #20]	@ (800da60 <_nx_udp_enable+0x20>)
 800da4c:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	370c      	adds	r7, #12
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	0800db59 	.word	0x0800db59

0800da64 <_nx_udp_free_port_find>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_free_port_find(NX_IP *ip_ptr, UINT port, UINT *free_port_ptr)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08a      	sub	sp, #40	@ 0x28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	60b9      	str	r1, [r7, #8]
 800da6e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_FREE_PORT_FIND, ip_ptr, port, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Save the original port.  */
    starting_port =  port;
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	61fb      	str	r3, [r7, #28]
    /* Loop through the UDP ports until a free entry is found.  */
    do
    {

        /* Calculate the hash index in the UDP port array of the associated IP instance.  */
        index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	0a1a      	lsrs	r2, r3, #8
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	4413      	add	r3, r2
 800da7c:	f003 031f 	and.w	r3, r3, #31
 800da80:	61bb      	str	r3, [r7, #24]

        /* Obtain the IP mutex so we can figure out whether or not the port has already
           been bound to.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800da88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800da8c:	4618      	mov	r0, r3
 800da8e:	f003 f991 	bl	8010db4 <_tx_mutex_get>

        /* Pickup the head of the UDP ports bound list.  */
        search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	33e0      	adds	r3, #224	@ 0xe0
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	4413      	add	r3, r2
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	623b      	str	r3, [r7, #32]

        /* Set the bound flag to false.  */
        bound =  NX_FALSE;
 800daa0:	2300      	movs	r3, #0
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Determine if we need to perform a list search.  */
        if (search_ptr)
 800daa4:	6a3b      	ldr	r3, [r7, #32]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d010      	beq.n	800dacc <_nx_udp_free_port_find+0x68>
        {

            /* Walk through the circular list of UDP sockets that are already
               bound.  */
            end_ptr =     search_ptr;
 800daaa:	6a3b      	ldr	r3, [r7, #32]
 800daac:	617b      	str	r3, [r7, #20]
            do
            {

                /* Determine if this entry is the same as the requested port.  */
                if (search_ptr -> nx_udp_socket_port == port)
 800daae:	6a3b      	ldr	r3, [r7, #32]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	68ba      	ldr	r2, [r7, #8]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d102      	bne.n	800dabe <_nx_udp_free_port_find+0x5a>
                {

                    /* Set the bound flag.  */
                    bound =  NX_TRUE;
 800dab8:	2301      	movs	r3, #1
 800daba:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Get out of the loop.  */
                    break;
 800dabc:	e006      	b.n	800dacc <_nx_udp_free_port_find+0x68>
                }

                /* Move to the next entry in the list.  */
                search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800dabe:	6a3b      	ldr	r3, [r7, #32]
 800dac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dac2:	623b      	str	r3, [r7, #32]
            } while (search_ptr != end_ptr);
 800dac4:	6a3a      	ldr	r2, [r7, #32]
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d1f0      	bne.n	800daae <_nx_udp_free_port_find+0x4a>
            }
        }
#endif

        /* Release protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800dad2:	4618      	mov	r0, r3
 800dad4:	f003 fbe6 	bl	80112a4 <_tx_mutex_put>

        /* Determine if the port is available.  */
        if (!bound)
 800dad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d104      	bne.n	800dae8 <_nx_udp_free_port_find+0x84>
        {

            /* Setup the return port number.  */
            *free_port_ptr =  port;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	601a      	str	r2, [r3, #0]

            /* Update the trace event with the status.  */
            NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_FREE_PORT_FIND, 0, 0, port, 0);

            /* Return success.  */
            return(NX_SUCCESS);
 800dae4:	2300      	movs	r3, #0
 800dae6:	e00e      	b.n	800db06 <_nx_udp_free_port_find+0xa2>
        }

        /* Move to the next port.  */
        port++;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	3301      	adds	r3, #1
 800daec:	60bb      	str	r3, [r7, #8]

        /* Determine if we need to wrap.  */
        if (port > NX_MAX_PORT)
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daf4:	d302      	bcc.n	800dafc <_nx_udp_free_port_find+0x98>
        {

            /* Yes, we need to wrap around.  */
            port =  NX_SEARCH_PORT_START;
 800daf6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800dafa:	60bb      	str	r3, [r7, #8]
        }
    } while (starting_port != port);
 800dafc:	69fa      	ldr	r2, [r7, #28]
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	429a      	cmp	r2, r3
 800db02:	d1b7      	bne.n	800da74 <_nx_udp_free_port_find+0x10>

    /* A free port was not found, return an error.  */
    return(NX_NO_FREE_PORTS);
 800db04:	2345      	movs	r3, #69	@ 0x45
}
 800db06:	4618      	mov	r0, r3
 800db08:	3728      	adds	r7, #40	@ 0x28
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <_nx_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_packet_info_extract(NX_PACKET *packet_ptr, ULONG *ip_address,
                                  UINT *protocol, UINT *port, UINT *interface_index)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b08a      	sub	sp, #40	@ 0x28
 800db12:	af02      	add	r7, sp, #8
 800db14:	60f8      	str	r0, [r7, #12]
 800db16:	60b9      	str	r1, [r7, #8]
 800db18:	607a      	str	r2, [r7, #4]
 800db1a:	603b      	str	r3, [r7, #0]
NXD_ADDRESS nxd_ip_address;
UINT        status;


    /* Call the NXD version of the service. */
    status = _nxd_udp_packet_info_extract(packet_ptr, &nxd_ip_address, protocol, port, interface_index);
 800db1c:	f107 0114 	add.w	r1, r7, #20
 800db20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	687a      	ldr	r2, [r7, #4]
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f001 f804 	bl	800eb36 <_nxd_udp_packet_info_extract>
 800db2e:	61f8      	str	r0, [r7, #28]

    if (status == NX_SUCCESS)
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10b      	bne.n	800db4e <_nx_udp_packet_info_extract+0x40>
    {
        if (ip_address)
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d008      	beq.n	800db4e <_nx_udp_packet_info_extract+0x40>
        {

            /*lint -e{644} suppress variable might not be initialized, since "nxd_ip_address" was initialized in _nxd_udp_packet_info_extract. */
            if (nxd_ip_address.nxd_ip_version == NX_IP_VERSION_V4)
 800db3c:	697b      	ldr	r3, [r7, #20]
 800db3e:	2b04      	cmp	r3, #4
 800db40:	d103      	bne.n	800db4a <_nx_udp_packet_info_extract+0x3c>
            {
                *ip_address = nxd_ip_address.nxd_ip_address.v4;
 800db42:	69ba      	ldr	r2, [r7, #24]
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	601a      	str	r2, [r3, #0]
 800db48:	e001      	b.n	800db4e <_nx_udp_packet_info_extract+0x40>
            }
            else
            {
                return(NX_INVALID_PACKET);
 800db4a:	2312      	movs	r3, #18
 800db4c:	e000      	b.n	800db50 <_nx_udp_packet_info_extract+0x42>
            }
        }
    }

    return(status);
 800db4e:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(port);
    NX_PARAMETER_NOT_USED(interface_index);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800db50:	4618      	mov	r0, r3
 800db52:	3720      	adds	r7, #32
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <_nx_udp_packet_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_packet_receive(NX_IP *ip_ptr, NX_PACKET *packet_ptr)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b094      	sub	sp, #80	@ 0x50
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

#ifndef NX_DISABLE_UDP_INFO

    /* Increment the total UDP receive packets count.  */
    ip_ptr -> nx_ip_udp_packets_received++;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db68:	1c5a      	adds	r2, r3, #1
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#endif

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < sizeof(NX_UDP_HEADER))
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db74:	2b07      	cmp	r3, #7
 800db76:	d80a      	bhi.n	800db8e <_nx_udp_packet_receive+0x36>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db7e:	1c5a      	adds	r2, r3, #1
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800db86:	6838      	ldr	r0, [r7, #0]
 800db88:	f7ff fda0 	bl	800d6cc <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800db8c:	e1d8      	b.n	800df40 <_nx_udp_packet_receive+0x3e8>
    }
#endif

    /* Pickup the pointer to the head of the UDP packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	689b      	ldr	r3, [r3, #8]
 800db92:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
       swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800db94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	ba1a      	rev	r2, r3
 800db9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db9c:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800db9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	ba1a      	rev	r2, r3
 800dba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dba6:	605a      	str	r2, [r3, #4]

#ifndef NX_DISABLE_RX_SIZE_CHECKING

    /* Check for valid packet length.  */
    if (packet_ptr -> nx_packet_length < (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK))
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	0c1b      	lsrs	r3, r3, #16
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d20a      	bcs.n	800dbcc <_nx_udp_packet_receive+0x74>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the UDP invalid packet error.  */
        ip_ptr -> nx_ip_udp_invalid_packets++;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dbbc:	1c5a      	adds	r2, r3, #1
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif

        /* Invalid packet length, just release it.  */
        _nx_packet_release(packet_ptr);
 800dbc4:	6838      	ldr	r0, [r7, #0]
 800dbc6:	f7ff fd81 	bl	800d6cc <_nx_packet_release>

        /* The function is complete, just return!  */
        return;
 800dbca:	e1b9      	b.n	800df40 <_nx_udp_packet_receive+0x3e8>
    /* Recompute the packet length in case TFC padding is present. */
    packet_ptr -> nx_packet_length = (((udp_header_ptr -> nx_udp_header_word_1) >> NX_SHIFT_BY_16) & NX_LOWER_16_MASK);
#endif /* NX_IPSEC_ENABLE */

    /* Pickup the destination UDP port.  */
    port =  (UINT)(udp_header_ptr -> nx_udp_header_word_0 & NX_LOWER_16_MASK);
 800dbcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800dbd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbd6:	0a1a      	lsrs	r2, r3, #8
 800dbd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbda:	4413      	add	r3, r2
 800dbdc:	f003 031f 	and.w	r3, r3, #31
 800dbe0:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if the caller is a thread. If so, we should use the protection mutex
       to avoid having the port list examined while we are traversing it. If this routine
       is called from an ISR nothing needs to be done since bind/unbind are not allowed
       from ISRs.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800dbe2:	4b8f      	ldr	r3, [pc, #572]	@ (800de20 <_nx_udp_packet_receive+0x2c8>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d010      	beq.n	800dc0c <_nx_udp_packet_receive+0xb4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dbea:	f3ef 8305 	mrs	r3, IPSR
 800dbee:	633b      	str	r3, [r7, #48]	@ 0x30
    return(ipsr_value);
 800dbf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dbf2:	4b8c      	ldr	r3, [pc, #560]	@ (800de24 <_nx_udp_packet_receive+0x2cc>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4313      	orrs	r3, r2
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d107      	bne.n	800dc0c <_nx_udp_packet_receive+0xb4>
    {

        /* Get mutex protection.  */
        tx_mutex_get(&(ip_ptr -> nx_ip_protection), NX_WAIT_FOREVER);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800dc02:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800dc06:	4618      	mov	r0, r3
 800dc08:	f003 f8d4 	bl	8010db4 <_tx_mutex_get>
    }

    /* Search the bound sockets in this index for the particular port.  */
    socket_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc10:	33e0      	adds	r3, #224	@ 0xe0
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4413      	add	r3, r2
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Determine if there are any sockets bound on this port index.  */
    if (!socket_ptr)
 800dc1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d13e      	bne.n	800dc9e <_nx_udp_packet_receive+0x146>
    {

#ifndef NX_DISABLE_IPV4
#ifndef NX_DISABLE_ICMPV4_ERROR_MESSAGE
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dc26:	2b04      	cmp	r3, #4
 800dc28:	d114      	bne.n	800dc54 <_nx_udp_packet_receive+0xfc>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00f      	beq.n	800dc54 <_nx_udp_packet_receive+0xfc>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800dc34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	ba1a      	rev	r2, r3
 800dc3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc3c:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800dc3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	ba1a      	rev	r2, r3
 800dc44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc46:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800dc48:	2300      	movs	r3, #0
 800dc4a:	4a77      	ldr	r2, [pc, #476]	@ (800de28 <_nx_udp_packet_receive+0x2d0>)
 800dc4c:	6839      	ldr	r1, [r7, #0]
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7fc fc26 	bl	800a4a0 <_nx_icmpv4_send_error_message>
#endif /* FEATURE_NX_IPV6 */

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dc5a:	1c5a      	adds	r2, r3, #1
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc68:	1c5a      	adds	r2, r3, #1
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif

        /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
        if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800dc70:	4b6b      	ldr	r3, [pc, #428]	@ (800de20 <_nx_udp_packet_receive+0x2c8>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00e      	beq.n	800dc96 <_nx_udp_packet_receive+0x13e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc78:	f3ef 8305 	mrs	r3, IPSR
 800dc7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 800dc7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc80:	4b68      	ldr	r3, [pc, #416]	@ (800de24 <_nx_udp_packet_receive+0x2cc>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4313      	orrs	r3, r2
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d105      	bne.n	800dc96 <_nx_udp_packet_receive+0x13e>
        {

            /* Release mutex protection.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800dc90:	4618      	mov	r0, r3
 800dc92:	f003 fb07 	bl	80112a4 <_tx_mutex_put>
        }

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800dc96:	6838      	ldr	r0, [r7, #0]
 800dc98:	f7ff fd18 	bl	800d6cc <_nx_packet_release>

        /* Just return.  */
        return;
 800dc9c:	e150      	b.n	800df40 <_nx_udp_packet_receive+0x3e8>
    /*  Loop to examine the list of bound ports on this index.  */
    do
    {

        /* Determine if the port has been found.  */
        if (socket_ptr -> nx_udp_socket_port == port)
 800dc9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d119      	bne.n	800dcdc <_nx_udp_packet_receive+0x184>
            /* Yes, we have a match.  */

#ifndef NX_DISABLE_UDP_INFO

            /* Increment the total number of packets received for this socket.  */
            socket_ptr -> nx_udp_socket_packets_received++;
 800dca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcaa:	699b      	ldr	r3, [r3, #24]
 800dcac:	1c5a      	adds	r2, r3, #1
 800dcae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcb0:	619a      	str	r2, [r3, #24]

            /* Increment the total UDP receive bytes.  */
            ip_ptr -> nx_ip_udp_bytes_received +=          packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcbc:	4413      	add	r3, r2
 800dcbe:	f1a3 0208 	sub.w	r2, r3, #8
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            socket_ptr -> nx_udp_socket_bytes_received +=  packet_ptr -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800dcc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcca:	69da      	ldr	r2, [r3, #28]
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd0:	4413      	add	r3, r2
 800dcd2:	f1a3 0208 	sub.w	r2, r3, #8
 800dcd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcd8:	61da      	str	r2, [r3, #28]

            /* If trace is enabled, insert this event into the trace buffer.  */
            NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_RECEIVE, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

            /* Get out of the search loop.  */
            break;
 800dcda:	e00b      	b.n	800dcf4 <_nx_udp_packet_receive+0x19c>
        }
        else
        {

            /* Move to the next entry in the bound index.  */
            socket_ptr =  socket_ptr -> nx_udp_socket_bound_next;
 800dcdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }
    } while (socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]);
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dce6:	33e0      	adds	r3, #224	@ 0xe0
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	4413      	add	r3, r2
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d1d4      	bne.n	800dc9e <_nx_udp_packet_receive+0x146>

    /* Determine if the caller is a thread. If so, release the mutex protection previously setup.  */
    if ((_tx_thread_current_ptr) && (TX_THREAD_GET_SYSTEM_STATE() == 0))
 800dcf4:	4b4a      	ldr	r3, [pc, #296]	@ (800de20 <_nx_udp_packet_receive+0x2c8>)
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00e      	beq.n	800dd1a <_nx_udp_packet_receive+0x1c2>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dcfc:	f3ef 8305 	mrs	r3, IPSR
 800dd00:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 800dd02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd04:	4b47      	ldr	r3, [pc, #284]	@ (800de24 <_nx_udp_packet_receive+0x2cc>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d105      	bne.n	800dd1a <_nx_udp_packet_receive+0x1c2>
    {

        /* Release mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800dd14:	4618      	mov	r0, r3
 800dd16:	f003 fac5 	bl	80112a4 <_tx_mutex_put>
    }

    /* Determine if a match was found.  */
    if (socket_ptr -> nx_udp_socket_port != port)
 800dd1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd1c:	689b      	ldr	r3, [r3, #8]
 800dd1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d02b      	beq.n	800dd7c <_nx_udp_packet_receive+0x224>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd2a:	1c5a      	adds	r2, r3, #1
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dd38:	1c5a      	adds	r2, r3, #1
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
#endif

#if !defined(NX_DISABLE_IPV4) && !defined(NX_DISABLE_ICMPV4_ERROR_MESSAGE)
        /* If ICMPv4 is enabled, send Destination unreachable. */
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dd46:	2b04      	cmp	r3, #4
 800dd48:	d114      	bne.n	800dd74 <_nx_udp_packet_receive+0x21c>
            (ip_ptr -> nx_ip_icmpv4_packet_process))
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3374 	ldr.w	r3, [r3, #884]	@ 0x374
        if ((packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4) &&
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00f      	beq.n	800dd74 <_nx_udp_packet_receive+0x21c>
        {

            /* Restore UDP header. */
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800dd54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	ba1a      	rev	r2, r3
 800dd5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd5c:	601a      	str	r2, [r3, #0]
            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800dd5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	ba1a      	rev	r2, r3
 800dd64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd66:	605a      	str	r2, [r3, #4]

            /* Send out ICMP error message if dest is not multicast. */
            NX_ICMPV4_SEND_DEST_UNREACHABLE(ip_ptr, packet_ptr, NX_ICMP_PORT_UNREACH_CODE);
 800dd68:	2300      	movs	r3, #0
 800dd6a:	4a2f      	ldr	r2, [pc, #188]	@ (800de28 <_nx_udp_packet_receive+0x2d0>)
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7fc fb96 	bl	800a4a0 <_nx_icmpv4_send_error_message>
            }
        }
#endif /* FEATURE_NX_IPV6 && !NX_DISABLE_ICMPV6_ERROR_MESSAGE  */

        /* No socket structure bound to this port, just release the packet.  */
        _nx_packet_release(packet_ptr);
 800dd74:	6838      	ldr	r0, [r7, #0]
 800dd76:	f7ff fca9 	bl	800d6cc <_nx_packet_release>
        return;
 800dd7a:	e0e1      	b.n	800df40 <_nx_udp_packet_receive+0x3e8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd7c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd80:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800dd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800dd84:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd86:	b672      	cpsid	i
    return(int_posture);
 800dd88:	6a3b      	ldr	r3, [r7, #32]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800dd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if the socket is still valid.  */
    if (socket_ptr -> nx_udp_socket_id != NX_UDP_ID)
 800dd8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a26      	ldr	r2, [pc, #152]	@ (800de2c <_nx_udp_packet_receive+0x2d4>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d01c      	beq.n	800ddd0 <_nx_udp_packet_receive+0x278>
    {

#ifndef NX_DISABLE_UDP_INFO

        /* Increment the no port for delivery count.  */
        ip_ptr -> nx_ip_udp_no_port_for_delivery++;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        /* Increment the total UDP receive packets dropped count.  */
        ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ddaa:	1c5a      	adds	r2, r3, #1
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

        /* Increment the total UDP receive packets dropped count for this socket.  */
        socket_ptr -> nx_udp_socket_packets_dropped++;
 800ddb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb6:	1c5a      	adds	r2, r3, #1
 800ddb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddba:	625a      	str	r2, [r3, #36]	@ 0x24
 800ddbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddbe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	f383 8810 	msr	PRIMASK, r3
}
 800ddc6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the packet.  */
        _nx_packet_release(packet_ptr);
 800ddc8:	6838      	ldr	r0, [r7, #0]
 800ddca:	f7ff fc7f 	bl	800d6cc <_nx_packet_release>

        /* Return to caller.  */
        return;
 800ddce:	e0b7      	b.n	800df40 <_nx_udp_packet_receive+0x3e8>
    }

    /* Pickup the receive notify function.  */
    receive_callback =  socket_ptr -> nx_udp_receive_callback;
 800ddd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if we need to update the UDP port head pointer.  This should
       only be done if the found socket pointer is not the head pointer and
       the mutex for this IP instance is available.  */
    if ((socket_ptr != ip_ptr -> nx_ip_udp_port_table[index]) && (!ip_ptr -> nx_ip_protection.tx_mutex_ownership_count))
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddda:	33e0      	adds	r3, #224	@ 0xe0
 800dddc:	009b      	lsls	r3, r3, #2
 800ddde:	4413      	add	r3, r2
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d00b      	beq.n	800de00 <_nx_udp_packet_receive+0x2a8>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d106      	bne.n	800de00 <_nx_udp_packet_receive+0x2a8>
    {

        /* Move the port head pointer to this socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr;
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddf6:	33e0      	adds	r3, #224	@ 0xe0
 800ddf8:	009b      	lsls	r3, r3, #2
 800ddfa:	4413      	add	r3, r2
 800ddfc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ddfe:	605a      	str	r2, [r3, #4]
    }

    /* Determine if there is thread waiting for a packet from this port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800de00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de04:	637b      	str	r3, [r7, #52]	@ 0x34
    if (thread_ptr)
 800de06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d03e      	beq.n	800de8a <_nx_udp_packet_receive+0x332>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800de0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de12:	429a      	cmp	r2, r3
 800de14:	d10c      	bne.n	800de30 <_nx_udp_packet_receive+0x2d8>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800de16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de18:	2200      	movs	r2, #0
 800de1a:	659a      	str	r2, [r3, #88]	@ 0x58
 800de1c:	e016      	b.n	800de4c <_nx_udp_packet_receive+0x2f4>
 800de1e:	bf00      	nop
 800de20:	2000ae14 	.word	0x2000ae14
 800de24:	20000098 	.word	0x20000098
 800de28:	03030000 	.word	0x03030000
 800de2c:	55445020 	.word	0x55445020
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800de30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de32:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800de34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de36:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800de38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800de3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de3e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800de40:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800de42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 800de46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de48:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800de4a:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800de4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800de50:	1e5a      	subs	r2, r3, #1
 800de52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de54:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800de56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de58:	2200      	movs	r2, #0
 800de5a:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800de5c:	4b3a      	ldr	r3, [pc, #232]	@ (800df48 <_nx_udp_packet_receive+0x3f0>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	3301      	adds	r3, #1
 800de62:	4a39      	ldr	r2, [pc, #228]	@ (800df48 <_nx_udp_packet_receive+0x3f0>)
 800de64:	6013      	str	r3, [r2, #0]

        /* Return this block pointer to the suspended thread waiting for
           a block.  */
        *((NX_PACKET **)thread_ptr -> tx_thread_additional_suspend_info) =  packet_ptr;
 800de66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800de6a:	683a      	ldr	r2, [r7, #0]
 800de6c:	601a      	str	r2, [r3, #0]
 800de6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de70:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800de72:	69bb      	ldr	r3, [r7, #24]
 800de74:	f383 8810 	msr	PRIMASK, r3
}
 800de78:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800de7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de7c:	2200      	movs	r2, #0
 800de7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800de82:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800de84:	f004 fa80 	bl	8012388 <_tx_thread_system_resume>
 800de88:	e054      	b.n	800df34 <_nx_udp_packet_receive+0x3dc>
            return;
        }
#endif /* NX_ENABLE_LOW_WATERMARK */

        /* Place the packet at the end of the socket's receive queue.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800de8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d03c      	beq.n	800df0c <_nx_udp_packet_receive+0x3b4>
        {

            /* Add the new packet to a nonempty list.  */
            (socket_ptr -> nx_udp_socket_receive_tail) -> nx_packet_queue_next =  packet_ptr;
 800de92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	61da      	str	r2, [r3, #28]
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800de9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de9c:	683a      	ldr	r2, [r7, #0]
 800de9e:	649a      	str	r2, [r3, #72]	@ 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	2200      	movs	r2, #0
 800dea4:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800dea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deaa:	1c5a      	adds	r2, r3, #1
 800deac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deae:	63da      	str	r2, [r3, #60]	@ 0x3c

            /* Determine if the maximum queue depth has been reached.  */
            if (socket_ptr -> nx_udp_socket_receive_count >
 800deb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                socket_ptr -> nx_udp_socket_queue_maximum)
 800deb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
            if (socket_ptr -> nx_udp_socket_receive_count >
 800deb8:	429a      	cmp	r2, r3
 800deba:	d921      	bls.n	800df00 <_nx_udp_packet_receive+0x3a8>
            {

                /* We have exceeded the queue depth, so remove the first item
                   in the queue (which is the oldest).  */
                packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800debc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800debe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dec0:	603b      	str	r3, [r7, #0]
                socket_ptr -> nx_udp_socket_receive_head =  packet_ptr -> nx_packet_queue_next;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	69da      	ldr	r2, [r3, #28]
 800dec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dec8:	645a      	str	r2, [r3, #68]	@ 0x44

                /* Decrement the number of packets queued.  */
                socket_ptr -> nx_udp_socket_receive_count--;
 800deca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800decc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dece:	1e5a      	subs	r2, r3, #1
 800ded0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded2:	63da      	str	r2, [r3, #60]	@ 0x3c

#ifndef NX_DISABLE_UDP_INFO

                /* Increment the total UDP receive packets dropped count.  */
                ip_ptr -> nx_ip_udp_receive_packets_dropped++;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800deda:	1c5a      	adds	r2, r3, #1
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                /* Increment the total UDP receive packets dropped count for this socket.  */
                socket_ptr -> nx_udp_socket_packets_dropped++;
 800dee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dee6:	1c5a      	adds	r2, r3, #1
 800dee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deea:	625a      	str	r2, [r3, #36]	@ 0x24
 800deec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deee:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	f383 8810 	msr	PRIMASK, r3
}
 800def6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Release the packet.  */
                _nx_packet_release(packet_ptr);
 800def8:	6838      	ldr	r0, [r7, #0]
 800defa:	f7ff fbe7 	bl	800d6cc <_nx_packet_release>
 800defe:	e019      	b.n	800df34 <_nx_udp_packet_receive+0x3dc>
 800df00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f383 8810 	msr	PRIMASK, r3
}
 800df0a:	e013      	b.n	800df34 <_nx_udp_packet_receive+0x3dc>
        }
        else
        {

            /* Add the new packet to an empty list.  */
            socket_ptr -> nx_udp_socket_receive_head =  packet_ptr;
 800df0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df0e:	683a      	ldr	r2, [r7, #0]
 800df10:	645a      	str	r2, [r3, #68]	@ 0x44
            socket_ptr -> nx_udp_socket_receive_tail =  packet_ptr;
 800df12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df14:	683a      	ldr	r2, [r7, #0]
 800df16:	649a      	str	r2, [r3, #72]	@ 0x48
            packet_ptr -> nx_packet_queue_next =        NX_NULL;
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	2200      	movs	r2, #0
 800df1c:	61da      	str	r2, [r3, #28]

            /* Increment the number of packets queued.  */
            socket_ptr -> nx_udp_socket_receive_count++;
 800df1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df22:	1c5a      	adds	r2, r3, #1
 800df24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df26:	63da      	str	r2, [r3, #60]	@ 0x3c
 800df28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	f383 8810 	msr	PRIMASK, r3
}
 800df32:	bf00      	nop
        /* Add debug information. */
        NX_PACKET_DEBUG(NX_PACKET_UDP_RECEIVE_QUEUE, __LINE__, packet_ptr);
    }

    /* Determine if there is a socket receive notification function specified.  */
    if (receive_callback)
 800df34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df36:	2b00      	cmp	r3, #0
 800df38:	d002      	beq.n	800df40 <_nx_udp_packet_receive+0x3e8>
    {

        /* Yes, notification is requested.  Call the application's receive notification
           function for this socket.  */
        (receive_callback)(socket_ptr);
 800df3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800df3e:	4798      	blx	r3
    }
}
 800df40:	3750      	adds	r7, #80	@ 0x50
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	2000aeac 	.word	0x2000aeac

0800df4c <_nx_udp_receive_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _nx_udp_receive_cleanup(TX_THREAD *thread_ptr NX_CLEANUP_PARAMETER)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b088      	sub	sp, #32
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
NX_UDP_SOCKET *socket_ptr;  /* Working socket pointer  */

    NX_CLEANUP_EXTENSION

    /* Setup pointer to UDP socket control block.  */
    socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df5c:	f3ef 8310 	mrs	r3, PRIMASK
 800df60:	617b      	str	r3, [r7, #20]
    return(posture);
 800df62:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800df64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df66:	b672      	cpsid	i
    return(int_posture);
 800df68:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to remove the suspended thread from the UDP socket.  */
    TX_DISABLE
 800df6a:	61bb      	str	r3, [r7, #24]

    /* Determine if the cleanup is still required.  */
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df70:	2b00      	cmp	r3, #0
 800df72:	d03d      	beq.n	800dff0 <_nx_udp_receive_cleanup+0xa4>
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d03a      	beq.n	800dff0 <_nx_udp_receive_cleanup+0xa4>
        (socket_ptr -> nx_udp_socket_id == NX_UDP_ID))
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	681b      	ldr	r3, [r3, #0]
    if ((thread_ptr -> tx_thread_suspend_cleanup) && (socket_ptr) &&
 800df7e:	4a21      	ldr	r2, [pc, #132]	@ (800e004 <_nx_udp_receive_cleanup+0xb8>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d135      	bne.n	800dff0 <_nx_udp_receive_cleanup+0xa4>
    {

        /* Yes, we still have thread suspension!  */

        /* Clear the suspension cleanup flag.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	429a      	cmp	r2, r3
 800df92:	d103      	bne.n	800df9c <_nx_udp_receive_cleanup+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2200      	movs	r2, #0
 800df98:	659a      	str	r2, [r3, #88]	@ 0x58
 800df9a:	e00d      	b.n	800dfb8 <_nx_udp_receive_cleanup+0x6c>
        {

            /* At least one more thread is on the same suspension list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_receive_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800dfac:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 800dfb2:	687a      	ldr	r2, [r7, #4]
 800dfb4:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800dfb6:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfbc:	1e5a      	subs	r2, r3, #1
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Now we need to determine if this cleanup is from a terminate, timeout,
           or from a wait abort.  */
        if (thread_ptr -> tx_thread_state == TX_TCP_IP)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc6:	2b0c      	cmp	r3, #12
 800dfc8:	d112      	bne.n	800dff0 <_nx_udp_receive_cleanup+0xa4>

            /* Thread still suspended on the UDP socket.  Setup return error status and
               resume the thread.  */

            /* Setup return status.  */
            thread_ptr -> tx_thread_suspend_status =  NX_NO_PACKET;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800dfd2:	4b0d      	ldr	r3, [pc, #52]	@ (800e008 <_nx_udp_receive_cleanup+0xbc>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	4a0b      	ldr	r2, [pc, #44]	@ (800e008 <_nx_udp_receive_cleanup+0xbc>)
 800dfda:	6013      	str	r3, [r2, #0]
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f383 8810 	msr	PRIMASK, r3
}
 800dfe6:	bf00      	nop
            TX_RESTORE

            /* Resume the thread!  Check for preemption even though we are executing
               from the system timer thread right now which normally executes at the
               highest priority.  */
            _tx_thread_system_resume(thread_ptr);
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f004 f9cd 	bl	8012388 <_tx_thread_system_resume>

            /* Finished, just return.  */
            return;
 800dfee:	e005      	b.n	800dffc <_nx_udp_receive_cleanup+0xb0>
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	f383 8810 	msr	PRIMASK, r3
}
 800dffa:	bf00      	nop
        }
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800dffc:	3720      	adds	r7, #32
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	55445020 	.word	0x55445020
 800e008:	2000aeac 	.word	0x2000aeac

0800e00c <_nx_udp_socket_bind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b092      	sub	sp, #72	@ 0x48
 800e010:	af00      	add	r7, sp, #0
 800e012:	60f8      	str	r0, [r7, #12]
 800e014:	60b9      	str	r1, [r7, #8]
 800e016:	607a      	str	r2, [r7, #4]
#endif /* NX_NAT_ENABLE */
NX_IP         *ip_ptr;
TX_THREAD     *thread_ptr;
NX_UDP_SOCKET *search_ptr;
NX_UDP_SOCKET *end_ptr;
UINT           status = NX_SUCCESS;
 800e018:	2300      	movs	r3, #0
 800e01a:	643b      	str	r3, [r7, #64]	@ 0x40


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_BIND, ip_ptr, socket_ptr, port, wait_option, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e024:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e028:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 fec1 	bl	8010db4 <_tx_mutex_get>

    /* Determine if the socket has already been bound to port or if a socket bind is
       already pending from another thread.  */
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e036:	2b00      	cmp	r3, #0
 800e038:	d103      	bne.n	800e042 <_nx_udp_socket_bind+0x36>
        (socket_ptr -> nx_udp_socket_bind_in_progress))
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    if ((socket_ptr -> nx_udp_socket_bound_next) ||
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d007      	beq.n	800e052 <_nx_udp_socket_bind+0x46>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e044:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e048:	4618      	mov	r0, r3
 800e04a:	f003 f92b 	bl	80112a4 <_tx_mutex_put>

        /* Return an already bound error code.  */
        return(NX_ALREADY_BOUND);
 800e04e:	2322      	movs	r3, #34	@ 0x22
 800e050:	e0ff      	b.n	800e252 <_nx_udp_socket_bind+0x246>
    }

    /* Determine if the port needs to be allocated.  */
    if (port == NX_ANY_PORT)
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d11e      	bne.n	800e096 <_nx_udp_socket_bind+0x8a>
    {

        /* Call the find routine to allocate a UDP port.  */
        port = NX_SEARCH_PORT_START + (UINT)(NX_RAND() % ((NX_MAX_PORT + 1) - NX_SEARCH_PORT_START));
 800e058:	f005 ff24 	bl	8013ea4 <rand>
 800e05c:	4603      	mov	r3, r0
 800e05e:	425a      	negs	r2, r3
 800e060:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e064:	f3c2 020d 	ubfx	r2, r2, #0, #14
 800e068:	bf58      	it	pl
 800e06a:	4253      	negpl	r3, r2
 800e06c:	f503 4340 	add.w	r3, r3, #49152	@ 0xc000
 800e070:	60bb      	str	r3, [r7, #8]
        if (_nx_udp_free_port_find(ip_ptr, port, &port) != NX_SUCCESS)
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	f107 0208 	add.w	r2, r7, #8
 800e078:	4619      	mov	r1, r3
 800e07a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e07c:	f7ff fcf2 	bl	800da64 <_nx_udp_free_port_find>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	d007      	beq.n	800e096 <_nx_udp_socket_bind+0x8a>
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e088:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e08c:	4618      	mov	r0, r3
 800e08e:	f003 f909 	bl	80112a4 <_tx_mutex_put>

            /* There was no free port, return an error code.  */
            return(NX_NO_FREE_PORTS);
 800e092:	2345      	movs	r3, #69	@ 0x45
 800e094:	e0dd      	b.n	800e252 <_nx_udp_socket_bind+0x246>
        }
    }
#endif

    /* Save the port number in the UDP socket structure.  */
    socket_ptr -> nx_udp_socket_port =  port;
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	609a      	str	r2, [r3, #8]

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	0a1a      	lsrs	r2, r3, #8
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	f003 031f 	and.w	r3, r3, #31
 800e0a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Pickup the head of the UDP ports bound list.  */
    search_ptr =  ip_ptr -> nx_ip_udp_port_table[index];
 800e0aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ae:	33e0      	adds	r3, #224	@ 0xe0
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Determine if we need to perform a list search.  */
    if (search_ptr)
 800e0b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d00f      	beq.n	800e0de <_nx_udp_socket_bind+0xd2>
    {

        /* Walk through the circular list of UDP sockets that are already
           bound.  */
        end_ptr = search_ptr;
 800e0be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0c0:	637b      	str	r3, [r7, #52]	@ 0x34
        do
        {

            /* Determine if this entry is the same as the requested port.  */
            if (search_ptr -> nx_udp_socket_port == port)
 800e0c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0c4:	689a      	ldr	r2, [r3, #8]
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d007      	beq.n	800e0dc <_nx_udp_socket_bind+0xd0>
                /* Yes, the port has already been allocated.  */
                break;
            }

            /* Move to the next entry in the list.  */
            search_ptr =  search_ptr -> nx_udp_socket_bound_next;
 800e0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0d0:	647b      	str	r3, [r7, #68]	@ 0x44
        } while (search_ptr != end_ptr);
 800e0d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e0d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0d6:	429a      	cmp	r2, r3
 800e0d8:	d1f3      	bne.n	800e0c2 <_nx_udp_socket_bind+0xb6>
 800e0da:	e000      	b.n	800e0de <_nx_udp_socket_bind+0xd2>
                break;
 800e0dc:	bf00      	nop
    }

    /* Now determine if the port is available.  */
    if ((search_ptr == NX_NULL) || (search_ptr -> nx_udp_socket_port != port))
 800e0de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d004      	beq.n	800e0ee <_nx_udp_socket_bind+0xe2>
 800e0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e6:	689a      	ldr	r2, [r3, #8]
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d047      	beq.n	800e17e <_nx_udp_socket_bind+0x172>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e0ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e0f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800e0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800e0f6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800e0f8:	b672      	cpsid	i
    return(int_posture);
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {

        /* Place this UDP socket structure on the list of bound ports.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800e0fc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if the list is NULL.  */
        if (search_ptr)
 800e0fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e100:	2b00      	cmp	r3, #0
 800e102:	d022      	beq.n	800e14a <_nx_udp_socket_bind+0x13e>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            socket_ptr -> nx_udp_socket_bound_next =       ip_ptr -> nx_ip_udp_port_table[index];
 800e104:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e108:	33e0      	adds	r3, #224	@ 0xe0
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	685a      	ldr	r2, [r3, #4]
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	64da      	str	r2, [r3, #76]	@ 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =   (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800e114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e118:	33e0      	adds	r3, #224	@ 0xe0
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	4413      	add	r3, r2
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	651a      	str	r2, [r3, #80]	@ 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next = socket_ptr;
 800e126:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12a:	33e0      	adds	r3, #224	@ 0xe0
 800e12c:	009b      	lsls	r3, r3, #2
 800e12e:	4413      	add	r3, r2
 800e130:	685b      	ldr	r3, [r3, #4]
 800e132:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e134:	68fa      	ldr	r2, [r7, #12]
 800e136:	64da      	str	r2, [r3, #76]	@ 0x4c
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   socket_ptr;
 800e138:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13c:	33e0      	adds	r3, #224	@ 0xe0
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	68fa      	ldr	r2, [r7, #12]
 800e146:	651a      	str	r2, [r3, #80]	@ 0x50
 800e148:	e00c      	b.n	800e164 <_nx_udp_socket_bind+0x158>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            socket_ptr -> nx_udp_socket_bound_next =      socket_ptr;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	68fa      	ldr	r2, [r7, #12]
 800e14e:	64da      	str	r2, [r3, #76]	@ 0x4c
            socket_ptr -> nx_udp_socket_bound_previous =  socket_ptr;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	651a      	str	r2, [r3, #80]	@ 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =       socket_ptr;
 800e156:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e15a:	33e0      	adds	r3, #224	@ 0xe0
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	605a      	str	r2, [r3, #4]
 800e164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e166:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e168:	6a3b      	ldr	r3, [r7, #32]
 800e16a:	f383 8810 	msr	PRIMASK, r3
}
 800e16e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e172:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e176:	4618      	mov	r0, r3
 800e178:	f003 f894 	bl	80112a4 <_tx_mutex_put>
 800e17c:	e068      	b.n	800e250 <_nx_udp_socket_bind+0x244>
    }
    else if (wait_option)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d05d      	beq.n	800e240 <_nx_udp_socket_bind+0x234>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e184:	f3ef 8310 	mrs	r3, PRIMASK
 800e188:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e18a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e18c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e18e:	b672      	cpsid	i
    return(int_posture);
 800e190:	69bb      	ldr	r3, [r7, #24]
    {

        /* Prepare for suspension of this thread.  */

        /* Disable interrupts.  */
        TX_DISABLE
 800e192:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Pickup thread pointer.  */
        thread_ptr =  _tx_thread_current_ptr;
 800e194:	4b31      	ldr	r3, [pc, #196]	@ (800e25c <_nx_udp_socket_bind+0x250>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Setup cleanup routine pointer.  */
        thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_bind_cleanup;
 800e19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19c:	4a30      	ldr	r2, [pc, #192]	@ (800e260 <_nx_udp_socket_bind+0x254>)
 800e19e:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Setup cleanup information, i.e. this socket control
           block.  */
        thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800e1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Also remember the socket that has bound to the port, since the thread
           is going to be suspended on that socket.  */
        socket_ptr -> nx_udp_socket_bound_previous =  search_ptr;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Set the socket bind in progress flag (thread pointer).  */
        socket_ptr -> nx_udp_socket_bind_in_progress =  thread_ptr;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1b0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Setup suspension list.  */
        if (search_ptr -> nx_udp_socket_bind_suspension_list)
 800e1b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d012      	beq.n	800e1e0 <_nx_udp_socket_bind+0x1d4>
        {

            /* This list is not NULL, add current thread to the end. */
            thread_ptr -> tx_thread_suspended_next =       search_ptr -> nx_udp_socket_bind_suspension_list;
 800e1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c0:	671a      	str	r2, [r3, #112]	@ 0x70
            thread_ptr -> tx_thread_suspended_previous =  (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous;
 800e1c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1c6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800e1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ca:	675a      	str	r2, [r3, #116]	@ 0x74
            ((search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =  thread_ptr;
 800e1cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1d4:	671a      	str	r2, [r3, #112]	@ 0x70
            (search_ptr -> nx_udp_socket_bind_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800e1d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1dc:	675a      	str	r2, [r3, #116]	@ 0x74
 800e1de:	e008      	b.n	800e1f2 <_nx_udp_socket_bind+0x1e6>
        else
        {

            /* No other threads are suspended.  Setup the head pointer and
               just setup this threads pointers to itself.  */
            search_ptr -> nx_udp_socket_bind_suspension_list =         thread_ptr;
 800e1e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1e4:	661a      	str	r2, [r3, #96]	@ 0x60
            thread_ptr -> tx_thread_suspended_next =                   thread_ptr;
 800e1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1ea:	671a      	str	r2, [r3, #112]	@ 0x70
            thread_ptr -> tx_thread_suspended_previous =               thread_ptr;
 800e1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1f0:	675a      	str	r2, [r3, #116]	@ 0x74
        }

        /* Increment the suspended thread count.  */
        search_ptr -> nx_udp_socket_bind_suspended_count++;
 800e1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1f6:	1c5a      	adds	r2, r3, #1
 800e1f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1fa:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the state to suspended.  */
        thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800e1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fe:	220c      	movs	r2, #12
 800e200:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e204:	2201      	movs	r2, #1
 800e206:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800e208:	4b16      	ldr	r3, [pc, #88]	@ (800e264 <_nx_udp_socket_bind+0x258>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3301      	adds	r3, #1
 800e20e:	4a15      	ldr	r2, [pc, #84]	@ (800e264 <_nx_udp_socket_bind+0x258>)
 800e210:	6013      	str	r3, [r2, #0]

        /* Save the timeout value.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800e212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e21a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	f383 8810 	msr	PRIMASK, r3
}
 800e222:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e226:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e22a:	4618      	mov	r0, r3
 800e22c:	f003 f83a 	bl	80112a4 <_tx_mutex_put>

        /* Call actual thread suspension routine.  */
        _tx_thread_system_suspend(thread_ptr);
 800e230:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e232:	f004 f9a9 	bl	8012588 <_tx_thread_system_suspend>

        /* Return the completion status.  */
        status = thread_ptr -> tx_thread_suspend_status;
 800e236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e23c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e23e:	e007      	b.n	800e250 <_nx_udp_socket_bind+0x244>
    }
    else
    {

        /* Release the IP protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e242:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e246:	4618      	mov	r0, r3
 800e248:	f003 f82c 	bl	80112a4 <_tx_mutex_put>

        /* Return the port unavailable error.  */
        status = NX_PORT_UNAVAILABLE;
 800e24c:	2323      	movs	r3, #35	@ 0x23
 800e24e:	643b      	str	r3, [r7, #64]	@ 0x40
        status = _nx_udp_socket_driver_bind(socket_ptr, port, wait_option);
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Return success to the caller.  */
    return(status);
 800e250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800e252:	4618      	mov	r0, r3
 800e254:	3748      	adds	r7, #72	@ 0x48
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	2000ae14 	.word	0x2000ae14
 800e260:	0800d975 	.word	0x0800d975
 800e264:	2000aeac 	.word	0x2000aeac

0800e268 <_nx_udp_socket_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                            ULONG type_of_service, ULONG fragment, UINT time_to_live, ULONG queue_maximum)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08a      	sub	sp, #40	@ 0x28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	603b      	str	r3, [r7, #0]

NX_UDP_SOCKET *tail_ptr;


    /* Initialize the TCP control block to zero.  */
    memset((void *)socket_ptr, 0, sizeof(NX_UDP_SOCKET));
 800e276:	2278      	movs	r2, #120	@ 0x78
 800e278:	2100      	movs	r1, #0
 800e27a:	68b8      	ldr	r0, [r7, #8]
 800e27c:	f006 f87c 	bl	8014378 <memset>

    /* Fill in the basic information in the new UDP socket structure.  */

    /* Remember the associated IP structure.  */
    socket_ptr -> nx_udp_socket_ip_ptr =  ip_ptr;
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	60da      	str	r2, [r3, #12]

    /* Save the UDP socket's name.  */
    socket_ptr -> nx_udp_socket_name =  name;
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	605a      	str	r2, [r3, #4]

    /* Save the type of service input parameter.  */
    socket_ptr -> nx_udp_socket_type_of_service =  type_of_service;
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Save the fragment input parameter.  */
    socket_ptr -> nx_udp_socket_fragment_enable =  fragment & NX_DONT_FRAGMENT;
 800e292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e294:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Save the time-to-live input parameter.  */
    socket_ptr -> nx_udp_socket_time_to_live =  time_to_live;
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* By default, have UDP checksum logic enabled.  To disable checksum logic, the
       application must call the nx_udp_checksum disable function for this UDP socket.  */
    socket_ptr -> nx_udp_socket_disable_checksum =  NX_FALSE;
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Clear the socket bind in progress flag.  */
    socket_ptr -> nx_udp_socket_bind_in_progress =  NX_FALSE;
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set various list pointers to NULL.  */
    socket_ptr -> nx_udp_socket_bound_next =            NX_NULL;
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    socket_ptr -> nx_udp_socket_bound_previous =        NX_NULL;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	651a      	str	r2, [r3, #80]	@ 0x50
    socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	661a      	str	r2, [r3, #96]	@ 0x60
    socket_ptr -> nx_udp_socket_bind_suspended_count =  0;
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize the receive queue parameters.  */
    socket_ptr -> nx_udp_socket_receive_count =         0;
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    socket_ptr -> nx_udp_socket_queue_maximum =         queue_maximum;
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e2d0:	641a      	str	r2, [r3, #64]	@ 0x40
    socket_ptr -> nx_udp_socket_receive_head =          NX_NULL;
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	645a      	str	r2, [r3, #68]	@ 0x44
    socket_ptr -> nx_udp_socket_receive_tail =          NX_NULL;
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Clear the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =             NX_NULL;
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	671a      	str	r2, [r3, #112]	@ 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_CREATE, ip_ptr, socket_ptr, type_of_service, queue_maximum, NX_TRACE_IP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can add socket to IP structure.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e2ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f002 fd60 	bl	8010db4 <_tx_mutex_get>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e2f4:	f3ef 8310 	mrs	r3, PRIMASK
 800e2f8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e2fa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e2fc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e2fe:	b672      	cpsid	i
    return(int_posture);
 800e300:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts while we link the new UDP socket to the IP structure.  */
    TX_DISABLE
 800e302:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Load the UDP ID field in the UDP control block.  */
    socket_ptr -> nx_udp_socket_id =  NX_UDP_ID;
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	4a1f      	ldr	r2, [pc, #124]	@ (800e384 <_nx_udp_socket_create+0x11c>)
 800e308:	601a      	str	r2, [r3, #0]

    /* Place the new UDP control block on the list of created UDP sockets for this IP.  First,
       check for an empty list.  */
    if (ip_ptr -> nx_ip_udp_created_sockets_ptr)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e310:	2b00      	cmp	r3, #0
 800e312:	d015      	beq.n	800e340 <_nx_udp_socket_create+0xd8>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e31a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e31c:	623b      	str	r3, [r7, #32]

        /* Place the new UDP socket control block in the list.  */
        (ip_ptr -> nx_ip_udp_created_sockets_ptr) -> nx_udp_socket_created_previous =  socket_ptr;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e324:	68ba      	ldr	r2, [r7, #8]
 800e326:	66da      	str	r2, [r3, #108]	@ 0x6c
        tail_ptr ->  nx_udp_socket_created_next =  socket_ptr;
 800e328:	6a3b      	ldr	r3, [r7, #32]
 800e32a:	68ba      	ldr	r2, [r7, #8]
 800e32c:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Setup this UDP socket's created links.  */
        socket_ptr -> nx_udp_socket_created_previous =  tail_ptr;
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	6a3a      	ldr	r2, [r7, #32]
 800e332:	66da      	str	r2, [r3, #108]	@ 0x6c
        socket_ptr -> nx_udp_socket_created_next =      ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	669a      	str	r2, [r3, #104]	@ 0x68
 800e33e:	e009      	b.n	800e354 <_nx_udp_socket_create+0xec>
    }
    else
    {

        /* The created UDP socket list is empty.  Add UDP socket control block to empty list.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =       socket_ptr;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	68ba      	ldr	r2, [r7, #8]
 800e344:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        socket_ptr -> nx_udp_socket_created_previous =  socket_ptr;
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	66da      	str	r2, [r3, #108]	@ 0x6c
        socket_ptr -> nx_udp_socket_created_next =      socket_ptr;
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	68ba      	ldr	r2, [r7, #8]
 800e352:	669a      	str	r2, [r3, #104]	@ 0x68
    }

    /* Increment the created UDP socket counter.  */
    ip_ptr -> nx_ip_udp_created_sockets_count++;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800e35a:	1c5a      	adds	r2, r3, #1
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800e362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e364:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	f383 8810 	msr	PRIMASK, r3
}
 800e36c:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e374:	4618      	mov	r0, r3
 800e376:	f002 ff95 	bl	80112a4 <_tx_mutex_put>

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3728      	adds	r7, #40	@ 0x28
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	55445020 	.word	0x55445020

0800e388 <_nx_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b088      	sub	sp, #32
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]

NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	61fb      	str	r3, [r7, #28]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_DELETE, ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can process the socket delete request.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e39c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f002 fd07 	bl	8010db4 <_tx_mutex_get>

    /* Determine if the socket is still bound to port.  */
    if (socket_ptr -> nx_udp_socket_bound_next)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d007      	beq.n	800e3be <_nx_udp_socket_delete+0x36>
    {

        /* Release the protection mutex.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f002 ff75 	bl	80112a4 <_tx_mutex_put>

        /* Return a still bound error code.  */
        return(NX_STILL_BOUND);
 800e3ba:	2342      	movs	r3, #66	@ 0x42
 800e3bc:	e03f      	b.n	800e43e <_nx_udp_socket_delete+0xb6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e3be:	f3ef 8310 	mrs	r3, PRIMASK
 800e3c2:	617b      	str	r3, [r7, #20]
    return(posture);
 800e3c4:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e3c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e3c8:	b672      	cpsid	i
    return(int_posture);
 800e3ca:	693b      	ldr	r3, [r7, #16]
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800e3cc:	61bb      	str	r3, [r7, #24]

    /* Now, remove the UDP socket from the created socket list.  */

    /* Clear the socket ID to make it invalid.  */
    socket_ptr -> nx_udp_socket_id =  0;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	601a      	str	r2, [r3, #0]

    /* See if the socket is the only one on the list.  */
    if (socket_ptr == socket_ptr -> nx_udp_socket_created_next)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d104      	bne.n	800e3e8 <_nx_udp_socket_delete+0x60>
    {

        /* Only created socket, just set the created list to NULL.  */
        ip_ptr -> nx_ip_udp_created_sockets_ptr =  NX_NULL;
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800e3e6:	e014      	b.n	800e412 <_nx_udp_socket_delete+0x8a>
    }
    else
    {

        /* Link-up the neighbors.  */
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
            socket_ptr -> nx_udp_socket_created_previous;
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
        (socket_ptr -> nx_udp_socket_created_next) -> nx_udp_socket_created_previous =
 800e3f0:	66da      	str	r2, [r3, #108]	@ 0x6c
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
            socket_ptr -> nx_udp_socket_created_next;
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
        (socket_ptr -> nx_udp_socket_created_previous) -> nx_udp_socket_created_next =
 800e3fa:	669a      	str	r2, [r3, #104]	@ 0x68

        /* See if we have to update the created list head pointer.  */
        if (ip_ptr -> nx_ip_udp_created_sockets_ptr == socket_ptr)
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800e402:	687a      	ldr	r2, [r7, #4]
 800e404:	429a      	cmp	r2, r3
 800e406:	d104      	bne.n	800e412 <_nx_udp_socket_delete+0x8a>
        {

            /* Yes, move the head pointer to the next link. */
            ip_ptr -> nx_ip_udp_created_sockets_ptr =  socket_ptr -> nx_udp_socket_created_next;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        }
    }

    /* Decrease the created sockets count.  */
    ip_ptr -> nx_ip_udp_created_sockets_count--;
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800e418:	1e5a      	subs	r2, r3, #1
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f383 8810 	msr	PRIMASK, r3
}
 800e42a:	bf00      	nop

    /* If trace is enabled, unregister this object.  */
    NX_TRACE_OBJECT_UNREGISTER(socket_ptr);

    /* Release the IP protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e432:	4618      	mov	r0, r3
 800e434:	f002 ff36 	bl	80112a4 <_tx_mutex_put>

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800e438:	f003 ff6c 	bl	8012314 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3720      	adds	r7, #32
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
	...

0800e448 <_nx_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b09a      	sub	sp, #104	@ 0x68
 800e44c:	af02      	add	r7, sp, #8
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
TX_INTERRUPT_SAVE_AREA

ULONG                 *temp_ptr;
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
NX_INTERFACE          *interface_ptr = NX_NULL;
 800e454:	2300      	movs	r3, #0
 800e456:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif /* NX_ENABLE_INTERFACE_CAPABILITY */
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT                   compute_checksum = 1;
 800e458:	2301      	movs	r3, #1
 800e45a:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, 0, 0, NX_TRACE_UDP_EVENTS, &trace_event, &trace_timestamp);

    /* Set the return pointer to NULL initially.  */
    *packet_ptr =   NX_NULL;
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	2200      	movs	r2, #0
 800e460:	601a      	str	r2, [r3, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e462:	f3ef 8310 	mrs	r3, PRIMASK
 800e466:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 800e468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 800e46a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800e46c:	b672      	cpsid	i
    return(int_posture);
 800e46e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /* Loop to retrieve a packet from the interface.  */
    for (;;)
    {

        /* Lockout interrupts.  */
        TX_DISABLE
 800e470:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Determine if the socket is currently bound.  */
        if (!socket_ptr ->  nx_udp_socket_bound_next)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e476:	2b00      	cmp	r3, #0
 800e478:	d107      	bne.n	800e48a <_nx_udp_socket_receive+0x42>
 800e47a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e47c:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e480:	f383 8810 	msr	PRIMASK, r3
}
 800e484:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Socket is not bound, return an error message.  */
            return(NX_NOT_BOUND);
 800e486:	2324      	movs	r3, #36	@ 0x24
 800e488:	e142      	b.n	800e710 <_nx_udp_socket_receive+0x2c8>
        }

        /* Determine if there is a packet already queued up for this socket.  */
        if (socket_ptr -> nx_udp_socket_receive_head)
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d01a      	beq.n	800e4c8 <_nx_udp_socket_receive+0x80>
        {

            /* Yes, there is a packet waiting.  */

            /* Remove it and place it in the thread's destination.  */
            *packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	601a      	str	r2, [r3, #0]
            socket_ptr -> nx_udp_socket_receive_head =  (*packet_ptr) -> nx_packet_queue_next;
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	69da      	ldr	r2, [r3, #28]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* If this was the last packet, set the tail pointer to NULL.  */
            if (socket_ptr -> nx_udp_socket_receive_head == NX_NULL)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d102      	bne.n	800e4b2 <_nx_udp_socket_receive+0x6a>
            {
                socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	649a      	str	r2, [r3, #72]	@ 0x48
            }

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4b6:	1e5a      	subs	r2, r3, #1
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 800e4bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e4be:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4c2:	f383 8810 	msr	PRIMASK, r3
}
 800e4c6:	e05e      	b.n	800e586 <_nx_udp_socket_receive+0x13e>
        }
        else
        {

            /* Determine if the request specifies suspension.  */
            if (wait_option)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d050      	beq.n	800e570 <_nx_udp_socket_receive+0x128>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup thread pointer.  */
                thread_ptr =  _tx_thread_current_ptr;
 800e4ce:	4b92      	ldr	r3, [pc, #584]	@ (800e718 <_nx_udp_socket_receive+0x2d0>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  _nx_udp_receive_cleanup;
 800e4d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4d6:	4a91      	ldr	r2, [pc, #580]	@ (800e71c <_nx_udp_socket_receive+0x2d4>)
 800e4d8:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (void *)socket_ptr;
 800e4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return packet pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (void *)packet_ptr;
 800e4e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Setup suspension list.  */
                if (socket_ptr -> nx_udp_socket_receive_suspension_list)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d012      	beq.n	800e514 <_nx_udp_socket_receive+0xcc>
                {

                    /* This list is not NULL, add current thread to the end. */
                    thread_ptr -> tx_thread_suspended_next =
                        socket_ptr -> nx_udp_socket_receive_suspension_list;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                    thread_ptr -> tx_thread_suspended_next =
 800e4f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4f4:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =
                        (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e4fa:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                    thread_ptr -> tx_thread_suspended_previous =
 800e4fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4fe:	675a      	str	r2, [r3, #116]	@ 0x74
                    ((socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e508:	671a      	str	r2, [r3, #112]	@ 0x70
                        thread_ptr;
                    (socket_ptr -> nx_udp_socket_receive_suspension_list) -> tx_thread_suspended_previous =   thread_ptr;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e50e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e510:	675a      	str	r2, [r3, #116]	@ 0x74
 800e512:	e008      	b.n	800e526 <_nx_udp_socket_receive+0xde>
                else
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    socket_ptr -> nx_udp_socket_receive_suspension_list =   thread_ptr;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e518:	659a      	str	r2, [r3, #88]	@ 0x58
                    thread_ptr -> tx_thread_suspended_next              =   thread_ptr;
 800e51a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e51c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e51e:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous          =   thread_ptr;
 800e520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e522:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e524:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspended thread count.  */
                socket_ptr -> nx_udp_socket_receive_suspended_count++;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e52a:	1c5a      	adds	r2, r3, #1
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =  TX_TCP_IP;
 800e530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e532:	220c      	movs	r2, #12
 800e534:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800e536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e538:	2201      	movs	r2, #1
 800e53a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800e53c:	4b78      	ldr	r3, [pc, #480]	@ (800e720 <_nx_udp_socket_receive+0x2d8>)
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	3301      	adds	r3, #1
 800e542:	4a77      	ldr	r2, [pc, #476]	@ (800e720 <_nx_udp_socket_receive+0x2d8>)
 800e544:	6013      	str	r3, [r2, #0]

                /* Save the timeout value.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800e546:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e548:	687a      	ldr	r2, [r7, #4]
 800e54a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e54c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e54e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e550:	6a3b      	ldr	r3, [r7, #32]
 800e552:	f383 8810 	msr	PRIMASK, r3
}
 800e556:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800e558:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e55a:	f004 f815 	bl	8012588 <_tx_thread_system_suspend>

                /* Determine if a packet was received successfully.  */
                if (thread_ptr -> tx_thread_suspend_status != NX_SUCCESS)
 800e55e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00e      	beq.n	800e586 <_nx_udp_socket_receive+0x13e>
                {

                    /* If not, just return the error code.  */
                    return(thread_ptr -> tx_thread_suspend_status);
 800e568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e56e:	e0cf      	b.n	800e710 <_nx_udp_socket_receive+0x2c8>
 800e570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e572:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e574:	69fb      	ldr	r3, [r7, #28]
 800e576:	f383 8810 	msr	PRIMASK, r3
}
 800e57a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Set the return pointer to NULL in case it was set but released due to checksum error.  */
                *packet_ptr =   NX_NULL;
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2200      	movs	r2, #0
 800e580:	601a      	str	r2, [r3, #0]

                /* Immediate return, return error completion.  */
                return(NX_NO_PACKET);
 800e582:	2301      	movs	r3, #1
 800e584:	e0c4      	b.n	800e710 <_nx_udp_socket_receive+0x2c8>
            }
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        /* Get the packet interface. */
#ifndef NX_DISABLE_IPV4
        if ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e58e:	2b04      	cmp	r3, #4
 800e590:	d103      	bne.n	800e59a <_nx_udp_socket_receive+0x152>
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_interface_ptr;
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e598:	65fb      	str	r3, [r7, #92]	@ 0x5c
        {
            interface_ptr = (*packet_ptr) -> nx_packet_address.nx_packet_ipv6_address_ptr -> nxd_ipv6_address_attached;
        }
#endif /* FEATURE_NX_IPV6 */

        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_RX_CHECKSUM)
 800e59a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e59e:	f003 0320 	and.w	r3, r3, #32
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <_nx_udp_socket_receive+0x162>
        {
            compute_checksum = 0;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	65bb      	str	r3, [r7, #88]	@ 0x58
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800e5aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 809d 	beq.w	800e6ec <_nx_udp_socket_receive+0x2a4>

            /* Determine if we need to compute the UDP checksum.  If it is disabled for this socket
               or if the UDP packet has a zero in the checksum field (indicating it was not computed
               by the sender, skip the checksum processing.  */
            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            temp_ptr =  (ULONG *)(*packet_ptr) -> nx_packet_prepend_ptr;
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	647b      	str	r3, [r7, #68]	@ 0x44
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d105      	bne.n	800e5ce <_nx_udp_socket_receive+0x186>
 800e5c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d106      	bne.n	800e5dc <_nx_udp_socket_receive+0x194>
                ((*packet_ptr) -> nx_packet_ip_version == NX_IP_VERSION_V6))                               /* It is IPv6 packet */
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
            if ((!socket_ptr -> nx_udp_socket_disable_checksum && (*(temp_ptr + 1) & NX_LOWER_16_MASK)) || /* per-socket checksum is not disabled, and the checksum field is not zero*/
 800e5d6:	2b06      	cmp	r3, #6
 800e5d8:	f040 808b 	bne.w	800e6f2 <_nx_udp_socket_receive+0x2aa>
            {
            ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	657b      	str	r3, [r7, #84]	@ 0x54
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	653b      	str	r3, [r7, #80]	@ 0x50
            ULONG          checksum;
            NX_PACKET     *current_ptr = *packet_ptr;
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	643b      	str	r3, [r7, #64]	@ 0x40
#ifdef NX_LITTLE_ENDIAN
            NX_UDP_HEADER *udp_header_ptr;

                /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                udp_header_ptr = (NX_UDP_HEADER *)(current_ptr -> nx_packet_prepend_ptr);
 800e5ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* NX_LITTLE_ENDIAN */

#ifndef NX_DISABLE_IPV4
                if (current_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800e5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e5f6:	2b04      	cmp	r3, #4
 800e5f8:	d108      	bne.n	800e60c <_nx_udp_socket_receive+0x1c4>
                {
                NX_IPV4_HEADER *ipv4_header;

                    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
                    ipv4_header = (NX_IPV4_HEADER *)(current_ptr -> nx_packet_ip_header);
 800e5fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
                    ip_src_addr = &(ipv4_header -> nx_ip_header_source_ip);
 800e600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e602:	330c      	adds	r3, #12
 800e604:	657b      	str	r3, [r7, #84]	@ 0x54
                    ip_dest_addr = &(ipv4_header -> nx_ip_header_destination_ip);
 800e606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e608:	3310      	adds	r3, #16
 800e60a:	653b      	str	r3, [r7, #80]	@ 0x50

#endif /* FEATURE_NX_IPV6 */

#ifdef NX_LITTLE_ENDIAN
                /* Restore UDP header to network byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800e60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	ba1a      	rev	r2, r3
 800e612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e614:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800e616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	ba1a      	rev	r2, r3
 800e61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e61e:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* nx_ip_checksum_compute takes care of both even number length and odd number length */
                /* Compute the checksum of the first packet */
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
                                                   (UINT)current_ptr -> nx_packet_length,
 800e620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e622:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                checksum = _nx_ip_checksum_compute(current_ptr, NX_PROTOCOL_UDP,
 800e624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e62a:	2111      	movs	r1, #17
 800e62c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800e62e:	f7fc f903 	bl	800a838 <_nx_ip_checksum_compute>
 800e632:	4603      	mov	r3, r0
 800e634:	637b      	str	r3, [r7, #52]	@ 0x34
                                                   ip_src_addr,
                                                   ip_dest_addr);

#ifdef NX_LITTLE_ENDIAN
                /* Convert UDP header to host byte order */
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800e636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	ba1a      	rev	r2, r3
 800e63c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e63e:	601a      	str	r2, [r3, #0]
                NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800e640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	ba1a      	rev	r2, r3
 800e646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e648:	605a      	str	r2, [r3, #4]
#endif /* NX_LITTLE_ENDIAN */

                /* Perform the one's complement processing on the checksum.  */
                checksum =  NX_LOWER_16_MASK & ~checksum;
 800e64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e64c:	43db      	mvns	r3, r3
 800e64e:	b29b      	uxth	r3, r3
 800e650:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Determine if it is valid.  */
                if (checksum == 0)
 800e652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e654:	2b00      	cmp	r3, #0
 800e656:	d04b      	beq.n	800e6f0 <_nx_udp_socket_receive+0x2a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e658:	f3ef 8310 	mrs	r3, PRIMASK
 800e65c:	617b      	str	r3, [r7, #20]
    return(posture);
 800e65e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e660:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e662:	b672      	cpsid	i
    return(int_posture);
 800e664:	693b      	ldr	r3, [r7, #16]
                {

#ifndef NX_DISABLE_UDP_INFO

                    /* Disable interrupts.  */
                    TX_DISABLE
 800e666:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Increment the UDP checksum error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_checksum_errors++;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800e670:	3201      	adds	r2, #1
 800e672:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

                    /* Increment the UDP invalid packets error count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800e67e:	3201      	adds	r2, #1
 800e680:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                    /* Increment the UDP checksum error count for this socket.  */
                    socket_ptr -> nx_udp_socket_checksum_errors++;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e688:	1c5a      	adds	r2, r3, #1
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Decrement the total UDP receive packets count.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packets_received--;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e696:	3a01      	subs	r2, #1
 800e698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

                    /* Decrement the total UDP receive bytes.  */
                    (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6aa:	1ad2      	subs	r2, r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	3208      	adds	r2, #8
 800e6b2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

                    /* Decrement the total UDP receive packets count.  */
                    socket_ptr -> nx_udp_socket_packets_received--;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	699b      	ldr	r3, [r3, #24]
 800e6ba:	1e5a      	subs	r2, r3, #1
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	619a      	str	r2, [r3, #24]

                    /* Decrement the total UDP receive bytes.  */
                    socket_ptr -> nx_udp_socket_bytes_received -=  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	69da      	ldr	r2, [r3, #28]
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ca:	1ad3      	subs	r3, r2, r3
 800e6cc:	f103 0208 	add.w	r2, r3, #8
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	61da      	str	r2, [r3, #28]
 800e6d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e6d6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	f383 8810 	msr	PRIMASK, r3
}
 800e6de:	bf00      	nop
                    /* Restore interrupts.  */
                    TX_RESTORE
#endif

                    /* Bad UDP checksum.  Release the packet. */
                    _nx_packet_release(*packet_ptr);
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7fe fff1 	bl	800d6cc <_nx_packet_release>
        TX_DISABLE
 800e6ea:	e6ba      	b.n	800e462 <_nx_udp_socket_receive+0x1a>
#if defined(NX_DISABLE_UDP_RX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        else
        {

            /* Simply break - checksum logic is conditionally disabled.  */
            break;
 800e6ec:	bf00      	nop
 800e6ee:	e000      	b.n	800e6f2 <_nx_udp_socket_receive+0x2aa>
                    break;
 800e6f0:	bf00      	nop
    /* At this point, we have a valid UDP packet for the caller.  */

    /* Remove the UDP header.  */

    /* Decrease the packet length.  */
    (*packet_ptr) -> nx_packet_length =  (*packet_ptr) -> nx_packet_length - (ULONG)sizeof(NX_UDP_HEADER);
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	3a08      	subs	r2, #8
 800e6fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Position past the UDP header pointer.  */
    (*packet_ptr) -> nx_packet_prepend_ptr =   (*packet_ptr) -> nx_packet_prepend_ptr + sizeof(NX_UDP_HEADER);
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	689a      	ldr	r2, [r3, #8]
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	3208      	adds	r2, #8
 800e70c:	609a      	str	r2, [r3, #8]

    /* Update the trace event with the status.  */
    NX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, NX_TRACE_UDP_SOCKET_RECEIVE, 0, 0, *packet_ptr, (*packet_ptr) -> nx_packet_length);

    /* Return a successful status to the caller.  */
    return(NX_SUCCESS);
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3760      	adds	r7, #96	@ 0x60
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}
 800e718:	2000ae14 	.word	0x2000ae14
 800e71c:	0800df4d 	.word	0x0800df4d
 800e720:	2000aeac 	.word	0x2000aeac

0800e724 <_nx_udp_socket_receive_notify>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_receive_notify(NX_UDP_SOCKET *socket_ptr,
                                    VOID (*udp_receive_notify)(NX_UDP_SOCKET *socket_ptr))
{
 800e724:	b480      	push	{r7}
 800e726:	b087      	sub	sp, #28
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e72e:	f3ef 8310 	mrs	r3, PRIMASK
 800e732:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e734:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e736:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e738:	b672      	cpsid	i
    return(int_posture);
 800e73a:	68bb      	ldr	r3, [r7, #8]
TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800e73c:	617b      	str	r3, [r7, #20]

    /* Setup the receive notify function pointer.  */
    socket_ptr -> nx_udp_receive_callback =  udp_receive_notify;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	683a      	ldr	r2, [r7, #0]
 800e742:	671a      	str	r2, [r3, #112]	@ 0x70
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	f383 8810 	msr	PRIMASK, r3
}
 800e74e:	bf00      	nop

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_RECEIVE_NOTIFY, socket_ptr -> nx_udp_socket_ip_ptr, socket_ptr, udp_receive_notify, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Return successful completion.  */
    return(NX_SUCCESS);
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	371c      	adds	r7, #28
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <_nx_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                          ULONG ip_address, UINT port)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b088      	sub	sp, #32
 800e762:	af00      	add	r7, sp, #0
 800e764:	60f8      	str	r0, [r7, #12]
 800e766:	60b9      	str	r1, [r7, #8]
 800e768:	607a      	str	r2, [r7, #4]
 800e76a:	603b      	str	r3, [r7, #0]
UINT        status;

NXD_ADDRESS dual_ip_address;

    /* build up the IP Address structure. */
    dual_ip_address.nxd_ip_version = NX_IP_VERSION_V4;
 800e76c:	2304      	movs	r3, #4
 800e76e:	617b      	str	r3, [r7, #20]
    dual_ip_address.nxd_ip_address.v4 = ip_address;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	61bb      	str	r3, [r7, #24]

    /* Call the actual udp socket send routine. */
    status = _nxd_udp_socket_send(socket_ptr, packet_ptr, &dual_ip_address, port);
 800e774:	f107 0214 	add.w	r2, r7, #20
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f000 fa2f 	bl	800ebe0 <_nxd_udp_socket_send>
 800e782:	61f8      	str	r0, [r7, #28]

    return(status);
 800e784:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* NX_DISABLE_IPV4 */
}
 800e786:	4618      	mov	r0, r3
 800e788:	3720      	adds	r7, #32
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <_nx_udp_socket_source_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_source_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET *packet_ptr,
                                 ULONG ip_address, UINT port, UINT address_index)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b086      	sub	sp, #24
 800e792:	af00      	add	r7, sp, #0
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	607a      	str	r2, [r7, #4]
 800e79a:	603b      	str	r3, [r7, #0]
UINT   status;
NX_IP *ip_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	617b      	str	r3, [r7, #20]

    /* Store interface information into the packet structure. */
    packet_ptr -> nx_packet_address.nx_packet_interface_ptr = &(ip_ptr -> nx_ip_interface[address_index]);
 800e7a2:	6a3a      	ldr	r2, [r7, #32]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	4413      	add	r3, r2
 800e7aa:	011b      	lsls	r3, r3, #4
 800e7ac:	f503 63e4 	add.w	r3, r3, #1824	@ 0x720
 800e7b0:	697a      	ldr	r2, [r7, #20]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	1d1a      	adds	r2, r3, #4
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Call udp_socket_send service */
    status = _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	68b9      	ldr	r1, [r7, #8]
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f7ff ffcc 	bl	800e75e <_nx_udp_socket_send>
 800e7c6:	6138      	str	r0, [r7, #16]

    return(status);
 800e7c8:	693b      	ldr	r3, [r7, #16]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3718      	adds	r7, #24
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
	...

0800e7d4 <_nx_udp_socket_unbind>:
/*                                            supported TCP/IP offload,   */
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b094      	sub	sp, #80	@ 0x50
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
NX_PACKET     *packet_ptr;
NX_PACKET     *next_packet_ptr;


    /* Setup the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	647b      	str	r3, [r7, #68]	@ 0x44
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOCKET_UNBIND, ip_ptr, socket_ptr, socket_ptr -> nx_udp_socket_port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    /* Obtain the IP mutex so we can figure out whether or not the port has already
       been bound to.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800e7e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7e4:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e7e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f002 fae1 	bl	8010db4 <_tx_mutex_get>

    /* Determine if the socket is bound to port.  */
    if (!socket_ptr -> nx_udp_socket_bound_next)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d119      	bne.n	800e82e <_nx_udp_socket_unbind+0x5a>
    {

        /* Determine if there is a special condition for the socket not being in
           a bound condition...  i.e. the socket is in a pending-to-be-bound condition
           in a call from a different thread.  */
        if (socket_ptr -> nx_udp_socket_bind_in_progress)
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00d      	beq.n	800e81e <_nx_udp_socket_unbind+0x4a>
        {

            /* Execute the bind suspension cleanup routine.  */
            _nx_udp_bind_cleanup(socket_ptr -> nx_udp_socket_bind_in_progress NX_CLEANUP_ARGUMENT);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e806:	2100      	movs	r1, #0
 800e808:	4618      	mov	r0, r3
 800e80a:	f7ff f8b3 	bl	800d974 <_nx_udp_bind_cleanup>

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e80e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e810:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e814:	4618      	mov	r0, r3
 800e816:	f002 fd45 	bl	80112a4 <_tx_mutex_put>

            /* Return success.  */
            return(NX_SUCCESS);
 800e81a:	2300      	movs	r3, #0
 800e81c:	e13e      	b.n	800ea9c <_nx_udp_socket_unbind+0x2c8>
        }
        else
        {

            /* Release the protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800e81e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e820:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800e824:	4618      	mov	r0, r3
 800e826:	f002 fd3d 	bl	80112a4 <_tx_mutex_put>

            /* Return a not bound error code.  */
            return(NX_NOT_BOUND);
 800e82a:	2324      	movs	r3, #36	@ 0x24
 800e82c:	e136      	b.n	800ea9c <_nx_udp_socket_unbind+0x2c8>

    /* Otherwise, the socket is bound.  We need to remove this socket from the
       port and check for any other UDP socket bind requests that are queued.  */

    /* Pickup the port number in the UDP socket structure.  */
    port =  socket_ptr -> nx_udp_socket_port;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Calculate the hash index in the UDP port array of the associated IP instance.  */
    index =  (UINT)((port + (port >> 8)) & NX_UDP_PORT_TABLE_MASK);
 800e834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e836:	0a1a      	lsrs	r2, r3, #8
 800e838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e83a:	4413      	add	r3, r2
 800e83c:	f003 031f 	and.w	r3, r3, #31
 800e840:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e842:	f3ef 8310 	mrs	r3, PRIMASK
 800e846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800e848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800e84a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e84c:	b672      	cpsid	i
    return(int_posture);
 800e84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#ifdef NX_ENABLE_TCPIP_OFFLOAD
    _nx_udp_socket_driver_unbind(socket_ptr);
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

    /* Disable interrupts while we unlink the current socket.  */
    TX_DISABLE
 800e850:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if this is the only socket bound on this port list.  */
    if (socket_ptr -> nx_udp_socket_bound_next == socket_ptr)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d10a      	bne.n	800e872 <_nx_udp_socket_unbind+0x9e>
    {

        /* Yes, this is the only socket on the port list.  */

        /* Clear the list head pointer and the next pointer in the socket.  */
        ip_ptr -> nx_ip_udp_port_table[index] =   NX_NULL;
 800e85c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e85e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e860:	33e0      	adds	r3, #224	@ 0xe0
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	2200      	movs	r2, #0
 800e868:	605a      	str	r2, [r3, #4]
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e870:	e01d      	b.n	800e8ae <_nx_udp_socket_unbind+0xda>
    {

        /* Relink the neighbors of this UDP socket.  */

        /* Update the links of the adjacent sockets.  */
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            socket_ptr -> nx_udp_socket_bound_previous;
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6d12      	ldr	r2, [r2, #80]	@ 0x50
        (socket_ptr -> nx_udp_socket_bound_next) -> nx_udp_socket_bound_previous =
 800e87a:	651a      	str	r2, [r3, #80]	@ 0x50
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            socket_ptr -> nx_udp_socket_bound_next;
 800e880:	687a      	ldr	r2, [r7, #4]
 800e882:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
        (socket_ptr -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800e884:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Determine if the head of the port list points to the socket being removed.
           If so, we need to move the head pointer.  */
        if (ip_ptr -> nx_ip_udp_port_table[index] == socket_ptr)
 800e886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e88a:	33e0      	adds	r3, #224	@ 0xe0
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	4413      	add	r3, r2
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	429a      	cmp	r2, r3
 800e896:	d107      	bne.n	800e8a8 <_nx_udp_socket_unbind+0xd4>
        {

            /* Yes, we need to move the port list head pointer.  */
            ip_ptr -> nx_ip_udp_port_table[index] =  socket_ptr -> nx_udp_socket_bound_next;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e89c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8a0:	33e0      	adds	r3, #224	@ 0xe0
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	440b      	add	r3, r1
 800e8a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear the next pointer in the socket to indicate it is no longer bound.  */
        socket_ptr -> nx_udp_socket_bound_next =  NX_NULL;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8b0:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b4:	f383 8810 	msr	PRIMASK, r3
}
 800e8b8:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* The socket is off the bound list...  we need to check for queued packets and possible
       receive suspension.  We need to clean up either of these conditions.  */
    if (socket_ptr -> nx_udp_socket_receive_count)
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d01b      	beq.n	800e8fa <_nx_udp_socket_unbind+0x126>
    {

        /* Setup packet pointer.  */
        packet_ptr =  socket_ptr -> nx_udp_socket_receive_head;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8c6:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* Clear the head and the tail pointers.  */
        socket_ptr -> nx_udp_socket_receive_head =  NX_NULL;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	645a      	str	r2, [r3, #68]	@ 0x44
        socket_ptr -> nx_udp_socket_receive_tail =  NX_NULL;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	649a      	str	r2, [r3, #72]	@ 0x48

        /* Loop to clear all the packets out.  */
        while (socket_ptr -> nx_udp_socket_receive_count)
 800e8d4:	e00c      	b.n	800e8f0 <_nx_udp_socket_unbind+0x11c>
        {

            /* Pickup the next queued packet.  */
            next_packet_ptr =  packet_ptr -> nx_packet_queue_next;
 800e8d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e8d8:	69db      	ldr	r3, [r3, #28]
 800e8da:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Release the packet.  */
            _nx_packet_release(packet_ptr);
 800e8dc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800e8de:	f7fe fef5 	bl	800d6cc <_nx_packet_release>

            /* Move to the next packet.  */
            packet_ptr =  next_packet_ptr;
 800e8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8e4:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Decrease the queued packet count.  */
            socket_ptr -> nx_udp_socket_receive_count--;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8ea:	1e5a      	subs	r2, r3, #1
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	63da      	str	r2, [r3, #60]	@ 0x3c
        while (socket_ptr -> nx_udp_socket_receive_count)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1ee      	bne.n	800e8d6 <_nx_udp_socket_unbind+0x102>
 800e8f8:	e035      	b.n	800e966 <_nx_udp_socket_unbind+0x192>
        }
    }
    else if (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d031      	beq.n	800e966 <_nx_udp_socket_unbind+0x192>
    {

        /* Clear out all threads suspended on this socket.  */

        /* Pickup the first suspended thread.  */
        thread_ptr =  socket_ptr -> nx_udp_socket_receive_suspension_list;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e906:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Clear the thread receive suspension list.  */
        socket_ptr -> nx_udp_socket_receive_suspension_list =  NX_NULL;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Walk through the queue list to resume any and all threads suspended
           on this queue.  */
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800e90e:	e026      	b.n	800e95e <_nx_udp_socket_unbind+0x18a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e910:	f3ef 8310 	mrs	r3, PRIMASK
 800e914:	61fb      	str	r3, [r7, #28]
    return(posture);
 800e916:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800e918:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e91a:	b672      	cpsid	i
    return(int_posture);
 800e91c:	69bb      	ldr	r3, [r7, #24]
        {

            /* Lockout interrupts.  */
            TX_DISABLE
 800e91e:	63bb      	str	r3, [r7, #56]	@ 0x38

            /* Clear the cleanup pointer, this prevents the timeout from doing
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800e920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e922:	2200      	movs	r2, #0
 800e924:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 800e926:	4b5f      	ldr	r3, [pc, #380]	@ (800eaa4 <_nx_udp_socket_unbind+0x2d0>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	3301      	adds	r3, #1
 800e92c:	4a5d      	ldr	r2, [pc, #372]	@ (800eaa4 <_nx_udp_socket_unbind+0x2d0>)
 800e92e:	6013      	str	r3, [r2, #0]
 800e930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e932:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e934:	6a3b      	ldr	r3, [r7, #32]
 800e936:	f383 8810 	msr	PRIMASK, r3
}
 800e93a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set the return status in the thread to NX_SOCKET_UNBOUND.  */
            thread_ptr -> tx_thread_suspend_status =  NX_SOCKET_UNBOUND;
 800e93c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e93e:	2226      	movs	r2, #38	@ 0x26
 800e940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800e944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e948:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 800e94a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e94c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e94e:	4618      	mov	r0, r3
 800e950:	f003 fd1a 	bl	8012388 <_tx_thread_system_resume>

            /* Decrease the suspended count.  */
            socket_ptr -> nx_udp_socket_receive_suspended_count--;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e958:	1e5a      	subs	r2, r3, #1
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	65da      	str	r2, [r3, #92]	@ 0x5c
        while (socket_ptr -> nx_udp_socket_receive_suspended_count)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e962:	2b00      	cmp	r3, #0
 800e964:	d1d4      	bne.n	800e910 <_nx_udp_socket_unbind+0x13c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e966:	f3ef 8310 	mrs	r3, PRIMASK
 800e96a:	617b      	str	r3, [r7, #20]
    return(posture);
 800e96c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e96e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e970:	b672      	cpsid	i
    return(int_posture);
 800e972:	693b      	ldr	r3, [r7, #16]
        }
    }

    /* Disable interrupts again.  */
    TX_DISABLE
 800e974:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there are any threads suspended on trying to bind to the
       same port.  */
    thread_ptr =  socket_ptr -> nx_udp_socket_bind_suspension_list;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e97a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (thread_ptr)
 800e97c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d07f      	beq.n	800ea82 <_nx_udp_socket_unbind+0x2ae>
    {

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 800e982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e988:	429a      	cmp	r2, r3
 800e98a:	d103      	bne.n	800e994 <_nx_udp_socket_unbind+0x1c0>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2200      	movs	r2, #0
 800e990:	661a      	str	r2, [r3, #96]	@ 0x60
 800e992:	e00d      	b.n	800e9b0 <_nx_udp_socket_unbind+0x1dc>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            socket_ptr -> nx_udp_socket_bind_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 800e994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e996:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Update the links of the adjacent threads.  */
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800e99c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e99e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous;
 800e9a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e9a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_next) -> tx_thread_suspended_previous =
 800e9a4:	675a      	str	r2, [r3, #116]	@ 0x74
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800e9a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
                thread_ptr -> tx_thread_suspended_next;
 800e9aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e9ac:	6f12      	ldr	r2, [r2, #112]	@ 0x70
            (thread_ptr -> tx_thread_suspended_previous) -> tx_thread_suspended_next =
 800e9ae:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        socket_ptr -> nx_udp_socket_bind_suspended_count--;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9b4:	1e5a      	subs	r2, r3, #1
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Pickup the new socket structure to link to the port list.  */
        new_socket_ptr =  (NX_UDP_SOCKET *)thread_ptr -> tx_thread_suspend_control_block;
 800e9ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9be:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Clear the new socket's bind in progress flag.  */
        new_socket_ptr -> nx_udp_socket_bind_in_progress =  NX_NULL;
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Inherit the suspension list from the previously bound socket.  */
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
            socket_ptr -> nx_udp_socket_bind_suspension_list;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
        new_socket_ptr -> nx_udp_socket_bind_suspension_list =
 800e9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9cc:	661a      	str	r2, [r3, #96]	@ 0x60
        socket_ptr -> nx_udp_socket_bind_suspension_list =  NX_NULL;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Link the new socket to the bound list.  */
        if (ip_ptr -> nx_ip_udp_port_table[index])
 800e9d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9d8:	33e0      	adds	r3, #224	@ 0xe0
 800e9da:	009b      	lsls	r3, r3, #2
 800e9dc:	4413      	add	r3, r2
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d022      	beq.n	800ea2a <_nx_udp_socket_unbind+0x256>
        {

            /* There are already sockets on this list... just add this one
               to the end.  */
            new_socket_ptr -> nx_udp_socket_bound_next =
                ip_ptr -> nx_ip_udp_port_table[index];
 800e9e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9e8:	33e0      	adds	r3, #224	@ 0xe0
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4413      	add	r3, r2
 800e9ee:	685a      	ldr	r2, [r3, #4]
            new_socket_ptr -> nx_udp_socket_bound_next =
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f2:	64da      	str	r2, [r3, #76]	@ 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =
                (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous;
 800e9f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9f8:	33e0      	adds	r3, #224	@ 0xe0
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
            new_socket_ptr -> nx_udp_socket_bound_previous =
 800ea02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea04:	651a      	str	r2, [r3, #80]	@ 0x50
            ((ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous) -> nx_udp_socket_bound_next =
 800ea06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea0a:	33e0      	adds	r3, #224	@ 0xe0
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4413      	add	r3, r2
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea16:	64da      	str	r2, [r3, #76]	@ 0x4c
                new_socket_ptr;
            (ip_ptr -> nx_ip_udp_port_table[index]) -> nx_udp_socket_bound_previous =   new_socket_ptr;
 800ea18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea1c:	33e0      	adds	r3, #224	@ 0xe0
 800ea1e:	009b      	lsls	r3, r3, #2
 800ea20:	4413      	add	r3, r2
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea26:	651a      	str	r2, [r3, #80]	@ 0x50
 800ea28:	e00c      	b.n	800ea44 <_nx_udp_socket_unbind+0x270>
        else
        {

            /* Nothing is on the UDP port list.  Add this UDP socket to an
               empty list.  */
            new_socket_ptr -> nx_udp_socket_bound_next =      new_socket_ptr;
 800ea2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea2e:	64da      	str	r2, [r3, #76]	@ 0x4c
            new_socket_ptr -> nx_udp_socket_bound_previous =  new_socket_ptr;
 800ea30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea34:	651a      	str	r2, [r3, #80]	@ 0x50
            ip_ptr -> nx_ip_udp_port_table[index] =           new_socket_ptr;
 800ea36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ea38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea3a:	33e0      	adds	r3, #224	@ 0xe0
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	4413      	add	r3, r2
 800ea40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea42:	605a      	str	r2, [r3, #4]
        }

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ea44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea46:	2200      	movs	r2, #0
 800ea48:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800ea4a:	4b16      	ldr	r3, [pc, #88]	@ (800eaa4 <_nx_udp_socket_unbind+0x2d0>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	3301      	adds	r3, #1
 800ea50:	4a14      	ldr	r2, [pc, #80]	@ (800eaa4 <_nx_udp_socket_unbind+0x2d0>)
 800ea52:	6013      	str	r3, [r2, #0]
 800ea54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f383 8810 	msr	PRIMASK, r3
}
 800ea5e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  NX_SUCCESS;
 800ea60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea62:	2200      	movs	r2, #0
 800ea64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Release the mutex protection.  */
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ea68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea6a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f002 fc18 	bl	80112a4 <_tx_mutex_put>

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ea74:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ea76:	f003 fc87 	bl	8012388 <_tx_thread_system_resume>
        /* Return success to the caller.  */
        return(NX_SUCCESS);
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800ea7a:	f003 fc4b 	bl	8012314 <_tx_thread_system_preempt_check>

    /* Return success.  */
    return(NX_SUCCESS);
 800ea7e:	2300      	movs	r3, #0
 800ea80:	e00c      	b.n	800ea9c <_nx_udp_socket_unbind+0x2c8>
 800ea82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea84:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	f383 8810 	msr	PRIMASK, r3
}
 800ea8c:	bf00      	nop
        tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800ea8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea90:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800ea94:	4618      	mov	r0, r3
 800ea96:	f002 fc05 	bl	80112a4 <_tx_mutex_put>
        return(NX_SUCCESS);
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3750      	adds	r7, #80	@ 0x50
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	2000aeac 	.word	0x2000aeac

0800eaa8 <_nx_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b087      	sub	sp, #28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
ULONG          *temp_ptr;
NX_IPV4_HEADER *ipv4_header;

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	617b      	str	r3, [r7, #20]

    /* Pickup the source port.  */
    *port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	3b08      	subs	r3, #8
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	0c1a      	lsrs	r2, r3, #16
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	601a      	str	r2, [r3, #0]

    /* Obtain the IPv4 header. */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eaca:	613b      	str	r3, [r7, #16]

    /* Pickup the source IP address.  */
    *ip_address =  ipv4_header -> nx_ip_header_source_ip;
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	68da      	ldr	r2, [r3, #12]
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	601a      	str	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, *ip_address, *port, 0, NX_TRACE_UDP_EVENTS, 0, 0);

    return(NX_SUCCESS);
 800ead4:	2300      	movs	r3, #0
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800ead6:	4618      	mov	r0, r3
 800ead8:	371c      	adds	r7, #28
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <_nx_utility_string_length_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nx_utility_string_length_check(CHAR *input_string, UINT *string_length, UINT max_string_length)
{
 800eae2:	b480      	push	{r7}
 800eae4:	b087      	sub	sp, #28
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	60f8      	str	r0, [r7, #12]
 800eaea:	60b9      	str	r1, [r7, #8]
 800eaec:	607a      	str	r2, [r7, #4]

UINT    i;


    /* Check for invalid input pointers.  */
    if (input_string == NX_NULL)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d101      	bne.n	800eaf8 <_nx_utility_string_length_check+0x16>
    {
        return(NX_PTR_ERROR);
 800eaf4:	2307      	movs	r3, #7
 800eaf6:	e018      	b.n	800eb2a <_nx_utility_string_length_check+0x48>
    }

    /* Traverse the string.  */
    for (i = 0; input_string[i]; i++)
 800eaf8:	2300      	movs	r3, #0
 800eafa:	617b      	str	r3, [r7, #20]
 800eafc:	e008      	b.n	800eb10 <_nx_utility_string_length_check+0x2e>
    {

        /* Check if the string length is bigger than the max string length.  */
        if (i >= max_string_length)
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d301      	bcc.n	800eb0a <_nx_utility_string_length_check+0x28>
        {
            return(NX_SIZE_ERROR);
 800eb06:	2309      	movs	r3, #9
 800eb08:	e00f      	b.n	800eb2a <_nx_utility_string_length_check+0x48>
    for (i = 0; input_string[i]; i++)
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	617b      	str	r3, [r7, #20]
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	4413      	add	r3, r2
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1f0      	bne.n	800eafe <_nx_utility_string_length_check+0x1c>
    }

    /* Return the string length if string_length is not NULL.
       String_length being NULL indicates the caller needs to check for string 
       length within the max_string_length. */
    if (string_length)
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d002      	beq.n	800eb28 <_nx_utility_string_length_check+0x46>
    {
        *string_length = i;
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	697a      	ldr	r2, [r7, #20]
 800eb26:	601a      	str	r2, [r3, #0]
    }

    /* Return success.  */
    return(NX_SUCCESS);
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	371c      	adds	r7, #28
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <_nxd_udp_packet_info_extract>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxd_udp_packet_info_extract(NX_PACKET *packet_ptr, NXD_ADDRESS *ip_address,
                                   UINT *protocol, UINT *port, UINT *interface_index)
{
 800eb36:	b480      	push	{r7}
 800eb38:	b089      	sub	sp, #36	@ 0x24
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	60f8      	str	r0, [r7, #12]
 800eb3e:	60b9      	str	r1, [r7, #8]
 800eb40:	607a      	str	r2, [r7, #4]
 800eb42:	603b      	str	r3, [r7, #0]
#ifdef FEATURE_NX_IPV6
NX_IPV6_HEADER *ipv6_header;
#endif /* FEATURE_NX_IPV6 */


    if (ip_address)
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d011      	beq.n	800eb6e <_nxd_udp_packet_info_extract+0x38>
    {

#ifndef NX_DISABLE_IPV4
        if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800eb50:	2b04      	cmp	r3, #4
 800eb52:	d10a      	bne.n	800eb6a <_nxd_udp_packet_info_extract+0x34>
        {

            /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
            ipv4_header = (NX_IPV4_HEADER *)packet_ptr -> nx_packet_ip_header;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb58:	61fb      	str	r3, [r7, #28]

            ip_address -> nxd_ip_version = NX_IP_VERSION_V4;
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2204      	movs	r2, #4
 800eb5e:	601a      	str	r2, [r3, #0]

            /* At this point, the IP address in the IPv4 header is in host byte order. */
            ip_address -> nxd_ip_address.v4 = ipv4_header -> nx_ip_header_source_ip;
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	68da      	ldr	r2, [r3, #12]
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	605a      	str	r2, [r3, #4]
 800eb68:	e001      	b.n	800eb6e <_nxd_udp_packet_info_extract+0x38>
        else
#endif /* FEATURE_NX_IPV6 */
        {

            /* Invalid IP version . */
            return(NX_INVALID_PACKET);
 800eb6a:	2312      	movs	r3, #18
 800eb6c:	e032      	b.n	800ebd4 <_nxd_udp_packet_info_extract+0x9e>
        }
    }

    /* Build an address to the current top of the packet.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    temp_ptr =  (ULONG *)packet_ptr -> nx_packet_prepend_ptr;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	61bb      	str	r3, [r7, #24]

    /* Pickup the source port.  */
    source_port =  (UINT)(*(temp_ptr - 2) >> NX_SHIFT_BY_16);
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	3b08      	subs	r3, #8
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	0c1b      	lsrs	r3, r3, #16
 800eb7c:	617b      	str	r3, [r7, #20]
    if (port != NX_NULL)
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d002      	beq.n	800eb8a <_nxd_udp_packet_info_extract+0x54>
    {
        *port = source_port;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	697a      	ldr	r2, [r7, #20]
 800eb88:	601a      	str	r2, [r3, #0]
    }

    if (protocol != NX_NULL)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d002      	beq.n	800eb96 <_nxd_udp_packet_info_extract+0x60>
    {
        *protocol = 0x11;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2211      	movs	r2, #17
 800eb94:	601a      	str	r2, [r3, #0]
    }

    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_UDP_SOURCE_EXTRACT, packet_ptr, address, source_port, 0, NX_TRACE_PACKET_EVENTS, 0, 0);

    if (interface_index == NX_NULL)
 800eb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <_nxd_udp_packet_info_extract+0x6a>
    {
        return(NX_SUCCESS);
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	e019      	b.n	800ebd4 <_nxd_udp_packet_info_extract+0x9e>
    }

    /* Search for interface index number.  Initialize interface value as
       invalid (0xFFFFFFFF).  Once we find valid interface, we will update
       the returned value. */
    *interface_index = 0xFFFFFFFF;
 800eba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eba6:	601a      	str	r2, [r3, #0]

    if (packet_ptr -> nx_packet_ip_version == NX_IP_VERSION_V4)
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ebae:	2b04      	cmp	r3, #4
 800ebb0:	d106      	bne.n	800ebc0 <_nxd_udp_packet_info_extract+0x8a>
    {
        nx_interface = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebb6:	613b      	str	r3, [r7, #16]
    else
    {
        return(NX_SUCCESS);
    }

    if (nx_interface == NX_NULL)
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d104      	bne.n	800ebc8 <_nxd_udp_packet_info_extract+0x92>
 800ebbe:	e001      	b.n	800ebc4 <_nxd_udp_packet_info_extract+0x8e>
        return(NX_SUCCESS);
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e007      	b.n	800ebd4 <_nxd_udp_packet_info_extract+0x9e>
    {

        /* No interface attached.  Done here, and return success. */
        return(NX_SUCCESS);
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	e005      	b.n	800ebd4 <_nxd_udp_packet_info_extract+0x9e>
    }

    *interface_index = (UINT)nx_interface -> nx_interface_index;
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	79db      	ldrb	r3, [r3, #7]
 800ebcc:	461a      	mov	r2, r3
 800ebce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebd0:	601a      	str	r2, [r3, #0]

    return(NX_SUCCESS);
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3724      	adds	r7, #36	@ 0x24
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <_nxd_udp_socket_send>:
/**************************************************************************/
UINT  _nxd_udp_socket_send(NX_UDP_SOCKET *socket_ptr,
                           NX_PACKET     *packet_ptr,
                           NXD_ADDRESS   *ip_address,
                           UINT           port)
{
 800ebe0:	b590      	push	{r4, r7, lr}
 800ebe2:	b097      	sub	sp, #92	@ 0x5c
 800ebe4:	af04      	add	r7, sp, #16
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

NX_IP         *ip_ptr;
NX_UDP_HEADER *udp_header_ptr;
ULONG         *ip_src_addr = NX_NULL, *ip_dest_addr = NX_NULL;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	647b      	str	r3, [r7, #68]	@ 0x44
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef NX_DISABLE_IPV4
ULONG          next_hop_address = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	617b      	str	r3, [r7, #20]
#endif /* !NX_DISABLE_IPV4  */
#if !defined(NX_DISABLE_IPV4) || (defined(FEATURE_NX_IPV6) && defined(NX_ENABLE_INTERFACE_CAPABILITY))
NX_INTERFACE  *interface_ptr = NX_NULL;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#ifdef TX_ENABLE_EVENT_TRACE
UINT           ip_address_log = 0;
#endif /* TX_ENABLE_EVENT_TRACE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
UINT           compute_checksum = 1;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ec02:	f3ef 8310 	mrs	r3, PRIMASK
 800ec06:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800ec08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800ec0a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ec0c:	b672      	cpsid	i
    return(int_posture);
 800ec0e:	6a3b      	ldr	r3, [r7, #32]
    /* Disable UDP TX checksum. */
    compute_checksum = 0;
#endif /* NX_DISABLE_UDP_TX_CHECKSUM */

    /* Lockout interrupts.  */
    TX_DISABLE
 800ec10:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Add debug information. */
    NX_PACKET_DEBUG(__FILE__, __LINE__, packet_ptr);

    /* Determine if the socket is currently bound to a UDP port.  */
    if (!socket_ptr ->  nx_udp_socket_bound_next)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d107      	bne.n	800ec2a <_nxd_udp_socket_send+0x4a>
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec1c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec1e:	69fb      	ldr	r3, [r7, #28]
 800ec20:	f383 8810 	msr	PRIMASK, r3
}
 800ec24:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Socket is not bound, return an error message.  */
        return(NX_NOT_BOUND);
 800ec26:	2324      	movs	r3, #36	@ 0x24
 800ec28:	e0d3      	b.n	800edd2 <_nxd_udp_socket_send+0x1f2>
    }

    /* Pickup the important information from the socket.  */

    /* Set up the pointer to the associated IP instance.  */
    ip_ptr =  socket_ptr -> nx_udp_socket_ip_ptr;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec32:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	f383 8810 	msr	PRIMASK, r3
}
 800ec3a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

#ifndef NX_DISABLE_IPV4
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2b04      	cmp	r3, #4
 800ec42:	d118      	bne.n	800ec76 <_nxd_udp_socket_send+0x96>
    {

        /* Look for a suitable interface. */
        _nx_ip_route_find(ip_ptr, ip_address -> nxd_ip_address.v4, &packet_ptr -> nx_packet_address.nx_packet_interface_ptr,
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6859      	ldr	r1, [r3, #4]
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec4e:	f107 0314 	add.w	r3, r7, #20
 800ec52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec54:	f7fd f9de 	bl	800c014 <_nx_ip_route_find>
                          &next_hop_address);

        /* Check the packet interface.  */
        if (!packet_ptr -> nx_packet_address.nx_packet_interface_ptr)
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d101      	bne.n	800ec64 <_nxd_udp_socket_send+0x84>
        {

            /* None found; return the error status. */
            return(NX_IP_ADDRESS_ERROR);
 800ec60:	2321      	movs	r3, #33	@ 0x21
 800ec62:	e0b6      	b.n	800edd2 <_nxd_udp_socket_send+0x1f2>
        }

        interface_ptr = packet_ptr -> nx_packet_address.nx_packet_interface_ptr;
 800ec64:	68bb      	ldr	r3, [r7, #8]
 800ec66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec68:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Fill in the IP src/dest address */
        ip_dest_addr = &ip_address -> nxd_ip_address.v4;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	643b      	str	r3, [r7, #64]	@ 0x40
        ip_src_addr = &interface_ptr -> nx_interface_ip_address;
 800ec70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec72:	3314      	adds	r3, #20
 800ec74:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }
#endif /* NX_IPSEC_ENABLE */
        
    /* Prepend the UDP header to the packet.  First, make room for the UDP header.  */
    packet_ptr -> nx_packet_prepend_ptr =  packet_ptr -> nx_packet_prepend_ptr - sizeof(NX_UDP_HEADER);
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	f1a3 0208 	sub.w	r2, r3, #8
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	609a      	str	r2, [r3, #8]

    /* Set the correct IP version. */
    packet_ptr -> nx_packet_ip_version = (UCHAR)(ip_address -> nxd_ip_version);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	b2da      	uxtb	r2, r3
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

#ifndef NX_DISABLE_UDP_INFO
    /* Increment the total UDP packets sent count.  */
    ip_ptr -> nx_ip_udp_packets_sent++;
 800ec8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec94:	1c5a      	adds	r2, r3, #1
 800ec96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Increment the total UDP bytes sent.  */
    ip_ptr -> nx_ip_udp_bytes_sent +=  packet_ptr -> nx_packet_length;
 800ec9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eca6:	441a      	add	r2, r3
 800eca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* Increment the total UDP packets sent count for this socket.  */
    socket_ptr -> nx_udp_socket_packets_sent++;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	1c5a      	adds	r2, r3, #1
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	611a      	str	r2, [r3, #16]

    /* Increment the total UDP bytes sent for this socket.  */
    socket_ptr -> nx_udp_socket_bytes_sent +=  packet_ptr -> nx_packet_length;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	695a      	ldr	r2, [r3, #20]
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecc0:	441a      	add	r2, r3
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	615a      	str	r2, [r3, #20]
#endif

    /* Increase the packet length.  */
    packet_ptr -> nx_packet_length =  packet_ptr -> nx_packet_length + (ULONG)sizeof(NX_UDP_HEADER);
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecca:	f103 0208 	add.w	r2, r3, #8
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the UDP header pointer.  */
    /*lint -e{927} -e{826} suppress cast of pointer to pointer, since it is necessary  */
    udp_header_ptr =  (NX_UDP_HEADER *)packet_ptr -> nx_packet_prepend_ptr;
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Build the first 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_0 =
        (((ULONG)socket_ptr -> nx_udp_socket_port) << NX_SHIFT_BY_16) | (ULONG)port;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	689b      	ldr	r3, [r3, #8]
 800ecdc:	041a      	lsls	r2, r3, #16
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	431a      	orrs	r2, r3
    udp_header_ptr -> nx_udp_header_word_0 =
 800ece2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece4:	601a      	str	r2, [r3, #0]

    /* Build the second 32-bit word of the UDP header.  */
    udp_header_ptr -> nx_udp_header_word_1 =  (packet_ptr -> nx_packet_length << NX_SHIFT_BY_16);
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecea:	041a      	lsls	r2, r3, #16
 800ecec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecee:	605a      	str	r2, [r3, #4]
    /* If trace is enabled, insert this event into the trace buffer.  */
    NX_TRACE_IN_LINE_INSERT(NX_TRACE_INTERNAL_UDP_SEND, ip_ptr, socket_ptr, packet_ptr, udp_header_ptr -> nx_udp_header_word_0, NX_TRACE_INTERNAL_EVENTS, 0, 0);

    /* Endian swapping logic.  If NX_LITTLE_ENDIAN is specified, these macros will
    swap the endian of the UDP header.  */
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_0);
 800ecf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	ba1a      	rev	r2, r3
 800ecf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf8:	601a      	str	r2, [r3, #0]
    NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ecfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	ba1a      	rev	r2, r3
 800ed00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed02:	605a      	str	r2, [r3, #4]
    Note that with IPv6, UDP packet checksum is mandatory. However if the underly device
    driver is able to compute UDP checksum in hardware, let the driver handle the checksum
    computation.
    */

    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d003      	beq.n	800ed14 <_nxd_udp_socket_send+0x134>
        (ip_address -> nxd_ip_version == NX_IP_VERSION_V6))
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
    if ((!socket_ptr -> nx_udp_socket_disable_checksum) ||
 800ed10:	2b06      	cmp	r3, #6
 800ed12:	d136      	bne.n	800ed82 <_nxd_udp_socket_send+0x1a2>
    {
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        if (interface_ptr -> nx_interface_capability_flag & NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM)
 800ed14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed18:	f003 0310 	and.w	r3, r3, #16
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d001      	beq.n	800ed24 <_nxd_udp_socket_send+0x144>
        {
            compute_checksum = 0;
 800ed20:	2300      	movs	r3, #0
 800ed22:	63bb      	str	r3, [r7, #56]	@ 0x38
            compute_checksum = 1;
        }
#endif /* NX_IPSEC_ENABLE */

#if defined(NX_DISABLE_UDP_TX_CHECKSUM) || defined(NX_ENABLE_INTERFACE_CAPABILITY) || defined(NX_IPSEC_ENABLE)
        if (compute_checksum)
 800ed24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d025      	beq.n	800ed76 <_nxd_udp_socket_send+0x196>
        ULONG checksum;

            /* Yes, we need to compute the UDP checksum.  */
            checksum = _nx_ip_checksum_compute(packet_ptr,
                                               NX_PROTOCOL_UDP,
                                               (UINT)packet_ptr -> nx_packet_length,
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            checksum = _nx_ip_checksum_compute(packet_ptr,
 800ed2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed30:	9300      	str	r3, [sp, #0]
 800ed32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed34:	2111      	movs	r1, #17
 800ed36:	68b8      	ldr	r0, [r7, #8]
 800ed38:	f7fb fd7e 	bl	800a838 <_nx_ip_checksum_compute>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	637b      	str	r3, [r7, #52]	@ 0x34
                                               ip_src_addr,
                                               ip_dest_addr);
            checksum = ~checksum & NX_LOWER_16_MASK;
 800ed40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed42:	43db      	mvns	r3, r3
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	637b      	str	r3, [r7, #52]	@ 0x34

            /* If the computed checksum is zero, it will be transmitted as all ones. */
            /* RFC 768, page 2. */
            if (checksum == 0)
 800ed48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d102      	bne.n	800ed54 <_nxd_udp_socket_send+0x174>
            {
                checksum = 0xFFFF;
 800ed4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ed52:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ed54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	ba1a      	rev	r2, r3
 800ed5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed5c:	605a      	str	r2, [r3, #4]

            udp_header_ptr -> nx_udp_header_word_1 = udp_header_ptr -> nx_udp_header_word_1 | checksum;
 800ed5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed60:	685a      	ldr	r2, [r3, #4]
 800ed62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed64:	431a      	orrs	r2, r3
 800ed66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed68:	605a      	str	r2, [r3, #4]

            NX_CHANGE_ULONG_ENDIAN(udp_header_ptr -> nx_udp_header_word_1);
 800ed6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	ba1a      	rev	r2, r3
 800ed70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed72:	605a      	str	r2, [r3, #4]
 800ed74:	e005      	b.n	800ed82 <_nxd_udp_socket_send+0x1a2>
        }
#ifdef NX_ENABLE_INTERFACE_CAPABILITY
        else
        {
            /* Set CHECKSUM flag so the driver would invoke the HW checksum. */
            packet_ptr -> nx_packet_interface_capability_flag |= NX_INTERFACE_CAPABILITY_UDP_TX_CHECKSUM;
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed7a:	f043 0210 	orr.w	r2, r3, #16
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	639a      	str	r2, [r3, #56]	@ 0x38
        }
#endif
    }

    /* Get mutex protection.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800ed82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed84:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800ed88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f002 f811 	bl	8010db4 <_tx_mutex_get>
    }
#endif /* NX_ENABLE_TCPIP_OFFLOAD */

#ifndef NX_DISABLE_IPV4
    /* Send the UDP packet to the IPv4 component.  */
    if (ip_address -> nxd_ip_version == NX_IP_VERSION_V4)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	2b04      	cmp	r3, #4
 800ed98:	d114      	bne.n	800edc4 <_nxd_udp_socket_send+0x1e4>
    {

        /*lint -e{644} suppress variable might not be initialized, since "next_hop_address" was initialized in _nx_ip_route_find. */
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6858      	ldr	r0, [r3, #4]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
                           socket_ptr -> nx_udp_socket_type_of_service,
                           socket_ptr -> nx_udp_socket_time_to_live,
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        _nx_ip_packet_send(ip_ptr, packet_ptr, ip_address -> nxd_ip_address.v4,
 800eda6:	68fa      	ldr	r2, [r7, #12]
 800eda8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800edaa:	6979      	ldr	r1, [r7, #20]
 800edac:	9103      	str	r1, [sp, #12]
 800edae:	9202      	str	r2, [sp, #8]
 800edb0:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
 800edb4:	9201      	str	r2, [sp, #4]
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	4623      	mov	r3, r4
 800edba:	4602      	mov	r2, r0
 800edbc:	68b9      	ldr	r1, [r7, #8]
 800edbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800edc0:	f7fd f8b2 	bl	800bf28 <_nx_ip_packet_send>
                             ip_dest_addr);
    }
#endif /* FEATURE_NX_IPV6 */

    /* Release mutex protection.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800edc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800edca:	4618      	mov	r0, r3
 800edcc:	f002 fa6a 	bl	80112a4 <_tx_mutex_put>

    /* Return a successful status.  */
    return(NX_SUCCESS);
 800edd0:	2300      	movs	r3, #0
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	374c      	adds	r7, #76	@ 0x4c
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd90      	pop	{r4, r7, pc}
	...

0800eddc <_nxe_arp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_arp_enable(NX_IP *ip_ptr, VOID *arp_cache_memory, ULONG arp_cache_size)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b088      	sub	sp, #32
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (arp_cache_memory == NX_NULL))
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d007      	beq.n	800edfe <_nxe_arp_enable+0x22>
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4a1c      	ldr	r2, [pc, #112]	@ (800ee64 <_nxe_arp_enable+0x88>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d102      	bne.n	800edfe <_nxe_arp_enable+0x22>
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d101      	bne.n	800ee02 <_nxe_arp_enable+0x26>
    {
        return(NX_PTR_ERROR);
 800edfe:	2307      	movs	r3, #7
 800ee00:	e02c      	b.n	800ee5c <_nxe_arp_enable+0x80>
    }

    /* Check to see if ARP is already enabled.  */
    if (ip_ptr -> nx_ip_arp_allocate)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f8d3 36e8 	ldr.w	r3, [r3, #1768]	@ 0x6e8
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d001      	beq.n	800ee10 <_nxe_arp_enable+0x34>
    {
        return(NX_ALREADY_ENABLED);
 800ee0c:	2315      	movs	r3, #21
 800ee0e:	e025      	b.n	800ee5c <_nxe_arp_enable+0x80>
    }

    /* Check for invalid ARP cache size.  */
    if (arp_cache_size < sizeof(NX_ARP))
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b33      	cmp	r3, #51	@ 0x33
 800ee14:	d801      	bhi.n	800ee1a <_nxe_arp_enable+0x3e>
    {
        return(NX_SIZE_ERROR);
 800ee16:	2309      	movs	r3, #9
 800ee18:	e020      	b.n	800ee5c <_nxe_arp_enable+0x80>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ee1a:	f3ef 8305 	mrs	r3, IPSR
 800ee1e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ee20:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800ee22:	4b11      	ldr	r3, [pc, #68]	@ (800ee68 <_nxe_arp_enable+0x8c>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d009      	beq.n	800ee40 <_nxe_arp_enable+0x64>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ee2c:	f3ef 8305 	mrs	r3, IPSR
 800ee30:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ee32:	697a      	ldr	r2, [r7, #20]
 800ee34:	4b0c      	ldr	r3, [pc, #48]	@ (800ee68 <_nxe_arp_enable+0x8c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4313      	orrs	r3, r2
 800ee3a:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ee3e:	d304      	bcc.n	800ee4a <_nxe_arp_enable+0x6e>
 800ee40:	4b0a      	ldr	r3, [pc, #40]	@ (800ee6c <_nxe_arp_enable+0x90>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4a0a      	ldr	r2, [pc, #40]	@ (800ee70 <_nxe_arp_enable+0x94>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	d101      	bne.n	800ee4e <_nxe_arp_enable+0x72>
 800ee4a:	2311      	movs	r3, #17
 800ee4c:	e006      	b.n	800ee5c <_nxe_arp_enable+0x80>

    /* Call actual ARP enable function.  */
    status =  _nx_arp_enable(ip_ptr, arp_cache_memory, arp_cache_size);
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	68b9      	ldr	r1, [r7, #8]
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f7fa faba 	bl	80093cc <_nx_arp_enable>
 800ee58:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800ee5a:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(arp_cache_memory);
    NX_PARAMETER_NOT_USED(arp_cache_size);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3720      	adds	r7, #32
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	49502020 	.word	0x49502020
 800ee68:	20000098 	.word	0x20000098
 800ee6c:	2000ae14 	.word	0x2000ae14
 800ee70:	2000af5c 	.word	0x2000af5c

0800ee74 <_nxe_icmp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_icmp_enable(NX_IP *ip_ptr)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d004      	beq.n	800ee8c <_nxe_icmp_enable+0x18>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4a17      	ldr	r2, [pc, #92]	@ (800eee4 <_nxe_icmp_enable+0x70>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d001      	beq.n	800ee90 <_nxe_icmp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800ee8c:	2307      	movs	r3, #7
 800ee8e:	e025      	b.n	800eedc <_nxe_icmp_enable+0x68>
    }

    /* Check to see if ICMP is enabled.  */
    if (ip_ptr -> nx_ip_icmp_packet_receive)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 336c 	ldr.w	r3, [r3, #876]	@ 0x36c
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <_nxe_icmp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800ee9a:	2315      	movs	r3, #21
 800ee9c:	e01e      	b.n	800eedc <_nxe_icmp_enable+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ee9e:	f3ef 8305 	mrs	r3, IPSR
 800eea2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800eea4:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800eea6:	4b10      	ldr	r3, [pc, #64]	@ (800eee8 <_nxe_icmp_enable+0x74>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d009      	beq.n	800eec4 <_nxe_icmp_enable+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800eeb0:	f3ef 8305 	mrs	r3, IPSR
 800eeb4:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	4b0b      	ldr	r3, [pc, #44]	@ (800eee8 <_nxe_icmp_enable+0x74>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800eec2:	d304      	bcc.n	800eece <_nxe_icmp_enable+0x5a>
 800eec4:	4b09      	ldr	r3, [pc, #36]	@ (800eeec <_nxe_icmp_enable+0x78>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a09      	ldr	r2, [pc, #36]	@ (800eef0 <_nxe_icmp_enable+0x7c>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d101      	bne.n	800eed2 <_nxe_icmp_enable+0x5e>
 800eece:	2311      	movs	r3, #17
 800eed0:	e004      	b.n	800eedc <_nxe_icmp_enable+0x68>

    /* Call actual ICMP enable function.  */
    status =  _nx_icmp_enable(ip_ptr);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fb f882 	bl	8009fdc <_nx_icmp_enable>
 800eed8:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800eeda:	697b      	ldr	r3, [r7, #20]
#else /* NX_DISABLE_IPV4  */
    NX_PARAMETER_NOT_USED(ip_ptr);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800eedc:	4618      	mov	r0, r3
 800eede:	3718      	adds	r7, #24
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd80      	pop	{r7, pc}
 800eee4:	49502020 	.word	0x49502020
 800eee8:	20000098 	.word	0x20000098
 800eeec:	2000ae14 	.word	0x2000ae14
 800eef0:	2000af5c 	.word	0x2000af5c

0800eef4 <_nxe_ip_address_change_notify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_change_notify(NX_IP *ip_ptr, VOID (*ip_address_change_notify)(NX_IP *, VOID *), VOID *additional_info)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	60f8      	str	r0, [r7, #12]
 800eefc:	60b9      	str	r1, [r7, #8]
 800eefe:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d004      	beq.n	800ef10 <_nxe_ip_address_change_notify+0x1c>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a15      	ldr	r2, [pc, #84]	@ (800ef60 <_nxe_ip_address_change_notify+0x6c>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d001      	beq.n	800ef14 <_nxe_ip_address_change_notify+0x20>
    {
        return(NX_PTR_ERROR);
 800ef10:	2307      	movs	r3, #7
 800ef12:	e020      	b.n	800ef56 <_nxe_ip_address_change_notify+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ef14:	f3ef 8305 	mrs	r3, IPSR
 800ef18:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800ef1a:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800ef1c:	4b11      	ldr	r3, [pc, #68]	@ (800ef64 <_nxe_ip_address_change_notify+0x70>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	4313      	orrs	r3, r2
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d009      	beq.n	800ef3a <_nxe_ip_address_change_notify+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ef26:	f3ef 8305 	mrs	r3, IPSR
 800ef2a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef64 <_nxe_ip_address_change_notify+0x70>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4313      	orrs	r3, r2
 800ef34:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800ef38:	d304      	bcc.n	800ef44 <_nxe_ip_address_change_notify+0x50>
 800ef3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef68 <_nxe_ip_address_change_notify+0x74>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	4a0b      	ldr	r2, [pc, #44]	@ (800ef6c <_nxe_ip_address_change_notify+0x78>)
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d101      	bne.n	800ef48 <_nxe_ip_address_change_notify+0x54>
 800ef44:	2311      	movs	r3, #17
 800ef46:	e006      	b.n	800ef56 <_nxe_ip_address_change_notify+0x62>

    /* Call actual IP address change notify function.  */
    status =  _nx_ip_address_change_notify(ip_ptr, ip_address_change_notify, additional_info);
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	68b9      	ldr	r1, [r7, #8]
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f7fb fc13 	bl	800a778 <_nx_ip_address_change_notify>
 800ef52:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800ef54:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address_change_notify);
    NX_PARAMETER_NOT_USED(additional_info);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3720      	adds	r7, #32
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	49502020 	.word	0x49502020
 800ef64:	20000098 	.word	0x20000098
 800ef68:	2000ae14 	.word	0x2000ae14
 800ef6c:	2000af5c 	.word	0x2000af5c

0800ef70 <_nxe_ip_address_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_address_get(NX_IP *ip_ptr, ULONG *ip_address, ULONG *network_mask)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b088      	sub	sp, #32
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	60f8      	str	r0, [r7, #12]
 800ef78:	60b9      	str	r1, [r7, #8]
 800ef7a:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (ip_address == NX_NULL) || (network_mask == NX_NULL))
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d00a      	beq.n	800ef98 <_nxe_ip_address_get+0x28>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a18      	ldr	r2, [pc, #96]	@ (800efe8 <_nxe_ip_address_get+0x78>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d105      	bne.n	800ef98 <_nxe_ip_address_get+0x28>
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <_nxe_ip_address_get+0x28>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d101      	bne.n	800ef9c <_nxe_ip_address_get+0x2c>
    {
        return(NX_PTR_ERROR);
 800ef98:	2307      	movs	r3, #7
 800ef9a:	e020      	b.n	800efde <_nxe_ip_address_get+0x6e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ef9c:	f3ef 8305 	mrs	r3, IPSR
 800efa0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800efa2:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800efa4:	4b11      	ldr	r3, [pc, #68]	@ (800efec <_nxe_ip_address_get+0x7c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	4313      	orrs	r3, r2
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d009      	beq.n	800efc2 <_nxe_ip_address_get+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800efae:	f3ef 8305 	mrs	r3, IPSR
 800efb2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800efb4:	697a      	ldr	r2, [r7, #20]
 800efb6:	4b0d      	ldr	r3, [pc, #52]	@ (800efec <_nxe_ip_address_get+0x7c>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	4313      	orrs	r3, r2
 800efbc:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800efc0:	d304      	bcc.n	800efcc <_nxe_ip_address_get+0x5c>
 800efc2:	4b0b      	ldr	r3, [pc, #44]	@ (800eff0 <_nxe_ip_address_get+0x80>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a0b      	ldr	r2, [pc, #44]	@ (800eff4 <_nxe_ip_address_get+0x84>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d101      	bne.n	800efd0 <_nxe_ip_address_get+0x60>
 800efcc:	2311      	movs	r3, #17
 800efce:	e006      	b.n	800efde <_nxe_ip_address_get+0x6e>

    /* Call actual IP address get function.  */
    status =  _nx_ip_address_get(ip_ptr, ip_address, network_mask);
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	68b9      	ldr	r1, [r7, #8]
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f7fb fbfe 	bl	800a7d6 <_nx_ip_address_get>
 800efda:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800efdc:	69fb      	ldr	r3, [r7, #28]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(network_mask);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3720      	adds	r7, #32
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	49502020 	.word	0x49502020
 800efec:	20000098 	.word	0x20000098
 800eff0:	2000ae14 	.word	0x2000ae14
 800eff4:	2000af5c 	.word	0x2000af5c

0800eff8 <_nxe_ip_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_create(NX_IP *ip_ptr, CHAR *name, ULONG ip_address, ULONG network_mask,
                     NX_PACKET_POOL *default_pool, VOID (*ip_link_driver)(struct NX_IP_DRIVER_STRUCT *),
                     VOID *memory_ptr, ULONG memory_size, UINT priority, UINT ip_control_block_size)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b092      	sub	sp, #72	@ 0x48
 800effc:	af06      	add	r7, sp, #24
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
 800f004:	603b      	str	r3, [r7, #0]

UINT       status;
UINT       old_threshold = 0;
 800f006:	2300      	movs	r3, #0
 800f008:	613b      	str	r3, [r7, #16]
UCHAR     *end_stack;
TX_THREAD *current_thread;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d012      	beq.n	800f036 <_nxe_ip_create+0x3e>
 800f010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00f      	beq.n	800f036 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800f016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f018:	681b      	ldr	r3, [r3, #0]
    if ((ip_ptr == NX_NULL) || (default_pool == NX_NULL) ||
 800f01a:	4a59      	ldr	r2, [pc, #356]	@ (800f180 <_nxe_ip_create+0x188>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d10a      	bne.n	800f036 <_nxe_ip_create+0x3e>
        (default_pool -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (ip_link_driver == NX_NULL) ||
 800f020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f022:	2b00      	cmp	r3, #0
 800f024:	d007      	beq.n	800f036 <_nxe_ip_create+0x3e>
 800f026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d004      	beq.n	800f036 <_nxe_ip_create+0x3e>
        (memory_ptr == NX_NULL) || (ip_control_block_size != (UINT)sizeof(NX_IP)))
 800f02c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f02e:	f240 72cc 	movw	r2, #1996	@ 0x7cc
 800f032:	4293      	cmp	r3, r2
 800f034:	d001      	beq.n	800f03a <_nxe_ip_create+0x42>
    {
        return(NX_PTR_ERROR);
 800f036:	2307      	movs	r3, #7
 800f038:	e09d      	b.n	800f176 <_nxe_ip_create+0x17e>
    }

    /* Check for a memory size error.  */
    if (memory_size < TX_MINIMUM_STACK)
 800f03a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f03c:	2bc7      	cmp	r3, #199	@ 0xc7
 800f03e:	d801      	bhi.n	800f044 <_nxe_ip_create+0x4c>
    {
        return(NX_SIZE_ERROR);
 800f040:	2309      	movs	r3, #9
 800f042:	e098      	b.n	800f176 <_nxe_ip_create+0x17e>
    }

    /* Check the priority specified.  */
    if (priority >= TX_MAX_PRIORITIES)
 800f044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f046:	2b1f      	cmp	r3, #31
 800f048:	d901      	bls.n	800f04e <_nxe_ip_create+0x56>
    {
        return(NX_OPTION_ERROR);
 800f04a:	230a      	movs	r3, #10
 800f04c:	e093      	b.n	800f176 <_nxe_ip_create+0x17e>
    }

    /* Calculate the end of the stack area.  */
    end_stack =  ((UCHAR *)memory_ptr) + (memory_size - 1);
 800f04e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f050:	3b01      	subs	r3, #1
 800f052:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f054:	4413      	add	r3, r2
 800f056:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800f058:	f002 fe66 	bl	8011d28 <_tx_thread_identify>
 800f05c:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    if (current_thread)
 800f05e:	6a3b      	ldr	r3, [r7, #32]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d006      	beq.n	800f072 <_nxe_ip_create+0x7a>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800f064:	f107 0310 	add.w	r3, r7, #16
 800f068:	461a      	mov	r2, r3
 800f06a:	2100      	movs	r1, #0
 800f06c:	6a38      	ldr	r0, [r7, #32]
 800f06e:	f002 feb7 	bl	8011de0 <_tx_thread_preemption_change>
    }

    /* Loop to check for the IP instance already created.  */
    created_ip =     _nx_ip_created_ptr;
 800f072:	4b44      	ldr	r3, [pc, #272]	@ (800f184 <_nxe_ip_create+0x18c>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    created_count =  _nx_ip_created_count;
 800f078:	4b43      	ldr	r3, [pc, #268]	@ (800f188 <_nxe_ip_create+0x190>)
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (created_count--)
 800f07e:	e02b      	b.n	800f0d8 <_nxe_ip_create+0xe0>
    {

        /* Is the new ip already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((ip_ptr == created_ip) ||
 800f080:	68fa      	ldr	r2, [r7, #12]
 800f082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f084:	429a      	cmp	r2, r3
 800f086:	d017      	beq.n	800f0b8 <_nxe_ip_create+0xc0>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800f088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f08a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
        if ((ip_ptr == created_ip) ||
 800f08e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f090:	429a      	cmp	r2, r3
 800f092:	d305      	bcc.n	800f0a0 <_nxe_ip_create+0xa8>
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800f094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f096:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800f09a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d30b      	bcc.n	800f0b8 <_nxe_ip_create+0xc0>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800f0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
            ((memory_ptr >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (memory_ptr < created_ip -> nx_ip_thread.tx_thread_stack_end)) ||
 800f0a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d311      	bcc.n	800f0d0 <_nxe_ip_create+0xd8>
            ((((VOID *)end_stack)  >= created_ip -> nx_ip_thread.tx_thread_stack_start) && (((VOID *)end_stack)  < created_ip -> nx_ip_thread.tx_thread_stack_end)))
 800f0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0ae:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800f0b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d20b      	bcs.n	800f0d0 <_nxe_ip_create+0xd8>
        {

            /* Restore preemption.  */
            if (current_thread)
 800f0b8:	6a3b      	ldr	r3, [r7, #32]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d006      	beq.n	800f0cc <_nxe_ip_create+0xd4>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	f107 0210 	add.w	r2, r7, #16
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	6a38      	ldr	r0, [r7, #32]
 800f0c8:	f002 fe8a 	bl	8011de0 <_tx_thread_preemption_change>
            }

            /* Duplicate ip created, return an error!  */
            return(NX_PTR_ERROR);
 800f0cc:	2307      	movs	r3, #7
 800f0ce:	e052      	b.n	800f176 <_nxe_ip_create+0x17e>
        }

        /* Move to next entry.  */
        created_ip =  created_ip -> nx_ip_created_next;
 800f0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d2:	f8d3 3714 	ldr.w	r3, [r3, #1812]	@ 0x714
 800f0d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (created_count--)
 800f0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0da:	1e5a      	subs	r2, r3, #1
 800f0dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1ce      	bne.n	800f080 <_nxe_ip_create+0x88>
    }

    /* Restore preemption.  */
    if (current_thread)
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d006      	beq.n	800f0f6 <_nxe_ip_create+0xfe>
    {

        /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	f107 0210 	add.w	r2, r7, #16
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6a38      	ldr	r0, [r7, #32]
 800f0f2:	f002 fe75 	bl	8011de0 <_tx_thread_preemption_change>
    }

    /* Check for invalid IP address.  Note that Interface with DHCP enabled
       would start with 0.0.0.0.  Therefore the 0 IP address is allowed. */
    if ((ip_address != 0) &&
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d010      	beq.n	800f11e <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800f0fc:	687b      	ldr	r3, [r7, #4]
    if ((ip_address != 0) &&
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	da0d      	bge.n	800f11e <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
        ((ip_address & NX_IP_CLASS_A_MASK) != NX_IP_CLASS_A_TYPE) &&
 800f108:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f10c:	d007      	beq.n	800f11e <_nxe_ip_create+0x126>
        ((ip_address & NX_IP_CLASS_C_MASK) != NX_IP_CLASS_C_TYPE))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
        ((ip_address & NX_IP_CLASS_B_MASK) != NX_IP_CLASS_B_TYPE) &&
 800f114:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800f118:	d001      	beq.n	800f11e <_nxe_ip_create+0x126>
    {
        return(NX_IP_ADDRESS_ERROR);
 800f11a:	2321      	movs	r3, #33	@ 0x21
 800f11c:	e02b      	b.n	800f176 <_nxe_ip_create+0x17e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f11e:	f3ef 8305 	mrs	r3, IPSR
 800f122:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f124:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800f126:	4b19      	ldr	r3, [pc, #100]	@ (800f18c <_nxe_ip_create+0x194>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4313      	orrs	r3, r2
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d009      	beq.n	800f144 <_nxe_ip_create+0x14c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f130:	f3ef 8305 	mrs	r3, IPSR
 800f134:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f136:	697a      	ldr	r2, [r7, #20]
 800f138:	4b14      	ldr	r3, [pc, #80]	@ (800f18c <_nxe_ip_create+0x194>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800f142:	d304      	bcc.n	800f14e <_nxe_ip_create+0x156>
 800f144:	4b12      	ldr	r3, [pc, #72]	@ (800f190 <_nxe_ip_create+0x198>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4a12      	ldr	r2, [pc, #72]	@ (800f194 <_nxe_ip_create+0x19c>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d101      	bne.n	800f152 <_nxe_ip_create+0x15a>
 800f14e:	2311      	movs	r3, #17
 800f150:	e011      	b.n	800f176 <_nxe_ip_create+0x17e>

    /* Call actual IP instance create function.  */
    status =  _nx_ip_create(ip_ptr, name, ip_address, network_mask, default_pool, ip_link_driver,
 800f152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f154:	9304      	str	r3, [sp, #16]
 800f156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f158:	9303      	str	r3, [sp, #12]
 800f15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f15c:	9302      	str	r3, [sp, #8]
 800f15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f160:	9301      	str	r3, [sp, #4]
 800f162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	68b9      	ldr	r1, [r7, #8]
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f7fb fc51 	bl	800aa14 <_nx_ip_create>
 800f172:	61f8      	str	r0, [r7, #28]
                            memory_ptr, memory_size, priority);

    /* Return completion status.  */
    return(status);
 800f174:	69fb      	ldr	r3, [r7, #28]
}
 800f176:	4618      	mov	r0, r3
 800f178:	3730      	adds	r7, #48	@ 0x30
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	5041434b 	.word	0x5041434b
 800f184:	2000adb8 	.word	0x2000adb8
 800f188:	2000adbc 	.word	0x2000adbc
 800f18c:	20000098 	.word	0x20000098
 800f190:	2000ae14 	.word	0x2000ae14
 800f194:	2000af5c 	.word	0x2000af5c

0800f198 <_nxe_ip_driver_direct_command>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_driver_direct_command(NX_IP *ip_ptr, UINT command, ULONG *return_value_ptr)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b088      	sub	sp, #32
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]

UINT status;

    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (return_value_ptr == NX_NULL))
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d007      	beq.n	800f1ba <_nxe_ip_driver_direct_command+0x22>
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4a16      	ldr	r2, [pc, #88]	@ (800f208 <_nxe_ip_driver_direct_command+0x70>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d102      	bne.n	800f1ba <_nxe_ip_driver_direct_command+0x22>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d101      	bne.n	800f1be <_nxe_ip_driver_direct_command+0x26>
    {
        return(NX_PTR_ERROR);
 800f1ba:	2307      	movs	r3, #7
 800f1bc:	e020      	b.n	800f200 <_nxe_ip_driver_direct_command+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f1be:	f3ef 8305 	mrs	r3, IPSR
 800f1c2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f1c4:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800f1c6:	4b11      	ldr	r3, [pc, #68]	@ (800f20c <_nxe_ip_driver_direct_command+0x74>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d009      	beq.n	800f1e4 <_nxe_ip_driver_direct_command+0x4c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f1d0:	f3ef 8305 	mrs	r3, IPSR
 800f1d4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	4b0c      	ldr	r3, [pc, #48]	@ (800f20c <_nxe_ip_driver_direct_command+0x74>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800f1e2:	d304      	bcc.n	800f1ee <_nxe_ip_driver_direct_command+0x56>
 800f1e4:	4b0a      	ldr	r3, [pc, #40]	@ (800f210 <_nxe_ip_driver_direct_command+0x78>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4a0a      	ldr	r2, [pc, #40]	@ (800f214 <_nxe_ip_driver_direct_command+0x7c>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d101      	bne.n	800f1f2 <_nxe_ip_driver_direct_command+0x5a>
 800f1ee:	2311      	movs	r3, #17
 800f1f0:	e006      	b.n	800f200 <_nxe_ip_driver_direct_command+0x68>

    /* Call actual IP direct driver command function.  */
    status =  _nx_ip_driver_direct_command(ip_ptr, command, return_value_ptr);
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	68b9      	ldr	r1, [r7, #8]
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	f7fb fe6b 	bl	800aed2 <_nx_ip_driver_direct_command>
 800f1fc:	61f8      	str	r0, [r7, #28]

    /* Return completion status.  */
    return(status);
 800f1fe:	69fb      	ldr	r3, [r7, #28]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3720      	adds	r7, #32
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	49502020 	.word	0x49502020
 800f20c:	20000098 	.word	0x20000098
 800f210:	2000ae14 	.word	0x2000ae14
 800f214:	2000af5c 	.word	0x2000af5c

0800f218 <_nxe_ip_interface_status_check>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_ip_interface_status_check(NX_IP *ip_ptr, UINT interface_index, ULONG needed_status,
                                     ULONG *actual_status, ULONG wait_option)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b088      	sub	sp, #32
 800f21c:	af02      	add	r7, sp, #8
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) || (actual_status == NX_NULL))
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d007      	beq.n	800f23c <_nxe_ip_interface_status_check+0x24>
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a20      	ldr	r2, [pc, #128]	@ (800f2b4 <_nxe_ip_interface_status_check+0x9c>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d102      	bne.n	800f23c <_nxe_ip_interface_status_check+0x24>
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d101      	bne.n	800f240 <_nxe_ip_interface_status_check+0x28>
    {
        return(NX_PTR_ERROR);
 800f23c:	2307      	movs	r3, #7
 800f23e:	e034      	b.n	800f2aa <_nxe_ip_interface_status_check+0x92>
    }

    /* Check for invalid interface index. */
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10b      	bne.n	800f25e <_nxe_ip_interface_status_check+0x46>
        (ip_ptr -> nx_ip_interface[interface_index].nx_interface_valid) == 0)
 800f246:	68f9      	ldr	r1, [r7, #12]
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	4613      	mov	r3, r2
 800f24c:	009b      	lsls	r3, r3, #2
 800f24e:	4413      	add	r3, r2
 800f250:	011b      	lsls	r3, r3, #4
 800f252:	440b      	add	r3, r1
 800f254:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 800f258:	781b      	ldrb	r3, [r3, #0]
    if ((interface_index >= NX_MAX_PHYSICAL_INTERFACES) ||
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d101      	bne.n	800f262 <_nxe_ip_interface_status_check+0x4a>
    {
        return(NX_INVALID_INTERFACE);
 800f25e:	234c      	movs	r3, #76	@ 0x4c
 800f260:	e023      	b.n	800f2aa <_nxe_ip_interface_status_check+0x92>
    }

    /* Check for valid options.  */
    if (needed_status &
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f268:	d301      	bcc.n	800f26e <_nxe_ip_interface_status_check+0x56>
#ifndef NX_DISABLE_IPV4
          | (NX_IP_ADDRESS_RESOLVED | NX_IP_ARP_ENABLED | NX_IP_RARP_COMPLETE | NX_IP_IGMP_ENABLED)
#endif /* !NX_DISABLE_IPV4  */
         ))
    {
        return(NX_OPTION_ERROR);
 800f26a:	230a      	movs	r3, #10
 800f26c:	e01d      	b.n	800f2aa <_nxe_ip_interface_status_check+0x92>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f26e:	f3ef 8305 	mrs	r3, IPSR
 800f272:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f274:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800f276:	4b10      	ldr	r3, [pc, #64]	@ (800f2b8 <_nxe_ip_interface_status_check+0xa0>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4313      	orrs	r3, r2
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d108      	bne.n	800f292 <_nxe_ip_interface_status_check+0x7a>
 800f280:	4b0e      	ldr	r3, [pc, #56]	@ (800f2bc <_nxe_ip_interface_status_check+0xa4>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d004      	beq.n	800f292 <_nxe_ip_interface_status_check+0x7a>
 800f288:	4b0c      	ldr	r3, [pc, #48]	@ (800f2bc <_nxe_ip_interface_status_check+0xa4>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	4a0c      	ldr	r2, [pc, #48]	@ (800f2c0 <_nxe_ip_interface_status_check+0xa8>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d101      	bne.n	800f296 <_nxe_ip_interface_status_check+0x7e>
 800f292:	2311      	movs	r3, #17
 800f294:	e009      	b.n	800f2aa <_nxe_ip_interface_status_check+0x92>

    /* Call actual IP interface status check function.  */
    status =  _nx_ip_interface_status_check(ip_ptr, interface_index, needed_status, actual_status, wait_option);
 800f296:	6a3b      	ldr	r3, [r7, #32]
 800f298:	9300      	str	r3, [sp, #0]
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	68b9      	ldr	r1, [r7, #8]
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f7fc faf1 	bl	800b888 <_nx_ip_interface_status_check>
 800f2a6:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800f2a8:	697b      	ldr	r3, [r7, #20]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3718      	adds	r7, #24
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	49502020 	.word	0x49502020
 800f2b8:	20000098 	.word	0x20000098
 800f2bc:	2000ae14 	.word	0x2000ae14
 800f2c0:	2000af5c 	.word	0x2000af5c

0800f2c4 <_nxe_packet_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_allocate(NX_PACKET_POOL *pool_ptr,  NX_PACKET **packet_ptr,
                           ULONG packet_type, ULONG wait_option)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
 800f2d0:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) || (packet_ptr == NX_NULL))
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d007      	beq.n	800f2e8 <_nxe_packet_allocate+0x24>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a18      	ldr	r2, [pc, #96]	@ (800f340 <_nxe_packet_allocate+0x7c>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d102      	bne.n	800f2e8 <_nxe_packet_allocate+0x24>
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d101      	bne.n	800f2ec <_nxe_packet_allocate+0x28>
    {
        return(NX_PTR_ERROR);
 800f2e8:	2307      	movs	r3, #7
 800f2ea:	e025      	b.n	800f338 <_nxe_packet_allocate+0x74>
    }

    /* Check for an invalid packet type - for alignment purposes, it must be evenly divisible by the size
       of a ULONG.  */
    if (packet_type % sizeof(ULONG))
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f003 0303 	and.w	r3, r3, #3
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <_nxe_packet_allocate+0x36>
    {
        return(NX_OPTION_ERROR);
 800f2f6:	230a      	movs	r3, #10
 800f2f8:	e01e      	b.n	800f338 <_nxe_packet_allocate+0x74>
    }

    /* Check for a thread caller if the wait option specifies suspension.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d013      	beq.n	800f328 <_nxe_packet_allocate+0x64>
 800f300:	4b10      	ldr	r3, [pc, #64]	@ (800f344 <_nxe_packet_allocate+0x80>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d00d      	beq.n	800f324 <_nxe_packet_allocate+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f308:	f3ef 8305 	mrs	r3, IPSR
 800f30c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f30e:	693a      	ldr	r2, [r7, #16]
 800f310:	4b0d      	ldr	r3, [pc, #52]	@ (800f348 <_nxe_packet_allocate+0x84>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4313      	orrs	r3, r2
 800f316:	2b00      	cmp	r3, #0
 800f318:	d104      	bne.n	800f324 <_nxe_packet_allocate+0x60>
 800f31a:	4b0a      	ldr	r3, [pc, #40]	@ (800f344 <_nxe_packet_allocate+0x80>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	4a0b      	ldr	r2, [pc, #44]	@ (800f34c <_nxe_packet_allocate+0x88>)
 800f320:	4293      	cmp	r3, r2
 800f322:	d101      	bne.n	800f328 <_nxe_packet_allocate+0x64>
 800f324:	2311      	movs	r3, #17
 800f326:	e007      	b.n	800f338 <_nxe_packet_allocate+0x74>

    /* Call actual packet allocate function.  */
    status =  _nx_packet_allocate(pool_ptr,  packet_ptr, packet_type, wait_option);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	687a      	ldr	r2, [r7, #4]
 800f32c:	68b9      	ldr	r1, [r7, #8]
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f7fd fd38 	bl	800cda4 <_nx_packet_allocate>
 800f334:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800f336:	697b      	ldr	r3, [r7, #20]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	5041434b 	.word	0x5041434b
 800f344:	2000ae14 	.word	0x2000ae14
 800f348:	20000098 	.word	0x20000098
 800f34c:	2000af5c 	.word	0x2000af5c

0800f350 <_nxe_packet_data_append>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_append(NX_PACKET *packet_ptr, VOID *data_start, ULONG data_size,
                              NX_PACKET_POOL *pool_ptr, ULONG wait_option)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b088      	sub	sp, #32
 800f354:	af02      	add	r7, sp, #8
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
 800f35c:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_ptr -> nx_packet_pool_id != NX_PACKET_POOL_ID) ||
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00a      	beq.n	800f37a <_nxe_packet_data_append+0x2a>
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a22      	ldr	r2, [pc, #136]	@ (800f3f4 <_nxe_packet_data_append+0xa4>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d105      	bne.n	800f37a <_nxe_packet_data_append+0x2a>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <_nxe_packet_data_append+0x2a>
        (packet_ptr == NX_NULL) || (data_start == NX_NULL))
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d101      	bne.n	800f37e <_nxe_packet_data_append+0x2e>
    {
        return(NX_PTR_ERROR);
 800f37a:	2307      	movs	r3, #7
 800f37c:	e035      	b.n	800f3ea <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid size of data to append.  */
    if (!data_size)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d101      	bne.n	800f388 <_nxe_packet_data_append+0x38>
    {
        return(NX_SIZE_ERROR);
 800f384:	2309      	movs	r3, #9
 800f386:	e030      	b.n	800f3ea <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	689a      	ldr	r2, [r3, #8]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	429a      	cmp	r2, r3
 800f392:	d201      	bcs.n	800f398 <_nxe_packet_data_append+0x48>
    {
        return(NX_UNDERFLOW);
 800f394:	2302      	movs	r3, #2
 800f396:	e028      	b.n	800f3ea <_nxe_packet_data_append+0x9a>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	695b      	ldr	r3, [r3, #20]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d901      	bls.n	800f3a8 <_nxe_packet_data_append+0x58>
    {
        return(NX_OVERFLOW);
 800f3a4:	2303      	movs	r3, #3
 800f3a6:	e020      	b.n	800f3ea <_nxe_packet_data_append+0x9a>
    }

    /* Check for appropriate caller.  */
    NX_THREAD_WAIT_CALLER_CHECKING
 800f3a8:	6a3b      	ldr	r3, [r7, #32]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d013      	beq.n	800f3d6 <_nxe_packet_data_append+0x86>
 800f3ae:	4b12      	ldr	r3, [pc, #72]	@ (800f3f8 <_nxe_packet_data_append+0xa8>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00d      	beq.n	800f3d2 <_nxe_packet_data_append+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f3b6:	f3ef 8305 	mrs	r3, IPSR
 800f3ba:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f3bc:	693a      	ldr	r2, [r7, #16]
 800f3be:	4b0f      	ldr	r3, [pc, #60]	@ (800f3fc <_nxe_packet_data_append+0xac>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d104      	bne.n	800f3d2 <_nxe_packet_data_append+0x82>
 800f3c8:	4b0b      	ldr	r3, [pc, #44]	@ (800f3f8 <_nxe_packet_data_append+0xa8>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4a0c      	ldr	r2, [pc, #48]	@ (800f400 <_nxe_packet_data_append+0xb0>)
 800f3ce:	4293      	cmp	r3, r2
 800f3d0:	d101      	bne.n	800f3d6 <_nxe_packet_data_append+0x86>
 800f3d2:	2311      	movs	r3, #17
 800f3d4:	e009      	b.n	800f3ea <_nxe_packet_data_append+0x9a>

    /* Call actual packet data append function.  */
    status =  _nx_packet_data_append(packet_ptr, data_start, data_size, pool_ptr, wait_option);
 800f3d6:	6a3b      	ldr	r3, [r7, #32]
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	687a      	ldr	r2, [r7, #4]
 800f3de:	68b9      	ldr	r1, [r7, #8]
 800f3e0:	68f8      	ldr	r0, [r7, #12]
 800f3e2:	f7fd fe39 	bl	800d058 <_nx_packet_data_append>
 800f3e6:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800f3e8:	697b      	ldr	r3, [r7, #20]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	5041434b 	.word	0x5041434b
 800f3f8:	2000ae14 	.word	0x2000ae14
 800f3fc:	20000098 	.word	0x20000098
 800f400:	2000af5c 	.word	0x2000af5c

0800f404 <_nxe_packet_data_retrieve>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_data_retrieve(NX_PACKET *packet_ptr, VOID *buffer_start, ULONG *bytes_copied)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (buffer_start == NX_NULL) || (bytes_copied == NX_NULL))
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d005      	beq.n	800f422 <_nxe_packet_data_retrieve+0x1e>
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d002      	beq.n	800f422 <_nxe_packet_data_retrieve+0x1e>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d101      	bne.n	800f426 <_nxe_packet_data_retrieve+0x22>
    {
        return(NX_PTR_ERROR);
 800f422:	2307      	movs	r3, #7
 800f424:	e006      	b.n	800f434 <_nxe_packet_data_retrieve+0x30>
    }

    /* Call actual packet data retrieve function.  */
    status =  _nx_packet_data_retrieve(packet_ptr, buffer_start, bytes_copied);
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	68b9      	ldr	r1, [r7, #8]
 800f42a:	68f8      	ldr	r0, [r7, #12]
 800f42c:	f7fd ff54 	bl	800d2d8 <_nx_packet_data_retrieve>
 800f430:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800f432:	697b      	ldr	r3, [r7, #20]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3718      	adds	r7, #24
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <_nxe_packet_pool_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_pool_create(NX_PACKET_POOL *pool_ptr, CHAR *name_ptr, ULONG payload_size,
                              VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b094      	sub	sp, #80	@ 0x50
 800f440:	af02      	add	r7, sp, #8
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	603b      	str	r3, [r7, #0]

UINT            status;
ULONG           rounded_payload_size;
ULONG           rounded_pool_size;
ULONG           header_size;
UINT            old_threshold = 0;
 800f44a:	2300      	movs	r3, #0
 800f44c:	613b      	str	r3, [r7, #16]
VOID           *rounded_pool_start;
TX_THREAD      *current_thread;


    /* Check for invalid input pointers.  */
    if ((pool_ptr == NX_NULL) || (pool_start == NX_NULL) || (pool_control_block_size != (UINT)sizeof(NX_PACKET_POOL)))
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d005      	beq.n	800f460 <_nxe_packet_pool_create+0x24>
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d002      	beq.n	800f460 <_nxe_packet_pool_create+0x24>
 800f45a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f45c:	2b3c      	cmp	r3, #60	@ 0x3c
 800f45e:	d001      	beq.n	800f464 <_nxe_packet_pool_create+0x28>
    {
        return(NX_PTR_ERROR);
 800f460:	2307      	movs	r3, #7
 800f462:	e0a7      	b.n	800f5b4 <_nxe_packet_pool_create+0x178>
    }

    /* Align the starting address to four bytes. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_start = (VOID *)((((ALIGN_TYPE)pool_start + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	3303      	adds	r3, #3
 800f468:	f023 0303 	bic.w	r3, r3, #3
 800f46c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Round the pool size down to something that is evenly divisible by alignment.  */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    rounded_pool_size = (ULONG)(((pool_size - ((ALIGN_TYPE)rounded_pool_start - (ALIGN_TYPE)pool_start)) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800f46e:	683a      	ldr	r2, [r7, #0]
 800f470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f472:	1ad2      	subs	r2, r2, r3
 800f474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f476:	4413      	add	r3, r2
 800f478:	f023 0303 	bic.w	r3, r3, #3
 800f47c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Calculate the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((ALIGN_TYPE)rounded_pool_start + sizeof(NX_PACKET));
 800f47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f480:	333c      	adds	r3, #60	@ 0x3c
 800f482:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Align the address of payload. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    payload_address = (CHAR *)((((ALIGN_TYPE)payload_address + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT);
 800f484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f486:	3303      	adds	r3, #3
 800f488:	f023 0303 	bic.w	r3, r3, #3
 800f48c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Calculate the header size. */
    /*lint -e{923} suppress cast between ULONG and pointer.  */
    header_size = (ULONG)((ALIGN_TYPE)payload_address - (ALIGN_TYPE)rounded_pool_start);
 800f48e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Round the packet size up to something that helps guarantee proper alignment for header and payload.  */
    rounded_payload_size =  (ULONG)(((header_size + payload_size + NX_PACKET_ALIGNMENT  - 1) / NX_PACKET_ALIGNMENT) * NX_PACKET_ALIGNMENT - header_size);
 800f496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4413      	add	r3, r2
 800f49c:	3303      	adds	r3, #3
 800f49e:	f023 0203 	bic.w	r2, r3, #3
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a4:	1ad3      	subs	r3, r2, r3
 800f4a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check for an invalid pool and payload size.  */
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800f4a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4aa:	2b04      	cmp	r3, #4
 800f4ac:	d908      	bls.n	800f4c0 <_nxe_packet_pool_create+0x84>
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d005      	beq.n	800f4c0 <_nxe_packet_pool_create+0x84>
        ((rounded_payload_size + header_size) > rounded_pool_size))
 800f4b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b8:	4413      	add	r3, r2
    if ((pool_size <= NX_PACKET_ALIGNMENT) || (!payload_size) ||
 800f4ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d201      	bcs.n	800f4c4 <_nxe_packet_pool_create+0x88>
    {
        return(NX_SIZE_ERROR);
 800f4c0:	2309      	movs	r3, #9
 800f4c2:	e077      	b.n	800f5b4 <_nxe_packet_pool_create+0x178>
    }

    /* Calculate the end of the pool memory area.  */
    end_memory =  ((CHAR *)pool_start) + (pool_size - 1);
 800f4c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f4c6:	3b01      	subs	r3, #1
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Pickup current thread pointer.  */
    current_thread =  tx_thread_identify();
 800f4ce:	f002 fc2b 	bl	8011d28 <_tx_thread_identify>
 800f4d2:	6278      	str	r0, [r7, #36]	@ 0x24

    /* Disable preemption temporarily.  */
    if (current_thread)
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d006      	beq.n	800f4e8 <_nxe_packet_pool_create+0xac>
    {
        tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800f4da:	f107 0310 	add.w	r3, r7, #16
 800f4de:	461a      	mov	r2, r3
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f4e4:	f002 fc7c 	bl	8011de0 <_tx_thread_preemption_change>
    }

    /* Loop to check for the pool instance already created.  */
    created_pool =   _nx_packet_pool_created_ptr;
 800f4e8:	4b34      	ldr	r3, [pc, #208]	@ (800f5bc <_nxe_packet_pool_create+0x180>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	647b      	str	r3, [r7, #68]	@ 0x44
    created_count =  _nx_packet_pool_created_count;
 800f4ee:	4b34      	ldr	r3, [pc, #208]	@ (800f5c0 <_nxe_packet_pool_create+0x184>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	643b      	str	r3, [r7, #64]	@ 0x40
    while (created_count--)
 800f4f4:	e02b      	b.n	800f54e <_nxe_packet_pool_create+0x112>
    {

        /* Calculate the created pool's end of memory.  */
        created_end =  created_pool -> nx_packet_pool_start + (created_pool -> nx_packet_pool_size - 1);
 800f4f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4f8:	6a1a      	ldr	r2, [r3, #32]
 800f4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4fe:	3b01      	subs	r3, #1
 800f500:	4413      	add	r3, r2
 800f502:	61fb      	str	r3, [r7, #28]

        /* Is the new pool already created?  */
        /*lint -e{946} suppress pointer subtraction, since it is necessary. */
        if ((pool_ptr == created_pool) ||
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f508:	429a      	cmp	r2, r3
 800f50a:	d011      	beq.n	800f530 <_nxe_packet_pool_create+0xf4>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800f50c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f50e:	6a1b      	ldr	r3, [r3, #32]
        if ((pool_ptr == created_pool) ||
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	429a      	cmp	r2, r3
 800f514:	d303      	bcc.n	800f51e <_nxe_packet_pool_create+0xe2>
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800f516:	683a      	ldr	r2, [r7, #0]
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d308      	bcc.n	800f530 <_nxe_packet_pool_create+0xf4>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800f51e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f520:	6a1b      	ldr	r3, [r3, #32]
            ((pool_start >= (VOID *)created_pool -> nx_packet_pool_start) && (pool_start < (VOID *)created_end)) ||
 800f522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f524:	429a      	cmp	r2, r3
 800f526:	d30f      	bcc.n	800f548 <_nxe_packet_pool_create+0x10c>
            ((end_memory  >= created_pool -> nx_packet_pool_start) && (end_memory  < created_end)))
 800f528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d20b      	bcs.n	800f548 <_nxe_packet_pool_create+0x10c>
        {

            /* Restore preemption.  */
            if (current_thread)
 800f530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f532:	2b00      	cmp	r3, #0
 800f534:	d006      	beq.n	800f544 <_nxe_packet_pool_create+0x108>
            {

                /*lint -e{644} suppress variable might not be initialized, since "old_threshold" was initialized by previous tx_thread_preemption_change. */
                tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	f107 0210 	add.w	r2, r7, #16
 800f53c:	4619      	mov	r1, r3
 800f53e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f540:	f002 fc4e 	bl	8011de0 <_tx_thread_preemption_change>
            }

            /* Duplicate packet pool created, return an error!  */
            return(NX_PTR_ERROR);
 800f544:	2307      	movs	r3, #7
 800f546:	e035      	b.n	800f5b4 <_nxe_packet_pool_create+0x178>
        }

        /* Move to next entry.  */
        created_pool =  created_pool -> nx_packet_pool_created_next;
 800f548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f54a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f54c:	647b      	str	r3, [r7, #68]	@ 0x44
    while (created_count--)
 800f54e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f550:	1e5a      	subs	r2, r3, #1
 800f552:	643a      	str	r2, [r7, #64]	@ 0x40
 800f554:	2b00      	cmp	r3, #0
 800f556:	d1ce      	bne.n	800f4f6 <_nxe_packet_pool_create+0xba>
    }

    /* Restore preemption.  */
    if (current_thread)
 800f558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d006      	beq.n	800f56c <_nxe_packet_pool_create+0x130>
    {
        tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	f107 0210 	add.w	r2, r7, #16
 800f564:	4619      	mov	r1, r3
 800f566:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f568:	f002 fc3a 	bl	8011de0 <_tx_thread_preemption_change>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f56c:	f3ef 8305 	mrs	r3, IPSR
 800f570:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f572:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800f574:	4b13      	ldr	r3, [pc, #76]	@ (800f5c4 <_nxe_packet_pool_create+0x188>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4313      	orrs	r3, r2
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d009      	beq.n	800f592 <_nxe_packet_pool_create+0x156>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f57e:	f3ef 8305 	mrs	r3, IPSR
 800f582:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f584:	697a      	ldr	r2, [r7, #20]
 800f586:	4b0f      	ldr	r3, [pc, #60]	@ (800f5c4 <_nxe_packet_pool_create+0x188>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4313      	orrs	r3, r2
 800f58c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800f590:	d304      	bcc.n	800f59c <_nxe_packet_pool_create+0x160>
 800f592:	4b0d      	ldr	r3, [pc, #52]	@ (800f5c8 <_nxe_packet_pool_create+0x18c>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	4a0d      	ldr	r2, [pc, #52]	@ (800f5cc <_nxe_packet_pool_create+0x190>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d101      	bne.n	800f5a0 <_nxe_packet_pool_create+0x164>
 800f59c:	2311      	movs	r3, #17
 800f59e:	e009      	b.n	800f5b4 <_nxe_packet_pool_create+0x178>

    /* Call actual packet pool create function.  */
    status =  _nx_packet_pool_create(pool_ptr, name_ptr, payload_size, pool_start, pool_size);
 800f5a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f5a2:	9300      	str	r3, [sp, #0]
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	68b9      	ldr	r1, [r7, #8]
 800f5aa:	68f8      	ldr	r0, [r7, #12]
 800f5ac:	f7fd ff34 	bl	800d418 <_nx_packet_pool_create>
 800f5b0:	6238      	str	r0, [r7, #32]

    /* Return completion status.  */
    return(status);
 800f5b2:	6a3b      	ldr	r3, [r7, #32]
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3748      	adds	r7, #72	@ 0x48
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	2000adc0 	.word	0x2000adc0
 800f5c0:	2000adc4 	.word	0x2000adc4
 800f5c4:	20000098 	.word	0x20000098
 800f5c8:	2000ae14 	.word	0x2000ae14
 800f5cc:	2000af5c 	.word	0x2000af5c

0800f5d0 <_nxe_packet_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_release(NX_PACKET **packet_ptr_ptr)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d009      	beq.n	800f5f8 <_nxe_packet_release+0x28>
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d005      	beq.n	800f5f8 <_nxe_packet_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800f5f2:	4a12      	ldr	r2, [pc, #72]	@ (800f63c <_nxe_packet_release+0x6c>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d001      	beq.n	800f5fc <_nxe_packet_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800f5f8:	2307      	movs	r3, #7
 800f5fa:	e01a      	b.n	800f632 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	689a      	ldr	r2, [r3, #8]
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	691b      	ldr	r3, [r3, #16]
 800f604:	429a      	cmp	r2, r3
 800f606:	d201      	bcs.n	800f60c <_nxe_packet_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800f608:	2302      	movs	r3, #2
 800f60a:	e012      	b.n	800f632 <_nxe_packet_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	68da      	ldr	r2, [r3, #12]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	695b      	ldr	r3, [r3, #20]
 800f614:	429a      	cmp	r2, r3
 800f616:	d901      	bls.n	800f61c <_nxe_packet_release+0x4c>
    {
        return(NX_OVERFLOW);
 800f618:	2303      	movs	r3, #3
 800f61a:	e00a      	b.n	800f632 <_nxe_packet_release+0x62>
    }

    /* Call actual packet release function.  */
    status =  _nx_packet_release(packet_ptr);
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f7fe f855 	bl	800d6cc <_nx_packet_release>
 800f622:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d102      	bne.n	800f630 <_nxe_packet_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2200      	movs	r2, #0
 800f62e:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800f630:	68bb      	ldr	r3, [r7, #8]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop
 800f63c:	5041434b 	.word	0x5041434b

0800f640 <_nxe_packet_transmit_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_packet_transmit_release(NX_PACKET **packet_ptr_ptr)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
UINT       status;
NX_PACKET *packet_ptr;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	60fb      	str	r3, [r7, #12]

    /* Simple integrity check on the packet.  */
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d009      	beq.n	800f668 <_nxe_packet_transmit_release+0x28>
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d005      	beq.n	800f668 <_nxe_packet_transmit_release+0x28>
        ((packet_ptr -> nx_packet_pool_owner) -> nx_packet_pool_id != NX_PACKET_POOL_ID))
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	681b      	ldr	r3, [r3, #0]
    if ((packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_pool_owner == NX_NULL) ||
 800f662:	4a12      	ldr	r2, [pc, #72]	@ (800f6ac <_nxe_packet_transmit_release+0x6c>)
 800f664:	4293      	cmp	r3, r2
 800f666:	d001      	beq.n	800f66c <_nxe_packet_transmit_release+0x2c>
    {

        return(NX_PTR_ERROR);
 800f668:	2307      	movs	r3, #7
 800f66a:	e01a      	b.n	800f6a2 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_prepend_ptr < packet_ptr -> nx_packet_data_start)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	689a      	ldr	r2, [r3, #8]
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	691b      	ldr	r3, [r3, #16]
 800f674:	429a      	cmp	r2, r3
 800f676:	d201      	bcs.n	800f67c <_nxe_packet_transmit_release+0x3c>
    {
        return(NX_UNDERFLOW);
 800f678:	2302      	movs	r3, #2
 800f67a:	e012      	b.n	800f6a2 <_nxe_packet_transmit_release+0x62>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	68da      	ldr	r2, [r3, #12]
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	695b      	ldr	r3, [r3, #20]
 800f684:	429a      	cmp	r2, r3
 800f686:	d901      	bls.n	800f68c <_nxe_packet_transmit_release+0x4c>
    {
        return(NX_OVERFLOW);
 800f688:	2303      	movs	r3, #3
 800f68a:	e00a      	b.n	800f6a2 <_nxe_packet_transmit_release+0x62>
    }

    /* Call actual packet transmit release function.  */
    status =  _nx_packet_transmit_release(packet_ptr);
 800f68c:	68f8      	ldr	r0, [r7, #12]
 800f68e:	f7fe f8d5 	bl	800d83c <_nx_packet_transmit_release>
 800f692:	60b8      	str	r0, [r7, #8]

    /* Determine if the packet release was successful.  */
    if (status == NX_SUCCESS)
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d102      	bne.n	800f6a0 <_nxe_packet_transmit_release+0x60>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2200      	movs	r2, #0
 800f69e:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800f6a0:	68bb      	ldr	r3, [r7, #8]
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3710      	adds	r7, #16
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop
 800f6ac:	5041434b 	.word	0x5041434b

0800f6b0 <_nxe_udp_enable>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_enable(NX_IP *ip_ptr)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b086      	sub	sp, #24
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID))
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d004      	beq.n	800f6c8 <_nxe_udp_enable+0x18>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	4a15      	ldr	r2, [pc, #84]	@ (800f718 <_nxe_udp_enable+0x68>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d001      	beq.n	800f6cc <_nxe_udp_enable+0x1c>
    {
        return(NX_PTR_ERROR);
 800f6c8:	2307      	movs	r3, #7
 800f6ca:	e020      	b.n	800f70e <_nxe_udp_enable+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (ip_ptr -> nx_ip_udp_packet_receive)
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <_nxe_udp_enable+0x2a>
    {
        return(NX_ALREADY_ENABLED);
 800f6d6:	2315      	movs	r3, #21
 800f6d8:	e019      	b.n	800f70e <_nxe_udp_enable+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f6da:	f3ef 8305 	mrs	r3, IPSR
 800f6de:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f6e0:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_NOT_ISR_CALLER_CHECKING
 800f6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800f71c <_nxe_udp_enable+0x6c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00b      	beq.n	800f704 <_nxe_udp_enable+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f6ec:	f3ef 8305 	mrs	r3, IPSR
 800f6f0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	4b09      	ldr	r3, [pc, #36]	@ (800f71c <_nxe_udp_enable+0x6c>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800f6fe:	d201      	bcs.n	800f704 <_nxe_udp_enable+0x54>
 800f700:	2311      	movs	r3, #17
 800f702:	e004      	b.n	800f70e <_nxe_udp_enable+0x5e>

    /* Call actual UDP enable function.  */
    status =  _nx_udp_enable(ip_ptr);
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7fe f99b 	bl	800da40 <_nx_udp_enable>
 800f70a:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800f70c:	697b      	ldr	r3, [r7, #20]
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3718      	adds	r7, #24
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	49502020 	.word	0x49502020
 800f71c:	20000098 	.word	0x20000098

0800f720 <_nxe_udp_socket_bind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_bind(NX_UDP_SOCKET *socket_ptr, UINT  port, ULONG wait_option)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b086      	sub	sp, #24
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d004      	beq.n	800f73c <_nxe_udp_socket_bind+0x1c>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a19      	ldr	r2, [pc, #100]	@ (800f79c <_nxe_udp_socket_bind+0x7c>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d001      	beq.n	800f740 <_nxe_udp_socket_bind+0x20>
    {
        return(NX_PTR_ERROR);
 800f73c:	2307      	movs	r3, #7
 800f73e:	e028      	b.n	800f792 <_nxe_udp_socket_bind+0x72>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d101      	bne.n	800f750 <_nxe_udp_socket_bind+0x30>
    {
        return(NX_NOT_ENABLED);
 800f74c:	2314      	movs	r3, #20
 800f74e:	e020      	b.n	800f792 <_nxe_udp_socket_bind+0x72>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f756:	d301      	bcc.n	800f75c <_nxe_udp_socket_bind+0x3c>
    {
        return(NX_INVALID_PORT);
 800f758:	2346      	movs	r3, #70	@ 0x46
 800f75a:	e01a      	b.n	800f792 <_nxe_udp_socket_bind+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f75c:	f3ef 8305 	mrs	r3, IPSR
 800f760:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f762:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800f764:	4b0e      	ldr	r3, [pc, #56]	@ (800f7a0 <_nxe_udp_socket_bind+0x80>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4313      	orrs	r3, r2
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d108      	bne.n	800f780 <_nxe_udp_socket_bind+0x60>
 800f76e:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a4 <_nxe_udp_socket_bind+0x84>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d004      	beq.n	800f780 <_nxe_udp_socket_bind+0x60>
 800f776:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a4 <_nxe_udp_socket_bind+0x84>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4a0b      	ldr	r2, [pc, #44]	@ (800f7a8 <_nxe_udp_socket_bind+0x88>)
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d101      	bne.n	800f784 <_nxe_udp_socket_bind+0x64>
 800f780:	2311      	movs	r3, #17
 800f782:	e006      	b.n	800f792 <_nxe_udp_socket_bind+0x72>

    /* Call actual UDP socket bind function.  */
    status =  _nx_udp_socket_bind(socket_ptr, port, wait_option);
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	68b9      	ldr	r1, [r7, #8]
 800f788:	68f8      	ldr	r0, [r7, #12]
 800f78a:	f7fe fc3f 	bl	800e00c <_nx_udp_socket_bind>
 800f78e:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800f790:	697b      	ldr	r3, [r7, #20]
}
 800f792:	4618      	mov	r0, r3
 800f794:	3718      	adds	r7, #24
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	55445020 	.word	0x55445020
 800f7a0:	20000098 	.word	0x20000098
 800f7a4:	2000ae14 	.word	0x2000ae14
 800f7a8:	2000af5c 	.word	0x2000af5c

0800f7ac <_nxe_udp_socket_create>:
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_create(NX_IP *ip_ptr, NX_UDP_SOCKET *socket_ptr, CHAR *name,
                             ULONG type_of_service, ULONG fragment, UINT time_to_live,
                             ULONG queue_maximum, UINT udp_socket_size)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b08e      	sub	sp, #56	@ 0x38
 800f7b0:	af04      	add	r7, sp, #16
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
 800f7b8:	603b      	str	r3, [r7, #0]
NX_UDP_SOCKET *created_socket;
ULONG          created_count;


    /* Check for invalid input pointers.  */
    if ((ip_ptr == NX_NULL) || (ip_ptr -> nx_ip_id != NX_IP_ID) ||
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00a      	beq.n	800f7d6 <_nxe_udp_socket_create+0x2a>
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	4a3f      	ldr	r2, [pc, #252]	@ (800f8c4 <_nxe_udp_socket_create+0x118>)
 800f7c6:	4293      	cmp	r3, r2
 800f7c8:	d105      	bne.n	800f7d6 <_nxe_udp_socket_create+0x2a>
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <_nxe_udp_socket_create+0x2a>
        (socket_ptr == NX_NULL) || (udp_socket_size != (UINT)sizeof(NX_UDP_SOCKET)))
 800f7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7d2:	2b78      	cmp	r3, #120	@ 0x78
 800f7d4:	d001      	beq.n	800f7da <_nxe_udp_socket_create+0x2e>
    {
        return(NX_PTR_ERROR);
 800f7d6:	2307      	movs	r3, #7
 800f7d8:	e06f      	b.n	800f8ba <_nxe_udp_socket_create+0x10e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f7da:	f3ef 8305 	mrs	r3, IPSR
 800f7de:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800f7e0:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for appropriate caller.  */
    NX_INIT_AND_THREADS_CALLER_CHECKING
 800f7e2:	4b39      	ldr	r3, [pc, #228]	@ (800f8c8 <_nxe_udp_socket_create+0x11c>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d009      	beq.n	800f800 <_nxe_udp_socket_create+0x54>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f7ec:	f3ef 8305 	mrs	r3, IPSR
 800f7f0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	4b34      	ldr	r3, [pc, #208]	@ (800f8c8 <_nxe_udp_socket_create+0x11c>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4313      	orrs	r3, r2
 800f7fa:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800f7fe:	d304      	bcc.n	800f80a <_nxe_udp_socket_create+0x5e>
 800f800:	4b32      	ldr	r3, [pc, #200]	@ (800f8cc <_nxe_udp_socket_create+0x120>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4a32      	ldr	r2, [pc, #200]	@ (800f8d0 <_nxe_udp_socket_create+0x124>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d101      	bne.n	800f80e <_nxe_udp_socket_create+0x62>
 800f80a:	2311      	movs	r3, #17
 800f80c:	e055      	b.n	800f8ba <_nxe_udp_socket_create+0x10e>

    /* Get protection mutex.  */
    tx_mutex_get(&(ip_ptr -> nx_ip_protection), TX_WAIT_FOREVER);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800f814:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800f818:	4618      	mov	r0, r3
 800f81a:	f001 facb 	bl	8010db4 <_tx_mutex_get>

    /* Pickup created count and created socket pointer.  */
    created_count =   ip_ptr -> nx_ip_udp_created_sockets_count;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800f824:	623b      	str	r3, [r7, #32]
    created_socket =  ip_ptr -> nx_ip_udp_created_sockets_ptr;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800f82c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Loop to look for socket already created.  */
    while (created_count--)
 800f82e:	e00e      	b.n	800f84e <_nxe_udp_socket_create+0xa2>
    {

        /* Compare the new socket with the already created socket.  */
        if (socket_ptr == created_socket)
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f834:	429a      	cmp	r2, r3
 800f836:	d107      	bne.n	800f848 <_nxe_udp_socket_create+0x9c>
        {

            /* Error, socket already created!  */

            /* Release protection mutex.  */
            tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800f83e:	4618      	mov	r0, r3
 800f840:	f001 fd30 	bl	80112a4 <_tx_mutex_put>

            /* Return error.  */
            return(NX_PTR_ERROR);
 800f844:	2307      	movs	r3, #7
 800f846:	e038      	b.n	800f8ba <_nxe_udp_socket_create+0x10e>
        }

        /* Move to next created socket.  */
        created_socket =  created_socket -> nx_udp_socket_created_next;
 800f848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f84c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (created_count--)
 800f84e:	6a3b      	ldr	r3, [r7, #32]
 800f850:	1e5a      	subs	r2, r3, #1
 800f852:	623a      	str	r2, [r7, #32]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1eb      	bne.n	800f830 <_nxe_udp_socket_create+0x84>
    }

    /* Release protection mutex.  */
    tx_mutex_put(&(ip_ptr -> nx_ip_protection));
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800f85e:	4618      	mov	r0, r3
 800f860:	f001 fd20 	bl	80112a4 <_tx_mutex_put>

    /* Check to see if UDP is enabled.  */
    if (!ip_ptr -> nx_ip_udp_packet_receive)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d101      	bne.n	800f872 <_nxe_udp_socket_create+0xc6>
    {
        return(NX_NOT_ENABLED);
 800f86e:	2314      	movs	r3, #20
 800f870:	e023      	b.n	800f8ba <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid type of service.  */
    if (type_of_service & ~(NX_IP_TOS_MASK))
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d001      	beq.n	800f880 <_nxe_udp_socket_create+0xd4>
    {
        return(NX_OPTION_ERROR);
 800f87c:	230a      	movs	r3, #10
 800f87e:	e01c      	b.n	800f8ba <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid fragment option.  */
    if ((fragment != NX_FRAGMENT_OKAY) &&
 800f880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f882:	2b00      	cmp	r3, #0
 800f884:	d005      	beq.n	800f892 <_nxe_udp_socket_create+0xe6>
 800f886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f88c:	d001      	beq.n	800f892 <_nxe_udp_socket_create+0xe6>
        (fragment != NX_DONT_FRAGMENT))
    {
        return(NX_OPTION_ERROR);
 800f88e:	230a      	movs	r3, #10
 800f890:	e013      	b.n	800f8ba <_nxe_udp_socket_create+0x10e>
    }

    /* Check for valid time to live option.  */
    if (((ULONG)time_to_live) > NX_IP_TIME_TO_LIVE_MASK)
 800f892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f894:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800f898:	d901      	bls.n	800f89e <_nxe_udp_socket_create+0xf2>
    {
        return(NX_OPTION_ERROR);
 800f89a:	230a      	movs	r3, #10
 800f89c:	e00d      	b.n	800f8ba <_nxe_udp_socket_create+0x10e>
    }

    /* Call actual UDP socket create function.  */
    status =  _nx_udp_socket_create(ip_ptr, socket_ptr, name, type_of_service,
 800f89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a0:	9302      	str	r3, [sp, #8]
 800f8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a4:	9301      	str	r3, [sp, #4]
 800f8a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8a8:	9300      	str	r3, [sp, #0]
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	68b9      	ldr	r1, [r7, #8]
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f7fe fcd9 	bl	800e268 <_nx_udp_socket_create>
 800f8b6:	61f8      	str	r0, [r7, #28]
                                    fragment, time_to_live, queue_maximum);

    /* Return completion status.  */
    return(status);
 800f8b8:	69fb      	ldr	r3, [r7, #28]
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3728      	adds	r7, #40	@ 0x28
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	49502020 	.word	0x49502020
 800f8c8:	20000098 	.word	0x20000098
 800f8cc:	2000ae14 	.word	0x2000ae14
 800f8d0:	2000af5c 	.word	0x2000af5c

0800f8d4 <_nxe_udp_socket_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_delete(NX_UDP_SOCKET *socket_ptr)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b084      	sub	sp, #16
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d004      	beq.n	800f8ec <_nxe_udp_socket_delete+0x18>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	4a15      	ldr	r2, [pc, #84]	@ (800f93c <_nxe_udp_socket_delete+0x68>)
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d001      	beq.n	800f8f0 <_nxe_udp_socket_delete+0x1c>
    {
        return(NX_PTR_ERROR);
 800f8ec:	2307      	movs	r3, #7
 800f8ee:	e020      	b.n	800f932 <_nxe_udp_socket_delete+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d101      	bne.n	800f900 <_nxe_udp_socket_delete+0x2c>
    {
        return(NX_NOT_ENABLED);
 800f8fc:	2314      	movs	r3, #20
 800f8fe:	e018      	b.n	800f932 <_nxe_udp_socket_delete+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f900:	f3ef 8305 	mrs	r3, IPSR
 800f904:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800f906:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800f908:	4b0d      	ldr	r3, [pc, #52]	@ (800f940 <_nxe_udp_socket_delete+0x6c>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d108      	bne.n	800f924 <_nxe_udp_socket_delete+0x50>
 800f912:	4b0c      	ldr	r3, [pc, #48]	@ (800f944 <_nxe_udp_socket_delete+0x70>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d004      	beq.n	800f924 <_nxe_udp_socket_delete+0x50>
 800f91a:	4b0a      	ldr	r3, [pc, #40]	@ (800f944 <_nxe_udp_socket_delete+0x70>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	4a0a      	ldr	r2, [pc, #40]	@ (800f948 <_nxe_udp_socket_delete+0x74>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d101      	bne.n	800f928 <_nxe_udp_socket_delete+0x54>
 800f924:	2311      	movs	r3, #17
 800f926:	e004      	b.n	800f932 <_nxe_udp_socket_delete+0x5e>

    /* Call actual UDP socket delete function.  */
    status =  _nx_udp_socket_delete(socket_ptr);
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7fe fd2d 	bl	800e388 <_nx_udp_socket_delete>
 800f92e:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800f930:	68fb      	ldr	r3, [r7, #12]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	55445020 	.word	0x55445020
 800f940:	20000098 	.word	0x20000098
 800f944:	2000ae14 	.word	0x2000ae14
 800f948:	2000af5c 	.word	0x2000af5c

0800f94c <_nxe_udp_socket_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_receive(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr, ULONG wait_option)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b086      	sub	sp, #24
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) || (packet_ptr == NX_NULL))
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d007      	beq.n	800f96e <_nxe_udp_socket_receive+0x22>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	4a17      	ldr	r2, [pc, #92]	@ (800f9c0 <_nxe_udp_socket_receive+0x74>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d102      	bne.n	800f96e <_nxe_udp_socket_receive+0x22>
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d101      	bne.n	800f972 <_nxe_udp_socket_receive+0x26>
    {
        return(NX_PTR_ERROR);
 800f96e:	2307      	movs	r3, #7
 800f970:	e022      	b.n	800f9b8 <_nxe_udp_socket_receive+0x6c>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d101      	bne.n	800f982 <_nxe_udp_socket_receive+0x36>
    {
        return(NX_NOT_ENABLED);
 800f97e:	2314      	movs	r3, #20
 800f980:	e01a      	b.n	800f9b8 <_nxe_udp_socket_receive+0x6c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800f982:	f3ef 8305 	mrs	r3, IPSR
 800f986:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800f988:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800f98a:	4b0e      	ldr	r3, [pc, #56]	@ (800f9c4 <_nxe_udp_socket_receive+0x78>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	4313      	orrs	r3, r2
 800f990:	2b00      	cmp	r3, #0
 800f992:	d108      	bne.n	800f9a6 <_nxe_udp_socket_receive+0x5a>
 800f994:	4b0c      	ldr	r3, [pc, #48]	@ (800f9c8 <_nxe_udp_socket_receive+0x7c>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d004      	beq.n	800f9a6 <_nxe_udp_socket_receive+0x5a>
 800f99c:	4b0a      	ldr	r3, [pc, #40]	@ (800f9c8 <_nxe_udp_socket_receive+0x7c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4a0a      	ldr	r2, [pc, #40]	@ (800f9cc <_nxe_udp_socket_receive+0x80>)
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d101      	bne.n	800f9aa <_nxe_udp_socket_receive+0x5e>
 800f9a6:	2311      	movs	r3, #17
 800f9a8:	e006      	b.n	800f9b8 <_nxe_udp_socket_receive+0x6c>

    /* Call actual UDP socket receive function.  */
    status =  _nx_udp_socket_receive(socket_ptr, packet_ptr, wait_option);
 800f9aa:	687a      	ldr	r2, [r7, #4]
 800f9ac:	68b9      	ldr	r1, [r7, #8]
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	f7fe fd4a 	bl	800e448 <_nx_udp_socket_receive>
 800f9b4:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800f9b6:	697b      	ldr	r3, [r7, #20]
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3718      	adds	r7, #24
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	55445020 	.word	0x55445020
 800f9c4:	20000098 	.word	0x20000098
 800f9c8:	2000ae14 	.word	0x2000ae14
 800f9cc:	2000af5c 	.word	0x2000af5c

0800f9d0 <_nxe_udp_socket_send>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_send(NX_UDP_SOCKET *socket_ptr, NX_PACKET **packet_ptr_ptr,
                           ULONG ip_address, UINT port)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b088      	sub	sp, #32
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	607a      	str	r2, [r7, #4]
 800f9dc:	603b      	str	r3, [r7, #0]
NX_PACKET *packet_ptr;
UINT       status;


    /* Setup packet pointer.  */
    packet_ptr =  *packet_ptr_ptr;
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	61fb      	str	r3, [r7, #28]

    /* Check for invalid input pointers.  */
    /*lint -e{923} suppress cast of ULONG to pointer.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID) ||
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00c      	beq.n	800fa04 <_nxe_udp_socket_send+0x34>
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4a37      	ldr	r2, [pc, #220]	@ (800facc <_nxe_udp_socket_send+0xfc>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d107      	bne.n	800fa04 <_nxe_udp_socket_send+0x34>
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d004      	beq.n	800fa04 <_nxe_udp_socket_send+0x34>
        (packet_ptr == NX_NULL) || (packet_ptr -> nx_packet_union_next.nx_packet_tcp_queue_next != ((NX_PACKET *)NX_PACKET_ALLOCATED)))
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	6a1b      	ldr	r3, [r3, #32]
 800f9fe:	f1b3 3faa 	cmp.w	r3, #2863311530	@ 0xaaaaaaaa
 800fa02:	d001      	beq.n	800fa08 <_nxe_udp_socket_send+0x38>
    {

        return(NX_PTR_ERROR);
 800fa04:	2307      	movs	r3, #7
 800fa06:	e05d      	b.n	800fac4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d101      	bne.n	800fa18 <_nxe_udp_socket_send+0x48>
    {
        return(NX_NOT_ENABLED);
 800fa14:	2314      	movs	r3, #20
 800fa16:	e055      	b.n	800fac4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for invalid IP address.  */
    if (ip_address == NX_NULL)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d101      	bne.n	800fa22 <_nxe_udp_socket_send+0x52>
    {
        return(NX_IP_ADDRESS_ERROR);
 800fa1e:	2321      	movs	r3, #33	@ 0x21
 800fa20:	e050      	b.n	800fac4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid port.  */
    if (((ULONG)port) > (ULONG)NX_MAX_PORT)
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa28:	d301      	bcc.n	800fa2e <_nxe_udp_socket_send+0x5e>
    {
        return(NX_INVALID_PORT);
 800fa2a:	2346      	movs	r3, #70	@ 0x46
 800fa2c:	e04a      	b.n	800fac4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet prepend pointer.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((INT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) < (INT)(sizeof(NX_IPV4_HEADER) + sizeof(NX_UDP_HEADER)))
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	689a      	ldr	r2, [r3, #8]
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	2b1b      	cmp	r3, #27
 800fa3a:	dc0d      	bgt.n	800fa58 <_nxe_udp_socket_send+0x88>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800fa44:	3201      	adds	r2, #1
 800fa46:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	1c5a      	adds	r2, r3, #1
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_UNDERFLOW);
 800fa54:	2302      	movs	r3, #2
 800fa56:	e035      	b.n	800fac4 <_nxe_udp_socket_send+0xf4>
    }

    /* Check for an invalid packet append pointer.  */
    /*lint -e{946} suppress pointer subtraction, since it is necessary. */
    if (packet_ptr -> nx_packet_append_ptr > packet_ptr -> nx_packet_data_end)
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	68da      	ldr	r2, [r3, #12]
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	695b      	ldr	r3, [r3, #20]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d90d      	bls.n	800fa80 <_nxe_udp_socket_send+0xb0>
    {

#ifndef NX_DISABLE_UDP_INFO
        /* Increment the total UDP invalid packet count.  */
        (socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_invalid_packets++;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800fa6c:	3201      	adds	r2, #1
 800fa6e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

        /* Increment the total UDP invalid packet count for this socket.  */
        socket_ptr -> nx_udp_socket_invalid_packets++;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6a1b      	ldr	r3, [r3, #32]
 800fa76:	1c5a      	adds	r2, r3, #1
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	621a      	str	r2, [r3, #32]
#endif

        /* Return error code.  */
        return(NX_OVERFLOW);
 800fa7c:	2303      	movs	r3, #3
 800fa7e:	e021      	b.n	800fac4 <_nxe_udp_socket_send+0xf4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fa80:	f3ef 8305 	mrs	r3, IPSR
 800fa84:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800fa86:	697a      	ldr	r2, [r7, #20]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800fa88:	4b11      	ldr	r3, [pc, #68]	@ (800fad0 <_nxe_udp_socket_send+0x100>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4313      	orrs	r3, r2
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d108      	bne.n	800faa4 <_nxe_udp_socket_send+0xd4>
 800fa92:	4b10      	ldr	r3, [pc, #64]	@ (800fad4 <_nxe_udp_socket_send+0x104>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d004      	beq.n	800faa4 <_nxe_udp_socket_send+0xd4>
 800fa9a:	4b0e      	ldr	r3, [pc, #56]	@ (800fad4 <_nxe_udp_socket_send+0x104>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a0e      	ldr	r2, [pc, #56]	@ (800fad8 <_nxe_udp_socket_send+0x108>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d101      	bne.n	800faa8 <_nxe_udp_socket_send+0xd8>
 800faa4:	2311      	movs	r3, #17
 800faa6:	e00d      	b.n	800fac4 <_nxe_udp_socket_send+0xf4>

    /* Call actual UDP socket send function.  */
    status =  _nx_udp_socket_send(socket_ptr, packet_ptr, ip_address, port);
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	687a      	ldr	r2, [r7, #4]
 800faac:	69f9      	ldr	r1, [r7, #28]
 800faae:	68f8      	ldr	r0, [r7, #12]
 800fab0:	f7fe fe55 	bl	800e75e <_nx_udp_socket_send>
 800fab4:	61b8      	str	r0, [r7, #24]

    /* Determine if the packet send was successful.  */
    if (status == NX_SUCCESS)
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d102      	bne.n	800fac2 <_nxe_udp_socket_send+0xf2>
    {

        /* Yes, now clear the application's packet pointer so it can't be accidentally
           used again by the application.  This is only done when error checking is
           enabled.  */
        *packet_ptr_ptr =  NX_NULL;
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	2200      	movs	r2, #0
 800fac0:	601a      	str	r2, [r3, #0]
    }

    /* Return completion status.  */
    return(status);
 800fac2:	69bb      	ldr	r3, [r7, #24]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3720      	adds	r7, #32
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	55445020 	.word	0x55445020
 800fad0:	20000098 	.word	0x20000098
 800fad4:	2000ae14 	.word	0x2000ae14
 800fad8:	2000af5c 	.word	0x2000af5c

0800fadc <_nxe_udp_socket_unbind>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_socket_unbind(NX_UDP_SOCKET *socket_ptr)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for invalid input pointers.  */
    if ((socket_ptr == NX_NULL) || (socket_ptr -> nx_udp_socket_id != NX_UDP_ID))
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d004      	beq.n	800faf4 <_nxe_udp_socket_unbind+0x18>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	4a15      	ldr	r2, [pc, #84]	@ (800fb44 <_nxe_udp_socket_unbind+0x68>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d001      	beq.n	800faf8 <_nxe_udp_socket_unbind+0x1c>
    {
        return(NX_PTR_ERROR);
 800faf4:	2307      	movs	r3, #7
 800faf6:	e020      	b.n	800fb3a <_nxe_udp_socket_unbind+0x5e>
    }

    /* Check to see if UDP is enabled.  */
    if (!(socket_ptr -> nx_udp_socket_ip_ptr) -> nx_ip_udp_packet_receive)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	68db      	ldr	r3, [r3, #12]
 800fafc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d101      	bne.n	800fb08 <_nxe_udp_socket_unbind+0x2c>
    {
        return(NX_NOT_ENABLED);
 800fb04:	2314      	movs	r3, #20
 800fb06:	e018      	b.n	800fb3a <_nxe_udp_socket_unbind+0x5e>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800fb08:	f3ef 8305 	mrs	r3, IPSR
 800fb0c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800fb0e:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for appropriate caller.  */
    NX_THREADS_ONLY_CALLER_CHECKING
 800fb10:	4b0d      	ldr	r3, [pc, #52]	@ (800fb48 <_nxe_udp_socket_unbind+0x6c>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d108      	bne.n	800fb2c <_nxe_udp_socket_unbind+0x50>
 800fb1a:	4b0c      	ldr	r3, [pc, #48]	@ (800fb4c <_nxe_udp_socket_unbind+0x70>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d004      	beq.n	800fb2c <_nxe_udp_socket_unbind+0x50>
 800fb22:	4b0a      	ldr	r3, [pc, #40]	@ (800fb4c <_nxe_udp_socket_unbind+0x70>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a0a      	ldr	r2, [pc, #40]	@ (800fb50 <_nxe_udp_socket_unbind+0x74>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d101      	bne.n	800fb30 <_nxe_udp_socket_unbind+0x54>
 800fb2c:	2311      	movs	r3, #17
 800fb2e:	e004      	b.n	800fb3a <_nxe_udp_socket_unbind+0x5e>

    /* Call actual UDP socket unbind function.  */
    status =  _nx_udp_socket_unbind(socket_ptr);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f7fe fe4f 	bl	800e7d4 <_nx_udp_socket_unbind>
 800fb36:	60f8      	str	r0, [r7, #12]

    /* Return completion status.  */
    return(status);
 800fb38:	68fb      	ldr	r3, [r7, #12]
}
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	3710      	adds	r7, #16
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	bd80      	pop	{r7, pc}
 800fb42:	bf00      	nop
 800fb44:	55445020 	.word	0x55445020
 800fb48:	20000098 	.word	0x20000098
 800fb4c:	2000ae14 	.word	0x2000ae14
 800fb50:	2000af5c 	.word	0x2000af5c

0800fb54 <_nxe_udp_source_extract>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _nxe_udp_source_extract(NX_PACKET *packet_ptr, ULONG *ip_address, UINT *port)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b086      	sub	sp, #24
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
#ifndef NX_DISABLE_IPV4
UINT status;


    /* Check for invalid input pointers.  */
    if ((packet_ptr == NX_NULL) || (ip_address == NX_NULL) || (port == NX_NULL))
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d005      	beq.n	800fb72 <_nxe_udp_source_extract+0x1e>
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <_nxe_udp_source_extract+0x1e>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d101      	bne.n	800fb76 <_nxe_udp_source_extract+0x22>
    {

        return(NX_PTR_ERROR);
 800fb72:	2307      	movs	r3, #7
 800fb74:	e01c      	b.n	800fbb0 <_nxe_udp_source_extract+0x5c>
    }

    /* Check for invalid packet pointer.  */
    if (packet_ptr -> nx_packet_ip_header == NX_NULL)
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d101      	bne.n	800fb82 <_nxe_udp_source_extract+0x2e>
    {

        return(NX_INVALID_PACKET);
 800fb7e:	2312      	movs	r3, #18
 800fb80:	e016      	b.n	800fbb0 <_nxe_udp_source_extract+0x5c>
    }


    if (packet_ptr -> nx_packet_ip_version != NX_IP_VERSION_V4)
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800fb88:	2b04      	cmp	r3, #4
 800fb8a:	d001      	beq.n	800fb90 <_nxe_udp_source_extract+0x3c>
    {

        return(NX_INVALID_PACKET);
 800fb8c:	2312      	movs	r3, #18
 800fb8e:	e00f      	b.n	800fbb0 <_nxe_udp_source_extract+0x5c>
    }

    /* Check to see if the packet has enough room in front for backing up.  */
    /*lint -e{946} -e{947} suppress pointer subtraction, since it is necessary. */
    if ((UINT)(packet_ptr -> nx_packet_prepend_ptr - packet_ptr -> nx_packet_data_start) <
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	689a      	ldr	r2, [r3, #8]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	691b      	ldr	r3, [r3, #16]
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	2b1b      	cmp	r3, #27
 800fb9c:	d801      	bhi.n	800fba2 <_nxe_udp_source_extract+0x4e>
        (sizeof(NX_UDP_HEADER) + sizeof(NX_IPV4_HEADER)))
    {

        return(NX_INVALID_PACKET);
 800fb9e:	2312      	movs	r3, #18
 800fba0:	e006      	b.n	800fbb0 <_nxe_udp_source_extract+0x5c>
    }

    /* Call actual UDP source extract function.  */
    status =  _nx_udp_source_extract(packet_ptr, ip_address, port);
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	68b9      	ldr	r1, [r7, #8]
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f7fe ff7e 	bl	800eaa8 <_nx_udp_source_extract>
 800fbac:	6178      	str	r0, [r7, #20]

    /* Return completion status.  */
    return(status);
 800fbae:	697b      	ldr	r3, [r7, #20]
    NX_PARAMETER_NOT_USED(ip_address);
    NX_PARAMETER_NOT_USED(port);

    return(NX_NOT_SUPPORTED);
#endif /* !NX_DISABLE_IPV4  */
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3718      	adds	r7, #24
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b096      	sub	sp, #88	@ 0x58
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	60f8      	str	r0, [r7, #12]
 800fbc0:	60b9      	str	r1, [r7, #8]
 800fbc2:	607a      	str	r2, [r7, #4]
 800fbc4:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	3303      	adds	r3, #3
 800fbca:	f023 0303 	bic.w	r3, r3, #3
 800fbce:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fbd0:	f3ef 8310 	mrs	r3, PRIMASK
 800fbd4:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800fbd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800fbd8:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800fbda:	b672      	cpsid	i
    return(int_posture);
 800fbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800fbde:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800fbe0:	4b55      	ldr	r3, [pc, #340]	@ (800fd38 <_tx_byte_allocate+0x180>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	64bb      	str	r3, [r7, #72]	@ 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fbee:	621a      	str	r2, [r3, #32]
 800fbf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbf2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf6:	f383 8810 	msr	PRIMASK, r3
}
 800fbfa:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800fbfc:	6879      	ldr	r1, [r7, #4]
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f000 f9b2 	bl	800ff68 <_tx_byte_pool_search>
 800fc04:	6478      	str	r0, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc06:	f3ef 8310 	mrs	r3, PRIMASK
 800fc0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 800fc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800fc0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc10:	b672      	cpsid	i
    return(int_posture);
 800fc12:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800fc14:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800fc16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d002      	beq.n	800fc22 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc20:	e006      	b.n	800fc30 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6a1b      	ldr	r3, [r3, #32]
 800fc26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d101      	bne.n	800fc30 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800fc30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d0d9      	beq.n	800fbea <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc3a:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800fc3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d008      	beq.n	800fc54 <_tx_byte_allocate+0x9c>
 800fc42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc44:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc46:	6a3b      	ldr	r3, [r7, #32]
 800fc48:	f383 8810 	msr	PRIMASK, r3
}
 800fc4c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc52:	e06c      	b.n	800fd2e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d061      	beq.n	800fd1e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800fc5a:	4b38      	ldr	r3, [pc, #224]	@ (800fd3c <_tx_byte_allocate+0x184>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d007      	beq.n	800fc72 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800fc62:	2310      	movs	r3, #16
 800fc64:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc68:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	f383 8810 	msr	PRIMASK, r3
}
 800fc70:	e05d      	b.n	800fd2e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800fc72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc74:	4a32      	ldr	r2, [pc, #200]	@ (800fd40 <_tx_byte_allocate+0x188>)
 800fc76:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800fc78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800fc7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc80:	68ba      	ldr	r2, [r7, #8]
 800fc82:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800fc84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800fc8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fc90:	1c5a      	adds	r2, r3, #1
 800fc92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fc94:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc9c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fca2:	1c5a      	adds	r2, r3, #1
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800fca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d109      	bne.n	800fcc2 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcb2:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800fcb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcb8:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800fcba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcbe:	675a      	str	r2, [r3, #116]	@ 0x74
 800fcc0:	e011      	b.n	800fce6 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800fcc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fccc:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800fcce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fcd2:	63bb      	str	r3, [r7, #56]	@ 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800fcd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcd6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fcd8:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800fcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcde:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800fce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fce2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fce4:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800fce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fce8:	2209      	movs	r2, #9
 800fcea:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fcec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcee:	2201      	movs	r2, #1
 800fcf0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800fcf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcf4:	683a      	ldr	r2, [r7, #0]
 800fcf6:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800fcf8:	4b10      	ldr	r3, [pc, #64]	@ (800fd3c <_tx_byte_allocate+0x184>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	4a0f      	ldr	r2, [pc, #60]	@ (800fd3c <_tx_byte_allocate+0x184>)
 800fd00:	6013      	str	r3, [r2, #0]
 800fd02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd04:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd06:	69bb      	ldr	r3, [r7, #24]
 800fd08:	f383 8810 	msr	PRIMASK, r3
}
 800fd0c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800fd0e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800fd10:	f002 fc3a 	bl	8012588 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800fd14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fd16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd1a:	653b      	str	r3, [r7, #80]	@ 0x50
 800fd1c:	e007      	b.n	800fd2e <_tx_byte_allocate+0x176>
 800fd1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd20:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	f383 8810 	msr	PRIMASK, r3
}
 800fd28:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800fd2a:	2310      	movs	r3, #16
 800fd2c:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800fd2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3758      	adds	r7, #88	@ 0x58
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	2000ae14 	.word	0x2000ae14
 800fd3c:	2000aeac 	.word	0x2000aeac
 800fd40:	0800fd45 	.word	0x0800fd45

0800fd44 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b08e      	sub	sp, #56	@ 0x38
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fd4e:	f3ef 8310 	mrs	r3, PRIMASK
 800fd52:	623b      	str	r3, [r7, #32]
    return(posture);
 800fd54:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fd56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fd58:	b672      	cpsid	i
    return(int_posture);
 800fd5a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800fd5c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fd62:	4a33      	ldr	r2, [pc, #204]	@ (800fe30 <_tx_byte_pool_cleanup+0xec>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d158      	bne.n	800fe1a <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800fd6e:	683a      	ldr	r2, [r7, #0]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d152      	bne.n	800fe1a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd78:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d04c      	beq.n	800fe1a <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800fd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	4a2b      	ldr	r2, [pc, #172]	@ (800fe34 <_tx_byte_pool_cleanup+0xf0>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d147      	bne.n	800fe1a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d043      	beq.n	800fe1a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2200      	movs	r2, #0
 800fd96:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800fd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd9c:	1e5a      	subs	r2, r3, #1
 800fd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda0:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800fda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fda6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800fda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d103      	bne.n	800fdb6 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800fdae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	625a      	str	r2, [r3, #36]	@ 0x24
 800fdb4:	e013      	b.n	800fdde <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fdba:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdc0:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800fdc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdc6:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdcc:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800fdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d102      	bne.n	800fdde <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800fdd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fddc:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fde2:	2b09      	cmp	r3, #9
 800fde4:	d119      	bne.n	800fe1a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2210      	movs	r2, #16
 800fdea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fdee:	4b12      	ldr	r3, [pc, #72]	@ (800fe38 <_tx_byte_pool_cleanup+0xf4>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	4a10      	ldr	r2, [pc, #64]	@ (800fe38 <_tx_byte_pool_cleanup+0xf4>)
 800fdf6:	6013      	str	r3, [r2, #0]
 800fdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdfa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	f383 8810 	msr	PRIMASK, r3
}
 800fe02:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f002 fabf 	bl	8012388 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe0a:	f3ef 8310 	mrs	r3, PRIMASK
 800fe0e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fe10:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fe12:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe14:	b672      	cpsid	i
    return(int_posture);
 800fe16:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fe18:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe1c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f383 8810 	msr	PRIMASK, r3
}
 800fe24:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800fe26:	bf00      	nop
 800fe28:	3738      	adds	r7, #56	@ 0x38
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	0800fd45 	.word	0x0800fd45
 800fe34:	42595445 	.word	0x42595445
 800fe38:	2000aeac 	.word	0x2000aeac

0800fe3c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b08e      	sub	sp, #56	@ 0x38
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	60f8      	str	r0, [r7, #12]
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]
 800fe48:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800fe4a:	2234      	movs	r2, #52	@ 0x34
 800fe4c:	2100      	movs	r1, #0
 800fe4e:	68f8      	ldr	r0, [r7, #12]
 800fe50:	f004 fa92 	bl	8014378 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	f023 0303 	bic.w	r3, r3, #3
 800fe5a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	f1a3 0208 	sub.w	r2, r3, #8
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2202      	movs	r2, #2
 800fe88:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800fe8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	4413      	add	r3, r2
 800fe94:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800fe96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe98:	3b04      	subs	r3, #4
 800fe9a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800fea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fea8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800feaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feac:	3b04      	subs	r3, #4
 800feae:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800feb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800feb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800feb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800febe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800fec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fec6:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800fecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fece:	3304      	adds	r3, #4
 800fed0:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800fed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800fed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed8:	4a1f      	ldr	r2, [pc, #124]	@ (800ff58 <_tx_byte_pool_create+0x11c>)
 800feda:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2200      	movs	r2, #0
 800fee0:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fee2:	f3ef 8310 	mrs	r3, PRIMASK
 800fee6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fee8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800feea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800feec:	b672      	cpsid	i
    return(int_posture);
 800feee:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800fef0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	4a19      	ldr	r2, [pc, #100]	@ (800ff5c <_tx_byte_pool_create+0x120>)
 800fef6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800fef8:	4b19      	ldr	r3, [pc, #100]	@ (800ff60 <_tx_byte_pool_create+0x124>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d109      	bne.n	800ff14 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800ff00:	4a18      	ldr	r2, [pc, #96]	@ (800ff64 <_tx_byte_pool_create+0x128>)
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	631a      	str	r2, [r3, #48]	@ 0x30
 800ff12:	e011      	b.n	800ff38 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800ff14:	4b13      	ldr	r3, [pc, #76]	@ (800ff64 <_tx_byte_pool_create+0x128>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ff1a:	6a3b      	ldr	r3, [r7, #32]
 800ff1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff1e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ff20:	6a3b      	ldr	r3, [r7, #32]
 800ff22:	68fa      	ldr	r2, [r7, #12]
 800ff24:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	69fa      	ldr	r2, [r7, #28]
 800ff30:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6a3a      	ldr	r2, [r7, #32]
 800ff36:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ff38:	4b09      	ldr	r3, [pc, #36]	@ (800ff60 <_tx_byte_pool_create+0x124>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	4a08      	ldr	r2, [pc, #32]	@ (800ff60 <_tx_byte_pool_create+0x124>)
 800ff40:	6013      	str	r3, [r2, #0]
 800ff42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff44:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	f383 8810 	msr	PRIMASK, r3
}
 800ff4c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ff4e:	2300      	movs	r3, #0
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	3738      	adds	r7, #56	@ 0x38
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	ffffeeee 	.word	0xffffeeee
 800ff5c:	42595445 	.word	0x42595445
 800ff60:	2000ae08 	.word	0x2000ae08
 800ff64:	2000ae04 	.word	0x2000ae04

0800ff68 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b097      	sub	sp, #92	@ 0x5c
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800ff72:	2300      	movs	r3, #0
 800ff74:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff76:	f3ef 8310 	mrs	r3, PRIMASK
 800ff7a:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 800ff7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 800ff7e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ff80:	b672      	cpsid	i
    return(int_posture);
 800ff82:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800ff84:	657b      	str	r3, [r7, #84]	@ 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	689a      	ldr	r2, [r3, #8]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	3b02      	subs	r3, #2
 800ff90:	00db      	lsls	r3, r3, #3
 800ff92:	4413      	add	r3, r2
 800ff94:	643b      	str	r3, [r7, #64]	@ 0x40
    if (memory_size >= total_theoretical_available)
 800ff96:	683a      	ldr	r2, [r7, #0]
 800ff98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d308      	bcc.n	800ffb0 <_tx_byte_pool_search+0x48>
 800ff9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffa0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	f383 8810 	msr	PRIMASK, r3
}
 800ffa8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	653b      	str	r3, [r7, #80]	@ 0x50
 800ffae:	e0dd      	b.n	801016c <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800ffb0:	4b72      	ldr	r3, [pc, #456]	@ (801017c <_tx_byte_pool_search+0x214>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ffba:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	695b      	ldr	r3, [r3, #20]
 800ffc0:	653b      	str	r3, [r7, #80]	@ 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	68db      	ldr	r3, [r3, #12]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	64bb      	str	r3, [r7, #72]	@ 0x48
        available_bytes =  ((ULONG) 0);
 800ffca:	2300      	movs	r3, #0
 800ffcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ffce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffd0:	3304      	adds	r3, #4
 800ffd2:	63bb      	str	r3, [r7, #56]	@ 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd6:	637b      	str	r3, [r7, #52]	@ 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ffd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a68      	ldr	r2, [pc, #416]	@ (8010180 <_tx_byte_pool_search+0x218>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d143      	bne.n	801006a <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800ffe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d104      	bne.n	800fff2 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ffec:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800ffee:	2301      	movs	r3, #1
 800fff0:	647b      	str	r3, [r7, #68]	@ 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800fff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fff4:	633b      	str	r3, [r7, #48]	@ 0x30
                next_ptr =             *this_block_link_ptr;
 800fff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800fffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	64fb      	str	r3, [r7, #76]	@ 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8010004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010006:	3b08      	subs	r3, #8
 8010008:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 801000a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	429a      	cmp	r2, r3
 8010010:	d257      	bcs.n	80100c2 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8010012:	2300      	movs	r3, #0
 8010014:	64fb      	str	r3, [r7, #76]	@ 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8010016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010018:	3304      	adds	r3, #4
 801001a:	63bb      	str	r3, [r7, #56]	@ 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801001c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801001e:	637b      	str	r3, [r7, #52]	@ 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8010020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a56      	ldr	r2, [pc, #344]	@ (8010180 <_tx_byte_pool_search+0x218>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d113      	bne.n	8010052 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801002a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801002c:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 801002e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010030:	681a      	ldr	r2, [r3, #0]
 8010032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010034:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	1e5a      	subs	r2, r3, #1
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010046:	429a      	cmp	r2, r3
 8010048:	d114      	bne.n	8010074 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801004e:	615a      	str	r2, [r3, #20]
 8010050:	e010      	b.n	8010074 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8010052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010054:	62bb      	str	r3, [r7, #40]	@ 0x28
                        current_ptr =  *next_block_link_ptr;
 8010056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801005c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801005e:	2b00      	cmp	r3, #0
 8010060:	d008      	beq.n	8010074 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8010062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010064:	3b01      	subs	r3, #1
 8010066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010068:	e004      	b.n	8010074 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801006a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801006c:	633b      	str	r3, [r7, #48]	@ 0x30
                current_ptr =  *this_block_link_ptr;
 801006e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8010074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010076:	2b00      	cmp	r3, #0
 8010078:	d002      	beq.n	8010080 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 801007a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801007c:	3b01      	subs	r3, #1
 801007e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010080:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010082:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	f383 8810 	msr	PRIMASK, r3
}
 801008a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801008c:	f3ef 8310 	mrs	r3, PRIMASK
 8010090:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010092:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010094:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010096:	b672      	cpsid	i
    return(int_posture);
 8010098:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 801009a:	657b      	str	r3, [r7, #84]	@ 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6a1b      	ldr	r3, [r3, #32]
 80100a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d009      	beq.n	80100ba <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	695b      	ldr	r3, [r3, #20]
 80100aa:	653b      	str	r3, [r7, #80]	@ 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	3301      	adds	r3, #1
 80100b2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80100b8:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80100ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d186      	bne.n	800ffce <_tx_byte_pool_search+0x66>
 80100c0:	e000      	b.n	80100c4 <_tx_byte_pool_search+0x15c>
                    break;
 80100c2:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80100c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d048      	beq.n	801015c <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 80100ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	2b13      	cmp	r3, #19
 80100d2:	d91e      	bls.n	8010112 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	3308      	adds	r3, #8
 80100d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80100da:	4413      	add	r3, r2
 80100dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80100de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e0:	62bb      	str	r3, [r7, #40]	@ 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80100e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80100e4:	633b      	str	r3, [r7, #48]	@ 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80100e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e8:	681a      	ldr	r2, [r3, #0]
 80100ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ec:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80100ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f0:	3304      	adds	r3, #4
 80100f2:	63bb      	str	r3, [r7, #56]	@ 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80100f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f6:	637b      	str	r3, [r7, #52]	@ 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80100f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100fa:	4a21      	ldr	r2, [pc, #132]	@ (8010180 <_tx_byte_pool_search+0x218>)
 80100fc:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	1c5a      	adds	r2, r3, #1
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8010108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801010a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801010c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	64fb      	str	r3, [r7, #76]	@ 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8010112:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010114:	3304      	adds	r3, #4
 8010116:	63bb      	str	r3, [r7, #56]	@ 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8010118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801011a:	633b      	str	r3, [r7, #48]	@ 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 801011c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801011e:	687a      	ldr	r2, [r7, #4]
 8010120:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	689a      	ldr	r2, [r3, #8]
 8010126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	f1a3 0208 	sub.w	r2, r3, #8
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	695b      	ldr	r3, [r3, #20]
 8010136:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010138:	429a      	cmp	r2, r3
 801013a:	d105      	bne.n	8010148 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801013c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801013e:	633b      	str	r3, [r7, #48]	@ 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8010140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	615a      	str	r2, [r3, #20]
 8010148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801014a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f383 8810 	msr	PRIMASK, r3
}
 8010152:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8010154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010156:	3308      	adds	r3, #8
 8010158:	653b      	str	r3, [r7, #80]	@ 0x50
 801015a:	e007      	b.n	801016c <_tx_byte_pool_search+0x204>
 801015c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801015e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	f383 8810 	msr	PRIMASK, r3
}
 8010166:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8010168:	2300      	movs	r3, #0
 801016a:	653b      	str	r3, [r7, #80]	@ 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 801016c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 801016e:	4618      	mov	r0, r3
 8010170:	375c      	adds	r7, #92	@ 0x5c
 8010172:	46bd      	mov	sp, r7
 8010174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010178:	4770      	bx	lr
 801017a:	bf00      	nop
 801017c:	2000ae14 	.word	0x2000ae14
 8010180:	ffffeeee 	.word	0xffffeeee

08010184 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b08e      	sub	sp, #56	@ 0x38
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801018e:	f3ef 8310 	mrs	r3, PRIMASK
 8010192:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010194:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010196:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010198:	b672      	cpsid	i
    return(int_posture);
 801019a:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 801019c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80101a2:	4a38      	ldr	r2, [pc, #224]	@ (8010284 <_tx_event_flags_cleanup+0x100>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d162      	bne.n	801026e <_tx_event_flags_cleanup+0xea>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80101ae:	683a      	ldr	r2, [r7, #0]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d15c      	bne.n	801026e <_tx_event_flags_cleanup+0xea>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101b8:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 80101ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d056      	beq.n	801026e <_tx_event_flags_cleanup+0xea>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 80101c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a30      	ldr	r2, [pc, #192]	@ (8010288 <_tx_event_flags_cleanup+0x104>)
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d151      	bne.n	801026e <_tx_event_flags_cleanup+0xea>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80101ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101cc:	695b      	ldr	r3, [r3, #20]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d04d      	beq.n	801026e <_tx_event_flags_cleanup+0xea>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2200      	movs	r2, #0
 80101d6:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80101d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101da:	695b      	ldr	r3, [r3, #20]
 80101dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 80101de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	62bb      	str	r3, [r7, #40]	@ 0x28

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 80101e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d020      	beq.n	801022c <_tx_event_flags_cleanup+0xa8>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 80101ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ec:	3b01      	subs	r3, #1
 80101ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 80101f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101f4:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 80101f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d103      	bne.n	8010204 <_tx_event_flags_cleanup+0x80>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 80101fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101fe:	2200      	movs	r2, #0
 8010200:	611a      	str	r2, [r3, #16]
 8010202:	e016      	b.n	8010232 <_tx_event_flags_cleanup+0xae>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010208:	627b      	str	r3, [r7, #36]	@ 0x24
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801020e:	623b      	str	r3, [r7, #32]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010212:	6a3a      	ldr	r2, [r7, #32]
 8010214:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8010216:	6a3b      	ldr	r3, [r7, #32]
 8010218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801021a:	671a      	str	r2, [r3, #112]	@ 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 801021c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	429a      	cmp	r2, r3
 8010222:	d106      	bne.n	8010232 <_tx_event_flags_cleanup+0xae>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 8010224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010228:	611a      	str	r2, [r3, #16]
 801022a:	e002      	b.n	8010232 <_tx_event_flags_cleanup+0xae>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801022c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801022e:	2201      	movs	r2, #1
 8010230:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010236:	2b07      	cmp	r3, #7
 8010238:	d119      	bne.n	801026e <_tx_event_flags_cleanup+0xea>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2207      	movs	r2, #7
 801023e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010242:	4b12      	ldr	r3, [pc, #72]	@ (801028c <_tx_event_flags_cleanup+0x108>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	3301      	adds	r3, #1
 8010248:	4a10      	ldr	r2, [pc, #64]	@ (801028c <_tx_event_flags_cleanup+0x108>)
 801024a:	6013      	str	r3, [r2, #0]
 801024c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801024e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f383 8810 	msr	PRIMASK, r3
}
 8010256:	bf00      	nop
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f002 f895 	bl	8012388 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801025e:	f3ef 8310 	mrs	r3, PRIMASK
 8010262:	617b      	str	r3, [r7, #20]
    return(posture);
 8010264:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010266:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010268:	b672      	cpsid	i
    return(int_posture);
 801026a:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801026c:	637b      	str	r3, [r7, #52]	@ 0x34
 801026e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010270:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	f383 8810 	msr	PRIMASK, r3
}
 8010278:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801027a:	bf00      	nop
 801027c:	3738      	adds	r7, #56	@ 0x38
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	08010185 	.word	0x08010185
 8010288:	4456444e 	.word	0x4456444e
 801028c:	2000aeac 	.word	0x2000aeac

08010290 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b088      	sub	sp, #32
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 801029a:	2228      	movs	r2, #40	@ 0x28
 801029c:	2100      	movs	r1, #0
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f004 f86a 	bl	8014378 <memset>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	605a      	str	r2, [r3, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80102aa:	f3ef 8310 	mrs	r3, PRIMASK
 80102ae:	613b      	str	r3, [r7, #16]
    return(posture);
 80102b0:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80102b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80102b4:	b672      	cpsid	i
    return(int_posture);
 80102b6:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 80102b8:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4a18      	ldr	r2, [pc, #96]	@ (8010320 <_tx_event_flags_create+0x90>)
 80102be:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 80102c0:	4b18      	ldr	r3, [pc, #96]	@ (8010324 <_tx_event_flags_create+0x94>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d109      	bne.n	80102dc <_tx_event_flags_create+0x4c>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 80102c8:	4a17      	ldr	r2, [pc, #92]	@ (8010328 <_tx_event_flags_create+0x98>)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6013      	str	r3, [r2, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	61da      	str	r2, [r3, #28]
 80102da:	e011      	b.n	8010300 <_tx_event_flags_create+0x70>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 80102dc:	4b12      	ldr	r3, [pc, #72]	@ (8010328 <_tx_event_flags_create+0x98>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	69db      	ldr	r3, [r3, #28]
 80102e6:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	697a      	ldr	r2, [r7, #20]
 80102f8:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	69ba      	ldr	r2, [r7, #24]
 80102fe:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 8010300:	4b08      	ldr	r3, [pc, #32]	@ (8010324 <_tx_event_flags_create+0x94>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	3301      	adds	r3, #1
 8010306:	4a07      	ldr	r2, [pc, #28]	@ (8010324 <_tx_event_flags_create+0x94>)
 8010308:	6013      	str	r3, [r2, #0]
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	f383 8810 	msr	PRIMASK, r3
}
 8010314:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	3720      	adds	r7, #32
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	4456444e 	.word	0x4456444e
 8010324:	2000adf0 	.word	0x2000adf0
 8010328:	2000adec 	.word	0x2000adec

0801032c <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b096      	sub	sp, #88	@ 0x58
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	607a      	str	r2, [r7, #4]
 8010338:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801033a:	f3ef 8310 	mrs	r3, PRIMASK
 801033e:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8010340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8010342:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010344:	b672      	cpsid	i
    return(int_posture);
 8010346:	6a3b      	ldr	r3, [r7, #32]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 8010348:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f003 0302 	and.w	r3, r3, #2
 8010356:	643b      	str	r3, [r7, #64]	@ 0x40
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	6a1b      	ldr	r3, [r3, #32]
 801035c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 801035e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010360:	2b00      	cmp	r3, #0
 8010362:	d004      	beq.n	801036e <_tx_event_flags_get+0x42>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 8010364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010366:	43db      	mvns	r3, r3
 8010368:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801036a:	4013      	ands	r3, r2
 801036c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 801036e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010370:	2b02      	cmp	r3, #2
 8010372:	d10a      	bne.n	801038a <_tx_event_flags_get+0x5e>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 8010374:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	4013      	ands	r3, r2
 801037a:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 801037c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	429a      	cmp	r2, r3
 8010382:	d006      	beq.n	8010392 <_tx_event_flags_get+0x66>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 8010384:	2300      	movs	r3, #0
 8010386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010388:	e003      	b.n	8010392 <_tx_event_flags_get+0x66>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 801038a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	4013      	ands	r3, r2
 8010390:	64bb      	str	r3, [r7, #72]	@ 0x48
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 8010392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010394:	2b00      	cmp	r3, #0
 8010396:	d029      	beq.n	80103ec <_tx_event_flags_get+0xc0>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801039c:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f003 0301 	and.w	r3, r3, #1
 80103a4:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 80103a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d11c      	bne.n	80103e6 <_tx_event_flags_get+0xba>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 80103ac:	2300      	movs	r3, #0
 80103ae:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	695b      	ldr	r3, [r3, #20]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d005      	beq.n	80103c4 <_tx_event_flags_get+0x98>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	691b      	ldr	r3, [r3, #16]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d101      	bne.n	80103c4 <_tx_event_flags_get+0x98>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 80103c0:	2301      	movs	r3, #1
 80103c2:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 80103c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d106      	bne.n	80103d8 <_tx_event_flags_get+0xac>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	6a1a      	ldr	r2, [r3, #32]
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	621a      	str	r2, [r3, #32]
 80103d6:	e006      	b.n	80103e6 <_tx_event_flags_get+0xba>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	689a      	ldr	r2, [r3, #8]
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	43db      	mvns	r3, r3
 80103e0:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80103e6:	2300      	movs	r3, #0
 80103e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80103ea:	e070      	b.n	80104ce <_tx_event_flags_get+0x1a2>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80103ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d06b      	beq.n	80104ca <_tx_event_flags_get+0x19e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80103f2:	4b3c      	ldr	r3, [pc, #240]	@ (80104e4 <_tx_event_flags_get+0x1b8>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d002      	beq.n	8010400 <_tx_event_flags_get+0xd4>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 80103fa:	2307      	movs	r3, #7
 80103fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80103fe:	e066      	b.n	80104ce <_tx_event_flags_get+0x1a2>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 8010400:	4b39      	ldr	r3, [pc, #228]	@ (80104e8 <_tx_event_flags_get+0x1bc>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 8010406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010408:	4a38      	ldr	r2, [pc, #224]	@ (80104ec <_tx_event_flags_get+0x1c0>)
 801040a:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 801040c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801040e:	68ba      	ldr	r2, [r7, #8]
 8010410:	679a      	str	r2, [r3, #120]	@ 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 8010412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 801041a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801041c:	683a      	ldr	r2, [r7, #0]
 801041e:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 8010420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801042c:	1c5a      	adds	r2, r3, #1
 801042e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010430:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	695b      	ldr	r3, [r3, #20]
 8010438:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 801043a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043c:	2b00      	cmp	r3, #0
 801043e:	d109      	bne.n	8010454 <_tx_event_flags_get+0x128>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010444:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 8010446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010448:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801044a:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 801044c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801044e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010450:	675a      	str	r2, [r3, #116]	@ 0x74
 8010452:	e011      	b.n	8010478 <_tx_event_flags_get+0x14c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	691b      	ldr	r3, [r3, #16]
 8010458:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 801045a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801045e:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010464:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801046a:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801046c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010470:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010474:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010476:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	695b      	ldr	r3, [r3, #20]
 801047c:	1c5a      	adds	r2, r3, #1
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 8010482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010484:	2207      	movs	r2, #7
 8010486:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801048a:	2201      	movs	r2, #1
 801048c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801048e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010490:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010492:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010494:	4b13      	ldr	r3, [pc, #76]	@ (80104e4 <_tx_event_flags_get+0x1b8>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	3301      	adds	r3, #1
 801049a:	4a12      	ldr	r2, [pc, #72]	@ (80104e4 <_tx_event_flags_get+0x1b8>)
 801049c:	6013      	str	r3, [r2, #0]
 801049e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	f383 8810 	msr	PRIMASK, r3
}
 80104a8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80104aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80104ac:	f002 f86c 	bl	8012588 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80104b0:	f3ef 8310 	mrs	r3, PRIMASK
 80104b4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80104b6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80104b8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80104ba:	b672      	cpsid	i
    return(int_posture);
 80104bc:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 80104be:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80104c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80104c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80104c8:	e001      	b.n	80104ce <_tx_event_flags_get+0x1a2>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 80104ca:	2307      	movs	r3, #7
 80104cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80104ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	f383 8810 	msr	PRIMASK, r3
}
 80104d8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 80104da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3758      	adds	r7, #88	@ 0x58
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	2000aeac 	.word	0x2000aeac
 80104e8:	2000ae14 	.word	0x2000ae14
 80104ec:	08010185 	.word	0x08010185

080104f0 <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b0a8      	sub	sp, #160	@ 0xa0
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80104fc:	f3ef 8310 	mrs	r3, PRIMASK
 8010500:	653b      	str	r3, [r7, #80]	@ 0x50
    return(posture);
 8010502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    int_posture = __get_interrupt_posture();
 8010504:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("CPSID i" : : : "memory");
 8010506:	b672      	cpsid	i
    return(int_posture);
 8010508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801050a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f003 0302 	and.w	r3, r3, #2
 8010514:	2b00      	cmp	r3, #0
 8010516:	d023      	beq.n	8010560 <_tx_event_flags_set+0x70>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 8010518:	2300      	movs	r3, #0
 801051a:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	695b      	ldr	r3, [r3, #20]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d005      	beq.n	8010530 <_tx_event_flags_set+0x40>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	691b      	ldr	r3, [r3, #16]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d101      	bne.n	8010530 <_tx_event_flags_set+0x40>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 801052c:	2301      	movs	r3, #1
 801052e:	67bb      	str	r3, [r7, #120]	@ 0x78
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 8010530:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010532:	2b01      	cmp	r3, #1
 8010534:	d107      	bne.n	8010546 <_tx_event_flags_set+0x56>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	6a1a      	ldr	r2, [r3, #32]
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	43db      	mvns	r3, r3
 801053e:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	621a      	str	r2, [r3, #32]
 8010544:	e005      	b.n	8010552 <_tx_event_flags_set+0x62>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	689a      	ldr	r2, [r3, #8]
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	609a      	str	r2, [r3, #8]
 8010552:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010556:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801055a:	f383 8810 	msr	PRIMASK, r3
}
 801055e:	e1f2      	b.n	8010946 <_tx_event_flags_set+0x456>
    {

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the notify callback routine for this event flag group.  */
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010564:	677b      	str	r3, [r7, #116]	@ 0x74
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	689a      	ldr	r2, [r3, #8]
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6a1b      	ldr	r3, [r3, #32]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d006      	beq.n	8010588 <_tx_event_flags_set+0x98>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	6a1a      	ldr	r2, [r3, #32]
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	43db      	mvns	r3, r3
 8010582:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 8010588:	2300      	movs	r3, #0
 801058a:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	695b      	ldr	r3, [r3, #20]
 8010590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	691b      	ldr	r3, [r3, #16]
 8010598:	2b00      	cmp	r3, #0
 801059a:	f000 81bb 	beq.w	8010914 <_tx_event_flags_set+0x424>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 801059e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d172      	bne.n	801068c <_tx_event_flags_set+0x19c>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	691b      	ldr	r3, [r3, #16]
 80105aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	689b      	ldr	r3, [r3, #8]
 80105b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 80105b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80105ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 80105be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80105c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80105c6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 80105c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80105ca:	f003 0302 	and.w	r3, r3, #2
 80105ce:	667b      	str	r3, [r7, #100]	@ 0x64

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 80105d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	d10e      	bne.n	80105f4 <_tx_event_flags_set+0x104>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80105d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80105da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105dc:	4013      	ands	r3, r2
 80105de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 80105e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80105e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d009      	beq.n	8010600 <_tx_event_flags_set+0x110>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 80105ec:	2300      	movs	r3, #0
 80105ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80105f2:	e005      	b.n	8010600 <_tx_event_flags_set+0x110>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 80105f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80105f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105fa:	4013      	ands	r3, r2
 80105fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 8010600:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010604:	2b00      	cmp	r3, #0
 8010606:	f000 818c 	beq.w	8010922 <_tx_event_flags_set+0x432>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 801060a:	2301      	movs	r3, #1
 801060c:	67fb      	str	r3, [r7, #124]	@ 0x7c

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801060e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010614:	663b      	str	r3, [r7, #96]	@ 0x60
                    *suspend_info_ptr =  current_event_flags;
 8010616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010618:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801061c:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 801061e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010620:	f003 0301 	and.w	r3, r3, #1
 8010624:	65fb      	str	r3, [r7, #92]	@ 0x5c

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 8010626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010628:	2b01      	cmp	r3, #1
 801062a:	d106      	bne.n	801063a <_tx_event_flags_set+0x14a>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	689a      	ldr	r2, [r3, #8]
 8010630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010632:	43db      	mvns	r3, r3
 8010634:	401a      	ands	r2, r3
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2200      	movs	r2, #0
 801063e:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	2200      	movs	r2, #0
 8010644:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010646:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801064a:	2200      	movs	r2, #0
 801064c:	669a      	str	r2, [r3, #104]	@ 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801064e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010652:	2200      	movs	r2, #0
 8010654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 8010658:	4bad      	ldr	r3, [pc, #692]	@ (8010910 <_tx_event_flags_set+0x420>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	3301      	adds	r3, #1
 801065e:	4aac      	ldr	r2, [pc, #688]	@ (8010910 <_tx_event_flags_set+0x420>)
 8010660:	6013      	str	r3, [r2, #0]
 8010662:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010666:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801066a:	f383 8810 	msr	PRIMASK, r3
}
 801066e:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8010670:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8010674:	f001 fe88 	bl	8012388 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010678:	f3ef 8310 	mrs	r3, PRIMASK
 801067c:	647b      	str	r3, [r7, #68]	@ 0x44
    return(posture);
 801067e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    int_posture = __get_interrupt_posture();
 8010680:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile ("CPSID i" : : : "memory");
 8010682:	b672      	cpsid	i
    return(int_posture);
 8010684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 8010686:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801068a:	e14a      	b.n	8010922 <_tx_event_flags_set+0x432>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	691b      	ldr	r3, [r3, #16]
 8010690:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                thread_ptr =      suspended_list;
 8010694:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010698:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2200      	movs	r2, #0
 80106a0:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                last_satisfied =  TX_NULL;
 80106a8:	2300      	movs	r3, #0
 80106aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	689b      	ldr	r3, [r3, #8]
 80106b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 80106b6:	4b96      	ldr	r3, [pc, #600]	@ (8010910 <_tx_event_flags_set+0x420>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	3301      	adds	r3, #1
 80106bc:	4a94      	ldr	r2, [pc, #592]	@ (8010910 <_tx_event_flags_set+0x420>)
 80106be:	6013      	str	r3, [r2, #0]
 80106c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80106c4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80106c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c8:	f383 8810 	msr	PRIMASK, r3
}
 80106cc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106ce:	f3ef 8310 	mrs	r3, PRIMASK
 80106d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 80106d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 80106d6:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80106d8:	b672      	cpsid	i
    return(int_posture);
 80106da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 80106dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	68db      	ldr	r3, [r3, #12]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d011      	beq.n	801070c <_tx_event_flags_set+0x21c>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2200      	movs	r2, #0
 80106ec:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 80106ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80106f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	695b      	ldr	r3, [r3, #20]
 80106fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	689b      	ldr	r3, [r3, #8]
 8010702:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010706:	4313      	orrs	r3, r2
 8010708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 801070c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010712:	673b      	str	r3, [r7, #112]	@ 0x70

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 8010714:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010718:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801071a:	66fb      	str	r3, [r7, #108]	@ 0x6c

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 801071c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010724:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 8010726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010728:	f003 0302 	and.w	r3, r3, #2
 801072c:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 801072e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010730:	2b02      	cmp	r3, #2
 8010732:	d10e      	bne.n	8010752 <_tx_event_flags_set+0x262>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8010734:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010738:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801073a:	4013      	ands	r3, r2
 801073c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 8010740:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010746:	429a      	cmp	r2, r3
 8010748:	d009      	beq.n	801075e <_tx_event_flags_set+0x26e>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 801074a:	2300      	movs	r3, #0
 801074c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010750:	e005      	b.n	801075e <_tx_event_flags_set+0x26e>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 8010752:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010756:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010758:	4013      	ands	r3, r2
 801075a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 801075e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010764:	2b07      	cmp	r3, #7
 8010766:	d002      	beq.n	801076e <_tx_event_flags_set+0x27e>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 8010768:	2301      	movs	r3, #1
 801076a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 801076e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010772:	2b00      	cmp	r3, #0
 8010774:	d06c      	beq.n	8010850 <_tx_event_flags_set+0x360>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 8010776:	2301      	movs	r3, #1
 8010778:	67fb      	str	r3, [r7, #124]	@ 0x7c

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 801077a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801077e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010780:	2b07      	cmp	r3, #7
 8010782:	d11e      	bne.n	80107c2 <_tx_event_flags_set+0x2d2>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801078a:	663b      	str	r3, [r7, #96]	@ 0x60
                            *suspend_info_ptr =  current_event_flags;
 801078c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801078e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010792:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 8010794:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010796:	f003 0301 	and.w	r3, r3, #1
 801079a:	65fb      	str	r3, [r7, #92]	@ 0x5c

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 801079c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801079e:	2b01      	cmp	r3, #1
 80107a0:	d106      	bne.n	80107b0 <_tx_event_flags_set+0x2c0>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	689a      	ldr	r2, [r3, #8]
 80107a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107a8:	43db      	mvns	r3, r3
 80107aa:	401a      	ands	r2, r3
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80107b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80107b4:	2200      	movs	r2, #0
 80107b6:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80107b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80107bc:	2200      	movs	r2, #0
 80107be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 80107c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80107c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d103      	bne.n	80107d8 <_tx_event_flags_set+0x2e8>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 80107d0:	2300      	movs	r3, #0
 80107d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80107d6:	e018      	b.n	801080a <_tx_event_flags_set+0x31a>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 80107d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80107dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107de:	65bb      	str	r3, [r7, #88]	@ 0x58
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80107e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80107e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107e6:	657b      	str	r3, [r7, #84]	@ 0x54
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80107e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80107ea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80107ec:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 80107ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80107f2:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 80107f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80107f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80107fc:	429a      	cmp	r2, r3
 80107fe:	d104      	bne.n	801080a <_tx_event_flags_set+0x31a>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 8010800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010806:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	695b      	ldr	r3, [r3, #20]
 801080e:	1e5a      	subs	r2, r3, #1
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 8010814:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10c      	bne.n	8010836 <_tx_event_flags_set+0x346>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 801081c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010820:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                            last_satisfied =  thread_ptr;
 8010824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010828:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 801082c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010830:	2200      	movs	r2, #0
 8010832:	671a      	str	r2, [r3, #112]	@ 0x70
 8010834:	e00c      	b.n	8010850 <_tx_event_flags_set+0x360>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 8010836:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801083a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801083e:	671a      	str	r2, [r3, #112]	@ 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 8010840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010844:	2200      	movs	r2, #0
 8010846:	671a      	str	r2, [r3, #112]	@ 0x70
                            last_satisfied =                              thread_ptr;
 8010848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801084c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 8010850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010852:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                    /* Decrement the suspension count.  */
                    suspended_count--;
 8010856:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801085a:	3b01      	subs	r3, #1
 801085c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

                } while (suspended_count != TX_NO_SUSPENSIONS);
 8010860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010864:	2b00      	cmp	r3, #0
 8010866:	f47f af2b 	bne.w	80106c0 <_tx_event_flags_set+0x1d0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8010870:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	6a1b      	ldr	r3, [r3, #32]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00a      	beq.n	8010890 <_tx_event_flags_set+0x3a0>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	689a      	ldr	r2, [r3, #8]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6a1b      	ldr	r3, [r3, #32]
 8010882:	43db      	mvns	r3, r3
 8010884:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2200      	movs	r2, #0
 801088e:	621a      	str	r2, [r3, #32]
 8010890:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010898:	f383 8810 	msr	PRIMASK, r3
}
 801089c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 801089e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80108a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                while(thread_ptr != TX_NULL)
 80108a6:	e01f      	b.n	80108e8 <_tx_event_flags_set+0x3f8>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80108a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80108ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80108ae:	673b      	str	r3, [r7, #112]	@ 0x70
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108b0:	f3ef 8310 	mrs	r3, PRIMASK
 80108b4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80108b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 80108b8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80108ba:	b672      	cpsid	i
    return(int_posture);
 80108bc:	6a3b      	ldr	r3, [r7, #32]

                    /* Disable interrupts.  */
                    TX_DISABLE
 80108be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 80108c2:	4b13      	ldr	r3, [pc, #76]	@ (8010910 <_tx_event_flags_set+0x420>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	3301      	adds	r3, #1
 80108c8:	4a11      	ldr	r2, [pc, #68]	@ (8010910 <_tx_event_flags_set+0x420>)
 80108ca:	6013      	str	r3, [r2, #0]
 80108cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80108d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d4:	f383 8810 	msr	PRIMASK, r3
}
 80108d8:	bf00      	nop

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 80108da:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80108de:	f001 fd53 	bl	8012388 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 80108e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80108e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                while(thread_ptr != TX_NULL)
 80108e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1db      	bne.n	80108a8 <_tx_event_flags_set+0x3b8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108f0:	f3ef 8310 	mrs	r3, PRIMASK
 80108f4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80108f6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80108f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80108fa:	b672      	cpsid	i
    return(int_posture);
 80108fc:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 80108fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 8010902:	4b03      	ldr	r3, [pc, #12]	@ (8010910 <_tx_event_flags_set+0x420>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	3b01      	subs	r3, #1
 8010908:	4a01      	ldr	r2, [pc, #4]	@ (8010910 <_tx_event_flags_set+0x420>)
 801090a:	6013      	str	r3, [r2, #0]
 801090c:	e009      	b.n	8010922 <_tx_event_flags_set+0x432>
 801090e:	bf00      	nop
 8010910:	2000aeac 	.word	0x2000aeac
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	695b      	ldr	r3, [r3, #20]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <_tx_event_flags_set+0x432>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	2201      	movs	r2, #1
 8010920:	60da      	str	r2, [r3, #12]
 8010922:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010926:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	f383 8810 	msr	PRIMASK, r3
}
 801092e:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if a notify callback is required.  */
        if (events_set_notify != TX_NULL)
 8010930:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010932:	2b00      	cmp	r3, #0
 8010934:	d002      	beq.n	801093c <_tx_event_flags_set+0x44c>
        {

            /* Call application event flags set notification.  */
            (events_set_notify)(group_ptr);
 8010936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	4798      	blx	r3
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 801093c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801093e:	2b01      	cmp	r3, #1
 8010940:	d101      	bne.n	8010946 <_tx_event_flags_set+0x456>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 8010942:	f001 fce7 	bl	8012314 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 8010946:	2300      	movs	r3, #0
}
 8010948:	4618      	mov	r0, r3
 801094a:	37a0      	adds	r7, #160	@ 0xa0
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8010954:	f001 fa06 	bl	8011d64 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8010958:	f002 f960 	bl	8012c1c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 801095c:	4b12      	ldr	r3, [pc, #72]	@ (80109a8 <_tx_initialize_high_level+0x58>)
 801095e:	2200      	movs	r2, #0
 8010960:	601a      	str	r2, [r3, #0]
 8010962:	4b12      	ldr	r3, [pc, #72]	@ (80109ac <_tx_initialize_high_level+0x5c>)
 8010964:	2200      	movs	r2, #0
 8010966:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8010968:	4b11      	ldr	r3, [pc, #68]	@ (80109b0 <_tx_initialize_high_level+0x60>)
 801096a:	2200      	movs	r2, #0
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	4b11      	ldr	r3, [pc, #68]	@ (80109b4 <_tx_initialize_high_level+0x64>)
 8010970:	2200      	movs	r2, #0
 8010972:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8010974:	4b10      	ldr	r3, [pc, #64]	@ (80109b8 <_tx_initialize_high_level+0x68>)
 8010976:	2200      	movs	r2, #0
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	4b10      	ldr	r3, [pc, #64]	@ (80109bc <_tx_initialize_high_level+0x6c>)
 801097c:	2200      	movs	r2, #0
 801097e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8010980:	4b0f      	ldr	r3, [pc, #60]	@ (80109c0 <_tx_initialize_high_level+0x70>)
 8010982:	2200      	movs	r2, #0
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	4b0f      	ldr	r3, [pc, #60]	@ (80109c4 <_tx_initialize_high_level+0x74>)
 8010988:	2200      	movs	r2, #0
 801098a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 801098c:	4b0e      	ldr	r3, [pc, #56]	@ (80109c8 <_tx_initialize_high_level+0x78>)
 801098e:	2200      	movs	r2, #0
 8010990:	601a      	str	r2, [r3, #0]
 8010992:	4b0e      	ldr	r3, [pc, #56]	@ (80109cc <_tx_initialize_high_level+0x7c>)
 8010994:	2200      	movs	r2, #0
 8010996:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8010998:	4b0d      	ldr	r3, [pc, #52]	@ (80109d0 <_tx_initialize_high_level+0x80>)
 801099a:	2200      	movs	r2, #0
 801099c:	601a      	str	r2, [r3, #0]
 801099e:	4b0d      	ldr	r3, [pc, #52]	@ (80109d4 <_tx_initialize_high_level+0x84>)
 80109a0:	2200      	movs	r2, #0
 80109a2:	601a      	str	r2, [r3, #0]
#endif
}
 80109a4:	bf00      	nop
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	2000addc 	.word	0x2000addc
 80109ac:	2000ade0 	.word	0x2000ade0
 80109b0:	2000ade4 	.word	0x2000ade4
 80109b4:	2000ade8 	.word	0x2000ade8
 80109b8:	2000adec 	.word	0x2000adec
 80109bc:	2000adf0 	.word	0x2000adf0
 80109c0:	2000adfc 	.word	0x2000adfc
 80109c4:	2000ae00 	.word	0x2000ae00
 80109c8:	2000ae04 	.word	0x2000ae04
 80109cc:	2000ae08 	.word	0x2000ae08
 80109d0:	2000adf4 	.word	0x2000adf4
 80109d4:	2000adf8 	.word	0x2000adf8

080109d8 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80109dc:	4b10      	ldr	r3, [pc, #64]	@ (8010a20 <_tx_initialize_kernel_enter+0x48>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 80109e4:	d00c      	beq.n	8010a00 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80109e6:	4b0e      	ldr	r3, [pc, #56]	@ (8010a20 <_tx_initialize_kernel_enter+0x48>)
 80109e8:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80109ec:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80109ee:	f7ef fbff 	bl	80001f0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80109f2:	f7ff ffad 	bl	8010950 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80109f6:	4b0b      	ldr	r3, [pc, #44]	@ (8010a24 <_tx_initialize_kernel_enter+0x4c>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	3301      	adds	r3, #1
 80109fc:	4a09      	ldr	r2, [pc, #36]	@ (8010a24 <_tx_initialize_kernel_enter+0x4c>)
 80109fe:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010a00:	4b07      	ldr	r3, [pc, #28]	@ (8010a20 <_tx_initialize_kernel_enter+0x48>)
 8010a02:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8010a06:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8010a08:	4b07      	ldr	r3, [pc, #28]	@ (8010a28 <_tx_initialize_kernel_enter+0x50>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7ef fedf 	bl	80007d0 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8010a12:	4b03      	ldr	r3, [pc, #12]	@ (8010a20 <_tx_initialize_kernel_enter+0x48>)
 8010a14:	2200      	movs	r2, #0
 8010a16:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8010a18:	f7ef fc2a 	bl	8000270 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010a1c:	bf00      	nop
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	20000098 	.word	0x20000098
 8010a24:	2000aeac 	.word	0x2000aeac
 8010a28:	2000ae0c 	.word	0x2000ae0c

08010a2c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b08e      	sub	sp, #56	@ 0x38
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a36:	f3ef 8310 	mrs	r3, PRIMASK
 8010a3a:	623b      	str	r3, [r7, #32]
    return(posture);
 8010a3c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8010a3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010a40:	b672      	cpsid	i
    return(int_posture);
 8010a42:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8010a44:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010a4a:	4a33      	ldr	r2, [pc, #204]	@ (8010b18 <_tx_mutex_cleanup+0xec>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d158      	bne.n	8010b02 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d152      	bne.n	8010b02 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a60:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8010a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d04c      	beq.n	8010b02 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8010a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8010b1c <_tx_mutex_cleanup+0xf0>)
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d147      	bne.n	8010b02 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8010a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a74:	69db      	ldr	r3, [r3, #28]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d043      	beq.n	8010b02 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8010a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a82:	69db      	ldr	r3, [r3, #28]
 8010a84:	1e5a      	subs	r2, r3, #1
 8010a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a88:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a8c:	69db      	ldr	r3, [r3, #28]
 8010a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d103      	bne.n	8010a9e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a98:	2200      	movs	r2, #0
 8010a9a:	619a      	str	r2, [r3, #24]
 8010a9c:	e013      	b.n	8010ac6 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aa8:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010aae:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ab4:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab8:	699b      	ldr	r3, [r3, #24]
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d102      	bne.n	8010ac6 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8010ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ac4:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aca:	2b0d      	cmp	r3, #13
 8010acc:	d119      	bne.n	8010b02 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	221d      	movs	r2, #29
 8010ad2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010ad6:	4b12      	ldr	r3, [pc, #72]	@ (8010b20 <_tx_mutex_cleanup+0xf4>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	3301      	adds	r3, #1
 8010adc:	4a10      	ldr	r2, [pc, #64]	@ (8010b20 <_tx_mutex_cleanup+0xf4>)
 8010ade:	6013      	str	r3, [r2, #0]
 8010ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ae2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	f383 8810 	msr	PRIMASK, r3
}
 8010aea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f001 fc4b 	bl	8012388 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010af2:	f3ef 8310 	mrs	r3, PRIMASK
 8010af6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010af8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010afa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010afc:	b672      	cpsid	i
    return(int_posture);
 8010afe:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	f383 8810 	msr	PRIMASK, r3
}
 8010b0c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010b0e:	bf00      	nop
 8010b10:	3738      	adds	r7, #56	@ 0x38
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	08010a2d 	.word	0x08010a2d
 8010b1c:	4d555445 	.word	0x4d555445
 8010b20:	2000aeac 	.word	0x2000aeac

08010b24 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b08a      	sub	sp, #40	@ 0x28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8010b30:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010b32:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010b34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b36:	b672      	cpsid	i
    return(int_posture);
 8010b38:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8010b3a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ba8 <_tx_mutex_thread_release+0x84>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	3301      	adds	r3, #1
 8010b42:	4a19      	ldr	r2, [pc, #100]	@ (8010ba8 <_tx_mutex_thread_release+0x84>)
 8010b44:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010b4c:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8010b4e:	6a3b      	ldr	r3, [r7, #32]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d017      	beq.n	8010b84 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010b54:	6a3b      	ldr	r3, [r7, #32]
 8010b56:	2201      	movs	r2, #1
 8010b58:	609a      	str	r2, [r3, #8]
 8010b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	f383 8810 	msr	PRIMASK, r3
}
 8010b64:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8010b66:	6a38      	ldr	r0, [r7, #32]
 8010b68:	f000 fb9c 	bl	80112a4 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010b70:	617b      	str	r3, [r7, #20]
    return(posture);
 8010b72:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010b74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b76:	b672      	cpsid	i
    return(int_posture);
 8010b78:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8010b7a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010b82:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8010b84:	6a3b      	ldr	r3, [r7, #32]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d1dd      	bne.n	8010b46 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8010b8a:	4b07      	ldr	r3, [pc, #28]	@ (8010ba8 <_tx_mutex_thread_release+0x84>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	4a05      	ldr	r2, [pc, #20]	@ (8010ba8 <_tx_mutex_thread_release+0x84>)
 8010b92:	6013      	str	r3, [r2, #0]
 8010b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	f383 8810 	msr	PRIMASK, r3
}
 8010b9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010ba0:	bf00      	nop
 8010ba2:	3728      	adds	r7, #40	@ 0x28
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}
 8010ba8:	2000aeac 	.word	0x2000aeac

08010bac <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b08a      	sub	sp, #40	@ 0x28
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8010bb8:	2234      	movs	r2, #52	@ 0x34
 8010bba:	2100      	movs	r1, #0
 8010bbc:	68f8      	ldr	r0, [r7, #12]
 8010bbe:	f003 fbdb 	bl	8014378 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	68ba      	ldr	r2, [r7, #8]
 8010bc6:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010bce:	f3ef 8310 	mrs	r3, PRIMASK
 8010bd2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010bd4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010bd6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010bd8:	b672      	cpsid	i
    return(int_posture);
 8010bda:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8010bdc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	4a1a      	ldr	r2, [pc, #104]	@ (8010c4c <_tx_mutex_create+0xa0>)
 8010be2:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8010be4:	4b1a      	ldr	r3, [pc, #104]	@ (8010c50 <_tx_mutex_create+0xa4>)
 8010be6:	4a1b      	ldr	r2, [pc, #108]	@ (8010c54 <_tx_mutex_create+0xa8>)
 8010be8:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8010bea:	4b1b      	ldr	r3, [pc, #108]	@ (8010c58 <_tx_mutex_create+0xac>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d109      	bne.n	8010c06 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8010bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8010c5c <_tx_mutex_create+0xb0>)
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	68fa      	ldr	r2, [r7, #12]
 8010bfc:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	625a      	str	r2, [r3, #36]	@ 0x24
 8010c04:	e011      	b.n	8010c2a <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8010c06:	4b15      	ldr	r3, [pc, #84]	@ (8010c5c <_tx_mutex_create+0xb0>)
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8010c0c:	6a3b      	ldr	r3, [r7, #32]
 8010c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c10:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8010c12:	6a3b      	ldr	r3, [r7, #32]
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	68fa      	ldr	r2, [r7, #12]
 8010c1c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	69fa      	ldr	r2, [r7, #28]
 8010c22:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	6a3a      	ldr	r2, [r7, #32]
 8010c28:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8010c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8010c58 <_tx_mutex_create+0xac>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	4a09      	ldr	r2, [pc, #36]	@ (8010c58 <_tx_mutex_create+0xac>)
 8010c32:	6013      	str	r3, [r2, #0]
 8010c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c36:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	f383 8810 	msr	PRIMASK, r3
}
 8010c3e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010c40:	2300      	movs	r3, #0
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3728      	adds	r7, #40	@ 0x28
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	4d555445 	.word	0x4d555445
 8010c50:	2000aeb0 	.word	0x2000aeb0
 8010c54:	08010b25 	.word	0x08010b25
 8010c58:	2000adf8 	.word	0x2000adf8
 8010c5c:	2000adf4 	.word	0x2000adf4

08010c60 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b096      	sub	sp, #88	@ 0x58
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c68:	f3ef 8310 	mrs	r3, PRIMASK
 8010c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8010c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8010c70:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c72:	b672      	cpsid	i
    return(int_posture);
 8010c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8010c76:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8010c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8010da8 <_tx_mutex_delete+0x148>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	3b01      	subs	r3, #1
 8010c84:	4a48      	ldr	r2, [pc, #288]	@ (8010da8 <_tx_mutex_delete+0x148>)
 8010c86:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8010c88:	4b47      	ldr	r3, [pc, #284]	@ (8010da8 <_tx_mutex_delete+0x148>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d103      	bne.n	8010c98 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8010c90:	4b46      	ldr	r3, [pc, #280]	@ (8010dac <_tx_mutex_delete+0x14c>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	e013      	b.n	8010cc0 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6a1b      	ldr	r3, [r3, #32]
 8010c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ca2:	647b      	str	r3, [r7, #68]	@ 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8010ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ca8:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8010caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010cae:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8010cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8010dac <_tx_mutex_delete+0x14c>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d102      	bne.n	8010cc0 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8010cba:	4a3c      	ldr	r2, [pc, #240]	@ (8010dac <_tx_mutex_delete+0x14c>)
 8010cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010cbe:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8010cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8010db0 <_tx_mutex_delete+0x150>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8010db0 <_tx_mutex_delete+0x150>)
 8010cc8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	699b      	ldr	r3, [r3, #24]
 8010cce:	653b      	str	r3, [r7, #80]	@ 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	69db      	ldr	r3, [r3, #28]
 8010cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	68db      	ldr	r3, [r3, #12]
 8010ce6:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8010ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d013      	beq.n	8010d16 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	609a      	str	r2, [r3, #8]
 8010cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cfa:	f383 8810 	msr	PRIMASK, r3
}
 8010cfe:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 facf 	bl	80112a4 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d06:	f3ef 8310 	mrs	r3, PRIMASK
 8010d0a:	633b      	str	r3, [r7, #48]	@ 0x30
    return(posture);
 8010d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    int_posture = __get_interrupt_posture();
 8010d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8010d10:	b672      	cpsid	i
    return(int_posture);
 8010d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8010d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8010d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d18:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d1c:	f383 8810 	msr	PRIMASK, r3
}
 8010d20:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8010d22:	e024      	b.n	8010d6e <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8010d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d26:	3b01      	subs	r3, #1
 8010d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8010d2e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8010d30:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8010d32:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010d34:	b672      	cpsid	i
    return(int_posture);
 8010d36:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8010d38:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8010d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d42:	2201      	movs	r2, #1
 8010d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8010d48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8010d4e:	4b18      	ldr	r3, [pc, #96]	@ (8010db0 <_tx_mutex_delete+0x150>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	3301      	adds	r3, #1
 8010d54:	4a16      	ldr	r2, [pc, #88]	@ (8010db0 <_tx_mutex_delete+0x150>)
 8010d56:	6013      	str	r3, [r2, #0]
 8010d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d5a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d5c:	6a3b      	ldr	r3, [r7, #32]
 8010d5e:	f383 8810 	msr	PRIMASK, r3
}
 8010d62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010d64:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8010d66:	f001 fb0f 	bl	8012388 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8010d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d6c:	653b      	str	r3, [r7, #80]	@ 0x50
    while (suspended_count != ((ULONG) 0))
 8010d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d1d7      	bne.n	8010d24 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d74:	f3ef 8310 	mrs	r3, PRIMASK
 8010d78:	613b      	str	r3, [r7, #16]
    return(posture);
 8010d7a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8010d7c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010d7e:	b672      	cpsid	i
    return(int_posture);
 8010d80:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8010d82:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8010d84:	4b0a      	ldr	r3, [pc, #40]	@ (8010db0 <_tx_mutex_delete+0x150>)
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	4a09      	ldr	r2, [pc, #36]	@ (8010db0 <_tx_mutex_delete+0x150>)
 8010d8c:	6013      	str	r3, [r2, #0]
 8010d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	f383 8810 	msr	PRIMASK, r3
}
 8010d98:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8010d9a:	f001 fabb 	bl	8012314 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010d9e:	2300      	movs	r3, #0
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3758      	adds	r7, #88	@ 0x58
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	2000adf8 	.word	0x2000adf8
 8010dac:	2000adf4 	.word	0x2000adf4
 8010db0:	2000aeac 	.word	0x2000aeac

08010db4 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b092      	sub	sp, #72	@ 0x48
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8010dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8010dc6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010dc8:	b672      	cpsid	i
    return(int_posture);
 8010dca:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8010dcc:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010dce:	4b7a      	ldr	r3, [pc, #488]	@ (8010fb8 <_tx_mutex_get+0x204>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d144      	bne.n	8010e66 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2201      	movs	r2, #1
 8010de0:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010de6:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8010de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d032      	beq.n	8010e54 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	691b      	ldr	r3, [r3, #16]
 8010df2:	2b01      	cmp	r3, #1
 8010df4:	d106      	bne.n	8010e04 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8010df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2220      	movs	r2, #32
 8010e02:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8010e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d00f      	beq.n	8010e32 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8010e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e16:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8010e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e1a:	687a      	ldr	r2, [r7, #4]
 8010e1c:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8010e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e28:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010e30:	e009      	b.n	8010e46 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8010e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e34:	687a      	ldr	r2, [r7, #4]
 8010e36:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8010e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010e4c:	1c5a      	adds	r2, r3, #1
 8010e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8010e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	f383 8810 	msr	PRIMASK, r3
}
 8010e5e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8010e60:	2300      	movs	r3, #0
 8010e62:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e64:	e0a2      	b.n	8010fac <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	d10d      	bne.n	8010e8c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	689b      	ldr	r3, [r3, #8]
 8010e74:	1c5a      	adds	r2, r3, #1
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	609a      	str	r2, [r3, #8]
 8010e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	f383 8810 	msr	PRIMASK, r3
}
 8010e84:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8010e86:	2300      	movs	r3, #0
 8010e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e8a:	e08f      	b.n	8010fac <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f000 8084 	beq.w	8010f9c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010e94:	4b49      	ldr	r3, [pc, #292]	@ (8010fbc <_tx_mutex_get+0x208>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d008      	beq.n	8010eae <_tx_mutex_get+0xfa>
 8010e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	f383 8810 	msr	PRIMASK, r3
}
 8010ea6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8010ea8:	231d      	movs	r3, #29
 8010eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8010eac:	e07e      	b.n	8010fac <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8010eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eb6:	4a42      	ldr	r2, [pc, #264]	@ (8010fc0 <_tx_mutex_get+0x20c>)
 8010eb8:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8010eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ec2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010ec6:	1c5a      	adds	r2, r3, #1
 8010ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	69db      	ldr	r3, [r3, #28]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d109      	bne.n	8010eea <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010eda:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ede:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ee0:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ee6:	675a      	str	r2, [r3, #116]	@ 0x74
 8010ee8:	e011      	b.n	8010f0e <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	699b      	ldr	r3, [r3, #24]
 8010eee:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ef2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010ef4:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010efa:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f00:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f06:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f0c:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	69db      	ldr	r3, [r3, #28]
 8010f12:	1c5a      	adds	r2, r3, #1
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8010f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f1a:	220d      	movs	r2, #13
 8010f1c:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f20:	2201      	movs	r2, #1
 8010f22:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f26:	683a      	ldr	r2, [r7, #0]
 8010f28:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010f2a:	4b24      	ldr	r3, [pc, #144]	@ (8010fbc <_tx_mutex_get+0x208>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	3301      	adds	r3, #1
 8010f30:	4a22      	ldr	r2, [pc, #136]	@ (8010fbc <_tx_mutex_get+0x208>)
 8010f32:	6013      	str	r3, [r2, #0]
 8010f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f36:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	f383 8810 	msr	PRIMASK, r3
}
 8010f3e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	691b      	ldr	r3, [r3, #16]
 8010f44:	2b01      	cmp	r3, #1
 8010f46:	d121      	bne.n	8010f8c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d903      	bls.n	8010f5c <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8010f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8010f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d204      	bcs.n	8010f74 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8010f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8010f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d905      	bls.n	8010f8c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8010f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f84:	4619      	mov	r1, r3
 8010f86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010f88:	f000 f8ce 	bl	8011128 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8010f8c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010f8e:	f001 fafb 	bl	8012588 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8010f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f9a:	e007      	b.n	8010fac <_tx_mutex_get+0x1f8>
 8010f9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f9e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	f383 8810 	msr	PRIMASK, r3
}
 8010fa6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8010fa8:	231d      	movs	r3, #29
 8010faa:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 8010fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3748      	adds	r7, #72	@ 0x48
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	2000ae14 	.word	0x2000ae14
 8010fbc:	2000aeac 	.word	0x2000aeac
 8010fc0:	08010a2d 	.word	0x08010a2d

08010fc4 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b092      	sub	sp, #72	@ 0x48
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8010fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8010fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8010fd4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010fd6:	b672      	cpsid	i
    return(int_posture);
 8010fd8:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8010fda:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	69db      	ldr	r3, [r3, #28]
 8010fe0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8010fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d805      	bhi.n	8010ff4 <_tx_mutex_prioritize+0x30>
 8010fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	f383 8810 	msr	PRIMASK, r3
}
 8010ff2:	e092      	b.n	801111a <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8010ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ff6:	2b02      	cmp	r3, #2
 8010ff8:	d114      	bne.n	8011024 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	699b      	ldr	r3, [r3, #24]
 8010ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8011000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011004:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8011006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801100a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801100c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801100e:	429a      	cmp	r2, r3
 8011010:	d202      	bcs.n	8011018 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011016:	619a      	str	r2, [r3, #24]
 8011018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801101a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801101c:	69bb      	ldr	r3, [r7, #24]
 801101e:	f383 8810 	msr	PRIMASK, r3
}
 8011022:	e07a      	b.n	801111a <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	699b      	ldr	r3, [r3, #24]
 8011028:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801102a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801102c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 801102e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011032:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8011034:	4b3b      	ldr	r3, [pc, #236]	@ (8011124 <_tx_mutex_prioritize+0x160>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	3301      	adds	r3, #1
 801103a:	4a3a      	ldr	r2, [pc, #232]	@ (8011124 <_tx_mutex_prioritize+0x160>)
 801103c:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 801103e:	2300      	movs	r3, #0
 8011040:	633b      	str	r3, [r7, #48]	@ 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8011042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801104a:	429a      	cmp	r2, r3
 801104c:	d201      	bcs.n	8011052 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 801104e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011054:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f383 8810 	msr	PRIMASK, r3
}
 801105c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801105e:	f3ef 8310 	mrs	r3, PRIMASK
 8011062:	617b      	str	r3, [r7, #20]
    return(posture);
 8011064:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011066:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011068:	b672      	cpsid	i
    return(int_posture);
 801106a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801106c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	699b      	ldr	r3, [r3, #24]
 8011072:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011074:	429a      	cmp	r2, r3
 8011076:	d002      	beq.n	801107e <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8011078:	2301      	movs	r3, #1
 801107a:	633b      	str	r3, [r7, #48]	@ 0x30
 801107c:	e006      	b.n	801108c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	69db      	ldr	r3, [r3, #28]
 8011082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011084:	429a      	cmp	r2, r3
 8011086:	d001      	beq.n	801108c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8011088:	2301      	movs	r3, #1
 801108a:	633b      	str	r3, [r7, #48]	@ 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 801108c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801108e:	2b00      	cmp	r3, #0
 8011090:	d103      	bne.n	801109a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8011092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011096:	643b      	str	r3, [r7, #64]	@ 0x40
 8011098:	e00c      	b.n	80110b4 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	699b      	ldr	r3, [r3, #24]
 801109e:	63bb      	str	r3, [r7, #56]	@ 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	69db      	ldr	r3, [r3, #28]
 80110a4:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80110a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80110aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110ae:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80110b0:	2300      	movs	r3, #0
 80110b2:	633b      	str	r3, [r7, #48]	@ 0x30
            }

        } while (thread_ptr != head_ptr);
 80110b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80110b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d1c2      	bne.n	8011042 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80110bc:	4b19      	ldr	r3, [pc, #100]	@ (8011124 <_tx_mutex_prioritize+0x160>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	4a18      	ldr	r2, [pc, #96]	@ (8011124 <_tx_mutex_prioritize+0x160>)
 80110c4:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 80110c6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80110c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d01d      	beq.n	801110a <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80110ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80110d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110d8:	62bb      	str	r3, [r7, #40]	@ 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80110da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110de:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80110e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110e4:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80110e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ea:	62bb      	str	r3, [r7, #40]	@ 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80110ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80110f0:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 80110f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110f6:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80110f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80110fc:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80110fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011100:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011102:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011108:	619a      	str	r2, [r3, #24]
 801110a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801110c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	f383 8810 	msr	PRIMASK, r3
}
 8011114:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011116:	f001 f8fd 	bl	8012314 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801111a:	2300      	movs	r3, #0
#endif
}
 801111c:	4618      	mov	r0, r3
 801111e:	3748      	adds	r7, #72	@ 0x48
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	2000aeac 	.word	0x2000aeac

08011128 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b090      	sub	sp, #64	@ 0x40
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011132:	f3ef 8310 	mrs	r3, PRIMASK
 8011136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8011138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 801113a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801113c:	b672      	cpsid	i
    return(int_posture);
 801113e:	6abb      	ldr	r3, [r7, #40]	@ 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011140:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011146:	2b00      	cmp	r3, #0
 8011148:	d017      	beq.n	801117a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	683a      	ldr	r2, [r7, #0]
 801114e:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011156:	683a      	ldr	r2, [r7, #0]
 8011158:	429a      	cmp	r2, r3
 801115a:	d905      	bls.n	8011168 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011166:	e002      	b.n	801116e <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	683a      	ldr	r2, [r7, #0]
 801116c:	63da      	str	r2, [r3, #60]	@ 0x3c
 801116e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011170:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011174:	f383 8810 	msr	PRIMASK, r3
}
 8011178:	e089      	b.n	801128e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 801117a:	4b47      	ldr	r3, [pc, #284]	@ (8011298 <_tx_mutex_priority_change+0x170>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011184:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8011186:	4b45      	ldr	r3, [pc, #276]	@ (801129c <_tx_mutex_priority_change+0x174>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	3302      	adds	r3, #2
 801118c:	4a43      	ldr	r2, [pc, #268]	@ (801129c <_tx_mutex_priority_change+0x174>)
 801118e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	220e      	movs	r2, #14
 8011194:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2201      	movs	r2, #1
 801119a:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2200      	movs	r2, #0
 80111a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80111a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	f383 8810 	msr	PRIMASK, r3
}
 80111ac:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f001 f9ea 	bl	8012588 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80111b4:	f3ef 8310 	mrs	r3, PRIMASK
 80111b8:	623b      	str	r3, [r7, #32]
    return(posture);
 80111ba:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80111bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80111be:	b672      	cpsid	i
    return(int_posture);
 80111c0:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 80111c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	683a      	ldr	r2, [r7, #0]
 80111c8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80111d0:	683a      	ldr	r2, [r7, #0]
 80111d2:	429a      	cmp	r2, r3
 80111d4:	d905      	bls.n	80111e2 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80111e0:	e002      	b.n	80111e8 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80111e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f383 8810 	msr	PRIMASK, r3
}
 80111f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f001 f8c7 	bl	8012388 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80111fa:	f3ef 8310 	mrs	r3, PRIMASK
 80111fe:	617b      	str	r3, [r7, #20]
    return(posture);
 8011200:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011202:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011204:	b672      	cpsid	i
    return(int_posture);
 8011206:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8011208:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 801120a:	4b23      	ldr	r3, [pc, #140]	@ (8011298 <_tx_mutex_priority_change+0x170>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8011210:	687a      	ldr	r2, [r7, #4]
 8011212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011214:	429a      	cmp	r2, r3
 8011216:	d034      	beq.n	8011282 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801121c:	2b00      	cmp	r3, #0
 801121e:	d130      	bne.n	8011282 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011228:	429a      	cmp	r2, r3
 801122a:	d811      	bhi.n	8011250 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011230:	429a      	cmp	r2, r3
 8011232:	d126      	bne.n	8011282 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8011234:	4a18      	ldr	r2, [pc, #96]	@ (8011298 <_tx_mutex_priority_change+0x170>)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 801123a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	429a      	cmp	r2, r3
 8011240:	d21f      	bcs.n	8011282 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011246:	4916      	ldr	r1, [pc, #88]	@ (80112a0 <_tx_mutex_priority_change+0x178>)
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801124e:	e018      	b.n	8011282 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011258:	429a      	cmp	r2, r3
 801125a:	d212      	bcs.n	8011282 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011264:	429a      	cmp	r2, r3
 8011266:	d80c      	bhi.n	8011282 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8011268:	4a0b      	ldr	r2, [pc, #44]	@ (8011298 <_tx_mutex_priority_change+0x170>)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 801126e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	429a      	cmp	r2, r3
 8011274:	d205      	bcs.n	8011282 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801127a:	4909      	ldr	r1, [pc, #36]	@ (80112a0 <_tx_mutex_priority_change+0x178>)
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011284:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	f383 8810 	msr	PRIMASK, r3
}
 801128c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801128e:	bf00      	nop
 8011290:	3740      	adds	r7, #64	@ 0x40
 8011292:	46bd      	mov	sp, r7
 8011294:	bd80      	pop	{r7, pc}
 8011296:	bf00      	nop
 8011298:	2000ae18 	.word	0x2000ae18
 801129c:	2000aeac 	.word	0x2000aeac
 80112a0:	2000ae2c 	.word	0x2000ae2c

080112a4 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b0a6      	sub	sp, #152	@ 0x98
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80112ac:	2320      	movs	r3, #32
 80112ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80112b2:	f3ef 8310 	mrs	r3, PRIMASK
 80112b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    return(posture);
 80112b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    int_posture = __get_interrupt_posture();
 80112ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 80112bc:	b672      	cpsid	i
    return(int_posture);
 80112be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 80112c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f000 81ff 	beq.w	80116cc <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	68db      	ldr	r3, [r3, #12]
 80112d2:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80112d4:	4ba3      	ldr	r3, [pc, #652]	@ (8011564 <_tx_mutex_put+0x2c0>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d00d      	beq.n	8011300 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 80112e4:	4ba0      	ldr	r3, [pc, #640]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d109      	bne.n	8011300 <_tx_mutex_put+0x5c>
 80112ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80112f0:	657b      	str	r3, [r7, #84]	@ 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80112f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112f4:	f383 8810 	msr	PRIMASK, r3
}
 80112f8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 80112fa:	231e      	movs	r3, #30
 80112fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8011300:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011304:	2b20      	cmp	r3, #32
 8011306:	f040 81eb 	bne.w	80116e0 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	689b      	ldr	r3, [r3, #8]
 801130e:	1e5a      	subs	r2, r3, #1
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d00a      	beq.n	8011332 <_tx_mutex_put+0x8e>
 801131c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011320:	653b      	str	r3, [r7, #80]	@ 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011324:	f383 8810 	msr	PRIMASK, r3
}
 8011328:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 801132a:	2300      	movs	r3, #0
 801132c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011330:	e1d6      	b.n	80116e0 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8011332:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011334:	2b00      	cmp	r3, #0
 8011336:	d10a      	bne.n	801134e <_tx_mutex_put+0xaa>
 8011338:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801133e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011340:	f383 8810 	msr	PRIMASK, r3
}
 8011344:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8011346:	2300      	movs	r3, #0
 8011348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801134c:	e1c8      	b.n	80116e0 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 801134e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011350:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011354:	1e5a      	subs	r2, r3, #1
 8011356:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011358:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 801135c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801135e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d104      	bne.n	8011370 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8011366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011368:	2200      	movs	r2, #0
 801136a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 801136e:	e019      	b.n	80113a4 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801137c:	677b      	str	r3, [r7, #116]	@ 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 801137e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011382:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011384:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8011386:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011388:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801138c:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801138e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011390:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	429a      	cmp	r2, r3
 8011398:	d104      	bne.n	80113a4 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 801139a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801139c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80113a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	699b      	ldr	r3, [r3, #24]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d110      	bne.n	80113ce <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	691b      	ldr	r3, [r3, #16]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d10c      	bne.n	80113ce <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	2200      	movs	r2, #0
 80113b8:	60da      	str	r2, [r3, #12]
 80113ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80113be:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80113c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113c2:	f383 8810 	msr	PRIMASK, r3
}
 80113c6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 80113c8:	2300      	movs	r3, #0
 80113ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80113ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80113d2:	2b20      	cmp	r3, #32
 80113d4:	f040 8184 	bne.w	80116e0 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 80113d8:	2300      	movs	r3, #0
 80113da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 80113de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80113e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80113e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	691b      	ldr	r3, [r3, #16]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d155      	bne.n	801149c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80113f0:	4b5d      	ldr	r3, [pc, #372]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	3301      	adds	r3, #1
 80113f6:	4a5c      	ldr	r2, [pc, #368]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80113f8:	6013      	str	r3, [r2, #0]
 80113fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80113fe:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011402:	f383 8810 	msr	PRIMASK, r3
}
 8011406:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011408:	2320      	movs	r3, #32
 801140a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801140e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 8011418:	e01f      	b.n	801145a <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 801141a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801141e:	691b      	ldr	r3, [r3, #16]
 8011420:	2b01      	cmp	r3, #1
 8011422:	d10b      	bne.n	801143c <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8011424:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801142a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801142e:	429a      	cmp	r2, r3
 8011430:	d904      	bls.n	801143c <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8011432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011438:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 801143c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8011446:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801144c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011450:	429a      	cmp	r2, r3
 8011452:	d102      	bne.n	801145a <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8011454:	2300      	movs	r3, #0
 8011456:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                            while (next_mutex != TX_NULL)
 801145a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801145e:	2b00      	cmp	r3, #0
 8011460:	d1db      	bne.n	801141a <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011462:	f3ef 8310 	mrs	r3, PRIMASK
 8011466:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8011468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 801146a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801146c:	b672      	cpsid	i
    return(int_posture);
 801146e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011470:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8011474:	4b3c      	ldr	r3, [pc, #240]	@ (8011568 <_tx_mutex_put+0x2c4>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	3b01      	subs	r3, #1
 801147a:	4a3b      	ldr	r2, [pc, #236]	@ (8011568 <_tx_mutex_put+0x2c4>)
 801147c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801147e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011480:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011484:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8011488:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801148c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011490:	429a      	cmp	r2, r3
 8011492:	d203      	bcs.n	801149c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8011494:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011498:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	69db      	ldr	r3, [r3, #28]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d920      	bls.n	80114e6 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	691b      	ldr	r3, [r3, #16]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d11c      	bne.n	80114e6 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80114ac:	4b2e      	ldr	r3, [pc, #184]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	3301      	adds	r3, #1
 80114b2:	4a2d      	ldr	r2, [pc, #180]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80114b4:	6013      	str	r3, [r2, #0]
 80114b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80114ba:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114be:	f383 8810 	msr	PRIMASK, r3
}
 80114c2:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f7ff fd7d 	bl	8010fc4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80114ca:	f3ef 8310 	mrs	r3, PRIMASK
 80114ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 80114d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 80114d2:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80114d4:	b672      	cpsid	i
    return(int_posture);
 80114d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80114d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80114dc:	4b22      	ldr	r3, [pc, #136]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	3b01      	subs	r3, #1
 80114e2:	4a21      	ldr	r2, [pc, #132]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80114e4:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	699b      	ldr	r3, [r3, #24]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d13e      	bne.n	801156c <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80114ee:	4b1e      	ldr	r3, [pc, #120]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	3301      	adds	r3, #1
 80114f4:	4a1c      	ldr	r2, [pc, #112]	@ (8011568 <_tx_mutex_put+0x2c4>)
 80114f6:	6013      	str	r3, [r2, #0]
 80114f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80114fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011500:	f383 8810 	msr	PRIMASK, r3
}
 8011504:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2220      	movs	r2, #32
 801150a:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011512:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011516:	429a      	cmp	r2, r3
 8011518:	d006      	beq.n	8011528 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8011522:	4618      	mov	r0, r3
 8011524:	f7ff fe00 	bl	8011128 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011528:	f3ef 8310 	mrs	r3, PRIMASK
 801152c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 801152e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8011530:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011532:	b672      	cpsid	i
    return(int_posture);
 8011534:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8011536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 801153a:	4b0b      	ldr	r3, [pc, #44]	@ (8011568 <_tx_mutex_put+0x2c4>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	3b01      	subs	r3, #1
 8011540:	4a09      	ldr	r2, [pc, #36]	@ (8011568 <_tx_mutex_put+0x2c4>)
 8011542:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2200      	movs	r2, #0
 8011548:	60da      	str	r2, [r3, #12]
 801154a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801154e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011552:	f383 8810 	msr	PRIMASK, r3
}
 8011556:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8011558:	f000 fedc 	bl	8012314 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 801155c:	2300      	movs	r3, #0
 801155e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011562:	e0bd      	b.n	80116e0 <_tx_mutex_put+0x43c>
 8011564:	2000ae14 	.word	0x2000ae14
 8011568:	2000aeac 	.word	0x2000aeac
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	699b      	ldr	r3, [r3, #24]
 8011570:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	691b      	ldr	r3, [r3, #16]
 8011576:	2b01      	cmp	r3, #1
 8011578:	d10a      	bne.n	8011590 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	68db      	ldr	r3, [r3, #12]
 801157e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8011582:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	2220      	movs	r2, #32
 801158e:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8011590:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011596:	673b      	str	r3, [r7, #112]	@ 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8011598:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801159a:	2b00      	cmp	r3, #0
 801159c:	d10a      	bne.n	80115b4 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801159e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80115b2:	e016      	b.n	80115e2 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80115b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80115b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80115ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80115be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80115c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80115c4:	677b      	str	r3, [r7, #116]	@ 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80115c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80115ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80115d8:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80115e0:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80115e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80115e4:	1c5a      	adds	r2, r3, #1
 80115e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80115e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2201      	movs	r2, #1
 80115f0:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80115f6:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	69db      	ldr	r3, [r3, #28]
 80115fc:	1e5a      	subs	r2, r3, #1
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	69db      	ldr	r3, [r3, #28]
 8011606:	66fb      	str	r3, [r7, #108]	@ 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8011608:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801160a:	2b00      	cmp	r3, #0
 801160c:	d103      	bne.n	8011616 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2200      	movs	r2, #0
 8011612:	619a      	str	r2, [r3, #24]
 8011614:	e00e      	b.n	8011634 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8011616:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801161a:	66bb      	str	r3, [r7, #104]	@ 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011620:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8011622:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011626:	667b      	str	r3, [r7, #100]	@ 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8011628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801162a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801162c:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801162e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011630:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011632:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011636:	2200      	movs	r2, #0
 8011638:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801163a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801163c:	2200      	movs	r2, #0
 801163e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011642:	4b2a      	ldr	r3, [pc, #168]	@ (80116ec <_tx_mutex_put+0x448>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	3301      	adds	r3, #1
 8011648:	4a28      	ldr	r2, [pc, #160]	@ (80116ec <_tx_mutex_put+0x448>)
 801164a:	6013      	str	r3, [r2, #0]
 801164c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011650:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	f383 8810 	msr	PRIMASK, r3
}
 8011658:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	691b      	ldr	r3, [r3, #16]
 801165e:	2b01      	cmp	r3, #1
 8011660:	d12d      	bne.n	80116be <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	69db      	ldr	r3, [r3, #28]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d01c      	beq.n	80116a4 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f7ff fcaa 	bl	8010fc4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011670:	f3ef 8310 	mrs	r3, PRIMASK
 8011674:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011676:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011678:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801167a:	b672      	cpsid	i
    return(int_posture);
 801167c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801167e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	699b      	ldr	r3, [r3, #24]
 8011686:	663b      	str	r3, [r7, #96]	@ 0x60
                                    if (suspended_thread != TX_NULL)
 8011688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801168a:	2b00      	cmp	r3, #0
 801168c:	d003      	beq.n	8011696 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801168e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	629a      	str	r2, [r3, #40]	@ 0x28
 8011696:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801169a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	f383 8810 	msr	PRIMASK, r3
}
 80116a2:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 80116a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80116a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d005      	beq.n	80116be <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80116b2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80116b6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80116ba:	f7ff fd35 	bl	8011128 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80116be:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80116c0:	f000 fe62 	bl	8012388 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80116c4:	2300      	movs	r3, #0
 80116c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80116ca:	e009      	b.n	80116e0 <_tx_mutex_put+0x43c>
 80116cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80116d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f383 8810 	msr	PRIMASK, r3
}
 80116d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80116da:	231e      	movs	r3, #30
 80116dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    }

    /* Return the completion status.  */
    return(status);
 80116e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3798      	adds	r7, #152	@ 0x98
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	2000aeac 	.word	0x2000aeac

080116f0 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b08e      	sub	sp, #56	@ 0x38
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116fa:	f3ef 8310 	mrs	r3, PRIMASK
 80116fe:	623b      	str	r3, [r7, #32]
    return(posture);
 8011700:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8011702:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011704:	b672      	cpsid	i
    return(int_posture);
 8011706:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8011708:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801170e:	4a33      	ldr	r2, [pc, #204]	@ (80117dc <_tx_semaphore_cleanup+0xec>)
 8011710:	4293      	cmp	r3, r2
 8011712:	d158      	bne.n	80117c6 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801171a:	683a      	ldr	r2, [r7, #0]
 801171c:	429a      	cmp	r2, r3
 801171e:	d152      	bne.n	80117c6 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011724:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8011726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011728:	2b00      	cmp	r3, #0
 801172a:	d04c      	beq.n	80117c6 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 801172c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4a2b      	ldr	r2, [pc, #172]	@ (80117e0 <_tx_semaphore_cleanup+0xf0>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d147      	bne.n	80117c6 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8011736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011738:	691b      	ldr	r3, [r3, #16]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d043      	beq.n	80117c6 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8011744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011746:	691b      	ldr	r3, [r3, #16]
 8011748:	1e5a      	subs	r2, r3, #1
 801174a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801174c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801174e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011750:	691b      	ldr	r3, [r3, #16]
 8011752:	62fb      	str	r3, [r7, #44]	@ 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011756:	2b00      	cmp	r3, #0
 8011758:	d103      	bne.n	8011762 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801175c:	2200      	movs	r2, #0
 801175e:	60da      	str	r2, [r3, #12]
 8011760:	e013      	b.n	801178a <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011766:	62bb      	str	r3, [r7, #40]	@ 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801176c:	627b      	str	r3, [r7, #36]	@ 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011772:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011778:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801177a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	429a      	cmp	r2, r3
 8011782:	d102      	bne.n	801178a <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011788:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801178e:	2b06      	cmp	r3, #6
 8011790:	d119      	bne.n	80117c6 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	220d      	movs	r2, #13
 8011796:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801179a:	4b12      	ldr	r3, [pc, #72]	@ (80117e4 <_tx_semaphore_cleanup+0xf4>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	3301      	adds	r3, #1
 80117a0:	4a10      	ldr	r2, [pc, #64]	@ (80117e4 <_tx_semaphore_cleanup+0xf4>)
 80117a2:	6013      	str	r3, [r2, #0]
 80117a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	f383 8810 	msr	PRIMASK, r3
}
 80117ae:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 fde9 	bl	8012388 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80117b6:	f3ef 8310 	mrs	r3, PRIMASK
 80117ba:	61bb      	str	r3, [r7, #24]
    return(posture);
 80117bc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80117be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80117c0:	b672      	cpsid	i
    return(int_posture);
 80117c2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80117c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80117c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	f383 8810 	msr	PRIMASK, r3
}
 80117d0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80117d2:	bf00      	nop
 80117d4:	3738      	adds	r7, #56	@ 0x38
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
 80117da:	bf00      	nop
 80117dc:	080116f1 	.word	0x080116f1
 80117e0:	53454d41 	.word	0x53454d41
 80117e4:	2000aeac 	.word	0x2000aeac

080117e8 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b08a      	sub	sp, #40	@ 0x28
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	60f8      	str	r0, [r7, #12]
 80117f0:	60b9      	str	r1, [r7, #8]
 80117f2:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80117f4:	2220      	movs	r2, #32
 80117f6:	2100      	movs	r1, #0
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	f002 fdbd 	bl	8014378 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	68ba      	ldr	r2, [r7, #8]
 8011802:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801180a:	f3ef 8310 	mrs	r3, PRIMASK
 801180e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011810:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011812:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011814:	b672      	cpsid	i
    return(int_posture);
 8011816:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8011818:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	4a18      	ldr	r2, [pc, #96]	@ (8011880 <_tx_semaphore_create+0x98>)
 801181e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8011820:	4b18      	ldr	r3, [pc, #96]	@ (8011884 <_tx_semaphore_create+0x9c>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d109      	bne.n	801183c <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8011828:	4a17      	ldr	r2, [pc, #92]	@ (8011888 <_tx_semaphore_create+0xa0>)
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	68fa      	ldr	r2, [r7, #12]
 8011832:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	68fa      	ldr	r2, [r7, #12]
 8011838:	619a      	str	r2, [r3, #24]
 801183a:	e011      	b.n	8011860 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 801183c:	4b12      	ldr	r3, [pc, #72]	@ (8011888 <_tx_semaphore_create+0xa0>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8011842:	6a3b      	ldr	r3, [r7, #32]
 8011844:	699b      	ldr	r3, [r3, #24]
 8011846:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	68fa      	ldr	r2, [r7, #12]
 801184c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	69fa      	ldr	r2, [r7, #28]
 8011858:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6a3a      	ldr	r2, [r7, #32]
 801185e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8011860:	4b08      	ldr	r3, [pc, #32]	@ (8011884 <_tx_semaphore_create+0x9c>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	3301      	adds	r3, #1
 8011866:	4a07      	ldr	r2, [pc, #28]	@ (8011884 <_tx_semaphore_create+0x9c>)
 8011868:	6013      	str	r3, [r2, #0]
 801186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	f383 8810 	msr	PRIMASK, r3
}
 8011874:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8011876:	2300      	movs	r3, #0
}
 8011878:	4618      	mov	r0, r3
 801187a:	3728      	adds	r7, #40	@ 0x28
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	53454d41 	.word	0x53454d41
 8011884:	2000ade0 	.word	0x2000ade0
 8011888:	2000addc 	.word	0x2000addc

0801188c <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b08e      	sub	sp, #56	@ 0x38
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8011896:	2300      	movs	r3, #0
 8011898:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801189a:	f3ef 8310 	mrs	r3, PRIMASK
 801189e:	623b      	str	r3, [r7, #32]
    return(posture);
 80118a0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80118a2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80118a4:	b672      	cpsid	i
    return(int_posture);
 80118a6:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80118a8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	689b      	ldr	r3, [r3, #8]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d00a      	beq.n	80118c8 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	689b      	ldr	r3, [r3, #8]
 80118b6:	1e5a      	subs	r2, r3, #1
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	609a      	str	r2, [r3, #8]
 80118bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118c0:	69bb      	ldr	r3, [r7, #24]
 80118c2:	f383 8810 	msr	PRIMASK, r3
}
 80118c6:	e068      	b.n	801199a <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d05d      	beq.n	801198a <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80118ce:	4b35      	ldr	r3, [pc, #212]	@ (80119a4 <_tx_semaphore_get+0x118>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d008      	beq.n	80118e8 <_tx_semaphore_get+0x5c>
 80118d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118d8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	f383 8810 	msr	PRIMASK, r3
}
 80118e0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80118e2:	230d      	movs	r3, #13
 80118e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80118e6:	e058      	b.n	801199a <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80118e8:	4b2f      	ldr	r3, [pc, #188]	@ (80119a8 <_tx_semaphore_get+0x11c>)
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80118ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f0:	4a2e      	ldr	r2, [pc, #184]	@ (80119ac <_tx_semaphore_get+0x120>)
 80118f2:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80118f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80118fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8011900:	1c5a      	adds	r2, r3, #1
 8011902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011904:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	691b      	ldr	r3, [r3, #16]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d109      	bne.n	8011924 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011914:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8011916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801191a:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 801191c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801191e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011920:	675a      	str	r2, [r3, #116]	@ 0x74
 8011922:	e011      	b.n	8011948 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	62bb      	str	r3, [r7, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801192a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801192c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801192e:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011934:	627b      	str	r3, [r7, #36]	@ 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801193a:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 801193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801193e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011940:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011946:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	691b      	ldr	r3, [r3, #16]
 801194c:	1c5a      	adds	r2, r3, #1
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8011952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011954:	2206      	movs	r2, #6
 8011956:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801195a:	2201      	movs	r2, #1
 801195c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801195e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011960:	683a      	ldr	r2, [r7, #0]
 8011962:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011964:	4b0f      	ldr	r3, [pc, #60]	@ (80119a4 <_tx_semaphore_get+0x118>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	3301      	adds	r3, #1
 801196a:	4a0e      	ldr	r2, [pc, #56]	@ (80119a4 <_tx_semaphore_get+0x118>)
 801196c:	6013      	str	r3, [r2, #0]
 801196e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011970:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	f383 8810 	msr	PRIMASK, r3
}
 8011978:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801197a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801197c:	f000 fe04 	bl	8012588 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011986:	637b      	str	r3, [r7, #52]	@ 0x34
 8011988:	e007      	b.n	801199a <_tx_semaphore_get+0x10e>
 801198a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801198c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f383 8810 	msr	PRIMASK, r3
}
 8011994:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8011996:	230d      	movs	r3, #13
 8011998:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Return completion status.  */
    return(status);
 801199a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801199c:	4618      	mov	r0, r3
 801199e:	3738      	adds	r7, #56	@ 0x38
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	2000aeac 	.word	0x2000aeac
 80119a8:	2000ae14 	.word	0x2000ae14
 80119ac:	080116f1 	.word	0x080116f1

080119b0 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b08c      	sub	sp, #48	@ 0x30
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80119b8:	f3ef 8310 	mrs	r3, PRIMASK
 80119bc:	617b      	str	r3, [r7, #20]
    return(posture);
 80119be:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80119c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80119c2:	b672      	cpsid	i
    return(int_posture);
 80119c4:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80119c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80119ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d114      	bne.n	80119fe <_tx_semaphore_put+0x4e>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	689b      	ldr	r3, [r3, #8]
 80119d8:	1c5a      	adds	r2, r3, #1
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	609a      	str	r2, [r3, #8]

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	69db      	ldr	r3, [r3, #28]
 80119e2:	61bb      	str	r3, [r7, #24]
 80119e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f383 8810 	msr	PRIMASK, r3
}
 80119ee:	bf00      	nop
        TX_RESTORE

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d040      	beq.n	8011a78 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	4798      	blx	r3
 80119fc:	e03c      	b.n	8011a78 <_tx_semaphore_put+0xc8>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8011a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a06:	3b01      	subs	r3, #1
 8011a08:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8011a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d103      	bne.n	8011a18 <_tx_semaphore_put+0x68>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	2200      	movs	r2, #0
 8011a14:	60da      	str	r2, [r3, #12]
 8011a16:	e00e      	b.n	8011a36 <_tx_semaphore_put+0x86>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8011a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a1c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	6a3a      	ldr	r2, [r7, #32]
 8011a22:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a28:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011a2a:	6a3b      	ldr	r3, [r7, #32]
 8011a2c:	69fa      	ldr	r2, [r7, #28]
 8011a2e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	6a3a      	ldr	r2, [r7, #32]
 8011a34:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a3a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3e:	2200      	movs	r2, #0
 8011a40:	669a      	str	r2, [r3, #104]	@ 0x68

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	69db      	ldr	r3, [r3, #28]
 8011a46:	61bb      	str	r3, [r7, #24]
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8011a50:	4b0c      	ldr	r3, [pc, #48]	@ (8011a84 <_tx_semaphore_put+0xd4>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	3301      	adds	r3, #1
 8011a56:	4a0b      	ldr	r2, [pc, #44]	@ (8011a84 <_tx_semaphore_put+0xd4>)
 8011a58:	6013      	str	r3, [r2, #0]
 8011a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a5c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	f383 8810 	msr	PRIMASK, r3
}
 8011a64:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011a66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a68:	f000 fc8e 	bl	8012388 <_tx_thread_system_resume>
#endif

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

        /* Determine if notification is required.  */
        if (semaphore_put_notify != TX_NULL)
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d002      	beq.n	8011a78 <_tx_semaphore_put+0xc8>
        {

            /* Yes, call the appropriate notify callback function.  */
            (semaphore_put_notify)(semaphore_ptr);
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	4798      	blx	r3
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8011a78:	2300      	movs	r3, #0
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3730      	adds	r7, #48	@ 0x30
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	2000aeac 	.word	0x2000aeac

08011a88 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b092      	sub	sp, #72	@ 0x48
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	607a      	str	r2, [r7, #4]
 8011a94:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8011a96:	2300      	movs	r3, #0
 8011a98:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8011a9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a9c:	21ef      	movs	r1, #239	@ 0xef
 8011a9e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8011aa0:	f002 fc6a 	bl	8014378 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8011aa4:	22b4      	movs	r2, #180	@ 0xb4
 8011aa6:	2100      	movs	r1, #0
 8011aa8:	68f8      	ldr	r0, [r7, #12]
 8011aaa:	f002 fc65 	bl	8014378 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	68ba      	ldr	r2, [r7, #8]
 8011ab2:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	683a      	ldr	r2, [r7, #0]
 8011abe:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011ac4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011aca:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011ad6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ade:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011ae4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2220      	movs	r2, #32
 8011aea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8011af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011af4:	3b01      	subs	r3, #1
 8011af6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011af8:	4413      	add	r3, r2
 8011afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011b00:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8011b02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d007      	beq.n	8011b1a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2200      	movs	r2, #0
 8011b14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8011b18:	e006      	b.n	8011b28 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b24:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2203      	movs	r2, #3
 8011b2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	4a48      	ldr	r2, [pc, #288]	@ (8011c54 <_tx_thread_create+0x1cc>)
 8011b32:	655a      	str	r2, [r3, #84]	@ 0x54
 8011b34:	68fa      	ldr	r2, [r7, #12]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8011b3a:	4947      	ldr	r1, [pc, #284]	@ (8011c58 <_tx_thread_create+0x1d0>)
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f7ee fbf7 	bl	8000330 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011b42:	f3ef 8310 	mrs	r3, PRIMASK
 8011b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8011b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8011b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011b4c:	b672      	cpsid	i
    return(int_posture);
 8011b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8011b50:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	4a41      	ldr	r2, [pc, #260]	@ (8011c5c <_tx_thread_create+0x1d4>)
 8011b56:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8011b58:	4b41      	ldr	r3, [pc, #260]	@ (8011c60 <_tx_thread_create+0x1d8>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d10b      	bne.n	8011b78 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8011b60:	4a40      	ldr	r2, [pc, #256]	@ (8011c64 <_tx_thread_create+0x1dc>)
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	68fa      	ldr	r2, [r7, #12]
 8011b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8011b76:	e016      	b.n	8011ba6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8011b78:	4b3a      	ldr	r3, [pc, #232]	@ (8011c64 <_tx_thread_create+0x1dc>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8011b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011b84:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8011b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b88:	68fa      	ldr	r2, [r7, #12]
 8011b8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8011b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b90:	68fa      	ldr	r2, [r7, #12]
 8011b92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8011ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8011c60 <_tx_thread_create+0x1d8>)
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	3301      	adds	r3, #1
 8011bac:	4a2c      	ldr	r2, [pc, #176]	@ (8011c60 <_tx_thread_create+0x1d8>)
 8011bae:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8011c68 <_tx_thread_create+0x1e0>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8011c68 <_tx_thread_create+0x1e0>)
 8011bb8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8011bba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d129      	bne.n	8011c14 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011bc0:	f3ef 8305 	mrs	r3, IPSR
 8011bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 8011bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011bc8:	4b28      	ldr	r3, [pc, #160]	@ (8011c6c <_tx_thread_create+0x1e4>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	4313      	orrs	r3, r2
 8011bce:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011bd2:	d30d      	bcc.n	8011bf0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011bd4:	4b26      	ldr	r3, [pc, #152]	@ (8011c70 <_tx_thread_create+0x1e8>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8011bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d009      	beq.n	8011bf4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011be4:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8011be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bec:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011bee:	e001      	b.n	8011bf4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8011bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011bf8:	6a3b      	ldr	r3, [r7, #32]
 8011bfa:	f383 8810 	msr	PRIMASK, r3
}
 8011bfe:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f000 fbc1 	bl	8012388 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8011c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d01e      	beq.n	8011c4a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8011c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011c10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011c12:	e01a      	b.n	8011c4a <_tx_thread_create+0x1c2>
 8011c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c16:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	f383 8810 	msr	PRIMASK, r3
}
 8011c1e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c20:	f3ef 8310 	mrs	r3, PRIMASK
 8011c24:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011c26:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011c28:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c2a:	b672      	cpsid	i
    return(int_posture);
 8011c2c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8011c2e:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8011c30:	4b0d      	ldr	r3, [pc, #52]	@ (8011c68 <_tx_thread_create+0x1e0>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	3b01      	subs	r3, #1
 8011c36:	4a0c      	ldr	r2, [pc, #48]	@ (8011c68 <_tx_thread_create+0x1e0>)
 8011c38:	6013      	str	r3, [r2, #0]
 8011c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c3c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011c3e:	69fb      	ldr	r3, [r7, #28]
 8011c40:	f383 8810 	msr	PRIMASK, r3
}
 8011c44:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011c46:	f000 fb65 	bl	8012314 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3748      	adds	r7, #72	@ 0x48
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}
 8011c54:	0801285d 	.word	0x0801285d
 8011c58:	08012055 	.word	0x08012055
 8011c5c:	54485244 	.word	0x54485244
 8011c60:	2000ae20 	.word	0x2000ae20
 8011c64:	2000ae1c 	.word	0x2000ae1c
 8011c68:	2000aeac 	.word	0x2000aeac
 8011c6c:	20000098 	.word	0x20000098
 8011c70:	2000ae18 	.word	0x2000ae18

08011c74 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 8011c74:	b480      	push	{r7}
 8011c76:	b08b      	sub	sp, #44	@ 0x2c
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011c80:	f3ef 8310 	mrs	r3, PRIMASK
 8011c84:	617b      	str	r3, [r7, #20]
    return(posture);
 8011c86:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8011c88:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011c8a:	b672      	cpsid	i
    return(int_posture);
 8011c8c:	693b      	ldr	r3, [r7, #16]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 8011c8e:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d00b      	beq.n	8011cb0 <_tx_thread_delete+0x3c>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c9c:	2b02      	cmp	r3, #2
 8011c9e:	d007      	beq.n	8011cb0 <_tx_thread_delete+0x3c>
 8011ca0:	6a3b      	ldr	r3, [r7, #32]
 8011ca2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f383 8810 	msr	PRIMASK, r3
}
 8011caa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 8011cac:	2311      	movs	r3, #17
 8011cae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d12d      	bne.n	8011d12 <_tx_thread_delete+0x9e>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 8011cbc:	4b18      	ldr	r3, [pc, #96]	@ (8011d20 <_tx_thread_delete+0xac>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	3b01      	subs	r3, #1
 8011cc2:	4a17      	ldr	r2, [pc, #92]	@ (8011d20 <_tx_thread_delete+0xac>)
 8011cc4:	6013      	str	r3, [r2, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8011cc6:	4b16      	ldr	r3, [pc, #88]	@ (8011d20 <_tx_thread_delete+0xac>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d103      	bne.n	8011cd6 <_tx_thread_delete+0x62>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 8011cce:	4b15      	ldr	r3, [pc, #84]	@ (8011d24 <_tx_thread_delete+0xb0>)
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	601a      	str	r2, [r3, #0]
 8011cd4:	e017      	b.n	8011d06 <_tx_thread_delete+0x92>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011cdc:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011ce4:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	69ba      	ldr	r2, [r7, #24]
 8011cea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            previous_thread -> tx_thread_created_next =  next_thread;
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	69fa      	ldr	r2, [r7, #28]
 8011cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8011cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8011d24 <_tx_thread_delete+0xb0>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	687a      	ldr	r2, [r7, #4]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d102      	bne.n	8011d06 <_tx_thread_delete+0x92>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8011d00:	4a08      	ldr	r2, [pc, #32]	@ (8011d24 <_tx_thread_delete+0xb0>)
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	6013      	str	r3, [r2, #0]
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	f383 8810 	msr	PRIMASK, r3
}
 8011d10:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8011d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	372c      	adds	r7, #44	@ 0x2c
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr
 8011d20:	2000ae20 	.word	0x2000ae20
 8011d24:	2000ae1c 	.word	0x2000ae1c

08011d28 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b087      	sub	sp, #28
 8011d2c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8011d32:	60bb      	str	r3, [r7, #8]
    return(posture);
 8011d34:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8011d36:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011d38:	b672      	cpsid	i
    return(int_posture);
 8011d3a:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8011d3c:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011d3e:	4b08      	ldr	r3, [pc, #32]	@ (8011d60 <_tx_thread_identify+0x38>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	613b      	str	r3, [r7, #16]
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	f383 8810 	msr	PRIMASK, r3
}
 8011d4e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 8011d50:	693b      	ldr	r3, [r7, #16]
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	371c      	adds	r7, #28
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr
 8011d5e:	bf00      	nop
 8011d60:	2000ae14 	.word	0x2000ae14

08011d64 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8011d68:	4b13      	ldr	r3, [pc, #76]	@ (8011db8 <_tx_thread_initialize+0x54>)
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8011d6e:	4b13      	ldr	r3, [pc, #76]	@ (8011dbc <_tx_thread_initialize+0x58>)
 8011d70:	2200      	movs	r2, #0
 8011d72:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8011d74:	4b12      	ldr	r3, [pc, #72]	@ (8011dc0 <_tx_thread_initialize+0x5c>)
 8011d76:	2200      	movs	r2, #0
 8011d78:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011d7a:	4b12      	ldr	r3, [pc, #72]	@ (8011dc4 <_tx_thread_initialize+0x60>)
 8011d7c:	2220      	movs	r2, #32
 8011d7e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8011d80:	2280      	movs	r2, #128	@ 0x80
 8011d82:	2100      	movs	r1, #0
 8011d84:	4810      	ldr	r0, [pc, #64]	@ (8011dc8 <_tx_thread_initialize+0x64>)
 8011d86:	f002 faf7 	bl	8014378 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8011d8a:	4b10      	ldr	r3, [pc, #64]	@ (8011dcc <_tx_thread_initialize+0x68>)
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8011d90:	4b0f      	ldr	r3, [pc, #60]	@ (8011dd0 <_tx_thread_initialize+0x6c>)
 8011d92:	2200      	movs	r2, #0
 8011d94:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8011d96:	4b0f      	ldr	r3, [pc, #60]	@ (8011dd4 <_tx_thread_initialize+0x70>)
 8011d98:	2200      	movs	r2, #0
 8011d9a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8011d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8011dd8 <_tx_thread_initialize+0x74>)
 8011d9e:	2200      	movs	r2, #0
 8011da0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_ENABLE_EVENT_TRACE
                            | (((ULONG) 1) << 8)
#endif
#if defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE)
                            | (((ULONG) 1) << 7)
 8011da2:	4b0e      	ldr	r3, [pc, #56]	@ (8011ddc <_tx_thread_initialize+0x78>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	f043 7384 	orr.w	r3, r3, #17301504	@ 0x1080000
 8011daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    _tx_build_options =  _tx_build_options 
 8011dae:	4a0b      	ldr	r2, [pc, #44]	@ (8011ddc <_tx_thread_initialize+0x78>)
 8011db0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8011db2:	bf00      	nop
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	2000ae14 	.word	0x2000ae14
 8011dbc:	2000ae18 	.word	0x2000ae18
 8011dc0:	2000ae24 	.word	0x2000ae24
 8011dc4:	2000ae28 	.word	0x2000ae28
 8011dc8:	2000ae2c 	.word	0x2000ae2c
 8011dcc:	2000ae1c 	.word	0x2000ae1c
 8011dd0:	2000ae20 	.word	0x2000ae20
 8011dd4:	2000aeac 	.word	0x2000aeac
 8011dd8:	2000aeb0 	.word	0x2000aeb0
 8011ddc:	2000aeb4 	.word	0x2000aeb4

08011de0 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b08c      	sub	sp, #48	@ 0x30
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011dec:	2300      	movs	r3, #0
 8011dee:	62bb      	str	r3, [r7, #40]	@ 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011df6:	68ba      	ldr	r2, [r7, #8]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d004      	beq.n	8011e06 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d001      	beq.n	8011e06 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 8011e02:	2300      	movs	r3, #0
 8011e04:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e06:	f3ef 8310 	mrs	r3, PRIMASK
 8011e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    int_posture = __get_interrupt_posture();
 8011e0e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011e10:	b672      	cpsid	i
    return(int_posture);
 8011e12:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011e14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011e1c:	68ba      	ldr	r2, [r7, #8]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d902      	bls.n	8011e28 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 8011e22:	2318      	movs	r3, #24
 8011e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011e26:	e03e      	b.n	8011ea6 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011e40:	68ba      	ldr	r2, [r7, #8]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d203      	bcs.n	8011e4e <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	68ba      	ldr	r2, [r7, #8]
 8011e4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011e4c:	e004      	b.n	8011e58 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	63da      	str	r2, [r3, #60]	@ 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e5c:	4b17      	ldr	r3, [pc, #92]	@ (8011ebc <_tx_thread_preemption_change+0xdc>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d920      	bls.n	8011ea6 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 8011e64:	4b15      	ldr	r3, [pc, #84]	@ (8011ebc <_tx_thread_preemption_change+0xdc>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d91b      	bls.n	8011ea6 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8011e6e:	4b14      	ldr	r3, [pc, #80]	@ (8011ec0 <_tx_thread_preemption_change+0xe0>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	68fa      	ldr	r2, [r7, #12]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d116      	bne.n	8011ea6 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011e78:	4b10      	ldr	r3, [pc, #64]	@ (8011ebc <_tx_thread_preemption_change+0xdc>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4a11      	ldr	r2, [pc, #68]	@ (8011ec4 <_tx_thread_preemption_change+0xe4>)
 8011e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e82:	4a0f      	ldr	r2, [pc, #60]	@ (8011ec0 <_tx_thread_preemption_change+0xe0>)
 8011e84:	6013      	str	r3, [r2, #0]
 8011e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e88:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	f383 8810 	msr	PRIMASK, r3
}
 8011e90:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 8011e92:	f000 fa3f 	bl	8012314 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011e96:	f3ef 8310 	mrs	r3, PRIMASK
 8011e9a:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011e9c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011e9e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ea0:	b672      	cpsid	i
    return(int_posture);
 8011ea2:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8011ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ea8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	f383 8810 	msr	PRIMASK, r3
}
 8011eb0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8011eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3730      	adds	r7, #48	@ 0x30
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}
 8011ebc:	2000ae28 	.word	0x2000ae28
 8011ec0:	2000ae18 	.word	0x2000ae18
 8011ec4:	2000ae2c 	.word	0x2000ae2c

08011ec8 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b08b      	sub	sp, #44	@ 0x2c
 8011ecc:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011ece:	4b2b      	ldr	r3, [pc, #172]	@ (8011f7c <_tx_thread_relinquish+0xb4>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8011ed8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8011eda:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8011edc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011ede:	b672      	cpsid	i
    return(int_posture);
 8011ee0:	697b      	ldr	r3, [r7, #20]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 8011ee2:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee6:	69db      	ldr	r3, [r3, #28]
 8011ee8:	4a25      	ldr	r2, [pc, #148]	@ (8011f80 <_tx_thread_relinquish+0xb8>)
 8011eea:	6013      	str	r3, [r2, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 8011eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ef0:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8011ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef4:	6a1b      	ldr	r3, [r3, #32]
 8011ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d009      	beq.n	8011f10 <_tx_thread_relinquish+0x48>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 8011efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efe:	6a1a      	ldr	r2, [r3, #32]
 8011f00:	4920      	ldr	r1, [pc, #128]	@ (8011f84 <_tx_thread_relinquish+0xbc>)
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 8011f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f0a:	6a1b      	ldr	r3, [r3, #32]
 8011f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8011f88 <_tx_thread_relinquish+0xc0>)
 8011f0e:	6013      	str	r3, [r2, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 8011f10:	4b1e      	ldr	r3, [pc, #120]	@ (8011f8c <_tx_thread_relinquish+0xc4>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	69fa      	ldr	r2, [r7, #28]
 8011f16:	429a      	cmp	r2, r3
 8011f18:	d906      	bls.n	8011f28 <_tx_thread_relinquish+0x60>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8011f8c <_tx_thread_relinquish+0xc4>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	4a19      	ldr	r2, [pc, #100]	@ (8011f84 <_tx_thread_relinquish+0xbc>)
 8011f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f24:	4a18      	ldr	r2, [pc, #96]	@ (8011f88 <_tx_thread_relinquish+0xc0>)
 8011f26:	6013      	str	r3, [r2, #0]
 8011f28:	6a3b      	ldr	r3, [r7, #32]
 8011f2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	f383 8810 	msr	PRIMASK, r3
}
 8011f32:	bf00      	nop

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 8011f34:	4b14      	ldr	r3, [pc, #80]	@ (8011f88 <_tx_thread_relinquish+0xc0>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d017      	beq.n	8011f6e <_tx_thread_relinquish+0xa6>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011f3e:	4b14      	ldr	r3, [pc, #80]	@ (8011f90 <_tx_thread_relinquish+0xc8>)
 8011f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f44:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f46:	f3ef 8305 	mrs	r3, IPSR
 8011f4a:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8011f4c:	68fb      	ldr	r3, [r7, #12]
    if (__get_ipsr_value() == 0)
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d10c      	bne.n	8011f6c <_tx_thread_relinquish+0xa4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011f52:	f3ef 8310 	mrs	r3, PRIMASK
 8011f56:	60bb      	str	r3, [r7, #8]
    return(posture);
 8011f58:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_interrupt_posture();
 8011f5a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8011f5c:	b662      	cpsie	i
}
 8011f5e:	bf00      	nop
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	f383 8810 	msr	PRIMASK, r3
}
 8011f6a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8011f6c:	bf00      	nop

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 8011f6e:	bf00      	nop
 8011f70:	372c      	adds	r7, #44	@ 0x2c
 8011f72:	46bd      	mov	sp, r7
 8011f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop
 8011f7c:	2000ae14 	.word	0x2000ae14
 8011f80:	2000b41c 	.word	0x2000b41c
 8011f84:	2000ae2c 	.word	0x2000ae2c
 8011f88:	2000ae18 	.word	0x2000ae18
 8011f8c:	2000ae28 	.word	0x2000ae28
 8011f90:	e000ed04 	.word	0xe000ed04

08011f94 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b08c      	sub	sp, #48	@ 0x30
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8011fa4:	61fb      	str	r3, [r7, #28]
    return(posture);
 8011fa6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8011fa8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011faa:	b672      	cpsid	i
    return(int_posture);
 8011fac:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011fae:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fb4:	2b03      	cmp	r3, #3
 8011fb6:	d12f      	bne.n	8012018 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011fb8:	f3ef 8305 	mrs	r3, IPSR
 8011fbc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011fbe:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011fc0:	4b21      	ldr	r3, [pc, #132]	@ (8012048 <_tx_thread_resume+0xb4>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	4313      	orrs	r3, r2
 8011fc6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8011fca:	d30d      	bcc.n	8011fe8 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011fcc:	4b1f      	ldr	r3, [pc, #124]	@ (801204c <_tx_thread_resume+0xb8>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8011fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d009      	beq.n	8011fec <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011fdc:	627b      	str	r3, [r7, #36]	@ 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8011fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011fe6:	e001      	b.n	8011fec <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8011fec:	4b18      	ldr	r3, [pc, #96]	@ (8012050 <_tx_thread_resume+0xbc>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	3301      	adds	r3, #1
 8011ff2:	4a17      	ldr	r2, [pc, #92]	@ (8012050 <_tx_thread_resume+0xbc>)
 8011ff4:	6013      	str	r3, [r2, #0]
 8011ff6:	6a3b      	ldr	r3, [r7, #32]
 8011ff8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	f383 8810 	msr	PRIMASK, r3
}
 8012000:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f9c0 	bl	8012388 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801200a:	2b00      	cmp	r3, #0
 801200c:	d002      	beq.n	8012014 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012012:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8012014:	2300      	movs	r3, #0
 8012016:	e012      	b.n	801203e <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801201c:	2b01      	cmp	r3, #1
 801201e:	d105      	bne.n	801202c <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2200      	movs	r2, #0
 8012024:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8012026:	2319      	movs	r3, #25
 8012028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801202a:	e001      	b.n	8012030 <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 801202c:	2312      	movs	r3, #18
 801202e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012030:	6a3b      	ldr	r3, [r7, #32]
 8012032:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f383 8810 	msr	PRIMASK, r3
}
 801203a:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 801203c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801203e:	4618      	mov	r0, r3
 8012040:	3730      	adds	r7, #48	@ 0x30
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	20000098 	.word	0x20000098
 801204c:	2000ae18 	.word	0x2000ae18
 8012050:	2000aeac 	.word	0x2000aeac

08012054 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b08c      	sub	sp, #48	@ 0x30
 8012058:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801205a:	4b33      	ldr	r3, [pc, #204]	@ (8012128 <_tx_thread_shell_entry+0xd4>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012060:	f3ef 8310 	mrs	r3, PRIMASK
 8012064:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012066:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012068:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801206a:	b672      	cpsid	i
    return(int_posture);
 801206c:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STARTED_EXTENSION(thread_ptr)

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Disable interrupts.  */
    TX_DISABLE
 801206e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Pickup the entry/exit application callback routine.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 8012070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8012076:	627b      	str	r3, [r7, #36]	@ 0x24
 8012078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801207a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	f383 8810 	msr	PRIMASK, r3
}
 8012082:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 8012084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012086:	2b00      	cmp	r3, #0
 8012088:	d003      	beq.n	8012092 <_tx_thread_shell_entry+0x3e>
    {

        /* Yes, notify application that this thread has been entered!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
 801208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801208c:	2100      	movs	r1, #0
 801208e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012090:	4798      	blx	r3
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8012092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012098:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801209a:	4610      	mov	r0, r2
 801209c:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801209e:	4b23      	ldr	r3, [pc, #140]	@ (801212c <_tx_thread_shell_entry+0xd8>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d003      	beq.n	80120ae <_tx_thread_shell_entry+0x5a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80120a6:	4b21      	ldr	r3, [pc, #132]	@ (801212c <_tx_thread_shell_entry+0xd8>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80120ac:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80120ae:	f3ef 8310 	mrs	r3, PRIMASK
 80120b2:	607b      	str	r3, [r7, #4]
    return(posture);
 80120b4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80120b6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80120b8:	b672      	cpsid	i
    return(int_posture);
 80120ba:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80120bc:	62bb      	str	r3, [r7, #40]	@ 0x28

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Pickup the entry/exit application callback routine again.  */
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
 80120be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80120c4:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80120c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120c8:	2201      	movs	r2, #1
 80120ca:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80120cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120ce:	2201      	movs	r2, #1
 80120d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80120d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120d4:	2200      	movs	r2, #0
 80120d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80120d8:	4b15      	ldr	r3, [pc, #84]	@ (8012130 <_tx_thread_shell_entry+0xdc>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	3301      	adds	r3, #1
 80120de:	4a14      	ldr	r2, [pc, #80]	@ (8012130 <_tx_thread_shell_entry+0xdc>)
 80120e0:	6013      	str	r3, [r2, #0]
 80120e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	f383 8810 	msr	PRIMASK, r3
}
 80120ec:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80120ee:	f3ef 8314 	mrs	r3, CONTROL
 80120f2:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80120f4:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80120f6:	623b      	str	r3, [r7, #32]
 80120f8:	6a3b      	ldr	r3, [r7, #32]
 80120fa:	f023 0304 	bic.w	r3, r3, #4
 80120fe:	623b      	str	r3, [r7, #32]
 8012100:	6a3b      	ldr	r3, [r7, #32]
 8012102:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	f383 8814 	msr	CONTROL, r3
}
 801210a:	bf00      	nop

#ifndef TX_DISABLE_NOTIFY_CALLBACKS

    /* Determine if an application callback routine is specified.  */
    if (entry_exit_notify != TX_NULL)
 801210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210e:	2b00      	cmp	r3, #0
 8012110:	d003      	beq.n	801211a <_tx_thread_shell_entry+0xc6>
    {

        /* Yes, notify application that this thread has exited!  */
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
 8012112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012114:	2101      	movs	r1, #1
 8012116:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012118:	4798      	blx	r3
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801211a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801211c:	f000 fa34 	bl	8012588 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8012120:	bf00      	nop
 8012122:	3730      	adds	r7, #48	@ 0x30
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}
 8012128:	2000ae14 	.word	0x2000ae14
 801212c:	2000aeb0 	.word	0x2000aeb0
 8012130:	2000aeac 	.word	0x2000aeac

08012134 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b08e      	sub	sp, #56	@ 0x38
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801213c:	f3ef 8310 	mrs	r3, PRIMASK
 8012140:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8012142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8012144:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8012146:	b672      	cpsid	i
    return(int_posture);
 8012148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801214a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801214c:	4b35      	ldr	r3, [pc, #212]	@ (8012224 <_tx_thread_sleep+0xf0>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8012152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012154:	2b00      	cmp	r3, #0
 8012156:	d108      	bne.n	801216a <_tx_thread_sleep+0x36>
 8012158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801215a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801215c:	6a3b      	ldr	r3, [r7, #32]
 801215e:	f383 8810 	msr	PRIMASK, r3
}
 8012162:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012164:	2313      	movs	r3, #19
 8012166:	637b      	str	r3, [r7, #52]	@ 0x34
 8012168:	e056      	b.n	8012218 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801216a:	f3ef 8305 	mrs	r3, IPSR
 801216e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8012170:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012172:	4b2d      	ldr	r3, [pc, #180]	@ (8012228 <_tx_thread_sleep+0xf4>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	4313      	orrs	r3, r2
 8012178:	2b00      	cmp	r3, #0
 801217a:	d008      	beq.n	801218e <_tx_thread_sleep+0x5a>
 801217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801217e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	f383 8810 	msr	PRIMASK, r3
}
 8012186:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012188:	2313      	movs	r3, #19
 801218a:	637b      	str	r3, [r7, #52]	@ 0x34
 801218c:	e044      	b.n	8012218 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012190:	4a26      	ldr	r2, [pc, #152]	@ (801222c <_tx_thread_sleep+0xf8>)
 8012192:	4293      	cmp	r3, r2
 8012194:	d108      	bne.n	80121a8 <_tx_thread_sleep+0x74>
 8012196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012198:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	f383 8810 	msr	PRIMASK, r3
}
 80121a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80121a2:	2313      	movs	r3, #19
 80121a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80121a6:	e037      	b.n	8012218 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d108      	bne.n	80121c0 <_tx_thread_sleep+0x8c>
 80121ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	f383 8810 	msr	PRIMASK, r3
}
 80121b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80121ba:	2300      	movs	r3, #0
 80121bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80121be:	e02b      	b.n	8012218 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80121c0:	4b1b      	ldr	r3, [pc, #108]	@ (8012230 <_tx_thread_sleep+0xfc>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d008      	beq.n	80121da <_tx_thread_sleep+0xa6>
 80121c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f383 8810 	msr	PRIMASK, r3
}
 80121d2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80121d4:	2313      	movs	r3, #19
 80121d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80121d8:	e01e      	b.n	8012218 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80121da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121dc:	2204      	movs	r2, #4
 80121de:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80121e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e2:	2201      	movs	r2, #1
 80121e4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80121e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e8:	2200      	movs	r2, #0
 80121ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 80121ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121f0:	687a      	ldr	r2, [r7, #4]
 80121f2:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80121f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012230 <_tx_thread_sleep+0xfc>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3301      	adds	r3, #1
 80121fa:	4a0d      	ldr	r2, [pc, #52]	@ (8012230 <_tx_thread_sleep+0xfc>)
 80121fc:	6013      	str	r3, [r2, #0]
 80121fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012200:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	f383 8810 	msr	PRIMASK, r3
}
 8012208:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801220a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801220c:	f000 f9bc 	bl	8012588 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8012210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012216:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8012218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801221a:	4618      	mov	r0, r3
 801221c:	3738      	adds	r7, #56	@ 0x38
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
 8012222:	bf00      	nop
 8012224:	2000ae14 	.word	0x2000ae14
 8012228:	20000098 	.word	0x20000098
 801222c:	2000af5c 	.word	0x2000af5c
 8012230:	2000aeac 	.word	0x2000aeac

08012234 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b08a      	sub	sp, #40	@ 0x28
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801223c:	f3ef 8310 	mrs	r3, PRIMASK
 8012240:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012242:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8012244:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012246:	b672      	cpsid	i
    return(int_posture);
 8012248:	697b      	ldr	r3, [r7, #20]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801224a:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 801224c:	4b2e      	ldr	r3, [pc, #184]	@ (8012308 <_tx_thread_suspend+0xd4>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012256:	2b00      	cmp	r3, #0
 8012258:	d130      	bne.n	80122bc <_tx_thread_suspend+0x88>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 801225a:	2300      	movs	r3, #0
 801225c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801225e:	f3ef 8305 	mrs	r3, IPSR
 8012262:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012264:	693a      	ldr	r2, [r7, #16]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8012266:	4b29      	ldr	r3, [pc, #164]	@ (801230c <_tx_thread_suspend+0xd8>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	4313      	orrs	r3, r2
 801226c:	2b00      	cmp	r3, #0
 801226e:	d109      	bne.n	8012284 <_tx_thread_suspend+0x50>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8012270:	69fa      	ldr	r2, [r7, #28]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	429a      	cmp	r2, r3
 8012276:	d105      	bne.n	8012284 <_tx_thread_suspend+0x50>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8012278:	4b25      	ldr	r3, [pc, #148]	@ (8012310 <_tx_thread_suspend+0xdc>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d001      	beq.n	8012284 <_tx_thread_suspend+0x50>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8012280:	2314      	movs	r3, #20
 8012282:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8012284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012286:	2b00      	cmp	r3, #0
 8012288:	d132      	bne.n	80122f0 <_tx_thread_suspend+0xbc>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2203      	movs	r2, #3
 801228e:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2201      	movs	r2, #1
 8012294:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2200      	movs	r2, #0
 801229a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801229c:	4b1c      	ldr	r3, [pc, #112]	@ (8012310 <_tx_thread_suspend+0xdc>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	3301      	adds	r3, #1
 80122a2:	4a1b      	ldr	r2, [pc, #108]	@ (8012310 <_tx_thread_suspend+0xdc>)
 80122a4:	6013      	str	r3, [r2, #0]
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	f383 8810 	msr	PRIMASK, r3
}
 80122b0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f000 f968 	bl	8012588 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 80122b8:	2300      	movs	r3, #0
 80122ba:	e020      	b.n	80122fe <_tx_thread_suspend+0xca>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d102      	bne.n	80122ca <_tx_thread_suspend+0x96>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 80122c4:	2314      	movs	r3, #20
 80122c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80122c8:	e012      	b.n	80122f0 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d102      	bne.n	80122d8 <_tx_thread_suspend+0xa4>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 80122d2:	2314      	movs	r3, #20
 80122d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80122d6:	e00b      	b.n	80122f0 <_tx_thread_suspend+0xbc>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122dc:	2b03      	cmp	r3, #3
 80122de:	d102      	bne.n	80122e6 <_tx_thread_suspend+0xb2>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 80122e0:	2300      	movs	r3, #0
 80122e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80122e4:	e004      	b.n	80122f0 <_tx_thread_suspend+0xbc>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	2201      	movs	r2, #1
 80122ea:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 80122ec:	2300      	movs	r3, #0
 80122ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80122f0:	6a3b      	ldr	r3, [r7, #32]
 80122f2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	f383 8810 	msr	PRIMASK, r3
}
 80122fa:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 80122fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3728      	adds	r7, #40	@ 0x28
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	2000ae14 	.word	0x2000ae14
 801230c:	20000098 	.word	0x20000098
 8012310:	2000aeac 	.word	0x2000aeac

08012314 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8012314:	b480      	push	{r7}
 8012316:	b089      	sub	sp, #36	@ 0x24
 8012318:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801231a:	4b17      	ldr	r3, [pc, #92]	@ (8012378 <_tx_thread_system_preempt_check+0x64>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d121      	bne.n	801236a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8012326:	4b15      	ldr	r3, [pc, #84]	@ (801237c <_tx_thread_system_preempt_check+0x68>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 801232c:	4b14      	ldr	r3, [pc, #80]	@ (8012380 <_tx_thread_system_preempt_check+0x6c>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8012332:	69ba      	ldr	r2, [r7, #24]
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	429a      	cmp	r2, r3
 8012338:	d017      	beq.n	801236a <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801233a:	4b12      	ldr	r3, [pc, #72]	@ (8012384 <_tx_thread_system_preempt_check+0x70>)
 801233c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012340:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012342:	f3ef 8305 	mrs	r3, IPSR
 8012346:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012348:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 801234a:	2b00      	cmp	r3, #0
 801234c:	d10c      	bne.n	8012368 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801234e:	f3ef 8310 	mrs	r3, PRIMASK
 8012352:	60fb      	str	r3, [r7, #12]
    return(posture);
 8012354:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_interrupt_posture();
 8012356:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012358:	b662      	cpsie	i
}
 801235a:	bf00      	nop
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f383 8810 	msr	PRIMASK, r3
}
 8012366:	bf00      	nop
}
 8012368:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 801236a:	bf00      	nop
 801236c:	3724      	adds	r7, #36	@ 0x24
 801236e:	46bd      	mov	sp, r7
 8012370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012374:	4770      	bx	lr
 8012376:	bf00      	nop
 8012378:	2000aeac 	.word	0x2000aeac
 801237c:	2000ae14 	.word	0x2000ae14
 8012380:	2000ae18 	.word	0x2000ae18
 8012384:	e000ed04 	.word	0xe000ed04

08012388 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b096      	sub	sp, #88	@ 0x58
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012390:	f3ef 8310 	mrs	r3, PRIMASK
 8012394:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8012396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8012398:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 801239a:	b672      	cpsid	i
    return(int_posture);
 801239c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801239e:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d005      	beq.n	80123b4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	334c      	adds	r3, #76	@ 0x4c
 80123ac:	4618      	mov	r0, r3
 80123ae:	f000 fd13 	bl	8012dd8 <_tx_timer_system_deactivate>
 80123b2:	e002      	b.n	80123ba <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2200      	movs	r2, #0
 80123b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80123ba:	4b6c      	ldr	r3, [pc, #432]	@ (801256c <_tx_thread_system_resume+0x1e4>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	3b01      	subs	r3, #1
 80123c0:	4a6a      	ldr	r2, [pc, #424]	@ (801256c <_tx_thread_system_resume+0x1e4>)
 80123c2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f040 8083 	bne.w	80124d4 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	f000 8097 	beq.w	8012506 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d172      	bne.n	80124c6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2200      	movs	r2, #0
 80123e4:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123ea:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80123ec:	4a60      	ldr	r2, [pc, #384]	@ (8012570 <_tx_thread_system_resume+0x1e8>)
 80123ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 80123f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d154      	bne.n	80124a6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80123fc:	495c      	ldr	r1, [pc, #368]	@ (8012570 <_tx_thread_system_resume+0x1e8>)
 80123fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	687a      	ldr	r2, [r7, #4]
 801240a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8012412:	2201      	movs	r2, #1
 8012414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012416:	fa02 f303 	lsl.w	r3, r2, r3
 801241a:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 801241c:	4b55      	ldr	r3, [pc, #340]	@ (8012574 <_tx_thread_system_resume+0x1ec>)
 801241e:	681a      	ldr	r2, [r3, #0]
 8012420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012422:	4313      	orrs	r3, r2
 8012424:	4a53      	ldr	r2, [pc, #332]	@ (8012574 <_tx_thread_system_resume+0x1ec>)
 8012426:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8012428:	4b53      	ldr	r3, [pc, #332]	@ (8012578 <_tx_thread_system_resume+0x1f0>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801242e:	429a      	cmp	r2, r3
 8012430:	d269      	bcs.n	8012506 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8012432:	4a51      	ldr	r2, [pc, #324]	@ (8012578 <_tx_thread_system_resume+0x1f0>)
 8012434:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012436:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8012438:	4b50      	ldr	r3, [pc, #320]	@ (801257c <_tx_thread_system_resume+0x1f4>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 801243e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012440:	2b00      	cmp	r3, #0
 8012442:	d103      	bne.n	801244c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8012444:	4a4d      	ldr	r2, [pc, #308]	@ (801257c <_tx_thread_system_resume+0x1f4>)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6013      	str	r3, [r2, #0]
 801244a:	e05c      	b.n	8012506 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 801244c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801244e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012450:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012452:	429a      	cmp	r2, r3
 8012454:	d257      	bcs.n	8012506 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8012456:	4a49      	ldr	r2, [pc, #292]	@ (801257c <_tx_thread_system_resume+0x1f4>)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6013      	str	r3, [r2, #0]
 801245c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801245e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012462:	f383 8810 	msr	PRIMASK, r3
}
 8012466:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012468:	4b40      	ldr	r3, [pc, #256]	@ (801256c <_tx_thread_system_resume+0x1e4>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 801246e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012470:	2b00      	cmp	r3, #0
 8012472:	d174      	bne.n	801255e <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012474:	4b42      	ldr	r3, [pc, #264]	@ (8012580 <_tx_thread_system_resume+0x1f8>)
 8012476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801247a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801247c:	f3ef 8305 	mrs	r3, IPSR
 8012480:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8012482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8012484:	2b00      	cmp	r3, #0
 8012486:	d10c      	bne.n	80124a2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012488:	f3ef 8310 	mrs	r3, PRIMASK
 801248c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 801248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8012490:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012492:	b662      	cpsie	i
}
 8012494:	bf00      	nop
 8012496:	6a3b      	ldr	r3, [r7, #32]
 8012498:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801249a:	69fb      	ldr	r3, [r7, #28]
 801249c:	f383 8810 	msr	PRIMASK, r3
}
 80124a0:	bf00      	nop
}
 80124a2:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80124a4:	e05b      	b.n	801255e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80124a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124aa:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80124ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80124b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80124bc:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80124c2:	621a      	str	r2, [r3, #32]
 80124c4:	e01f      	b.n	8012506 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2200      	movs	r2, #0
 80124ca:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2203      	movs	r2, #3
 80124d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80124d2:	e018      	b.n	8012506 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d014      	beq.n	8012506 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124e0:	2b02      	cmp	r3, #2
 80124e2:	d010      	beq.n	8012506 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d106      	bne.n	80124fa <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2200      	movs	r2, #0
 80124f0:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2200      	movs	r2, #0
 80124f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80124f8:	e005      	b.n	8012506 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2200      	movs	r2, #0
 80124fe:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2203      	movs	r2, #3
 8012504:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012506:	4b1f      	ldr	r3, [pc, #124]	@ (8012584 <_tx_thread_system_resume+0x1fc>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801250c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801250e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012510:	69bb      	ldr	r3, [r7, #24]
 8012512:	f383 8810 	msr	PRIMASK, r3
}
 8012516:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012518:	4b18      	ldr	r3, [pc, #96]	@ (801257c <_tx_thread_system_resume+0x1f4>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801251e:	429a      	cmp	r2, r3
 8012520:	d020      	beq.n	8012564 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012522:	4b12      	ldr	r3, [pc, #72]	@ (801256c <_tx_thread_system_resume+0x1e4>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8012528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801252a:	2b00      	cmp	r3, #0
 801252c:	d11a      	bne.n	8012564 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801252e:	4b14      	ldr	r3, [pc, #80]	@ (8012580 <_tx_thread_system_resume+0x1f8>)
 8012530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012534:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012536:	f3ef 8305 	mrs	r3, IPSR
 801253a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801253c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 801253e:	2b00      	cmp	r3, #0
 8012540:	d10f      	bne.n	8012562 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012542:	f3ef 8310 	mrs	r3, PRIMASK
 8012546:	613b      	str	r3, [r7, #16]
    return(posture);
 8012548:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 801254a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801254c:	b662      	cpsie	i
}
 801254e:	bf00      	nop
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	f383 8810 	msr	PRIMASK, r3
}
 801255a:	bf00      	nop
}
 801255c:	e001      	b.n	8012562 <_tx_thread_system_resume+0x1da>
                                return;
 801255e:	bf00      	nop
 8012560:	e000      	b.n	8012564 <_tx_thread_system_resume+0x1dc>
 8012562:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8012564:	3758      	adds	r7, #88	@ 0x58
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	2000aeac 	.word	0x2000aeac
 8012570:	2000ae2c 	.word	0x2000ae2c
 8012574:	2000ae24 	.word	0x2000ae24
 8012578:	2000ae28 	.word	0x2000ae28
 801257c:	2000ae18 	.word	0x2000ae18
 8012580:	e000ed04 	.word	0xe000ed04
 8012584:	2000ae14 	.word	0x2000ae14

08012588 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b09e      	sub	sp, #120	@ 0x78
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012590:	4b81      	ldr	r3, [pc, #516]	@ (8012798 <_tx_thread_system_suspend+0x210>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012596:	f3ef 8310 	mrs	r3, PRIMASK
 801259a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 801259c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 801259e:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80125a0:	b672      	cpsid	i
    return(int_posture);
 80125a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80125a4:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d112      	bne.n	80125d4 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80125b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80125b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d008      	beq.n	80125cc <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80125ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80125bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80125c0:	d004      	beq.n	80125cc <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	334c      	adds	r3, #76	@ 0x4c
 80125c6:	4618      	mov	r0, r3
 80125c8:	f000 fba4 	bl	8012d14 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	69db      	ldr	r3, [r3, #28]
 80125d0:	4a72      	ldr	r2, [pc, #456]	@ (801279c <_tx_thread_system_suspend+0x214>)
 80125d2:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80125d4:	4b72      	ldr	r3, [pc, #456]	@ (80127a0 <_tx_thread_system_suspend+0x218>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	3b01      	subs	r3, #1
 80125da:	4a71      	ldr	r2, [pc, #452]	@ (80127a0 <_tx_thread_system_suspend+0x218>)
 80125dc:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	f040 80a6 	bne.w	8012734 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2200      	movs	r2, #0
 80125ec:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125f2:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6a1b      	ldr	r3, [r3, #32]
 80125f8:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80125fa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d015      	beq.n	801262e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012606:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8012608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801260a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801260c:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 801260e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012610:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012612:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8012614:	4a63      	ldr	r2, [pc, #396]	@ (80127a4 <_tx_thread_system_suspend+0x21c>)
 8012616:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	429a      	cmp	r2, r3
 8012620:	d157      	bne.n	80126d2 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8012622:	4960      	ldr	r1, [pc, #384]	@ (80127a4 <_tx_thread_system_suspend+0x21c>)
 8012624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012626:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801262c:	e051      	b.n	80126d2 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801262e:	4a5d      	ldr	r2, [pc, #372]	@ (80127a4 <_tx_thread_system_suspend+0x21c>)
 8012630:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012632:	2100      	movs	r1, #0
 8012634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8012638:	2201      	movs	r2, #1
 801263a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801263c:	fa02 f303 	lsl.w	r3, r2, r3
 8012640:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8012642:	4b59      	ldr	r3, [pc, #356]	@ (80127a8 <_tx_thread_system_suspend+0x220>)
 8012644:	681a      	ldr	r2, [r3, #0]
 8012646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012648:	43db      	mvns	r3, r3
 801264a:	4013      	ands	r3, r2
 801264c:	4a56      	ldr	r2, [pc, #344]	@ (80127a8 <_tx_thread_system_suspend+0x220>)
 801264e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8012650:	2300      	movs	r3, #0
 8012652:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8012654:	4b54      	ldr	r3, [pc, #336]	@ (80127a8 <_tx_thread_system_suspend+0x220>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 801265a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801265c:	2b00      	cmp	r3, #0
 801265e:	d12b      	bne.n	80126b8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012660:	4b52      	ldr	r3, [pc, #328]	@ (80127ac <_tx_thread_system_suspend+0x224>)
 8012662:	2220      	movs	r2, #32
 8012664:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8012666:	4b52      	ldr	r3, [pc, #328]	@ (80127b0 <_tx_thread_system_suspend+0x228>)
 8012668:	2200      	movs	r2, #0
 801266a:	601a      	str	r2, [r3, #0]
 801266c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801266e:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012672:	f383 8810 	msr	PRIMASK, r3
}
 8012676:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012678:	4b49      	ldr	r3, [pc, #292]	@ (80127a0 <_tx_thread_system_suspend+0x218>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 801267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012680:	2b00      	cmp	r3, #0
 8012682:	f040 8081 	bne.w	8012788 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012686:	4b4b      	ldr	r3, [pc, #300]	@ (80127b4 <_tx_thread_system_suspend+0x22c>)
 8012688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801268c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801268e:	f3ef 8305 	mrs	r3, IPSR
 8012692:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8012694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10c      	bne.n	80126b4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801269a:	f3ef 8310 	mrs	r3, PRIMASK
 801269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 80126a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 80126a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80126a4:	b662      	cpsie	i
}
 80126a6:	bf00      	nop
 80126a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126aa:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126ae:	f383 8810 	msr	PRIMASK, r3
}
 80126b2:	bf00      	nop
}
 80126b4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80126b6:	e067      	b.n	8012788 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80126b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80126ba:	fa93 f3a3 	rbit	r3, r3
 80126be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80126c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80126c2:	fab3 f383 	clz	r3, r3
 80126c6:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80126c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80126ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80126cc:	4413      	add	r3, r2
 80126ce:	4a37      	ldr	r2, [pc, #220]	@ (80127ac <_tx_thread_system_suspend+0x224>)
 80126d0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80126d2:	4b37      	ldr	r3, [pc, #220]	@ (80127b0 <_tx_thread_system_suspend+0x228>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	429a      	cmp	r2, r3
 80126da:	d12b      	bne.n	8012734 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80126dc:	4b33      	ldr	r3, [pc, #204]	@ (80127ac <_tx_thread_system_suspend+0x224>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a30      	ldr	r2, [pc, #192]	@ (80127a4 <_tx_thread_system_suspend+0x21c>)
 80126e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126e6:	4a32      	ldr	r2, [pc, #200]	@ (80127b0 <_tx_thread_system_suspend+0x228>)
 80126e8:	6013      	str	r3, [r2, #0]
 80126ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80126ec:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80126ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f0:	f383 8810 	msr	PRIMASK, r3
}
 80126f4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80126f6:	4b2a      	ldr	r3, [pc, #168]	@ (80127a0 <_tx_thread_system_suspend+0x218>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 80126fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d144      	bne.n	801278c <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012702:	4b2c      	ldr	r3, [pc, #176]	@ (80127b4 <_tx_thread_system_suspend+0x22c>)
 8012704:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012708:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801270a:	f3ef 8305 	mrs	r3, IPSR
 801270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8012710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 8012712:	2b00      	cmp	r3, #0
 8012714:	d10c      	bne.n	8012730 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012716:	f3ef 8310 	mrs	r3, PRIMASK
 801271a:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 801271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 801271e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012720:	b662      	cpsie	i
}
 8012722:	bf00      	nop
 8012724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012726:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012728:	6a3b      	ldr	r3, [r7, #32]
 801272a:	f383 8810 	msr	PRIMASK, r3
}
 801272e:	bf00      	nop
}
 8012730:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8012732:	e02b      	b.n	801278c <_tx_thread_system_suspend+0x204>
 8012734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012736:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	f383 8810 	msr	PRIMASK, r3
}
 801273e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012740:	4b1b      	ldr	r3, [pc, #108]	@ (80127b0 <_tx_thread_system_suspend+0x228>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8012746:	429a      	cmp	r2, r3
 8012748:	d022      	beq.n	8012790 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801274a:	4b15      	ldr	r3, [pc, #84]	@ (80127a0 <_tx_thread_system_suspend+0x218>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8012750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012752:	2b00      	cmp	r3, #0
 8012754:	d11c      	bne.n	8012790 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012756:	4b17      	ldr	r3, [pc, #92]	@ (80127b4 <_tx_thread_system_suspend+0x22c>)
 8012758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801275c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801275e:	f3ef 8305 	mrs	r3, IPSR
 8012762:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012764:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8012766:	2b00      	cmp	r3, #0
 8012768:	d10c      	bne.n	8012784 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801276a:	f3ef 8310 	mrs	r3, PRIMASK
 801276e:	617b      	str	r3, [r7, #20]
    return(posture);
 8012770:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8012772:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8012774:	b662      	cpsie	i
}
 8012776:	bf00      	nop
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	f383 8810 	msr	PRIMASK, r3
}
 8012782:	bf00      	nop
}
 8012784:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8012786:	e003      	b.n	8012790 <_tx_thread_system_suspend+0x208>
                return;
 8012788:	bf00      	nop
 801278a:	e002      	b.n	8012792 <_tx_thread_system_suspend+0x20a>
            return;
 801278c:	bf00      	nop
 801278e:	e000      	b.n	8012792 <_tx_thread_system_suspend+0x20a>
    return;
 8012790:	bf00      	nop
}
 8012792:	3778      	adds	r7, #120	@ 0x78
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	2000ae14 	.word	0x2000ae14
 801279c:	2000b41c 	.word	0x2000b41c
 80127a0:	2000aeac 	.word	0x2000aeac
 80127a4:	2000ae2c 	.word	0x2000ae2c
 80127a8:	2000ae24 	.word	0x2000ae24
 80127ac:	2000ae28 	.word	0x2000ae28
 80127b0:	2000ae18 	.word	0x2000ae18
 80127b4:	e000ed04 	.word	0xe000ed04

080127b8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80127b8:	b480      	push	{r7}
 80127ba:	b087      	sub	sp, #28
 80127bc:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80127be:	4b21      	ldr	r3, [pc, #132]	@ (8012844 <_tx_thread_time_slice+0x8c>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80127c4:	f3ef 8310 	mrs	r3, PRIMASK
 80127c8:	60fb      	str	r3, [r7, #12]
    return(posture);
 80127ca:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 80127cc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 80127ce:	b672      	cpsid	i
    return(int_posture);
 80127d0:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 80127d2:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80127d4:	4b1c      	ldr	r3, [pc, #112]	@ (8012848 <_tx_thread_time_slice+0x90>)
 80127d6:	2200      	movs	r2, #0
 80127d8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d024      	beq.n	801282a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d120      	bne.n	801282a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	69da      	ldr	r2, [r3, #28]
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	699b      	ldr	r3, [r3, #24]
 80127f4:	4a15      	ldr	r2, [pc, #84]	@ (801284c <_tx_thread_time_slice+0x94>)
 80127f6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	6a1b      	ldr	r3, [r3, #32]
 80127fc:	697a      	ldr	r2, [r7, #20]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d013      	beq.n	801282a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012806:	697b      	ldr	r3, [r7, #20]
 8012808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801280a:	429a      	cmp	r2, r3
 801280c:	d10d      	bne.n	801282a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012812:	697a      	ldr	r2, [r7, #20]
 8012814:	6a12      	ldr	r2, [r2, #32]
 8012816:	490e      	ldr	r1, [pc, #56]	@ (8012850 <_tx_thread_time_slice+0x98>)
 8012818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 801281c:	4b0d      	ldr	r3, [pc, #52]	@ (8012854 <_tx_thread_time_slice+0x9c>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4a0b      	ldr	r2, [pc, #44]	@ (8012850 <_tx_thread_time_slice+0x98>)
 8012822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012826:	4a0c      	ldr	r2, [pc, #48]	@ (8012858 <_tx_thread_time_slice+0xa0>)
 8012828:	6013      	str	r3, [r2, #0]
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f383 8810 	msr	PRIMASK, r3
}
 8012834:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8012836:	bf00      	nop
 8012838:	371c      	adds	r7, #28
 801283a:	46bd      	mov	sp, r7
 801283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012840:	4770      	bx	lr
 8012842:	bf00      	nop
 8012844:	2000ae14 	.word	0x2000ae14
 8012848:	2000aebc 	.word	0x2000aebc
 801284c:	2000b41c 	.word	0x2000b41c
 8012850:	2000ae2c 	.word	0x2000ae2c
 8012854:	2000ae28 	.word	0x2000ae28
 8012858:	2000ae18 	.word	0x2000ae18

0801285c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b08a      	sub	sp, #40	@ 0x28
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012868:	f3ef 8310 	mrs	r3, PRIMASK
 801286c:	617b      	str	r3, [r7, #20]
    return(posture);
 801286e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8012870:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012872:	b672      	cpsid	i
    return(int_posture);
 8012874:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8012876:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8012878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801287c:	2b04      	cmp	r3, #4
 801287e:	d10e      	bne.n	801289e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8012880:	4b13      	ldr	r3, [pc, #76]	@ (80128d0 <_tx_thread_timeout+0x74>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	3301      	adds	r3, #1
 8012886:	4a12      	ldr	r2, [pc, #72]	@ (80128d0 <_tx_thread_timeout+0x74>)
 8012888:	6013      	str	r3, [r2, #0]
 801288a:	6a3b      	ldr	r3, [r7, #32]
 801288c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	f383 8810 	msr	PRIMASK, r3
}
 8012894:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012896:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012898:	f7ff fd76 	bl	8012388 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801289c:	e013      	b.n	80128c6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80128a2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80128a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80128aa:	61bb      	str	r3, [r7, #24]
 80128ac:	6a3b      	ldr	r3, [r7, #32]
 80128ae:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	f383 8810 	msr	PRIMASK, r3
}
 80128b6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d003      	beq.n	80128c6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	69b9      	ldr	r1, [r7, #24]
 80128c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80128c4:	4798      	blx	r3
}
 80128c6:	bf00      	nop
 80128c8:	3728      	adds	r7, #40	@ 0x28
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}
 80128ce:	bf00      	nop
 80128d0:	2000aeac 	.word	0x2000aeac

080128d4 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b088      	sub	sp, #32
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80128dc:	f3ef 8310 	mrs	r3, PRIMASK
 80128e0:	617b      	str	r3, [r7, #20]
    return(posture);
 80128e2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80128e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80128e6:	b672      	cpsid	i
    return(int_posture);
 80128e8:	693b      	ldr	r3, [r7, #16]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80128ea:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6a1b      	ldr	r3, [r3, #32]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d002      	beq.n	80128fa <_tx_timer_activate+0x26>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 80128f4:	2317      	movs	r3, #23
 80128f6:	61fb      	str	r3, [r7, #28]
 80128f8:	e00d      	b.n	8012916 <_tx_timer_activate+0x42>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	689b      	ldr	r3, [r3, #8]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d102      	bne.n	8012908 <_tx_timer_activate+0x34>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 8012902:	2317      	movs	r3, #23
 8012904:	61fb      	str	r3, [r7, #28]
 8012906:	e006      	b.n	8012916 <_tx_timer_activate+0x42>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	3308      	adds	r3, #8
 801290c:	4618      	mov	r0, r3
 801290e:	f000 fa01 	bl	8012d14 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 8012912:	2300      	movs	r3, #0
 8012914:	61fb      	str	r3, [r7, #28]
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	f383 8810 	msr	PRIMASK, r3
}
 8012920:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8012922:	69fb      	ldr	r3, [r7, #28]
}
 8012924:	4618      	mov	r0, r3
 8012926:	3720      	adds	r7, #32
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b08a      	sub	sp, #40	@ 0x28
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	607a      	str	r2, [r7, #4]
 8012938:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 801293a:	222c      	movs	r2, #44	@ 0x2c
 801293c:	2100      	movs	r1, #0
 801293e:	68f8      	ldr	r0, [r7, #12]
 8012940:	f001 fd1a 	bl	8014378 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	68ba      	ldr	r2, [r7, #8]
 8012948:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801294e:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012954:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	683a      	ldr	r2, [r7, #0]
 8012960:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012962:	f3ef 8310 	mrs	r3, PRIMASK
 8012966:	61bb      	str	r3, [r7, #24]
    return(posture);
 8012968:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801296a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801296c:	b672      	cpsid	i
    return(int_posture);
 801296e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8012970:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	4a1c      	ldr	r2, [pc, #112]	@ (80129e8 <_tx_timer_create+0xbc>)
 8012976:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8012978:	4b1c      	ldr	r3, [pc, #112]	@ (80129ec <_tx_timer_create+0xc0>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d109      	bne.n	8012994 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8012980:	4a1b      	ldr	r2, [pc, #108]	@ (80129f0 <_tx_timer_create+0xc4>)
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	625a      	str	r2, [r3, #36]	@ 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	68fa      	ldr	r2, [r7, #12]
 8012990:	629a      	str	r2, [r3, #40]	@ 0x28
 8012992:	e011      	b.n	80129b8 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8012994:	4b16      	ldr	r3, [pc, #88]	@ (80129f0 <_tx_timer_create+0xc4>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801299a:	6a3b      	ldr	r3, [r7, #32]
 801299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801299e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 80129a0:	6a3b      	ldr	r3, [r7, #32]
 80129a2:	68fa      	ldr	r2, [r7, #12]
 80129a4:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	68fa      	ldr	r2, [r7, #12]
 80129aa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	69fa      	ldr	r2, [r7, #28]
 80129b0:	629a      	str	r2, [r3, #40]	@ 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	6a3a      	ldr	r2, [r7, #32]
 80129b6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 80129b8:	4b0c      	ldr	r3, [pc, #48]	@ (80129ec <_tx_timer_create+0xc0>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	3301      	adds	r3, #1
 80129be:	4a0b      	ldr	r2, [pc, #44]	@ (80129ec <_tx_timer_create+0xc0>)
 80129c0:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 80129c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d104      	bne.n	80129d2 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	3308      	adds	r3, #8
 80129cc:	4618      	mov	r0, r3
 80129ce:	f000 f9a1 	bl	8012d14 <_tx_timer_system_activate>
 80129d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	f383 8810 	msr	PRIMASK, r3
}
 80129dc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80129de:	2300      	movs	r3, #0
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3728      	adds	r7, #40	@ 0x28
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	4154494d 	.word	0x4154494d
 80129ec:	2000af54 	.word	0x2000af54
 80129f0:	2000af50 	.word	0x2000af50

080129f4 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b08d      	sub	sp, #52	@ 0x34
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;


    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	3308      	adds	r3, #8
 8012a00:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012a02:	f3ef 8310 	mrs	r3, PRIMASK
 8012a06:	613b      	str	r3, [r7, #16]
    return(posture);
 8012a08:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8012a0a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012a0c:	b672      	cpsid	i
    return(int_posture);
 8012a0e:	68fb      	ldr	r3, [r7, #12]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 8012a10:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 8012a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a14:	699b      	ldr	r3, [r3, #24]
 8012a16:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 8012a18:	69fb      	ldr	r3, [r7, #28]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d07f      	beq.n	8012b1e <_tx_timer_deactivate+0x12a>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 8012a22:	4b45      	ldr	r3, [pc, #276]	@ (8012b38 <_tx_timer_deactivate+0x144>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	69fa      	ldr	r2, [r7, #28]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d306      	bcc.n	8012a3a <_tx_timer_deactivate+0x46>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8012a2c:	4b43      	ldr	r3, [pc, #268]	@ (8012b3c <_tx_timer_deactivate+0x148>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	69fa      	ldr	r2, [r7, #28]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d201      	bcs.n	8012a3a <_tx_timer_deactivate+0x46>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 8012a36:	2301      	movs	r3, #1
 8012a38:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 8012a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d12e      	bne.n	8012a9e <_tx_timer_deactivate+0xaa>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 8012a40:	4b3f      	ldr	r3, [pc, #252]	@ (8012b40 <_tx_timer_deactivate+0x14c>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	69fa      	ldr	r2, [r7, #28]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d307      	bcc.n	8012a5a <_tx_timer_deactivate+0x66>
            {

                /* Calculate ticks left to expiration - just the difference between this
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 8012a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8012b40 <_tx_timer_deactivate+0x14c>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	69fa      	ldr	r2, [r7, #28]
 8012a50:	1ad3      	subs	r3, r2, r3
 8012a52:	109b      	asrs	r3, r3, #2
 8012a54:	3301      	adds	r3, #1
 8012a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012a58:	e010      	b.n	8012a7c <_tx_timer_deactivate+0x88>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 8012a5a:	4b37      	ldr	r3, [pc, #220]	@ (8012b38 <_tx_timer_deactivate+0x144>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	69fa      	ldr	r2, [r7, #28]
 8012a60:	1ad3      	subs	r3, r2, r3
 8012a62:	109b      	asrs	r3, r3, #2
 8012a64:	62fb      	str	r3, [r7, #44]	@ 0x2c

                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 8012a66:	4b35      	ldr	r3, [pc, #212]	@ (8012b3c <_tx_timer_deactivate+0x148>)
 8012a68:	681a      	ldr	r2, [r3, #0]
 8012a6a:	4b35      	ldr	r3, [pc, #212]	@ (8012b40 <_tx_timer_deactivate+0x14c>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	109b      	asrs	r3, r3, #2
 8012a72:	461a      	mov	r2, r3
 8012a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a76:	4413      	add	r3, r2
 8012a78:	3301      	adds	r3, #1
 8012a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	2b20      	cmp	r3, #32
 8012a82:	d908      	bls.n	8012a96 <_tx_timer_deactivate+0xa2>
            {

                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 8012a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a86:	681a      	ldr	r2, [r3, #0]
 8012a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a8a:	4413      	add	r3, r2
 8012a8c:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =
 8012a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a92:	601a      	str	r2, [r3, #0]
 8012a94:	e01c      	b.n	8012ad0 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 8012a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012a9a:	601a      	str	r2, [r3, #0]
 8012a9c:	e018      	b.n	8012ad0 <_tx_timer_deactivate+0xdc>
        }
        else
        {

            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 8012a9e:	4b29      	ldr	r3, [pc, #164]	@ (8012b44 <_tx_timer_deactivate+0x150>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d00f      	beq.n	8012ac8 <_tx_timer_deactivate+0xd4>
            {

                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	2b20      	cmp	r3, #32
 8012aae:	d906      	bls.n	8012abe <_tx_timer_deactivate+0xca>
                {

                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aba:	601a      	str	r2, [r3, #0]
 8012abc:	e008      	b.n	8012ad0 <_tx_timer_deactivate+0xdc>
                }
                else
                {

                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 8012abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac0:	685a      	ldr	r2, [r3, #4]
 8012ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac4:	601a      	str	r2, [r3, #0]
 8012ac6:	e003      	b.n	8012ad0 <_tx_timer_deactivate+0xdc>
            }
            else
            {

                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aca:	685a      	ldr	r2, [r3, #4]
 8012acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ace:	601a      	str	r2, [r3, #0]
            }
        }

        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 8012ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad2:	691b      	ldr	r3, [r3, #16]
 8012ad4:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 8012ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ad8:	69bb      	ldr	r3, [r7, #24]
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d108      	bne.n	8012af0 <_tx_timer_deactivate+0xfc>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ae4:	429a      	cmp	r2, r3
 8012ae6:	d117      	bne.n	8012b18 <_tx_timer_deactivate+0x124>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	2200      	movs	r2, #0
 8012aec:	601a      	str	r2, [r3, #0]
 8012aee:	e013      	b.n	8012b18 <_tx_timer_deactivate+0x124>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 8012af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012af2:	695b      	ldr	r3, [r3, #20]
 8012af4:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	697a      	ldr	r2, [r7, #20]
 8012afa:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	69ba      	ldr	r2, [r7, #24]
 8012b00:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 8012b02:	69fb      	ldr	r3, [r7, #28]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d105      	bne.n	8012b18 <_tx_timer_deactivate+0x124>
            {

                /* Update the next timer in the list with the list head
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	69fa      	ldr	r2, [r7, #28]
 8012b10:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8012b12:	69fb      	ldr	r3, [r7, #28]
 8012b14:	69ba      	ldr	r2, [r7, #24]
 8012b16:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8012b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	619a      	str	r2, [r3, #24]
 8012b1e:	6a3b      	ldr	r3, [r7, #32]
 8012b20:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	f383 8810 	msr	PRIMASK, r3
}
 8012b28:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012b2a:	2300      	movs	r3, #0
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3734      	adds	r7, #52	@ 0x34
 8012b30:	46bd      	mov	sp, r7
 8012b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b36:	4770      	bx	lr
 8012b38:	2000af40 	.word	0x2000af40
 8012b3c:	2000af44 	.word	0x2000af44
 8012b40:	2000af48 	.word	0x2000af48
 8012b44:	2000af58 	.word	0x2000af58

08012b48 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b088      	sub	sp, #32
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012b50:	f3ef 8310 	mrs	r3, PRIMASK
 8012b54:	613b      	str	r3, [r7, #16]
    return(posture);
 8012b56:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8012b58:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012b5a:	b672      	cpsid	i
    return(int_posture);
 8012b5c:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 8012b5e:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6a1b      	ldr	r3, [r3, #32]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d004      	beq.n	8012b72 <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	3308      	adds	r3, #8
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f000 f933 	bl	8012dd8 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2200      	movs	r2, #0
 8012b76:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 8012b78:	4b15      	ldr	r3, [pc, #84]	@ (8012bd0 <_tx_timer_delete+0x88>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	3b01      	subs	r3, #1
 8012b7e:	4a14      	ldr	r2, [pc, #80]	@ (8012bd0 <_tx_timer_delete+0x88>)
 8012b80:	6013      	str	r3, [r2, #0]

    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8012b82:	4b13      	ldr	r3, [pc, #76]	@ (8012bd0 <_tx_timer_delete+0x88>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d103      	bne.n	8012b92 <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 8012b8a:	4b12      	ldr	r3, [pc, #72]	@ (8012bd4 <_tx_timer_delete+0x8c>)
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	601a      	str	r2, [r3, #0]
 8012b90:	e013      	b.n	8012bba <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b96:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b9c:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 8012b9e:	69bb      	ldr	r3, [r7, #24]
 8012ba0:	697a      	ldr	r2, [r7, #20]
 8012ba2:	629a      	str	r2, [r3, #40]	@ 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 8012ba4:	697b      	ldr	r3, [r7, #20]
 8012ba6:	69ba      	ldr	r2, [r7, #24]
 8012ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 8012baa:	4b0a      	ldr	r3, [pc, #40]	@ (8012bd4 <_tx_timer_delete+0x8c>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	687a      	ldr	r2, [r7, #4]
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d102      	bne.n	8012bba <_tx_timer_delete+0x72>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 8012bb4:	4a07      	ldr	r2, [pc, #28]	@ (8012bd4 <_tx_timer_delete+0x8c>)
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	6013      	str	r3, [r2, #0]
 8012bba:	69fb      	ldr	r3, [r7, #28]
 8012bbc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	f383 8810 	msr	PRIMASK, r3
}
 8012bc4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012bc6:	2300      	movs	r3, #0
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3720      	adds	r7, #32
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	2000af54 	.word	0x2000af54
 8012bd4:	2000af50 	.word	0x2000af50

08012bd8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b084      	sub	sp, #16
 8012bdc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012bde:	f3ef 8310 	mrs	r3, PRIMASK
 8012be2:	607b      	str	r3, [r7, #4]
    return(posture);
 8012be4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8012be6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012be8:	b672      	cpsid	i
    return(int_posture);
 8012bea:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8012bec:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8012bee:	4b09      	ldr	r3, [pc, #36]	@ (8012c14 <_tx_timer_expiration_process+0x3c>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	4a07      	ldr	r2, [pc, #28]	@ (8012c14 <_tx_timer_expiration_process+0x3c>)
 8012bf6:	6013      	str	r3, [r2, #0]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	f383 8810 	msr	PRIMASK, r3
}
 8012c02:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8012c04:	4804      	ldr	r0, [pc, #16]	@ (8012c18 <_tx_timer_expiration_process+0x40>)
 8012c06:	f7ff fbbf 	bl	8012388 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012c0a:	bf00      	nop
 8012c0c:	3710      	adds	r7, #16
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	2000aeac 	.word	0x2000aeac
 8012c18:	2000af5c 	.word	0x2000af5c

08012c1c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8012c1c:	b590      	push	{r4, r7, lr}
 8012c1e:	b089      	sub	sp, #36	@ 0x24
 8012c20:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8012c22:	4b28      	ldr	r3, [pc, #160]	@ (8012cc4 <_tx_timer_initialize+0xa8>)
 8012c24:	2200      	movs	r2, #0
 8012c26:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8012c28:	4b27      	ldr	r3, [pc, #156]	@ (8012cc8 <_tx_timer_initialize+0xac>)
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012c2e:	4b27      	ldr	r3, [pc, #156]	@ (8012ccc <_tx_timer_initialize+0xb0>)
 8012c30:	2200      	movs	r2, #0
 8012c32:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8012c34:	4b26      	ldr	r3, [pc, #152]	@ (8012cd0 <_tx_timer_initialize+0xb4>)
 8012c36:	2200      	movs	r2, #0
 8012c38:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8012c3a:	4b26      	ldr	r3, [pc, #152]	@ (8012cd4 <_tx_timer_initialize+0xb8>)
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8012c40:	2280      	movs	r2, #128	@ 0x80
 8012c42:	2100      	movs	r1, #0
 8012c44:	4824      	ldr	r0, [pc, #144]	@ (8012cd8 <_tx_timer_initialize+0xbc>)
 8012c46:	f001 fb97 	bl	8014378 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8012c4a:	4b24      	ldr	r3, [pc, #144]	@ (8012cdc <_tx_timer_initialize+0xc0>)
 8012c4c:	4a22      	ldr	r2, [pc, #136]	@ (8012cd8 <_tx_timer_initialize+0xbc>)
 8012c4e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8012c50:	4b23      	ldr	r3, [pc, #140]	@ (8012ce0 <_tx_timer_initialize+0xc4>)
 8012c52:	4a21      	ldr	r2, [pc, #132]	@ (8012cd8 <_tx_timer_initialize+0xbc>)
 8012c54:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8012c56:	4b23      	ldr	r3, [pc, #140]	@ (8012ce4 <_tx_timer_initialize+0xc8>)
 8012c58:	4a23      	ldr	r2, [pc, #140]	@ (8012ce8 <_tx_timer_initialize+0xcc>)
 8012c5a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8012c5c:	4b21      	ldr	r3, [pc, #132]	@ (8012ce4 <_tx_timer_initialize+0xc8>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	3304      	adds	r3, #4
 8012c62:	4a20      	ldr	r2, [pc, #128]	@ (8012ce4 <_tx_timer_initialize+0xc8>)
 8012c64:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8012c66:	4b21      	ldr	r3, [pc, #132]	@ (8012cec <_tx_timer_initialize+0xd0>)
 8012c68:	4a21      	ldr	r2, [pc, #132]	@ (8012cf0 <_tx_timer_initialize+0xd4>)
 8012c6a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8012c6c:	4b21      	ldr	r3, [pc, #132]	@ (8012cf4 <_tx_timer_initialize+0xd8>)
 8012c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012c72:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8012c74:	4b20      	ldr	r3, [pc, #128]	@ (8012cf8 <_tx_timer_initialize+0xdc>)
 8012c76:	2200      	movs	r2, #0
 8012c78:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8012c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8012cec <_tx_timer_initialize+0xd0>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8012cf4 <_tx_timer_initialize+0xd8>)
 8012c80:	6812      	ldr	r2, [r2, #0]
 8012c82:	491d      	ldr	r1, [pc, #116]	@ (8012cf8 <_tx_timer_initialize+0xdc>)
 8012c84:	6809      	ldr	r1, [r1, #0]
 8012c86:	481c      	ldr	r0, [pc, #112]	@ (8012cf8 <_tx_timer_initialize+0xdc>)
 8012c88:	6800      	ldr	r0, [r0, #0]
 8012c8a:	2400      	movs	r4, #0
 8012c8c:	9405      	str	r4, [sp, #20]
 8012c8e:	2400      	movs	r4, #0
 8012c90:	9404      	str	r4, [sp, #16]
 8012c92:	9003      	str	r0, [sp, #12]
 8012c94:	9102      	str	r1, [sp, #8]
 8012c96:	9201      	str	r2, [sp, #4]
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	4b18      	ldr	r3, [pc, #96]	@ (8012cfc <_tx_timer_initialize+0xe0>)
 8012c9c:	4a18      	ldr	r2, [pc, #96]	@ (8012d00 <_tx_timer_initialize+0xe4>)
 8012c9e:	4919      	ldr	r1, [pc, #100]	@ (8012d04 <_tx_timer_initialize+0xe8>)
 8012ca0:	4819      	ldr	r0, [pc, #100]	@ (8012d08 <_tx_timer_initialize+0xec>)
 8012ca2:	f7fe fef1 	bl	8011a88 <_tx_thread_create>
 8012ca6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d1e5      	bne.n	8012c7a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8012cae:	4b17      	ldr	r3, [pc, #92]	@ (8012d0c <_tx_timer_initialize+0xf0>)
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8012cb4:	4b16      	ldr	r3, [pc, #88]	@ (8012d10 <_tx_timer_initialize+0xf4>)
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8012cba:	bf00      	nop
 8012cbc:	370c      	adds	r7, #12
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd90      	pop	{r4, r7, pc}
 8012cc2:	bf00      	nop
 8012cc4:	2000aeb8 	.word	0x2000aeb8
 8012cc8:	2000b41c 	.word	0x2000b41c
 8012ccc:	2000aebc 	.word	0x2000aebc
 8012cd0:	2000af4c 	.word	0x2000af4c
 8012cd4:	2000af58 	.word	0x2000af58
 8012cd8:	2000aec0 	.word	0x2000aec0
 8012cdc:	2000af40 	.word	0x2000af40
 8012ce0:	2000af48 	.word	0x2000af48
 8012ce4:	2000af44 	.word	0x2000af44
 8012ce8:	2000af3c 	.word	0x2000af3c
 8012cec:	2000b010 	.word	0x2000b010
 8012cf0:	2000b01c 	.word	0x2000b01c
 8012cf4:	2000b014 	.word	0x2000b014
 8012cf8:	2000b018 	.word	0x2000b018
 8012cfc:	4154494d 	.word	0x4154494d
 8012d00:	08012e49 	.word	0x08012e49
 8012d04:	0801554c 	.word	0x0801554c
 8012d08:	2000af5c 	.word	0x2000af5c
 8012d0c:	2000af50 	.word	0x2000af50
 8012d10:	2000af54 	.word	0x2000af54

08012d14 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012d14:	b480      	push	{r7}
 8012d16:	b089      	sub	sp, #36	@ 0x24
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d04a      	beq.n	8012dbe <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8012d28:	697b      	ldr	r3, [r7, #20]
 8012d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012d2e:	d046      	beq.n	8012dbe <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	699b      	ldr	r3, [r3, #24]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d142      	bne.n	8012dbe <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	2b20      	cmp	r3, #32
 8012d3c:	d902      	bls.n	8012d44 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8012d3e:	231f      	movs	r3, #31
 8012d40:	61bb      	str	r3, [r7, #24]
 8012d42:	e002      	b.n	8012d4a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	3b01      	subs	r3, #1
 8012d48:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8012d4a:	4b20      	ldr	r3, [pc, #128]	@ (8012dcc <_tx_timer_system_activate+0xb8>)
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	69bb      	ldr	r3, [r7, #24]
 8012d50:	009b      	lsls	r3, r3, #2
 8012d52:	4413      	add	r3, r2
 8012d54:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8012d56:	4b1e      	ldr	r3, [pc, #120]	@ (8012dd0 <_tx_timer_system_activate+0xbc>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	69fa      	ldr	r2, [r7, #28]
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d30b      	bcc.n	8012d78 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8012d60:	4b1b      	ldr	r3, [pc, #108]	@ (8012dd0 <_tx_timer_system_activate+0xbc>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	69fa      	ldr	r2, [r7, #28]
 8012d66:	1ad3      	subs	r3, r2, r3
 8012d68:	109b      	asrs	r3, r3, #2
 8012d6a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8012d6c:	4b19      	ldr	r3, [pc, #100]	@ (8012dd4 <_tx_timer_system_activate+0xc0>)
 8012d6e:	681a      	ldr	r2, [r3, #0]
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	009b      	lsls	r3, r3, #2
 8012d74:	4413      	add	r3, r2
 8012d76:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d109      	bne.n	8012d94 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	687a      	ldr	r2, [r7, #4]
 8012d8a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	e011      	b.n	8012db8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	695b      	ldr	r3, [r3, #20]
 8012d9e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	687a      	ldr	r2, [r7, #4]
 8012da4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	687a      	ldr	r2, [r7, #4]
 8012daa:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	68fa      	ldr	r2, [r7, #12]
 8012db0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	68ba      	ldr	r2, [r7, #8]
 8012db6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	69fa      	ldr	r2, [r7, #28]
 8012dbc:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8012dbe:	bf00      	nop
 8012dc0:	3724      	adds	r7, #36	@ 0x24
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc8:	4770      	bx	lr
 8012dca:	bf00      	nop
 8012dcc:	2000af48 	.word	0x2000af48
 8012dd0:	2000af44 	.word	0x2000af44
 8012dd4:	2000af40 	.word	0x2000af40

08012dd8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b087      	sub	sp, #28
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	699b      	ldr	r3, [r3, #24]
 8012de4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d026      	beq.n	8012e3a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	691b      	ldr	r3, [r3, #16]
 8012df0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8012df2:	687a      	ldr	r2, [r7, #4]
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d108      	bne.n	8012e0c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d117      	bne.n	8012e34 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	2200      	movs	r2, #0
 8012e08:	601a      	str	r2, [r3, #0]
 8012e0a:	e013      	b.n	8012e34 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	695b      	ldr	r3, [r3, #20]
 8012e10:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012e12:	693b      	ldr	r3, [r7, #16]
 8012e14:	68fa      	ldr	r2, [r7, #12]
 8012e16:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	693a      	ldr	r2, [r7, #16]
 8012e1c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d105      	bne.n	8012e34 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	697a      	ldr	r2, [r7, #20]
 8012e2c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8012e2e:	697b      	ldr	r3, [r7, #20]
 8012e30:	693a      	ldr	r2, [r7, #16]
 8012e32:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	619a      	str	r2, [r3, #24]
    }
}
 8012e3a:	bf00      	nop
 8012e3c:	371c      	adds	r7, #28
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
	...

08012e48 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b098      	sub	sp, #96	@ 0x60
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8012e50:	2300      	movs	r3, #0
 8012e52:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	4a73      	ldr	r2, [pc, #460]	@ (8013024 <_tx_timer_thread_entry+0x1dc>)
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	f040 80de 	bne.w	801301a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8012e62:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8012e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8012e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8012e68:	b672      	cpsid	i
    return(int_posture);
 8012e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8012e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8012e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8013028 <_tx_timer_thread_entry+0x1e0>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d003      	beq.n	8012e84 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	f107 020c 	add.w	r2, r7, #12
 8012e82:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8012e84:	4b68      	ldr	r3, [pc, #416]	@ (8013028 <_tx_timer_thread_entry+0x1e0>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8012e8c:	4b66      	ldr	r3, [pc, #408]	@ (8013028 <_tx_timer_thread_entry+0x1e0>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	3304      	adds	r3, #4
 8012e92:	4a65      	ldr	r2, [pc, #404]	@ (8013028 <_tx_timer_thread_entry+0x1e0>)
 8012e94:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8012e96:	4b64      	ldr	r3, [pc, #400]	@ (8013028 <_tx_timer_thread_entry+0x1e0>)
 8012e98:	681a      	ldr	r2, [r3, #0]
 8012e9a:	4b64      	ldr	r3, [pc, #400]	@ (801302c <_tx_timer_thread_entry+0x1e4>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d103      	bne.n	8012eaa <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8012ea2:	4b63      	ldr	r3, [pc, #396]	@ (8013030 <_tx_timer_thread_entry+0x1e8>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	4a60      	ldr	r2, [pc, #384]	@ (8013028 <_tx_timer_thread_entry+0x1e0>)
 8012ea8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8012eaa:	4b62      	ldr	r3, [pc, #392]	@ (8013034 <_tx_timer_thread_entry+0x1ec>)
 8012eac:	2200      	movs	r2, #0
 8012eae:	601a      	str	r2, [r3, #0]
 8012eb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eb6:	f383 8810 	msr	PRIMASK, r3
}
 8012eba:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8012ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8012ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8012ec4:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8012ec6:	b672      	cpsid	i
    return(int_posture);
 8012ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012eca:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8012ecc:	e07f      	b.n	8012fce <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	691b      	ldr	r3, [r3, #16]
 8012ed6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8012edc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d102      	bne.n	8012eea <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	60fb      	str	r3, [r7, #12]
 8012ee8:	e00e      	b.n	8012f08 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8012eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012eec:	695b      	ldr	r3, [r3, #20]
 8012eee:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012ef4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012efa:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8012efc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012efe:	f107 020c 	add.w	r2, r7, #12
 8012f02:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f06:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2b20      	cmp	r3, #32
 8012f0e:	d911      	bls.n	8012f34 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8012f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f1a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f22:	f107 0208 	add.w	r2, r7, #8
 8012f26:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8012f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f2c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8012f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f30:	60bb      	str	r3, [r7, #8]
 8012f32:	e01a      	b.n	8012f6a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8012f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f36:	689b      	ldr	r3, [r3, #8]
 8012f38:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8012f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f3c:	68db      	ldr	r3, [r3, #12]
 8012f3e:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8012f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f42:	685a      	ldr	r2, [r3, #4]
 8012f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f46:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8012f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d009      	beq.n	8012f64 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f52:	f107 0208 	add.w	r2, r7, #8
 8012f56:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8012f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f5c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8012f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f60:	60bb      	str	r3, [r7, #8]
 8012f62:	e002      	b.n	8012f6a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8012f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f66:	2200      	movs	r2, #0
 8012f68:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8012f6a:	4a33      	ldr	r2, [pc, #204]	@ (8013038 <_tx_timer_thread_entry+0x1f0>)
 8012f6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f6e:	6013      	str	r3, [r2, #0]
 8012f70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f76:	f383 8810 	msr	PRIMASK, r3
}
 8012f7a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8012f7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d002      	beq.n	8012f88 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8012f82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012f84:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012f86:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012f88:	f3ef 8310 	mrs	r3, PRIMASK
 8012f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8012f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8012f90:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8012f92:	b672      	cpsid	i
    return(int_posture);
 8012f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012f96:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8012f98:	4b27      	ldr	r3, [pc, #156]	@ (8013038 <_tx_timer_thread_entry+0x1f0>)
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d105      	bne.n	8012fb2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8012fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fa8:	2200      	movs	r2, #0
 8012faa:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8012fac:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8012fae:	f7ff feb1 	bl	8012d14 <_tx_timer_system_activate>
 8012fb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fb4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	f383 8810 	msr	PRIMASK, r3
}
 8012fbc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8012fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8012fc2:	623b      	str	r3, [r7, #32]
    return(posture);
 8012fc4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8012fc6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8012fc8:	b672      	cpsid	i
    return(int_posture);
 8012fca:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	f47f af7c 	bne.w	8012ece <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8012fd6:	4b17      	ldr	r3, [pc, #92]	@ (8013034 <_tx_timer_thread_entry+0x1ec>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d116      	bne.n	801300c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8012fde:	4b17      	ldr	r3, [pc, #92]	@ (801303c <_tx_timer_thread_entry+0x1f4>)
 8012fe0:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fe4:	2203      	movs	r2, #3
 8012fe6:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012fe8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fea:	2201      	movs	r2, #1
 8012fec:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8012fee:	4b14      	ldr	r3, [pc, #80]	@ (8013040 <_tx_timer_thread_entry+0x1f8>)
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	3301      	adds	r3, #1
 8012ff4:	4a12      	ldr	r2, [pc, #72]	@ (8013040 <_tx_timer_thread_entry+0x1f8>)
 8012ff6:	6013      	str	r3, [r2, #0]
 8012ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ffa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	f383 8810 	msr	PRIMASK, r3
}
 8013002:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8013004:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8013006:	f7ff fabf 	bl	8012588 <_tx_thread_system_suspend>
 801300a:	e728      	b.n	8012e5e <_tx_timer_thread_entry+0x16>
 801300c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801300e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	f383 8810 	msr	PRIMASK, r3
}
 8013016:	bf00      	nop
            TX_DISABLE
 8013018:	e721      	b.n	8012e5e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801301a:	bf00      	nop
 801301c:	3760      	adds	r7, #96	@ 0x60
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}
 8013022:	bf00      	nop
 8013024:	4154494d 	.word	0x4154494d
 8013028:	2000af48 	.word	0x2000af48
 801302c:	2000af44 	.word	0x2000af44
 8013030:	2000af40 	.word	0x2000af40
 8013034:	2000af4c 	.word	0x2000af4c
 8013038:	2000af58 	.word	0x2000af58
 801303c:	2000af5c 	.word	0x2000af5c
 8013040:	2000aeac 	.word	0x2000aeac

08013044 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b08a      	sub	sp, #40	@ 0x28
 8013048:	af00      	add	r7, sp, #0
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	607a      	str	r2, [r7, #4]
 8013050:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013052:	2300      	movs	r3, #0
 8013054:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d102      	bne.n	8013062 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801305c:	2302      	movs	r3, #2
 801305e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013060:	e029      	b.n	80130b6 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	4a2d      	ldr	r2, [pc, #180]	@ (801311c <_txe_byte_allocate+0xd8>)
 8013068:	4293      	cmp	r3, r2
 801306a:	d002      	beq.n	8013072 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801306c:	2302      	movs	r3, #2
 801306e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013070:	e021      	b.n	80130b6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d102      	bne.n	801307e <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8013078:	2303      	movs	r3, #3
 801307a:	627b      	str	r3, [r7, #36]	@ 0x24
 801307c:	e01b      	b.n	80130b6 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d102      	bne.n	801308a <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8013084:	2305      	movs	r3, #5
 8013086:	627b      	str	r3, [r7, #36]	@ 0x24
 8013088:	e015      	b.n	80130b6 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	69db      	ldr	r3, [r3, #28]
 801308e:	687a      	ldr	r2, [r7, #4]
 8013090:	429a      	cmp	r2, r3
 8013092:	d902      	bls.n	801309a <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8013094:	2305      	movs	r3, #5
 8013096:	627b      	str	r3, [r7, #36]	@ 0x24
 8013098:	e00d      	b.n	80130b6 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d00a      	beq.n	80130b6 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80130a0:	f3ef 8305 	mrs	r3, IPSR
 80130a4:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80130a6:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80130a8:	4b1d      	ldr	r3, [pc, #116]	@ (8013120 <_txe_byte_allocate+0xdc>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	4313      	orrs	r3, r2
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d001      	beq.n	80130b6 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80130b2:	2304      	movs	r3, #4
 80130b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80130b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d108      	bne.n	80130ce <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80130bc:	4b19      	ldr	r3, [pc, #100]	@ (8013124 <_txe_byte_allocate+0xe0>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80130c2:	6a3b      	ldr	r3, [r7, #32]
 80130c4:	4a18      	ldr	r2, [pc, #96]	@ (8013128 <_txe_byte_allocate+0xe4>)
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d101      	bne.n	80130ce <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80130ca:	2313      	movs	r3, #19
 80130cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80130ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d114      	bne.n	80130fe <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80130d4:	f3ef 8305 	mrs	r3, IPSR
 80130d8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80130da:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80130dc:	4b10      	ldr	r3, [pc, #64]	@ (8013120 <_txe_byte_allocate+0xdc>)
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4313      	orrs	r3, r2
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d00b      	beq.n	80130fe <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80130e6:	f3ef 8305 	mrs	r3, IPSR
 80130ea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80130ec:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80130ee:	4b0c      	ldr	r3, [pc, #48]	@ (8013120 <_txe_byte_allocate+0xdc>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4313      	orrs	r3, r2
 80130f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80130f8:	d201      	bcs.n	80130fe <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80130fa:	2313      	movs	r3, #19
 80130fc:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80130fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013100:	2b00      	cmp	r3, #0
 8013102:	d106      	bne.n	8013112 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	68b9      	ldr	r1, [r7, #8]
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f7fc fd54 	bl	800fbb8 <_tx_byte_allocate>
 8013110:	6278      	str	r0, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8013112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013114:	4618      	mov	r0, r3
 8013116:	3728      	adds	r7, #40	@ 0x28
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	42595445 	.word	0x42595445
 8013120:	20000098 	.word	0x20000098
 8013124:	2000ae14 	.word	0x2000ae14
 8013128:	2000af5c 	.word	0x2000af5c

0801312c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b092      	sub	sp, #72	@ 0x48
 8013130:	af00      	add	r7, sp, #0
 8013132:	60f8      	str	r0, [r7, #12]
 8013134:	60b9      	str	r1, [r7, #8]
 8013136:	607a      	str	r2, [r7, #4]
 8013138:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801313a:	2300      	movs	r3, #0
 801313c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d102      	bne.n	801314a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013144:	2302      	movs	r3, #2
 8013146:	647b      	str	r3, [r7, #68]	@ 0x44
 8013148:	e075      	b.n	8013236 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 801314a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801314c:	2b34      	cmp	r3, #52	@ 0x34
 801314e:	d002      	beq.n	8013156 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013150:	2302      	movs	r3, #2
 8013152:	647b      	str	r3, [r7, #68]	@ 0x44
 8013154:	e06f      	b.n	8013236 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013156:	f3ef 8310 	mrs	r3, PRIMASK
 801315a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 801315c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 801315e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013160:	b672      	cpsid	i
    return(int_posture);
 8013162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013164:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013166:	4b3b      	ldr	r3, [pc, #236]	@ (8013254 <_txe_byte_pool_create+0x128>)
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	3301      	adds	r3, #1
 801316c:	4a39      	ldr	r2, [pc, #228]	@ (8013254 <_txe_byte_pool_create+0x128>)
 801316e:	6013      	str	r3, [r2, #0]
 8013170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013172:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013176:	f383 8810 	msr	PRIMASK, r3
}
 801317a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 801317c:	4b36      	ldr	r3, [pc, #216]	@ (8013258 <_txe_byte_pool_create+0x12c>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8013182:	2300      	movs	r3, #0
 8013184:	643b      	str	r3, [r7, #64]	@ 0x40
 8013186:	e009      	b.n	801319c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801318c:	429a      	cmp	r2, r3
 801318e:	d00b      	beq.n	80131a8 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8013190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8013196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013198:	3301      	adds	r3, #1
 801319a:	643b      	str	r3, [r7, #64]	@ 0x40
 801319c:	4b2f      	ldr	r3, [pc, #188]	@ (801325c <_txe_byte_pool_create+0x130>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d3f0      	bcc.n	8013188 <_txe_byte_pool_create+0x5c>
 80131a6:	e000      	b.n	80131aa <_txe_byte_pool_create+0x7e>
                break;
 80131a8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80131aa:	f3ef 8310 	mrs	r3, PRIMASK
 80131ae:	623b      	str	r3, [r7, #32]
    return(posture);
 80131b0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80131b2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80131b4:	b672      	cpsid	i
    return(int_posture);
 80131b6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80131b8:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80131ba:	4b26      	ldr	r3, [pc, #152]	@ (8013254 <_txe_byte_pool_create+0x128>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	3b01      	subs	r3, #1
 80131c0:	4a24      	ldr	r2, [pc, #144]	@ (8013254 <_txe_byte_pool_create+0x128>)
 80131c2:	6013      	str	r3, [r2, #0]
 80131c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131c6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80131c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ca:	f383 8810 	msr	PRIMASK, r3
}
 80131ce:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80131d0:	f7ff f8a0 	bl	8012314 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131d8:	429a      	cmp	r2, r3
 80131da:	d102      	bne.n	80131e2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80131dc:	2302      	movs	r3, #2
 80131de:	647b      	str	r3, [r7, #68]	@ 0x44
 80131e0:	e029      	b.n	8013236 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d102      	bne.n	80131ee <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80131e8:	2303      	movs	r3, #3
 80131ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80131ec:	e023      	b.n	8013236 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	2b63      	cmp	r3, #99	@ 0x63
 80131f2:	d802      	bhi.n	80131fa <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80131f4:	2305      	movs	r3, #5
 80131f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80131f8:	e01d      	b.n	8013236 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80131fa:	4b19      	ldr	r3, [pc, #100]	@ (8013260 <_txe_byte_pool_create+0x134>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013202:	4a18      	ldr	r2, [pc, #96]	@ (8013264 <_txe_byte_pool_create+0x138>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d101      	bne.n	801320c <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013208:	2313      	movs	r3, #19
 801320a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801320c:	f3ef 8305 	mrs	r3, IPSR
 8013210:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013212:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013214:	4b14      	ldr	r3, [pc, #80]	@ (8013268 <_txe_byte_pool_create+0x13c>)
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	4313      	orrs	r3, r2
 801321a:	2b00      	cmp	r3, #0
 801321c:	d00b      	beq.n	8013236 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801321e:	f3ef 8305 	mrs	r3, IPSR
 8013222:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013224:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013226:	4b10      	ldr	r3, [pc, #64]	@ (8013268 <_txe_byte_pool_create+0x13c>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	4313      	orrs	r3, r2
 801322c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8013230:	d201      	bcs.n	8013236 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013232:	2313      	movs	r3, #19
 8013234:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013238:	2b00      	cmp	r3, #0
 801323a:	d106      	bne.n	801324a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	68b9      	ldr	r1, [r7, #8]
 8013242:	68f8      	ldr	r0, [r7, #12]
 8013244:	f7fc fdfa 	bl	800fe3c <_tx_byte_pool_create>
 8013248:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 801324a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 801324c:	4618      	mov	r0, r3
 801324e:	3748      	adds	r7, #72	@ 0x48
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	2000aeac 	.word	0x2000aeac
 8013258:	2000ae04 	.word	0x2000ae04
 801325c:	2000ae08 	.word	0x2000ae08
 8013260:	2000ae14 	.word	0x2000ae14
 8013264:	2000af5c 	.word	0x2000af5c
 8013268:	20000098 	.word	0x20000098

0801326c <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 801326c:	b580      	push	{r7, lr}
 801326e:	b092      	sub	sp, #72	@ 0x48
 8013270:	af00      	add	r7, sp, #0
 8013272:	60f8      	str	r0, [r7, #12]
 8013274:	60b9      	str	r1, [r7, #8]
 8013276:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013278:	2300      	movs	r3, #0
 801327a:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d102      	bne.n	8013288 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013282:	2306      	movs	r3, #6
 8013284:	647b      	str	r3, [r7, #68]	@ 0x44
 8013286:	e069      	b.n	801335c <_txe_event_flags_create+0xf0>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	2b28      	cmp	r3, #40	@ 0x28
 801328c:	d002      	beq.n	8013294 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 801328e:	2306      	movs	r3, #6
 8013290:	647b      	str	r3, [r7, #68]	@ 0x44
 8013292:	e063      	b.n	801335c <_txe_event_flags_create+0xf0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013294:	f3ef 8310 	mrs	r3, PRIMASK
 8013298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 801329a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 801329c:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801329e:	b672      	cpsid	i
    return(int_posture);
 80132a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80132a2:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80132a4:	4b34      	ldr	r3, [pc, #208]	@ (8013378 <_txe_event_flags_create+0x10c>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	3301      	adds	r3, #1
 80132aa:	4a33      	ldr	r2, [pc, #204]	@ (8013378 <_txe_event_flags_create+0x10c>)
 80132ac:	6013      	str	r3, [r2, #0]
 80132ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132b0:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80132b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132b4:	f383 8810 	msr	PRIMASK, r3
}
 80132b8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 80132ba:	4b30      	ldr	r3, [pc, #192]	@ (801337c <_txe_event_flags_create+0x110>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 80132c0:	2300      	movs	r3, #0
 80132c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80132c4:	e009      	b.n	80132da <_txe_event_flags_create+0x6e>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 80132c6:	68fa      	ldr	r2, [r7, #12]
 80132c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d00b      	beq.n	80132e6 <_txe_event_flags_create+0x7a>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 80132ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80132d0:	699b      	ldr	r3, [r3, #24]
 80132d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 80132d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132d6:	3301      	adds	r3, #1
 80132d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80132da:	4b29      	ldr	r3, [pc, #164]	@ (8013380 <_txe_event_flags_create+0x114>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d3f0      	bcc.n	80132c6 <_txe_event_flags_create+0x5a>
 80132e4:	e000      	b.n	80132e8 <_txe_event_flags_create+0x7c>
                break;
 80132e6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80132e8:	f3ef 8310 	mrs	r3, PRIMASK
 80132ec:	623b      	str	r3, [r7, #32]
    return(posture);
 80132ee:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80132f0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80132f2:	b672      	cpsid	i
    return(int_posture);
 80132f4:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80132f6:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80132f8:	4b1f      	ldr	r3, [pc, #124]	@ (8013378 <_txe_event_flags_create+0x10c>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	3b01      	subs	r3, #1
 80132fe:	4a1e      	ldr	r2, [pc, #120]	@ (8013378 <_txe_event_flags_create+0x10c>)
 8013300:	6013      	str	r3, [r2, #0]
 8013302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013304:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013308:	f383 8810 	msr	PRIMASK, r3
}
 801330c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801330e:	f7ff f801 	bl	8012314 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8013312:	68fa      	ldr	r2, [r7, #12]
 8013314:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013316:	429a      	cmp	r2, r3
 8013318:	d102      	bne.n	8013320 <_txe_event_flags_create+0xb4>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 801331a:	2306      	movs	r3, #6
 801331c:	647b      	str	r3, [r7, #68]	@ 0x44
 801331e:	e01d      	b.n	801335c <_txe_event_flags_create+0xf0>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8013320:	4b18      	ldr	r3, [pc, #96]	@ (8013384 <_txe_event_flags_create+0x118>)
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013328:	4a17      	ldr	r2, [pc, #92]	@ (8013388 <_txe_event_flags_create+0x11c>)
 801332a:	4293      	cmp	r3, r2
 801332c:	d101      	bne.n	8013332 <_txe_event_flags_create+0xc6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801332e:	2313      	movs	r3, #19
 8013330:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013332:	f3ef 8305 	mrs	r3, IPSR
 8013336:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013338:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801333a:	4b14      	ldr	r3, [pc, #80]	@ (801338c <_txe_event_flags_create+0x120>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4313      	orrs	r3, r2
 8013340:	2b00      	cmp	r3, #0
 8013342:	d00b      	beq.n	801335c <_txe_event_flags_create+0xf0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013344:	f3ef 8305 	mrs	r3, IPSR
 8013348:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801334a:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801334c:	4b0f      	ldr	r3, [pc, #60]	@ (801338c <_txe_event_flags_create+0x120>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	4313      	orrs	r3, r2
 8013352:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8013356:	d201      	bcs.n	801335c <_txe_event_flags_create+0xf0>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013358:	2313      	movs	r3, #19
 801335a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801335c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801335e:	2b00      	cmp	r3, #0
 8013360:	d104      	bne.n	801336c <_txe_event_flags_create+0x100>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8013362:	68b9      	ldr	r1, [r7, #8]
 8013364:	68f8      	ldr	r0, [r7, #12]
 8013366:	f7fc ff93 	bl	8010290 <_tx_event_flags_create>
 801336a:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 801336c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 801336e:	4618      	mov	r0, r3
 8013370:	3748      	adds	r7, #72	@ 0x48
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}
 8013376:	bf00      	nop
 8013378:	2000aeac 	.word	0x2000aeac
 801337c:	2000adec 	.word	0x2000adec
 8013380:	2000adf0 	.word	0x2000adf0
 8013384:	2000ae14 	.word	0x2000ae14
 8013388:	2000af5c 	.word	0x2000af5c
 801338c:	20000098 	.word	0x20000098

08013390 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b08a      	sub	sp, #40	@ 0x28
 8013394:	af02      	add	r7, sp, #8
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	607a      	str	r2, [r7, #4]
 801339c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801339e:	2300      	movs	r3, #0
 80133a0:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80133a8:	2306      	movs	r3, #6
 80133aa:	61fb      	str	r3, [r7, #28]
 80133ac:	e025      	b.n	80133fa <_txe_event_flags_get+0x6a>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	4a1e      	ldr	r2, [pc, #120]	@ (801342c <_txe_event_flags_get+0x9c>)
 80133b4:	4293      	cmp	r3, r2
 80133b6:	d002      	beq.n	80133be <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 80133b8:	2306      	movs	r3, #6
 80133ba:	61fb      	str	r3, [r7, #28]
 80133bc:	e01d      	b.n	80133fa <_txe_event_flags_get+0x6a>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d102      	bne.n	80133ca <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80133c4:	2303      	movs	r3, #3
 80133c6:	61fb      	str	r3, [r7, #28]
 80133c8:	e017      	b.n	80133fa <_txe_event_flags_get+0x6a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80133ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d014      	beq.n	80133fa <_txe_event_flags_get+0x6a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80133d0:	f3ef 8305 	mrs	r3, IPSR
 80133d4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80133d6:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80133d8:	4b15      	ldr	r3, [pc, #84]	@ (8013430 <_txe_event_flags_get+0xa0>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	4313      	orrs	r3, r2
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d002      	beq.n	80133e8 <_txe_event_flags_get+0x58>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80133e2:	2304      	movs	r3, #4
 80133e4:	61fb      	str	r3, [r7, #28]
 80133e6:	e008      	b.n	80133fa <_txe_event_flags_get+0x6a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80133e8:	4b12      	ldr	r3, [pc, #72]	@ (8013434 <_txe_event_flags_get+0xa4>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80133ee:	69bb      	ldr	r3, [r7, #24]
 80133f0:	4a11      	ldr	r2, [pc, #68]	@ (8013438 <_txe_event_flags_get+0xa8>)
 80133f2:	4293      	cmp	r3, r2
 80133f4:	d101      	bne.n	80133fa <_txe_event_flags_get+0x6a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80133f6:	2304      	movs	r3, #4
 80133f8:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d104      	bne.n	801340a <_txe_event_flags_get+0x7a>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2b03      	cmp	r3, #3
 8013404:	d901      	bls.n	801340a <_txe_event_flags_get+0x7a>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8013406:	2308      	movs	r3, #8
 8013408:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d108      	bne.n	8013422 <_txe_event_flags_get+0x92>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8013410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	68b9      	ldr	r1, [r7, #8]
 801341a:	68f8      	ldr	r0, [r7, #12]
 801341c:	f7fc ff86 	bl	801032c <_tx_event_flags_get>
 8013420:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013422:	69fb      	ldr	r3, [r7, #28]
}
 8013424:	4618      	mov	r0, r3
 8013426:	3720      	adds	r7, #32
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	4456444e 	.word	0x4456444e
 8013430:	20000098 	.word	0x20000098
 8013434:	2000ae14 	.word	0x2000ae14
 8013438:	2000af5c 	.word	0x2000af5c

0801343c <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b086      	sub	sp, #24
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013448:	2300      	movs	r3, #0
 801344a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d102      	bne.n	8013458 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013452:	2306      	movs	r3, #6
 8013454:	617b      	str	r3, [r7, #20]
 8013456:	e00f      	b.n	8013478 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	4a0d      	ldr	r2, [pc, #52]	@ (8013494 <_txe_event_flags_set+0x58>)
 801345e:	4293      	cmp	r3, r2
 8013460:	d002      	beq.n	8013468 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8013462:	2306      	movs	r3, #6
 8013464:	617b      	str	r3, [r7, #20]
 8013466:	e007      	b.n	8013478 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2b02      	cmp	r3, #2
 801346c:	d004      	beq.n	8013478 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d001      	beq.n	8013478 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8013474:	2308      	movs	r3, #8
 8013476:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d105      	bne.n	801348a <_txe_event_flags_set+0x4e>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	68b9      	ldr	r1, [r7, #8]
 8013482:	68f8      	ldr	r0, [r7, #12]
 8013484:	f7fd f834 	bl	80104f0 <_tx_event_flags_set>
 8013488:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801348a:	697b      	ldr	r3, [r7, #20]
}
 801348c:	4618      	mov	r0, r3
 801348e:	3718      	adds	r7, #24
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	4456444e 	.word	0x4456444e

08013498 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b092      	sub	sp, #72	@ 0x48
 801349c:	af00      	add	r7, sp, #0
 801349e:	60f8      	str	r0, [r7, #12]
 80134a0:	60b9      	str	r1, [r7, #8]
 80134a2:	607a      	str	r2, [r7, #4]
 80134a4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80134a6:	2300      	movs	r3, #0
 80134a8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d102      	bne.n	80134b6 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80134b0:	231c      	movs	r3, #28
 80134b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80134b4:	e053      	b.n	801355e <_txe_mutex_create+0xc6>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	2b34      	cmp	r3, #52	@ 0x34
 80134ba:	d002      	beq.n	80134c2 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80134bc:	231c      	movs	r3, #28
 80134be:	647b      	str	r3, [r7, #68]	@ 0x44
 80134c0:	e04d      	b.n	801355e <_txe_mutex_create+0xc6>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134c2:	f3ef 8310 	mrs	r3, PRIMASK
 80134c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80134c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80134ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80134cc:	b672      	cpsid	i
    return(int_posture);
 80134ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80134d0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80134d2:	4b3a      	ldr	r3, [pc, #232]	@ (80135bc <_txe_mutex_create+0x124>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	3301      	adds	r3, #1
 80134d8:	4a38      	ldr	r2, [pc, #224]	@ (80135bc <_txe_mutex_create+0x124>)
 80134da:	6013      	str	r3, [r2, #0]
 80134dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134de:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134e2:	f383 8810 	msr	PRIMASK, r3
}
 80134e6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 80134e8:	4b35      	ldr	r3, [pc, #212]	@ (80135c0 <_txe_mutex_create+0x128>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 80134ee:	2300      	movs	r3, #0
 80134f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80134f2:	e009      	b.n	8013508 <_txe_mutex_create+0x70>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 80134f4:	68fa      	ldr	r2, [r7, #12]
 80134f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d00b      	beq.n	8013514 <_txe_mutex_create+0x7c>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 80134fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80134fe:	6a1b      	ldr	r3, [r3, #32]
 8013500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8013502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013504:	3301      	adds	r3, #1
 8013506:	643b      	str	r3, [r7, #64]	@ 0x40
 8013508:	4b2e      	ldr	r3, [pc, #184]	@ (80135c4 <_txe_mutex_create+0x12c>)
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801350e:	429a      	cmp	r2, r3
 8013510:	d3f0      	bcc.n	80134f4 <_txe_mutex_create+0x5c>
 8013512:	e000      	b.n	8013516 <_txe_mutex_create+0x7e>
                break;
 8013514:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013516:	f3ef 8310 	mrs	r3, PRIMASK
 801351a:	623b      	str	r3, [r7, #32]
    return(posture);
 801351c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801351e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013520:	b672      	cpsid	i
    return(int_posture);
 8013522:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013524:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013526:	4b25      	ldr	r3, [pc, #148]	@ (80135bc <_txe_mutex_create+0x124>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	3b01      	subs	r3, #1
 801352c:	4a23      	ldr	r2, [pc, #140]	@ (80135bc <_txe_mutex_create+0x124>)
 801352e:	6013      	str	r3, [r2, #0]
 8013530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013532:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013536:	f383 8810 	msr	PRIMASK, r3
}
 801353a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801353c:	f7fe feea 	bl	8012314 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8013540:	68fa      	ldr	r2, [r7, #12]
 8013542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013544:	429a      	cmp	r2, r3
 8013546:	d102      	bne.n	801354e <_txe_mutex_create+0xb6>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8013548:	231c      	movs	r3, #28
 801354a:	647b      	str	r3, [r7, #68]	@ 0x44
 801354c:	e007      	b.n	801355e <_txe_mutex_create+0xc6>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2b01      	cmp	r3, #1
 8013552:	d004      	beq.n	801355e <_txe_mutex_create+0xc6>
            {

                if (inherit != TX_NO_INHERIT)
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d001      	beq.n	801355e <_txe_mutex_create+0xc6>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 801355a:	231f      	movs	r3, #31
 801355c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801355e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013560:	2b00      	cmp	r3, #0
 8013562:	d11d      	bne.n	80135a0 <_txe_mutex_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013564:	4b18      	ldr	r3, [pc, #96]	@ (80135c8 <_txe_mutex_create+0x130>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801356a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801356c:	4a17      	ldr	r2, [pc, #92]	@ (80135cc <_txe_mutex_create+0x134>)
 801356e:	4293      	cmp	r3, r2
 8013570:	d101      	bne.n	8013576 <_txe_mutex_create+0xde>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013572:	2313      	movs	r3, #19
 8013574:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013576:	f3ef 8305 	mrs	r3, IPSR
 801357a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801357c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801357e:	4b14      	ldr	r3, [pc, #80]	@ (80135d0 <_txe_mutex_create+0x138>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	4313      	orrs	r3, r2
 8013584:	2b00      	cmp	r3, #0
 8013586:	d00b      	beq.n	80135a0 <_txe_mutex_create+0x108>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013588:	f3ef 8305 	mrs	r3, IPSR
 801358c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801358e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013590:	4b0f      	ldr	r3, [pc, #60]	@ (80135d0 <_txe_mutex_create+0x138>)
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	4313      	orrs	r3, r2
 8013596:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801359a:	d201      	bcs.n	80135a0 <_txe_mutex_create+0x108>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801359c:	2313      	movs	r3, #19
 801359e:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80135a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d105      	bne.n	80135b2 <_txe_mutex_create+0x11a>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 80135a6:	687a      	ldr	r2, [r7, #4]
 80135a8:	68b9      	ldr	r1, [r7, #8]
 80135aa:	68f8      	ldr	r0, [r7, #12]
 80135ac:	f7fd fafe 	bl	8010bac <_tx_mutex_create>
 80135b0:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 80135b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	3748      	adds	r7, #72	@ 0x48
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	2000aeac 	.word	0x2000aeac
 80135c0:	2000adf4 	.word	0x2000adf4
 80135c4:	2000adf8 	.word	0x2000adf8
 80135c8:	2000ae14 	.word	0x2000ae14
 80135cc:	2000af5c 	.word	0x2000af5c
 80135d0:	20000098 	.word	0x20000098

080135d4 <_txe_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_delete(TX_MUTEX *mutex_ptr)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b086      	sub	sp, #24
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 80135dc:	2300      	movs	r3, #0
 80135de:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d102      	bne.n	80135ec <_txe_mutex_delete+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80135e6:	231c      	movs	r3, #28
 80135e8:	617b      	str	r3, [r7, #20]
 80135ea:	e023      	b.n	8013634 <_txe_mutex_delete+0x60>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	4a13      	ldr	r2, [pc, #76]	@ (8013640 <_txe_mutex_delete+0x6c>)
 80135f2:	4293      	cmp	r3, r2
 80135f4:	d002      	beq.n	80135fc <_txe_mutex_delete+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80135f6:	231c      	movs	r3, #28
 80135f8:	617b      	str	r3, [r7, #20]
 80135fa:	e01b      	b.n	8013634 <_txe_mutex_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80135fc:	f3ef 8305 	mrs	r3, IPSR
 8013600:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013602:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013604:	4b0f      	ldr	r3, [pc, #60]	@ (8013644 <_txe_mutex_delete+0x70>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	4313      	orrs	r3, r2
 801360a:	2b00      	cmp	r3, #0
 801360c:	d002      	beq.n	8013614 <_txe_mutex_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 801360e:	2313      	movs	r3, #19
 8013610:	617b      	str	r3, [r7, #20]
 8013612:	e00f      	b.n	8013634 <_txe_mutex_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013614:	4b0c      	ldr	r3, [pc, #48]	@ (8013648 <_txe_mutex_delete+0x74>)
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	4a0b      	ldr	r2, [pc, #44]	@ (801364c <_txe_mutex_delete+0x78>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d101      	bne.n	8013626 <_txe_mutex_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013622:	2313      	movs	r3, #19
 8013624:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d103      	bne.n	8013634 <_txe_mutex_delete+0x60>
        {
#endif

            /* Call actual mutex delete function.  */
            status =  _tx_mutex_delete(mutex_ptr);
 801362c:	6878      	ldr	r0, [r7, #4]
 801362e:	f7fd fb17 	bl	8010c60 <_tx_mutex_delete>
 8013632:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8013634:	697b      	ldr	r3, [r7, #20]
}
 8013636:	4618      	mov	r0, r3
 8013638:	3718      	adds	r7, #24
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	4d555445 	.word	0x4d555445
 8013644:	20000098 	.word	0x20000098
 8013648:	2000ae14 	.word	0x2000ae14
 801364c:	2000af5c 	.word	0x2000af5c

08013650 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013650:	b580      	push	{r7, lr}
 8013652:	b088      	sub	sp, #32
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801365a:	2300      	movs	r3, #0
 801365c:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d102      	bne.n	801366a <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013664:	231c      	movs	r3, #28
 8013666:	61fb      	str	r3, [r7, #28]
 8013668:	e01f      	b.n	80136aa <_txe_mutex_get+0x5a>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4a21      	ldr	r2, [pc, #132]	@ (80136f4 <_txe_mutex_get+0xa4>)
 8013670:	4293      	cmp	r3, r2
 8013672:	d002      	beq.n	801367a <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013674:	231c      	movs	r3, #28
 8013676:	61fb      	str	r3, [r7, #28]
 8013678:	e017      	b.n	80136aa <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d014      	beq.n	80136aa <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013680:	f3ef 8305 	mrs	r3, IPSR
 8013684:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013686:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013688:	4b1b      	ldr	r3, [pc, #108]	@ (80136f8 <_txe_mutex_get+0xa8>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	4313      	orrs	r3, r2
 801368e:	2b00      	cmp	r3, #0
 8013690:	d002      	beq.n	8013698 <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013692:	2304      	movs	r3, #4
 8013694:	61fb      	str	r3, [r7, #28]
 8013696:	e008      	b.n	80136aa <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013698:	4b18      	ldr	r3, [pc, #96]	@ (80136fc <_txe_mutex_get+0xac>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801369e:	69bb      	ldr	r3, [r7, #24]
 80136a0:	4a17      	ldr	r2, [pc, #92]	@ (8013700 <_txe_mutex_get+0xb0>)
 80136a2:	4293      	cmp	r3, r2
 80136a4:	d101      	bne.n	80136aa <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80136a6:	2304      	movs	r3, #4
 80136a8:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d114      	bne.n	80136da <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80136b0:	f3ef 8305 	mrs	r3, IPSR
 80136b4:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80136b6:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80136b8:	4b0f      	ldr	r3, [pc, #60]	@ (80136f8 <_txe_mutex_get+0xa8>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	4313      	orrs	r3, r2
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d00b      	beq.n	80136da <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80136c2:	f3ef 8305 	mrs	r3, IPSR
 80136c6:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80136c8:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80136ca:	4b0b      	ldr	r3, [pc, #44]	@ (80136f8 <_txe_mutex_get+0xa8>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	4313      	orrs	r3, r2
 80136d0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80136d4:	d201      	bcs.n	80136da <_txe_mutex_get+0x8a>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80136d6:	2313      	movs	r3, #19
 80136d8:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d104      	bne.n	80136ea <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 80136e0:	6839      	ldr	r1, [r7, #0]
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7fd fb66 	bl	8010db4 <_tx_mutex_get>
 80136e8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80136ea:	69fb      	ldr	r3, [r7, #28]
}
 80136ec:	4618      	mov	r0, r3
 80136ee:	3720      	adds	r7, #32
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	4d555445 	.word	0x4d555445
 80136f8:	20000098 	.word	0x20000098
 80136fc:	2000ae14 	.word	0x2000ae14
 8013700:	2000af5c 	.word	0x2000af5c

08013704 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b086      	sub	sp, #24
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801370c:	2300      	movs	r3, #0
 801370e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d102      	bne.n	801371c <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013716:	231c      	movs	r3, #28
 8013718:	617b      	str	r3, [r7, #20]
 801371a:	e01c      	b.n	8013756 <_txe_mutex_put+0x52>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	4a13      	ldr	r2, [pc, #76]	@ (8013770 <_txe_mutex_put+0x6c>)
 8013722:	4293      	cmp	r3, r2
 8013724:	d002      	beq.n	801372c <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013726:	231c      	movs	r3, #28
 8013728:	617b      	str	r3, [r7, #20]
 801372a:	e014      	b.n	8013756 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801372c:	f3ef 8305 	mrs	r3, IPSR
 8013730:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013732:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013734:	4b0f      	ldr	r3, [pc, #60]	@ (8013774 <_txe_mutex_put+0x70>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	4313      	orrs	r3, r2
 801373a:	2b00      	cmp	r3, #0
 801373c:	d00b      	beq.n	8013756 <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801373e:	f3ef 8305 	mrs	r3, IPSR
 8013742:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013744:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013746:	4b0b      	ldr	r3, [pc, #44]	@ (8013774 <_txe_mutex_put+0x70>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	4313      	orrs	r3, r2
 801374c:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8013750:	d201      	bcs.n	8013756 <_txe_mutex_put+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013752:	2313      	movs	r3, #19
 8013754:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d103      	bne.n	8013764 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f7fd fda1 	bl	80112a4 <_tx_mutex_put>
 8013762:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013764:	697b      	ldr	r3, [r7, #20]
}
 8013766:	4618      	mov	r0, r3
 8013768:	3718      	adds	r7, #24
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	4d555445 	.word	0x4d555445
 8013774:	20000098 	.word	0x20000098

08013778 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b092      	sub	sp, #72	@ 0x48
 801377c:	af00      	add	r7, sp, #0
 801377e:	60f8      	str	r0, [r7, #12]
 8013780:	60b9      	str	r1, [r7, #8]
 8013782:	607a      	str	r2, [r7, #4]
 8013784:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013786:	2300      	movs	r3, #0
 8013788:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d102      	bne.n	8013796 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013790:	230c      	movs	r3, #12
 8013792:	647b      	str	r3, [r7, #68]	@ 0x44
 8013794:	e054      	b.n	8013840 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	2b20      	cmp	r3, #32
 801379a:	d002      	beq.n	80137a2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801379c:	230c      	movs	r3, #12
 801379e:	647b      	str	r3, [r7, #68]	@ 0x44
 80137a0:	e04e      	b.n	8013840 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137a2:	f3ef 8310 	mrs	r3, PRIMASK
 80137a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80137a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80137aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80137ac:	b672      	cpsid	i
    return(int_posture);
 80137ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80137b0:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80137b2:	4b36      	ldr	r3, [pc, #216]	@ (801388c <_txe_semaphore_create+0x114>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	3301      	adds	r3, #1
 80137b8:	4a34      	ldr	r2, [pc, #208]	@ (801388c <_txe_semaphore_create+0x114>)
 80137ba:	6013      	str	r3, [r2, #0]
 80137bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137be:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80137c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137c2:	f383 8810 	msr	PRIMASK, r3
}
 80137c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80137c8:	4b31      	ldr	r3, [pc, #196]	@ (8013890 <_txe_semaphore_create+0x118>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80137ce:	2300      	movs	r3, #0
 80137d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80137d2:	e009      	b.n	80137e8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80137d4:	68fa      	ldr	r2, [r7, #12]
 80137d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137d8:	429a      	cmp	r2, r3
 80137da:	d00b      	beq.n	80137f4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80137dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137de:	695b      	ldr	r3, [r3, #20]
 80137e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80137e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80137e4:	3301      	adds	r3, #1
 80137e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80137e8:	4b2a      	ldr	r3, [pc, #168]	@ (8013894 <_txe_semaphore_create+0x11c>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80137ee:	429a      	cmp	r2, r3
 80137f0:	d3f0      	bcc.n	80137d4 <_txe_semaphore_create+0x5c>
 80137f2:	e000      	b.n	80137f6 <_txe_semaphore_create+0x7e>
                break;
 80137f4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137f6:	f3ef 8310 	mrs	r3, PRIMASK
 80137fa:	623b      	str	r3, [r7, #32]
    return(posture);
 80137fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80137fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013800:	b672      	cpsid	i
    return(int_posture);
 8013802:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013804:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013806:	4b21      	ldr	r3, [pc, #132]	@ (801388c <_txe_semaphore_create+0x114>)
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	3b01      	subs	r3, #1
 801380c:	4a1f      	ldr	r2, [pc, #124]	@ (801388c <_txe_semaphore_create+0x114>)
 801380e:	6013      	str	r3, [r2, #0]
 8013810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013812:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013816:	f383 8810 	msr	PRIMASK, r3
}
 801381a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801381c:	f7fe fd7a 	bl	8012314 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8013820:	68fa      	ldr	r2, [r7, #12]
 8013822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013824:	429a      	cmp	r2, r3
 8013826:	d102      	bne.n	801382e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8013828:	230c      	movs	r3, #12
 801382a:	647b      	str	r3, [r7, #68]	@ 0x44
 801382c:	e008      	b.n	8013840 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801382e:	4b1a      	ldr	r3, [pc, #104]	@ (8013898 <_txe_semaphore_create+0x120>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013836:	4a19      	ldr	r2, [pc, #100]	@ (801389c <_txe_semaphore_create+0x124>)
 8013838:	4293      	cmp	r3, r2
 801383a:	d101      	bne.n	8013840 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801383c:	2313      	movs	r3, #19
 801383e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013842:	2b00      	cmp	r3, #0
 8013844:	d114      	bne.n	8013870 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013846:	f3ef 8305 	mrs	r3, IPSR
 801384a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801384c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801384e:	4b14      	ldr	r3, [pc, #80]	@ (80138a0 <_txe_semaphore_create+0x128>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	4313      	orrs	r3, r2
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00b      	beq.n	8013870 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013858:	f3ef 8305 	mrs	r3, IPSR
 801385c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801385e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013860:	4b0f      	ldr	r3, [pc, #60]	@ (80138a0 <_txe_semaphore_create+0x128>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	4313      	orrs	r3, r2
 8013866:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 801386a:	d201      	bcs.n	8013870 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801386c:	2313      	movs	r3, #19
 801386e:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013872:	2b00      	cmp	r3, #0
 8013874:	d105      	bne.n	8013882 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8013876:	687a      	ldr	r2, [r7, #4]
 8013878:	68b9      	ldr	r1, [r7, #8]
 801387a:	68f8      	ldr	r0, [r7, #12]
 801387c:	f7fd ffb4 	bl	80117e8 <_tx_semaphore_create>
 8013880:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8013882:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8013884:	4618      	mov	r0, r3
 8013886:	3748      	adds	r7, #72	@ 0x48
 8013888:	46bd      	mov	sp, r7
 801388a:	bd80      	pop	{r7, pc}
 801388c:	2000aeac 	.word	0x2000aeac
 8013890:	2000addc 	.word	0x2000addc
 8013894:	2000ade0 	.word	0x2000ade0
 8013898:	2000ae14 	.word	0x2000ae14
 801389c:	2000af5c 	.word	0x2000af5c
 80138a0:	20000098 	.word	0x20000098

080138a4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b086      	sub	sp, #24
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80138ae:	2300      	movs	r3, #0
 80138b0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d102      	bne.n	80138be <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80138b8:	230c      	movs	r3, #12
 80138ba:	617b      	str	r3, [r7, #20]
 80138bc:	e01f      	b.n	80138fe <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	4a15      	ldr	r2, [pc, #84]	@ (8013918 <_txe_semaphore_get+0x74>)
 80138c4:	4293      	cmp	r3, r2
 80138c6:	d002      	beq.n	80138ce <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80138c8:	230c      	movs	r3, #12
 80138ca:	617b      	str	r3, [r7, #20]
 80138cc:	e017      	b.n	80138fe <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80138ce:	683b      	ldr	r3, [r7, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d014      	beq.n	80138fe <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80138d4:	f3ef 8305 	mrs	r3, IPSR
 80138d8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80138da:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80138dc:	4b0f      	ldr	r3, [pc, #60]	@ (801391c <_txe_semaphore_get+0x78>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	4313      	orrs	r3, r2
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d002      	beq.n	80138ec <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80138e6:	2304      	movs	r3, #4
 80138e8:	617b      	str	r3, [r7, #20]
 80138ea:	e008      	b.n	80138fe <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80138ec:	4b0c      	ldr	r3, [pc, #48]	@ (8013920 <_txe_semaphore_get+0x7c>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	4a0b      	ldr	r2, [pc, #44]	@ (8013924 <_txe_semaphore_get+0x80>)
 80138f6:	4293      	cmp	r3, r2
 80138f8:	d101      	bne.n	80138fe <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80138fa:	2304      	movs	r3, #4
 80138fc:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80138fe:	697b      	ldr	r3, [r7, #20]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d104      	bne.n	801390e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8013904:	6839      	ldr	r1, [r7, #0]
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f7fd ffc0 	bl	801188c <_tx_semaphore_get>
 801390c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801390e:	697b      	ldr	r3, [r7, #20]
}
 8013910:	4618      	mov	r0, r3
 8013912:	3718      	adds	r7, #24
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	53454d41 	.word	0x53454d41
 801391c:	20000098 	.word	0x20000098
 8013920:	2000ae14 	.word	0x2000ae14
 8013924:	2000af5c 	.word	0x2000af5c

08013928 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d102      	bne.n	801393c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013936:	230c      	movs	r3, #12
 8013938:	60fb      	str	r3, [r7, #12]
 801393a:	e00b      	b.n	8013954 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4a07      	ldr	r2, [pc, #28]	@ (8013960 <_txe_semaphore_put+0x38>)
 8013942:	4293      	cmp	r3, r2
 8013944:	d002      	beq.n	801394c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013946:	230c      	movs	r3, #12
 8013948:	60fb      	str	r3, [r7, #12]
 801394a:	e003      	b.n	8013954 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f7fe f82f 	bl	80119b0 <_tx_semaphore_put>
 8013952:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013954:	68fb      	ldr	r3, [r7, #12]
}
 8013956:	4618      	mov	r0, r3
 8013958:	3710      	adds	r7, #16
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	bf00      	nop
 8013960:	53454d41 	.word	0x53454d41

08013964 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b09a      	sub	sp, #104	@ 0x68
 8013968:	af06      	add	r7, sp, #24
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]
 8013970:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013972:	2300      	movs	r3, #0
 8013974:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d102      	bne.n	8013982 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801397c:	230e      	movs	r3, #14
 801397e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013980:	e0bb      	b.n	8013afa <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013984:	2bb4      	cmp	r3, #180	@ 0xb4
 8013986:	d002      	beq.n	801398e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013988:	230e      	movs	r3, #14
 801398a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801398c:	e0b5      	b.n	8013afa <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801398e:	f3ef 8310 	mrs	r3, PRIMASK
 8013992:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8013994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8013996:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8013998:	b672      	cpsid	i
    return(int_posture);
 801399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801399c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801399e:	4b64      	ldr	r3, [pc, #400]	@ (8013b30 <_txe_thread_create+0x1cc>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	3301      	adds	r3, #1
 80139a4:	4a62      	ldr	r2, [pc, #392]	@ (8013b30 <_txe_thread_create+0x1cc>)
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80139aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80139ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ae:	f383 8810 	msr	PRIMASK, r3
}
 80139b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80139b4:	2300      	movs	r3, #0
 80139b6:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 80139b8:	4b5e      	ldr	r3, [pc, #376]	@ (8013b34 <_txe_thread_create+0x1d0>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80139be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139c0:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80139c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80139c4:	3b01      	subs	r3, #1
 80139c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80139c8:	4413      	add	r3, r2
 80139ca:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80139cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ce:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80139d0:	2300      	movs	r3, #0
 80139d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80139d4:	e02b      	b.n	8013a2e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80139d6:	68fa      	ldr	r2, [r7, #12]
 80139d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139da:	429a      	cmp	r2, r3
 80139dc:	d101      	bne.n	80139e2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80139de:	2301      	movs	r3, #1
 80139e0:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80139e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139e4:	2b01      	cmp	r3, #1
 80139e6:	d028      	beq.n	8013a3a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80139e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139ea:	68db      	ldr	r3, [r3, #12]
 80139ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d308      	bcc.n	8013a04 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80139f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80139f4:	691b      	ldr	r3, [r3, #16]
 80139f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d203      	bcs.n	8013a04 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80139fc:	2300      	movs	r3, #0
 80139fe:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013a00:	2301      	movs	r3, #1
 8013a02:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8013a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d308      	bcc.n	8013a20 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8013a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a10:	691b      	ldr	r3, [r3, #16]
 8013a12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013a14:	429a      	cmp	r2, r3
 8013a16:	d203      	bcs.n	8013a20 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8013a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013a26:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8013a2e:	4b42      	ldr	r3, [pc, #264]	@ (8013b38 <_txe_thread_create+0x1d4>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d3ce      	bcc.n	80139d6 <_txe_thread_create+0x72>
 8013a38:	e000      	b.n	8013a3c <_txe_thread_create+0xd8>
                break;
 8013a3a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8013a40:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013a42:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013a44:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013a46:	b672      	cpsid	i
    return(int_posture);
 8013a48:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013a4c:	4b38      	ldr	r3, [pc, #224]	@ (8013b30 <_txe_thread_create+0x1cc>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	3b01      	subs	r3, #1
 8013a52:	4a37      	ldr	r2, [pc, #220]	@ (8013b30 <_txe_thread_create+0x1cc>)
 8013a54:	6013      	str	r3, [r2, #0]
 8013a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a58:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a5a:	6a3b      	ldr	r3, [r7, #32]
 8013a5c:	f383 8810 	msr	PRIMASK, r3
}
 8013a60:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013a62:	f7fe fc57 	bl	8012314 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8013a66:	68fa      	ldr	r2, [r7, #12]
 8013a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d102      	bne.n	8013a74 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8013a6e:	230e      	movs	r3, #14
 8013a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a72:	e042      	b.n	8013afa <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8013a74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d102      	bne.n	8013a80 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8013a7a:	2303      	movs	r3, #3
 8013a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a7e:	e03c      	b.n	8013afa <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d102      	bne.n	8013a8c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8013a86:	2303      	movs	r3, #3
 8013a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a8a:	e036      	b.n	8013afa <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8013a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8013a90:	d802      	bhi.n	8013a98 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8013a92:	2305      	movs	r3, #5
 8013a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a96:	e030      	b.n	8013afa <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8013a98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013a9a:	2b1f      	cmp	r3, #31
 8013a9c:	d902      	bls.n	8013aa4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8013a9e:	230f      	movs	r3, #15
 8013aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013aa2:	e02a      	b.n	8013afa <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8013aa4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013aa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d902      	bls.n	8013ab2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8013aac:	2318      	movs	r3, #24
 8013aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ab0:	e023      	b.n	8013afa <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8013ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d902      	bls.n	8013abe <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8013ab8:	2310      	movs	r3, #16
 8013aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013abc:	e01d      	b.n	8013afa <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8013abe:	4b1f      	ldr	r3, [pc, #124]	@ (8013b3c <_txe_thread_create+0x1d8>)
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8013ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8013b40 <_txe_thread_create+0x1dc>)
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d101      	bne.n	8013ad0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013acc:	2313      	movs	r3, #19
 8013ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ad0:	f3ef 8305 	mrs	r3, IPSR
 8013ad4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013ad6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8013b44 <_txe_thread_create+0x1e0>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	4313      	orrs	r3, r2
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d00b      	beq.n	8013afa <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013ae2:	f3ef 8305 	mrs	r3, IPSR
 8013ae6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013ae8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013aea:	4b16      	ldr	r3, [pc, #88]	@ (8013b44 <_txe_thread_create+0x1e0>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	4313      	orrs	r3, r2
 8013af0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8013af4:	d201      	bcs.n	8013afa <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013af6:	2313      	movs	r3, #19
 8013af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d112      	bne.n	8013b26 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8013b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013b02:	9305      	str	r3, [sp, #20]
 8013b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013b06:	9304      	str	r3, [sp, #16]
 8013b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013b0a:	9303      	str	r3, [sp, #12]
 8013b0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013b0e:	9302      	str	r3, [sp, #8]
 8013b10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b12:	9301      	str	r3, [sp, #4]
 8013b14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b16:	9300      	str	r3, [sp, #0]
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	687a      	ldr	r2, [r7, #4]
 8013b1c:	68b9      	ldr	r1, [r7, #8]
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f7fd ffb2 	bl	8011a88 <_tx_thread_create>
 8013b24:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8013b26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3750      	adds	r7, #80	@ 0x50
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	2000aeac 	.word	0x2000aeac
 8013b34:	2000ae1c 	.word	0x2000ae1c
 8013b38:	2000ae20 	.word	0x2000ae20
 8013b3c:	2000ae14 	.word	0x2000ae14
 8013b40:	2000af5c 	.word	0x2000af5c
 8013b44:	20000098 	.word	0x20000098

08013b48 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013b50:	f3ef 8305 	mrs	r3, IPSR
 8013b54:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8013b56:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013b58:	4b0f      	ldr	r3, [pc, #60]	@ (8013b98 <_txe_thread_delete+0x50>)
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	4313      	orrs	r3, r2
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d002      	beq.n	8013b68 <_txe_thread_delete+0x20>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8013b62:	2313      	movs	r3, #19
 8013b64:	60fb      	str	r3, [r7, #12]
 8013b66:	e011      	b.n	8013b8c <_txe_thread_delete+0x44>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d102      	bne.n	8013b74 <_txe_thread_delete+0x2c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013b6e:	230e      	movs	r3, #14
 8013b70:	60fb      	str	r3, [r7, #12]
 8013b72:	e00b      	b.n	8013b8c <_txe_thread_delete+0x44>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	4a08      	ldr	r2, [pc, #32]	@ (8013b9c <_txe_thread_delete+0x54>)
 8013b7a:	4293      	cmp	r3, r2
 8013b7c:	d002      	beq.n	8013b84 <_txe_thread_delete+0x3c>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013b7e:	230e      	movs	r3, #14
 8013b80:	60fb      	str	r3, [r7, #12]
 8013b82:	e003      	b.n	8013b8c <_txe_thread_delete+0x44>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 8013b84:	6878      	ldr	r0, [r7, #4]
 8013b86:	f7fe f875 	bl	8011c74 <_tx_thread_delete>
 8013b8a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013b8c:	68fb      	ldr	r3, [r7, #12]
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3710      	adds	r7, #16
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	bf00      	nop
 8013b98:	20000098 	.word	0x20000098
 8013b9c:	54485244 	.word	0x54485244

08013ba0 <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b082      	sub	sp, #8
 8013ba4:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8013bd0 <_txe_thread_relinquish+0x30>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d00a      	beq.n	8013bc8 <_txe_thread_relinquish+0x28>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013bb2:	f3ef 8305 	mrs	r3, IPSR
 8013bb6:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 8013bb8:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8013bba:	4b06      	ldr	r3, [pc, #24]	@ (8013bd4 <_txe_thread_relinquish+0x34>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	4313      	orrs	r3, r2
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d101      	bne.n	8013bc8 <_txe_thread_relinquish+0x28>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 8013bc4:	f7fe f980 	bl	8011ec8 <_tx_thread_relinquish>
        }
    }
}
 8013bc8:	bf00      	nop
 8013bca:	3708      	adds	r7, #8
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}
 8013bd0:	2000ae14 	.word	0x2000ae14
 8013bd4:	20000098 	.word	0x20000098

08013bd8 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d102      	bne.n	8013bec <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013be6:	230e      	movs	r3, #14
 8013be8:	60fb      	str	r3, [r7, #12]
 8013bea:	e00b      	b.n	8013c04 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4a07      	ldr	r2, [pc, #28]	@ (8013c10 <_txe_thread_resume+0x38>)
 8013bf2:	4293      	cmp	r3, r2
 8013bf4:	d002      	beq.n	8013bfc <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013bf6:	230e      	movs	r3, #14
 8013bf8:	60fb      	str	r3, [r7, #12]
 8013bfa:	e003      	b.n	8013c04 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f7fe f9c9 	bl	8011f94 <_tx_thread_resume>
 8013c02:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013c04:	68fb      	ldr	r3, [r7, #12]
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3710      	adds	r7, #16
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	54485244 	.word	0x54485244

08013c14 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b084      	sub	sp, #16
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d102      	bne.n	8013c28 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013c22:	230e      	movs	r3, #14
 8013c24:	60fb      	str	r3, [r7, #12]
 8013c26:	e00b      	b.n	8013c40 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	4a07      	ldr	r2, [pc, #28]	@ (8013c4c <_txe_thread_suspend+0x38>)
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	d002      	beq.n	8013c38 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013c32:	230e      	movs	r3, #14
 8013c34:	60fb      	str	r3, [r7, #12]
 8013c36:	e003      	b.n	8013c40 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7fe fafb 	bl	8012234 <_tx_thread_suspend>
 8013c3e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013c40:	68fb      	ldr	r3, [r7, #12]
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3710      	adds	r7, #16
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	54485244 	.word	0x54485244

08013c50 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b084      	sub	sp, #16
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d102      	bne.n	8013c64 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013c5e:	2315      	movs	r3, #21
 8013c60:	60fb      	str	r3, [r7, #12]
 8013c62:	e00b      	b.n	8013c7c <_txe_timer_activate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	4a07      	ldr	r2, [pc, #28]	@ (8013c88 <_txe_timer_activate+0x38>)
 8013c6a:	4293      	cmp	r3, r2
 8013c6c:	d002      	beq.n	8013c74 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013c6e:	2315      	movs	r3, #21
 8013c70:	60fb      	str	r3, [r7, #12]
 8013c72:	e003      	b.n	8013c7c <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f7fe fe2d 	bl	80128d4 <_tx_timer_activate>
 8013c7a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013c7c:	68fb      	ldr	r3, [r7, #12]
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3710      	adds	r7, #16
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
 8013c86:	bf00      	nop
 8013c88:	4154494d 	.word	0x4154494d

08013c8c <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b096      	sub	sp, #88	@ 0x58
 8013c90:	af04      	add	r7, sp, #16
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
 8013c98:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d102      	bne.n	8013caa <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013ca4:	2315      	movs	r3, #21
 8013ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8013ca8:	e059      	b.n	8013d5e <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 8013caa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cac:	2b2c      	cmp	r3, #44	@ 0x2c
 8013cae:	d002      	beq.n	8013cb6 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013cb0:	2315      	movs	r3, #21
 8013cb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8013cb4:	e053      	b.n	8013d5e <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8013cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8013cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8013cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8013cc0:	b672      	cpsid	i
    return(int_posture);
 8013cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013cc4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013cc6:	4b41      	ldr	r3, [pc, #260]	@ (8013dcc <_txe_timer_create+0x140>)
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	3301      	adds	r3, #1
 8013ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8013dcc <_txe_timer_create+0x140>)
 8013cce:	6013      	str	r3, [r2, #0]
 8013cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013cd2:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd6:	f383 8810 	msr	PRIMASK, r3
}
 8013cda:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 8013cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8013dd0 <_txe_timer_create+0x144>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8013ce6:	e009      	b.n	8013cfc <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 8013ce8:	68fa      	ldr	r2, [r7, #12]
 8013cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d00b      	beq.n	8013d08 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 8013cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 8013cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8013cfc:	4b35      	ldr	r3, [pc, #212]	@ (8013dd4 <_txe_timer_create+0x148>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d3f0      	bcc.n	8013ce8 <_txe_timer_create+0x5c>
 8013d06:	e000      	b.n	8013d0a <_txe_timer_create+0x7e>
                break;
 8013d08:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8013d0e:	623b      	str	r3, [r7, #32]
    return(posture);
 8013d10:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013d12:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d14:	b672      	cpsid	i
    return(int_posture);
 8013d16:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013d18:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8013dcc <_txe_timer_create+0x140>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	3b01      	subs	r3, #1
 8013d20:	4a2a      	ldr	r2, [pc, #168]	@ (8013dcc <_txe_timer_create+0x140>)
 8013d22:	6013      	str	r3, [r2, #0]
 8013d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d26:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d2a:	f383 8810 	msr	PRIMASK, r3
}
 8013d2e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013d30:	f7fe faf0 	bl	8012314 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 8013d34:	68fa      	ldr	r2, [r7, #12]
 8013d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d102      	bne.n	8013d42 <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 8013d3c:	2315      	movs	r3, #21
 8013d3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d40:	e00d      	b.n	8013d5e <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 8013d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d102      	bne.n	8013d4e <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 8013d48:	2316      	movs	r3, #22
 8013d4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d4c:	e007      	b.n	8013d5e <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 8013d4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d004      	beq.n	8013d5e <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 8013d54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d001      	beq.n	8013d5e <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 8013d5a:	2317      	movs	r3, #23
 8013d5c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d11d      	bne.n	8013da0 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013d64:	4b1c      	ldr	r3, [pc, #112]	@ (8013dd8 <_txe_timer_create+0x14c>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8013d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8013ddc <_txe_timer_create+0x150>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d101      	bne.n	8013d76 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013d72:	2313      	movs	r3, #19
 8013d74:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d76:	f3ef 8305 	mrs	r3, IPSR
 8013d7a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013d7c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013d7e:	4b18      	ldr	r3, [pc, #96]	@ (8013de0 <_txe_timer_create+0x154>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	4313      	orrs	r3, r2
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d00b      	beq.n	8013da0 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013d88:	f3ef 8305 	mrs	r3, IPSR
 8013d8c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013d8e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013d90:	4b13      	ldr	r3, [pc, #76]	@ (8013de0 <_txe_timer_create+0x154>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4313      	orrs	r3, r2
 8013d96:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8013d9a:	d201      	bcs.n	8013da0 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013d9c:	2313      	movs	r3, #19
 8013d9e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d10c      	bne.n	8013dc0 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 8013da6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013da8:	9302      	str	r3, [sp, #8]
 8013daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013dac:	9301      	str	r3, [sp, #4]
 8013dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013db0:	9300      	str	r3, [sp, #0]
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	68b9      	ldr	r1, [r7, #8]
 8013db8:	68f8      	ldr	r0, [r7, #12]
 8013dba:	f7fe fdb7 	bl	801292c <_tx_timer_create>
 8013dbe:	6478      	str	r0, [r7, #68]	@ 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 8013dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3748      	adds	r7, #72	@ 0x48
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	2000aeac 	.word	0x2000aeac
 8013dd0:	2000af50 	.word	0x2000af50
 8013dd4:	2000af54 	.word	0x2000af54
 8013dd8:	2000ae14 	.word	0x2000ae14
 8013ddc:	2000af5c 	.word	0x2000af5c
 8013de0:	20000098 	.word	0x20000098

08013de4 <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d102      	bne.n	8013df8 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013df2:	2315      	movs	r3, #21
 8013df4:	60fb      	str	r3, [r7, #12]
 8013df6:	e00b      	b.n	8013e10 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	4a07      	ldr	r2, [pc, #28]	@ (8013e1c <_txe_timer_deactivate+0x38>)
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	d002      	beq.n	8013e08 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013e02:	2315      	movs	r3, #21
 8013e04:	60fb      	str	r3, [r7, #12]
 8013e06:	e003      	b.n	8013e10 <_txe_timer_deactivate+0x2c>
    }
    else
    {

        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7fe fdf3 	bl	80129f4 <_tx_timer_deactivate>
 8013e0e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013e10:	68fb      	ldr	r3, [r7, #12]
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	3710      	adds	r7, #16
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	4154494d 	.word	0x4154494d

08013e20 <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b086      	sub	sp, #24
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d102      	bne.n	8013e38 <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013e32:	2315      	movs	r3, #21
 8013e34:	617b      	str	r3, [r7, #20]
 8013e36:	e023      	b.n	8013e80 <_txe_timer_delete+0x60>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	4a13      	ldr	r2, [pc, #76]	@ (8013e8c <_txe_timer_delete+0x6c>)
 8013e3e:	4293      	cmp	r3, r2
 8013e40:	d002      	beq.n	8013e48 <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013e42:	2315      	movs	r3, #21
 8013e44:	617b      	str	r3, [r7, #20]
 8013e46:	e01b      	b.n	8013e80 <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013e48:	f3ef 8305 	mrs	r3, IPSR
 8013e4c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013e4e:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013e50:	4b0f      	ldr	r3, [pc, #60]	@ (8013e90 <_txe_timer_delete+0x70>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	4313      	orrs	r3, r2
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d002      	beq.n	8013e60 <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8013e5a:	2313      	movs	r3, #19
 8013e5c:	617b      	str	r3, [r7, #20]
 8013e5e:	e00f      	b.n	8013e80 <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013e60:	4b0c      	ldr	r3, [pc, #48]	@ (8013e94 <_txe_timer_delete+0x74>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	4a0b      	ldr	r2, [pc, #44]	@ (8013e98 <_txe_timer_delete+0x78>)
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	d101      	bne.n	8013e72 <_txe_timer_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013e6e:	2313      	movs	r3, #19
 8013e70:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d103      	bne.n	8013e80 <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f7fe fe65 	bl	8012b48 <_tx_timer_delete>
 8013e7e:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8013e80:	697b      	ldr	r3, [r7, #20]
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3718      	adds	r7, #24
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	4154494d 	.word	0x4154494d
 8013e90:	20000098 	.word	0x20000098
 8013e94:	2000ae14 	.word	0x2000ae14
 8013e98:	2000af5c 	.word	0x2000af5c

08013e9c <atoi>:
 8013e9c:	220a      	movs	r2, #10
 8013e9e:	2100      	movs	r1, #0
 8013ea0:	f000 b95c 	b.w	801415c <strtol>

08013ea4 <rand>:
 8013ea4:	4b16      	ldr	r3, [pc, #88]	@ (8013f00 <rand+0x5c>)
 8013ea6:	b510      	push	{r4, lr}
 8013ea8:	681c      	ldr	r4, [r3, #0]
 8013eaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013eac:	b9b3      	cbnz	r3, 8013edc <rand+0x38>
 8013eae:	2018      	movs	r0, #24
 8013eb0:	f000 fc06 	bl	80146c0 <malloc>
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	6320      	str	r0, [r4, #48]	@ 0x30
 8013eb8:	b920      	cbnz	r0, 8013ec4 <rand+0x20>
 8013eba:	4b12      	ldr	r3, [pc, #72]	@ (8013f04 <rand+0x60>)
 8013ebc:	4812      	ldr	r0, [pc, #72]	@ (8013f08 <rand+0x64>)
 8013ebe:	2152      	movs	r1, #82	@ 0x52
 8013ec0:	f000 fa9e 	bl	8014400 <__assert_func>
 8013ec4:	4911      	ldr	r1, [pc, #68]	@ (8013f0c <rand+0x68>)
 8013ec6:	4b12      	ldr	r3, [pc, #72]	@ (8013f10 <rand+0x6c>)
 8013ec8:	e9c0 1300 	strd	r1, r3, [r0]
 8013ecc:	4b11      	ldr	r3, [pc, #68]	@ (8013f14 <rand+0x70>)
 8013ece:	6083      	str	r3, [r0, #8]
 8013ed0:	230b      	movs	r3, #11
 8013ed2:	8183      	strh	r3, [r0, #12]
 8013ed4:	2100      	movs	r1, #0
 8013ed6:	2001      	movs	r0, #1
 8013ed8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013edc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013ede:	480e      	ldr	r0, [pc, #56]	@ (8013f18 <rand+0x74>)
 8013ee0:	690b      	ldr	r3, [r1, #16]
 8013ee2:	694c      	ldr	r4, [r1, #20]
 8013ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8013f1c <rand+0x78>)
 8013ee6:	4358      	muls	r0, r3
 8013ee8:	fb02 0004 	mla	r0, r2, r4, r0
 8013eec:	fba3 3202 	umull	r3, r2, r3, r2
 8013ef0:	3301      	adds	r3, #1
 8013ef2:	eb40 0002 	adc.w	r0, r0, r2
 8013ef6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013efa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013efe:	bd10      	pop	{r4, pc}
 8013f00:	200000a8 	.word	0x200000a8
 8013f04:	08015580 	.word	0x08015580
 8013f08:	08015597 	.word	0x08015597
 8013f0c:	abcd330e 	.word	0xabcd330e
 8013f10:	e66d1234 	.word	0xe66d1234
 8013f14:	0005deec 	.word	0x0005deec
 8013f18:	5851f42d 	.word	0x5851f42d
 8013f1c:	4c957f2d 	.word	0x4c957f2d

08013f20 <std>:
 8013f20:	2300      	movs	r3, #0
 8013f22:	b510      	push	{r4, lr}
 8013f24:	4604      	mov	r4, r0
 8013f26:	e9c0 3300 	strd	r3, r3, [r0]
 8013f2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013f2e:	6083      	str	r3, [r0, #8]
 8013f30:	8181      	strh	r1, [r0, #12]
 8013f32:	6643      	str	r3, [r0, #100]	@ 0x64
 8013f34:	81c2      	strh	r2, [r0, #14]
 8013f36:	6183      	str	r3, [r0, #24]
 8013f38:	4619      	mov	r1, r3
 8013f3a:	2208      	movs	r2, #8
 8013f3c:	305c      	adds	r0, #92	@ 0x5c
 8013f3e:	f000 fa1b 	bl	8014378 <memset>
 8013f42:	4b0d      	ldr	r3, [pc, #52]	@ (8013f78 <std+0x58>)
 8013f44:	6263      	str	r3, [r4, #36]	@ 0x24
 8013f46:	4b0d      	ldr	r3, [pc, #52]	@ (8013f7c <std+0x5c>)
 8013f48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8013f80 <std+0x60>)
 8013f4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8013f84 <std+0x64>)
 8013f50:	6323      	str	r3, [r4, #48]	@ 0x30
 8013f52:	4b0d      	ldr	r3, [pc, #52]	@ (8013f88 <std+0x68>)
 8013f54:	6224      	str	r4, [r4, #32]
 8013f56:	429c      	cmp	r4, r3
 8013f58:	d006      	beq.n	8013f68 <std+0x48>
 8013f5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013f5e:	4294      	cmp	r4, r2
 8013f60:	d002      	beq.n	8013f68 <std+0x48>
 8013f62:	33d0      	adds	r3, #208	@ 0xd0
 8013f64:	429c      	cmp	r4, r3
 8013f66:	d105      	bne.n	8013f74 <std+0x54>
 8013f68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f70:	f000 ba34 	b.w	80143dc <__retarget_lock_init_recursive>
 8013f74:	bd10      	pop	{r4, pc}
 8013f76:	bf00      	nop
 8013f78:	08014ca1 	.word	0x08014ca1
 8013f7c:	08014cc3 	.word	0x08014cc3
 8013f80:	08014cfb 	.word	0x08014cfb
 8013f84:	08014d1f 	.word	0x08014d1f
 8013f88:	2000b420 	.word	0x2000b420

08013f8c <stdio_exit_handler>:
 8013f8c:	4a02      	ldr	r2, [pc, #8]	@ (8013f98 <stdio_exit_handler+0xc>)
 8013f8e:	4903      	ldr	r1, [pc, #12]	@ (8013f9c <stdio_exit_handler+0x10>)
 8013f90:	4803      	ldr	r0, [pc, #12]	@ (8013fa0 <stdio_exit_handler+0x14>)
 8013f92:	f000 b8ed 	b.w	8014170 <_fwalk_sglue>
 8013f96:	bf00      	nop
 8013f98:	2000009c 	.word	0x2000009c
 8013f9c:	08014c39 	.word	0x08014c39
 8013fa0:	200000ac 	.word	0x200000ac

08013fa4 <cleanup_stdio>:
 8013fa4:	6841      	ldr	r1, [r0, #4]
 8013fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8013fd8 <cleanup_stdio+0x34>)
 8013fa8:	4299      	cmp	r1, r3
 8013faa:	b510      	push	{r4, lr}
 8013fac:	4604      	mov	r4, r0
 8013fae:	d001      	beq.n	8013fb4 <cleanup_stdio+0x10>
 8013fb0:	f000 fe42 	bl	8014c38 <_fflush_r>
 8013fb4:	68a1      	ldr	r1, [r4, #8]
 8013fb6:	4b09      	ldr	r3, [pc, #36]	@ (8013fdc <cleanup_stdio+0x38>)
 8013fb8:	4299      	cmp	r1, r3
 8013fba:	d002      	beq.n	8013fc2 <cleanup_stdio+0x1e>
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f000 fe3b 	bl	8014c38 <_fflush_r>
 8013fc2:	68e1      	ldr	r1, [r4, #12]
 8013fc4:	4b06      	ldr	r3, [pc, #24]	@ (8013fe0 <cleanup_stdio+0x3c>)
 8013fc6:	4299      	cmp	r1, r3
 8013fc8:	d004      	beq.n	8013fd4 <cleanup_stdio+0x30>
 8013fca:	4620      	mov	r0, r4
 8013fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fd0:	f000 be32 	b.w	8014c38 <_fflush_r>
 8013fd4:	bd10      	pop	{r4, pc}
 8013fd6:	bf00      	nop
 8013fd8:	2000b420 	.word	0x2000b420
 8013fdc:	2000b488 	.word	0x2000b488
 8013fe0:	2000b4f0 	.word	0x2000b4f0

08013fe4 <global_stdio_init.part.0>:
 8013fe4:	b510      	push	{r4, lr}
 8013fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8014014 <global_stdio_init.part.0+0x30>)
 8013fe8:	4c0b      	ldr	r4, [pc, #44]	@ (8014018 <global_stdio_init.part.0+0x34>)
 8013fea:	4a0c      	ldr	r2, [pc, #48]	@ (801401c <global_stdio_init.part.0+0x38>)
 8013fec:	601a      	str	r2, [r3, #0]
 8013fee:	4620      	mov	r0, r4
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	2104      	movs	r1, #4
 8013ff4:	f7ff ff94 	bl	8013f20 <std>
 8013ff8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	2109      	movs	r1, #9
 8014000:	f7ff ff8e 	bl	8013f20 <std>
 8014004:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014008:	2202      	movs	r2, #2
 801400a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801400e:	2112      	movs	r1, #18
 8014010:	f7ff bf86 	b.w	8013f20 <std>
 8014014:	2000b558 	.word	0x2000b558
 8014018:	2000b420 	.word	0x2000b420
 801401c:	08013f8d 	.word	0x08013f8d

08014020 <__sfp_lock_acquire>:
 8014020:	4801      	ldr	r0, [pc, #4]	@ (8014028 <__sfp_lock_acquire+0x8>)
 8014022:	f000 b9dc 	b.w	80143de <__retarget_lock_acquire_recursive>
 8014026:	bf00      	nop
 8014028:	2000b55d 	.word	0x2000b55d

0801402c <__sfp_lock_release>:
 801402c:	4801      	ldr	r0, [pc, #4]	@ (8014034 <__sfp_lock_release+0x8>)
 801402e:	f000 b9d7 	b.w	80143e0 <__retarget_lock_release_recursive>
 8014032:	bf00      	nop
 8014034:	2000b55d 	.word	0x2000b55d

08014038 <__sinit>:
 8014038:	b510      	push	{r4, lr}
 801403a:	4604      	mov	r4, r0
 801403c:	f7ff fff0 	bl	8014020 <__sfp_lock_acquire>
 8014040:	6a23      	ldr	r3, [r4, #32]
 8014042:	b11b      	cbz	r3, 801404c <__sinit+0x14>
 8014044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014048:	f7ff bff0 	b.w	801402c <__sfp_lock_release>
 801404c:	4b04      	ldr	r3, [pc, #16]	@ (8014060 <__sinit+0x28>)
 801404e:	6223      	str	r3, [r4, #32]
 8014050:	4b04      	ldr	r3, [pc, #16]	@ (8014064 <__sinit+0x2c>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d1f5      	bne.n	8014044 <__sinit+0xc>
 8014058:	f7ff ffc4 	bl	8013fe4 <global_stdio_init.part.0>
 801405c:	e7f2      	b.n	8014044 <__sinit+0xc>
 801405e:	bf00      	nop
 8014060:	08013fa5 	.word	0x08013fa5
 8014064:	2000b558 	.word	0x2000b558

08014068 <_strtol_l.constprop.0>:
 8014068:	2b24      	cmp	r3, #36	@ 0x24
 801406a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801406e:	4686      	mov	lr, r0
 8014070:	4690      	mov	r8, r2
 8014072:	d801      	bhi.n	8014078 <_strtol_l.constprop.0+0x10>
 8014074:	2b01      	cmp	r3, #1
 8014076:	d106      	bne.n	8014086 <_strtol_l.constprop.0+0x1e>
 8014078:	f000 f986 	bl	8014388 <__errno>
 801407c:	2316      	movs	r3, #22
 801407e:	6003      	str	r3, [r0, #0]
 8014080:	2000      	movs	r0, #0
 8014082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014086:	4834      	ldr	r0, [pc, #208]	@ (8014158 <_strtol_l.constprop.0+0xf0>)
 8014088:	460d      	mov	r5, r1
 801408a:	462a      	mov	r2, r5
 801408c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014090:	5d06      	ldrb	r6, [r0, r4]
 8014092:	f016 0608 	ands.w	r6, r6, #8
 8014096:	d1f8      	bne.n	801408a <_strtol_l.constprop.0+0x22>
 8014098:	2c2d      	cmp	r4, #45	@ 0x2d
 801409a:	d12d      	bne.n	80140f8 <_strtol_l.constprop.0+0x90>
 801409c:	782c      	ldrb	r4, [r5, #0]
 801409e:	2601      	movs	r6, #1
 80140a0:	1c95      	adds	r5, r2, #2
 80140a2:	f033 0210 	bics.w	r2, r3, #16
 80140a6:	d109      	bne.n	80140bc <_strtol_l.constprop.0+0x54>
 80140a8:	2c30      	cmp	r4, #48	@ 0x30
 80140aa:	d12a      	bne.n	8014102 <_strtol_l.constprop.0+0x9a>
 80140ac:	782a      	ldrb	r2, [r5, #0]
 80140ae:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80140b2:	2a58      	cmp	r2, #88	@ 0x58
 80140b4:	d125      	bne.n	8014102 <_strtol_l.constprop.0+0x9a>
 80140b6:	786c      	ldrb	r4, [r5, #1]
 80140b8:	2310      	movs	r3, #16
 80140ba:	3502      	adds	r5, #2
 80140bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80140c0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80140c4:	2200      	movs	r2, #0
 80140c6:	fbbc f9f3 	udiv	r9, ip, r3
 80140ca:	4610      	mov	r0, r2
 80140cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80140d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80140d4:	2f09      	cmp	r7, #9
 80140d6:	d81b      	bhi.n	8014110 <_strtol_l.constprop.0+0xa8>
 80140d8:	463c      	mov	r4, r7
 80140da:	42a3      	cmp	r3, r4
 80140dc:	dd27      	ble.n	801412e <_strtol_l.constprop.0+0xc6>
 80140de:	1c57      	adds	r7, r2, #1
 80140e0:	d007      	beq.n	80140f2 <_strtol_l.constprop.0+0x8a>
 80140e2:	4581      	cmp	r9, r0
 80140e4:	d320      	bcc.n	8014128 <_strtol_l.constprop.0+0xc0>
 80140e6:	d101      	bne.n	80140ec <_strtol_l.constprop.0+0x84>
 80140e8:	45a2      	cmp	sl, r4
 80140ea:	db1d      	blt.n	8014128 <_strtol_l.constprop.0+0xc0>
 80140ec:	fb00 4003 	mla	r0, r0, r3, r4
 80140f0:	2201      	movs	r2, #1
 80140f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140f6:	e7eb      	b.n	80140d0 <_strtol_l.constprop.0+0x68>
 80140f8:	2c2b      	cmp	r4, #43	@ 0x2b
 80140fa:	bf04      	itt	eq
 80140fc:	782c      	ldrbeq	r4, [r5, #0]
 80140fe:	1c95      	addeq	r5, r2, #2
 8014100:	e7cf      	b.n	80140a2 <_strtol_l.constprop.0+0x3a>
 8014102:	2b00      	cmp	r3, #0
 8014104:	d1da      	bne.n	80140bc <_strtol_l.constprop.0+0x54>
 8014106:	2c30      	cmp	r4, #48	@ 0x30
 8014108:	bf0c      	ite	eq
 801410a:	2308      	moveq	r3, #8
 801410c:	230a      	movne	r3, #10
 801410e:	e7d5      	b.n	80140bc <_strtol_l.constprop.0+0x54>
 8014110:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014114:	2f19      	cmp	r7, #25
 8014116:	d801      	bhi.n	801411c <_strtol_l.constprop.0+0xb4>
 8014118:	3c37      	subs	r4, #55	@ 0x37
 801411a:	e7de      	b.n	80140da <_strtol_l.constprop.0+0x72>
 801411c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014120:	2f19      	cmp	r7, #25
 8014122:	d804      	bhi.n	801412e <_strtol_l.constprop.0+0xc6>
 8014124:	3c57      	subs	r4, #87	@ 0x57
 8014126:	e7d8      	b.n	80140da <_strtol_l.constprop.0+0x72>
 8014128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801412c:	e7e1      	b.n	80140f2 <_strtol_l.constprop.0+0x8a>
 801412e:	1c53      	adds	r3, r2, #1
 8014130:	d108      	bne.n	8014144 <_strtol_l.constprop.0+0xdc>
 8014132:	2322      	movs	r3, #34	@ 0x22
 8014134:	f8ce 3000 	str.w	r3, [lr]
 8014138:	4660      	mov	r0, ip
 801413a:	f1b8 0f00 	cmp.w	r8, #0
 801413e:	d0a0      	beq.n	8014082 <_strtol_l.constprop.0+0x1a>
 8014140:	1e69      	subs	r1, r5, #1
 8014142:	e006      	b.n	8014152 <_strtol_l.constprop.0+0xea>
 8014144:	b106      	cbz	r6, 8014148 <_strtol_l.constprop.0+0xe0>
 8014146:	4240      	negs	r0, r0
 8014148:	f1b8 0f00 	cmp.w	r8, #0
 801414c:	d099      	beq.n	8014082 <_strtol_l.constprop.0+0x1a>
 801414e:	2a00      	cmp	r2, #0
 8014150:	d1f6      	bne.n	8014140 <_strtol_l.constprop.0+0xd8>
 8014152:	f8c8 1000 	str.w	r1, [r8]
 8014156:	e794      	b.n	8014082 <_strtol_l.constprop.0+0x1a>
 8014158:	0801564a 	.word	0x0801564a

0801415c <strtol>:
 801415c:	4613      	mov	r3, r2
 801415e:	460a      	mov	r2, r1
 8014160:	4601      	mov	r1, r0
 8014162:	4802      	ldr	r0, [pc, #8]	@ (801416c <strtol+0x10>)
 8014164:	6800      	ldr	r0, [r0, #0]
 8014166:	f7ff bf7f 	b.w	8014068 <_strtol_l.constprop.0>
 801416a:	bf00      	nop
 801416c:	200000a8 	.word	0x200000a8

08014170 <_fwalk_sglue>:
 8014170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014174:	4607      	mov	r7, r0
 8014176:	4688      	mov	r8, r1
 8014178:	4614      	mov	r4, r2
 801417a:	2600      	movs	r6, #0
 801417c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014180:	f1b9 0901 	subs.w	r9, r9, #1
 8014184:	d505      	bpl.n	8014192 <_fwalk_sglue+0x22>
 8014186:	6824      	ldr	r4, [r4, #0]
 8014188:	2c00      	cmp	r4, #0
 801418a:	d1f7      	bne.n	801417c <_fwalk_sglue+0xc>
 801418c:	4630      	mov	r0, r6
 801418e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014192:	89ab      	ldrh	r3, [r5, #12]
 8014194:	2b01      	cmp	r3, #1
 8014196:	d907      	bls.n	80141a8 <_fwalk_sglue+0x38>
 8014198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801419c:	3301      	adds	r3, #1
 801419e:	d003      	beq.n	80141a8 <_fwalk_sglue+0x38>
 80141a0:	4629      	mov	r1, r5
 80141a2:	4638      	mov	r0, r7
 80141a4:	47c0      	blx	r8
 80141a6:	4306      	orrs	r6, r0
 80141a8:	3568      	adds	r5, #104	@ 0x68
 80141aa:	e7e9      	b.n	8014180 <_fwalk_sglue+0x10>

080141ac <iprintf>:
 80141ac:	b40f      	push	{r0, r1, r2, r3}
 80141ae:	b507      	push	{r0, r1, r2, lr}
 80141b0:	4906      	ldr	r1, [pc, #24]	@ (80141cc <iprintf+0x20>)
 80141b2:	ab04      	add	r3, sp, #16
 80141b4:	6808      	ldr	r0, [r1, #0]
 80141b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80141ba:	6881      	ldr	r1, [r0, #8]
 80141bc:	9301      	str	r3, [sp, #4]
 80141be:	f000 f967 	bl	8014490 <_vfiprintf_r>
 80141c2:	b003      	add	sp, #12
 80141c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80141c8:	b004      	add	sp, #16
 80141ca:	4770      	bx	lr
 80141cc:	200000a8 	.word	0x200000a8

080141d0 <_puts_r>:
 80141d0:	6a03      	ldr	r3, [r0, #32]
 80141d2:	b570      	push	{r4, r5, r6, lr}
 80141d4:	6884      	ldr	r4, [r0, #8]
 80141d6:	4605      	mov	r5, r0
 80141d8:	460e      	mov	r6, r1
 80141da:	b90b      	cbnz	r3, 80141e0 <_puts_r+0x10>
 80141dc:	f7ff ff2c 	bl	8014038 <__sinit>
 80141e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80141e2:	07db      	lsls	r3, r3, #31
 80141e4:	d405      	bmi.n	80141f2 <_puts_r+0x22>
 80141e6:	89a3      	ldrh	r3, [r4, #12]
 80141e8:	0598      	lsls	r0, r3, #22
 80141ea:	d402      	bmi.n	80141f2 <_puts_r+0x22>
 80141ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80141ee:	f000 f8f6 	bl	80143de <__retarget_lock_acquire_recursive>
 80141f2:	89a3      	ldrh	r3, [r4, #12]
 80141f4:	0719      	lsls	r1, r3, #28
 80141f6:	d502      	bpl.n	80141fe <_puts_r+0x2e>
 80141f8:	6923      	ldr	r3, [r4, #16]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d135      	bne.n	801426a <_puts_r+0x9a>
 80141fe:	4621      	mov	r1, r4
 8014200:	4628      	mov	r0, r5
 8014202:	f000 fde1 	bl	8014dc8 <__swsetup_r>
 8014206:	b380      	cbz	r0, 801426a <_puts_r+0x9a>
 8014208:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801420c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801420e:	07da      	lsls	r2, r3, #31
 8014210:	d405      	bmi.n	801421e <_puts_r+0x4e>
 8014212:	89a3      	ldrh	r3, [r4, #12]
 8014214:	059b      	lsls	r3, r3, #22
 8014216:	d402      	bmi.n	801421e <_puts_r+0x4e>
 8014218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801421a:	f000 f8e1 	bl	80143e0 <__retarget_lock_release_recursive>
 801421e:	4628      	mov	r0, r5
 8014220:	bd70      	pop	{r4, r5, r6, pc}
 8014222:	2b00      	cmp	r3, #0
 8014224:	da04      	bge.n	8014230 <_puts_r+0x60>
 8014226:	69a2      	ldr	r2, [r4, #24]
 8014228:	429a      	cmp	r2, r3
 801422a:	dc17      	bgt.n	801425c <_puts_r+0x8c>
 801422c:	290a      	cmp	r1, #10
 801422e:	d015      	beq.n	801425c <_puts_r+0x8c>
 8014230:	6823      	ldr	r3, [r4, #0]
 8014232:	1c5a      	adds	r2, r3, #1
 8014234:	6022      	str	r2, [r4, #0]
 8014236:	7019      	strb	r1, [r3, #0]
 8014238:	68a3      	ldr	r3, [r4, #8]
 801423a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801423e:	3b01      	subs	r3, #1
 8014240:	60a3      	str	r3, [r4, #8]
 8014242:	2900      	cmp	r1, #0
 8014244:	d1ed      	bne.n	8014222 <_puts_r+0x52>
 8014246:	2b00      	cmp	r3, #0
 8014248:	da11      	bge.n	801426e <_puts_r+0x9e>
 801424a:	4622      	mov	r2, r4
 801424c:	210a      	movs	r1, #10
 801424e:	4628      	mov	r0, r5
 8014250:	f000 fd7c 	bl	8014d4c <__swbuf_r>
 8014254:	3001      	adds	r0, #1
 8014256:	d0d7      	beq.n	8014208 <_puts_r+0x38>
 8014258:	250a      	movs	r5, #10
 801425a:	e7d7      	b.n	801420c <_puts_r+0x3c>
 801425c:	4622      	mov	r2, r4
 801425e:	4628      	mov	r0, r5
 8014260:	f000 fd74 	bl	8014d4c <__swbuf_r>
 8014264:	3001      	adds	r0, #1
 8014266:	d1e7      	bne.n	8014238 <_puts_r+0x68>
 8014268:	e7ce      	b.n	8014208 <_puts_r+0x38>
 801426a:	3e01      	subs	r6, #1
 801426c:	e7e4      	b.n	8014238 <_puts_r+0x68>
 801426e:	6823      	ldr	r3, [r4, #0]
 8014270:	1c5a      	adds	r2, r3, #1
 8014272:	6022      	str	r2, [r4, #0]
 8014274:	220a      	movs	r2, #10
 8014276:	701a      	strb	r2, [r3, #0]
 8014278:	e7ee      	b.n	8014258 <_puts_r+0x88>
	...

0801427c <puts>:
 801427c:	4b02      	ldr	r3, [pc, #8]	@ (8014288 <puts+0xc>)
 801427e:	4601      	mov	r1, r0
 8014280:	6818      	ldr	r0, [r3, #0]
 8014282:	f7ff bfa5 	b.w	80141d0 <_puts_r>
 8014286:	bf00      	nop
 8014288:	200000a8 	.word	0x200000a8

0801428c <strtok>:
 801428c:	4b16      	ldr	r3, [pc, #88]	@ (80142e8 <strtok+0x5c>)
 801428e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014292:	681f      	ldr	r7, [r3, #0]
 8014294:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014296:	4605      	mov	r5, r0
 8014298:	460e      	mov	r6, r1
 801429a:	b9ec      	cbnz	r4, 80142d8 <strtok+0x4c>
 801429c:	2050      	movs	r0, #80	@ 0x50
 801429e:	f000 fa0f 	bl	80146c0 <malloc>
 80142a2:	4602      	mov	r2, r0
 80142a4:	6478      	str	r0, [r7, #68]	@ 0x44
 80142a6:	b920      	cbnz	r0, 80142b2 <strtok+0x26>
 80142a8:	4b10      	ldr	r3, [pc, #64]	@ (80142ec <strtok+0x60>)
 80142aa:	4811      	ldr	r0, [pc, #68]	@ (80142f0 <strtok+0x64>)
 80142ac:	215b      	movs	r1, #91	@ 0x5b
 80142ae:	f000 f8a7 	bl	8014400 <__assert_func>
 80142b2:	e9c0 4400 	strd	r4, r4, [r0]
 80142b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80142ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80142be:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80142c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80142c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80142ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80142ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80142d2:	6184      	str	r4, [r0, #24]
 80142d4:	7704      	strb	r4, [r0, #28]
 80142d6:	6244      	str	r4, [r0, #36]	@ 0x24
 80142d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80142da:	4631      	mov	r1, r6
 80142dc:	4628      	mov	r0, r5
 80142de:	2301      	movs	r3, #1
 80142e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142e4:	f000 b806 	b.w	80142f4 <__strtok_r>
 80142e8:	200000a8 	.word	0x200000a8
 80142ec:	08015580 	.word	0x08015580
 80142f0:	080155ef 	.word	0x080155ef

080142f4 <__strtok_r>:
 80142f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142f6:	4604      	mov	r4, r0
 80142f8:	b908      	cbnz	r0, 80142fe <__strtok_r+0xa>
 80142fa:	6814      	ldr	r4, [r2, #0]
 80142fc:	b144      	cbz	r4, 8014310 <__strtok_r+0x1c>
 80142fe:	4620      	mov	r0, r4
 8014300:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014304:	460f      	mov	r7, r1
 8014306:	f817 6b01 	ldrb.w	r6, [r7], #1
 801430a:	b91e      	cbnz	r6, 8014314 <__strtok_r+0x20>
 801430c:	b965      	cbnz	r5, 8014328 <__strtok_r+0x34>
 801430e:	6015      	str	r5, [r2, #0]
 8014310:	2000      	movs	r0, #0
 8014312:	e005      	b.n	8014320 <__strtok_r+0x2c>
 8014314:	42b5      	cmp	r5, r6
 8014316:	d1f6      	bne.n	8014306 <__strtok_r+0x12>
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1f0      	bne.n	80142fe <__strtok_r+0xa>
 801431c:	6014      	str	r4, [r2, #0]
 801431e:	7003      	strb	r3, [r0, #0]
 8014320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014322:	461c      	mov	r4, r3
 8014324:	e00c      	b.n	8014340 <__strtok_r+0x4c>
 8014326:	b915      	cbnz	r5, 801432e <__strtok_r+0x3a>
 8014328:	f814 3b01 	ldrb.w	r3, [r4], #1
 801432c:	460e      	mov	r6, r1
 801432e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014332:	42ab      	cmp	r3, r5
 8014334:	d1f7      	bne.n	8014326 <__strtok_r+0x32>
 8014336:	2b00      	cmp	r3, #0
 8014338:	d0f3      	beq.n	8014322 <__strtok_r+0x2e>
 801433a:	2300      	movs	r3, #0
 801433c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014340:	6014      	str	r4, [r2, #0]
 8014342:	e7ed      	b.n	8014320 <__strtok_r+0x2c>

08014344 <memmove>:
 8014344:	4288      	cmp	r0, r1
 8014346:	b510      	push	{r4, lr}
 8014348:	eb01 0402 	add.w	r4, r1, r2
 801434c:	d902      	bls.n	8014354 <memmove+0x10>
 801434e:	4284      	cmp	r4, r0
 8014350:	4623      	mov	r3, r4
 8014352:	d807      	bhi.n	8014364 <memmove+0x20>
 8014354:	1e43      	subs	r3, r0, #1
 8014356:	42a1      	cmp	r1, r4
 8014358:	d008      	beq.n	801436c <memmove+0x28>
 801435a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801435e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014362:	e7f8      	b.n	8014356 <memmove+0x12>
 8014364:	4402      	add	r2, r0
 8014366:	4601      	mov	r1, r0
 8014368:	428a      	cmp	r2, r1
 801436a:	d100      	bne.n	801436e <memmove+0x2a>
 801436c:	bd10      	pop	{r4, pc}
 801436e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014376:	e7f7      	b.n	8014368 <memmove+0x24>

08014378 <memset>:
 8014378:	4402      	add	r2, r0
 801437a:	4603      	mov	r3, r0
 801437c:	4293      	cmp	r3, r2
 801437e:	d100      	bne.n	8014382 <memset+0xa>
 8014380:	4770      	bx	lr
 8014382:	f803 1b01 	strb.w	r1, [r3], #1
 8014386:	e7f9      	b.n	801437c <memset+0x4>

08014388 <__errno>:
 8014388:	4b01      	ldr	r3, [pc, #4]	@ (8014390 <__errno+0x8>)
 801438a:	6818      	ldr	r0, [r3, #0]
 801438c:	4770      	bx	lr
 801438e:	bf00      	nop
 8014390:	200000a8 	.word	0x200000a8

08014394 <__libc_init_array>:
 8014394:	b570      	push	{r4, r5, r6, lr}
 8014396:	4d0d      	ldr	r5, [pc, #52]	@ (80143cc <__libc_init_array+0x38>)
 8014398:	4c0d      	ldr	r4, [pc, #52]	@ (80143d0 <__libc_init_array+0x3c>)
 801439a:	1b64      	subs	r4, r4, r5
 801439c:	10a4      	asrs	r4, r4, #2
 801439e:	2600      	movs	r6, #0
 80143a0:	42a6      	cmp	r6, r4
 80143a2:	d109      	bne.n	80143b8 <__libc_init_array+0x24>
 80143a4:	4d0b      	ldr	r5, [pc, #44]	@ (80143d4 <__libc_init_array+0x40>)
 80143a6:	4c0c      	ldr	r4, [pc, #48]	@ (80143d8 <__libc_init_array+0x44>)
 80143a8:	f000 fed4 	bl	8015154 <_init>
 80143ac:	1b64      	subs	r4, r4, r5
 80143ae:	10a4      	asrs	r4, r4, #2
 80143b0:	2600      	movs	r6, #0
 80143b2:	42a6      	cmp	r6, r4
 80143b4:	d105      	bne.n	80143c2 <__libc_init_array+0x2e>
 80143b6:	bd70      	pop	{r4, r5, r6, pc}
 80143b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80143bc:	4798      	blx	r3
 80143be:	3601      	adds	r6, #1
 80143c0:	e7ee      	b.n	80143a0 <__libc_init_array+0xc>
 80143c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80143c6:	4798      	blx	r3
 80143c8:	3601      	adds	r6, #1
 80143ca:	e7f2      	b.n	80143b2 <__libc_init_array+0x1e>
 80143cc:	080157c4 	.word	0x080157c4
 80143d0:	080157c4 	.word	0x080157c4
 80143d4:	080157c4 	.word	0x080157c4
 80143d8:	080157c8 	.word	0x080157c8

080143dc <__retarget_lock_init_recursive>:
 80143dc:	4770      	bx	lr

080143de <__retarget_lock_acquire_recursive>:
 80143de:	4770      	bx	lr

080143e0 <__retarget_lock_release_recursive>:
 80143e0:	4770      	bx	lr

080143e2 <memcpy>:
 80143e2:	440a      	add	r2, r1
 80143e4:	4291      	cmp	r1, r2
 80143e6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80143ea:	d100      	bne.n	80143ee <memcpy+0xc>
 80143ec:	4770      	bx	lr
 80143ee:	b510      	push	{r4, lr}
 80143f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80143f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80143f8:	4291      	cmp	r1, r2
 80143fa:	d1f9      	bne.n	80143f0 <memcpy+0xe>
 80143fc:	bd10      	pop	{r4, pc}
	...

08014400 <__assert_func>:
 8014400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014402:	4614      	mov	r4, r2
 8014404:	461a      	mov	r2, r3
 8014406:	4b09      	ldr	r3, [pc, #36]	@ (801442c <__assert_func+0x2c>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	4605      	mov	r5, r0
 801440c:	68d8      	ldr	r0, [r3, #12]
 801440e:	b954      	cbnz	r4, 8014426 <__assert_func+0x26>
 8014410:	4b07      	ldr	r3, [pc, #28]	@ (8014430 <__assert_func+0x30>)
 8014412:	461c      	mov	r4, r3
 8014414:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014418:	9100      	str	r1, [sp, #0]
 801441a:	462b      	mov	r3, r5
 801441c:	4905      	ldr	r1, [pc, #20]	@ (8014434 <__assert_func+0x34>)
 801441e:	f000 fc83 	bl	8014d28 <fiprintf>
 8014422:	f000 fe01 	bl	8015028 <abort>
 8014426:	4b04      	ldr	r3, [pc, #16]	@ (8014438 <__assert_func+0x38>)
 8014428:	e7f4      	b.n	8014414 <__assert_func+0x14>
 801442a:	bf00      	nop
 801442c:	200000a8 	.word	0x200000a8
 8014430:	08015785 	.word	0x08015785
 8014434:	08015757 	.word	0x08015757
 8014438:	0801574a 	.word	0x0801574a

0801443c <__sfputc_r>:
 801443c:	6893      	ldr	r3, [r2, #8]
 801443e:	3b01      	subs	r3, #1
 8014440:	2b00      	cmp	r3, #0
 8014442:	b410      	push	{r4}
 8014444:	6093      	str	r3, [r2, #8]
 8014446:	da08      	bge.n	801445a <__sfputc_r+0x1e>
 8014448:	6994      	ldr	r4, [r2, #24]
 801444a:	42a3      	cmp	r3, r4
 801444c:	db01      	blt.n	8014452 <__sfputc_r+0x16>
 801444e:	290a      	cmp	r1, #10
 8014450:	d103      	bne.n	801445a <__sfputc_r+0x1e>
 8014452:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014456:	f000 bc79 	b.w	8014d4c <__swbuf_r>
 801445a:	6813      	ldr	r3, [r2, #0]
 801445c:	1c58      	adds	r0, r3, #1
 801445e:	6010      	str	r0, [r2, #0]
 8014460:	7019      	strb	r1, [r3, #0]
 8014462:	4608      	mov	r0, r1
 8014464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014468:	4770      	bx	lr

0801446a <__sfputs_r>:
 801446a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801446c:	4606      	mov	r6, r0
 801446e:	460f      	mov	r7, r1
 8014470:	4614      	mov	r4, r2
 8014472:	18d5      	adds	r5, r2, r3
 8014474:	42ac      	cmp	r4, r5
 8014476:	d101      	bne.n	801447c <__sfputs_r+0x12>
 8014478:	2000      	movs	r0, #0
 801447a:	e007      	b.n	801448c <__sfputs_r+0x22>
 801447c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014480:	463a      	mov	r2, r7
 8014482:	4630      	mov	r0, r6
 8014484:	f7ff ffda 	bl	801443c <__sfputc_r>
 8014488:	1c43      	adds	r3, r0, #1
 801448a:	d1f3      	bne.n	8014474 <__sfputs_r+0xa>
 801448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014490 <_vfiprintf_r>:
 8014490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014494:	460d      	mov	r5, r1
 8014496:	b09d      	sub	sp, #116	@ 0x74
 8014498:	4614      	mov	r4, r2
 801449a:	4698      	mov	r8, r3
 801449c:	4606      	mov	r6, r0
 801449e:	b118      	cbz	r0, 80144a8 <_vfiprintf_r+0x18>
 80144a0:	6a03      	ldr	r3, [r0, #32]
 80144a2:	b90b      	cbnz	r3, 80144a8 <_vfiprintf_r+0x18>
 80144a4:	f7ff fdc8 	bl	8014038 <__sinit>
 80144a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144aa:	07d9      	lsls	r1, r3, #31
 80144ac:	d405      	bmi.n	80144ba <_vfiprintf_r+0x2a>
 80144ae:	89ab      	ldrh	r3, [r5, #12]
 80144b0:	059a      	lsls	r2, r3, #22
 80144b2:	d402      	bmi.n	80144ba <_vfiprintf_r+0x2a>
 80144b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144b6:	f7ff ff92 	bl	80143de <__retarget_lock_acquire_recursive>
 80144ba:	89ab      	ldrh	r3, [r5, #12]
 80144bc:	071b      	lsls	r3, r3, #28
 80144be:	d501      	bpl.n	80144c4 <_vfiprintf_r+0x34>
 80144c0:	692b      	ldr	r3, [r5, #16]
 80144c2:	b99b      	cbnz	r3, 80144ec <_vfiprintf_r+0x5c>
 80144c4:	4629      	mov	r1, r5
 80144c6:	4630      	mov	r0, r6
 80144c8:	f000 fc7e 	bl	8014dc8 <__swsetup_r>
 80144cc:	b170      	cbz	r0, 80144ec <_vfiprintf_r+0x5c>
 80144ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144d0:	07dc      	lsls	r4, r3, #31
 80144d2:	d504      	bpl.n	80144de <_vfiprintf_r+0x4e>
 80144d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144d8:	b01d      	add	sp, #116	@ 0x74
 80144da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144de:	89ab      	ldrh	r3, [r5, #12]
 80144e0:	0598      	lsls	r0, r3, #22
 80144e2:	d4f7      	bmi.n	80144d4 <_vfiprintf_r+0x44>
 80144e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144e6:	f7ff ff7b 	bl	80143e0 <__retarget_lock_release_recursive>
 80144ea:	e7f3      	b.n	80144d4 <_vfiprintf_r+0x44>
 80144ec:	2300      	movs	r3, #0
 80144ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80144f0:	2320      	movs	r3, #32
 80144f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80144f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80144fa:	2330      	movs	r3, #48	@ 0x30
 80144fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80146ac <_vfiprintf_r+0x21c>
 8014500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014504:	f04f 0901 	mov.w	r9, #1
 8014508:	4623      	mov	r3, r4
 801450a:	469a      	mov	sl, r3
 801450c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014510:	b10a      	cbz	r2, 8014516 <_vfiprintf_r+0x86>
 8014512:	2a25      	cmp	r2, #37	@ 0x25
 8014514:	d1f9      	bne.n	801450a <_vfiprintf_r+0x7a>
 8014516:	ebba 0b04 	subs.w	fp, sl, r4
 801451a:	d00b      	beq.n	8014534 <_vfiprintf_r+0xa4>
 801451c:	465b      	mov	r3, fp
 801451e:	4622      	mov	r2, r4
 8014520:	4629      	mov	r1, r5
 8014522:	4630      	mov	r0, r6
 8014524:	f7ff ffa1 	bl	801446a <__sfputs_r>
 8014528:	3001      	adds	r0, #1
 801452a:	f000 80a7 	beq.w	801467c <_vfiprintf_r+0x1ec>
 801452e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014530:	445a      	add	r2, fp
 8014532:	9209      	str	r2, [sp, #36]	@ 0x24
 8014534:	f89a 3000 	ldrb.w	r3, [sl]
 8014538:	2b00      	cmp	r3, #0
 801453a:	f000 809f 	beq.w	801467c <_vfiprintf_r+0x1ec>
 801453e:	2300      	movs	r3, #0
 8014540:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014548:	f10a 0a01 	add.w	sl, sl, #1
 801454c:	9304      	str	r3, [sp, #16]
 801454e:	9307      	str	r3, [sp, #28]
 8014550:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014554:	931a      	str	r3, [sp, #104]	@ 0x68
 8014556:	4654      	mov	r4, sl
 8014558:	2205      	movs	r2, #5
 801455a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801455e:	4853      	ldr	r0, [pc, #332]	@ (80146ac <_vfiprintf_r+0x21c>)
 8014560:	f7eb ff6e 	bl	8000440 <memchr>
 8014564:	9a04      	ldr	r2, [sp, #16]
 8014566:	b9d8      	cbnz	r0, 80145a0 <_vfiprintf_r+0x110>
 8014568:	06d1      	lsls	r1, r2, #27
 801456a:	bf44      	itt	mi
 801456c:	2320      	movmi	r3, #32
 801456e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014572:	0713      	lsls	r3, r2, #28
 8014574:	bf44      	itt	mi
 8014576:	232b      	movmi	r3, #43	@ 0x2b
 8014578:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801457c:	f89a 3000 	ldrb.w	r3, [sl]
 8014580:	2b2a      	cmp	r3, #42	@ 0x2a
 8014582:	d015      	beq.n	80145b0 <_vfiprintf_r+0x120>
 8014584:	9a07      	ldr	r2, [sp, #28]
 8014586:	4654      	mov	r4, sl
 8014588:	2000      	movs	r0, #0
 801458a:	f04f 0c0a 	mov.w	ip, #10
 801458e:	4621      	mov	r1, r4
 8014590:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014594:	3b30      	subs	r3, #48	@ 0x30
 8014596:	2b09      	cmp	r3, #9
 8014598:	d94b      	bls.n	8014632 <_vfiprintf_r+0x1a2>
 801459a:	b1b0      	cbz	r0, 80145ca <_vfiprintf_r+0x13a>
 801459c:	9207      	str	r2, [sp, #28]
 801459e:	e014      	b.n	80145ca <_vfiprintf_r+0x13a>
 80145a0:	eba0 0308 	sub.w	r3, r0, r8
 80145a4:	fa09 f303 	lsl.w	r3, r9, r3
 80145a8:	4313      	orrs	r3, r2
 80145aa:	9304      	str	r3, [sp, #16]
 80145ac:	46a2      	mov	sl, r4
 80145ae:	e7d2      	b.n	8014556 <_vfiprintf_r+0xc6>
 80145b0:	9b03      	ldr	r3, [sp, #12]
 80145b2:	1d19      	adds	r1, r3, #4
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	9103      	str	r1, [sp, #12]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	bfbb      	ittet	lt
 80145bc:	425b      	neglt	r3, r3
 80145be:	f042 0202 	orrlt.w	r2, r2, #2
 80145c2:	9307      	strge	r3, [sp, #28]
 80145c4:	9307      	strlt	r3, [sp, #28]
 80145c6:	bfb8      	it	lt
 80145c8:	9204      	strlt	r2, [sp, #16]
 80145ca:	7823      	ldrb	r3, [r4, #0]
 80145cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80145ce:	d10a      	bne.n	80145e6 <_vfiprintf_r+0x156>
 80145d0:	7863      	ldrb	r3, [r4, #1]
 80145d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80145d4:	d132      	bne.n	801463c <_vfiprintf_r+0x1ac>
 80145d6:	9b03      	ldr	r3, [sp, #12]
 80145d8:	1d1a      	adds	r2, r3, #4
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	9203      	str	r2, [sp, #12]
 80145de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80145e2:	3402      	adds	r4, #2
 80145e4:	9305      	str	r3, [sp, #20]
 80145e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80146bc <_vfiprintf_r+0x22c>
 80145ea:	7821      	ldrb	r1, [r4, #0]
 80145ec:	2203      	movs	r2, #3
 80145ee:	4650      	mov	r0, sl
 80145f0:	f7eb ff26 	bl	8000440 <memchr>
 80145f4:	b138      	cbz	r0, 8014606 <_vfiprintf_r+0x176>
 80145f6:	9b04      	ldr	r3, [sp, #16]
 80145f8:	eba0 000a 	sub.w	r0, r0, sl
 80145fc:	2240      	movs	r2, #64	@ 0x40
 80145fe:	4082      	lsls	r2, r0
 8014600:	4313      	orrs	r3, r2
 8014602:	3401      	adds	r4, #1
 8014604:	9304      	str	r3, [sp, #16]
 8014606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801460a:	4829      	ldr	r0, [pc, #164]	@ (80146b0 <_vfiprintf_r+0x220>)
 801460c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014610:	2206      	movs	r2, #6
 8014612:	f7eb ff15 	bl	8000440 <memchr>
 8014616:	2800      	cmp	r0, #0
 8014618:	d03f      	beq.n	801469a <_vfiprintf_r+0x20a>
 801461a:	4b26      	ldr	r3, [pc, #152]	@ (80146b4 <_vfiprintf_r+0x224>)
 801461c:	bb1b      	cbnz	r3, 8014666 <_vfiprintf_r+0x1d6>
 801461e:	9b03      	ldr	r3, [sp, #12]
 8014620:	3307      	adds	r3, #7
 8014622:	f023 0307 	bic.w	r3, r3, #7
 8014626:	3308      	adds	r3, #8
 8014628:	9303      	str	r3, [sp, #12]
 801462a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801462c:	443b      	add	r3, r7
 801462e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014630:	e76a      	b.n	8014508 <_vfiprintf_r+0x78>
 8014632:	fb0c 3202 	mla	r2, ip, r2, r3
 8014636:	460c      	mov	r4, r1
 8014638:	2001      	movs	r0, #1
 801463a:	e7a8      	b.n	801458e <_vfiprintf_r+0xfe>
 801463c:	2300      	movs	r3, #0
 801463e:	3401      	adds	r4, #1
 8014640:	9305      	str	r3, [sp, #20]
 8014642:	4619      	mov	r1, r3
 8014644:	f04f 0c0a 	mov.w	ip, #10
 8014648:	4620      	mov	r0, r4
 801464a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801464e:	3a30      	subs	r2, #48	@ 0x30
 8014650:	2a09      	cmp	r2, #9
 8014652:	d903      	bls.n	801465c <_vfiprintf_r+0x1cc>
 8014654:	2b00      	cmp	r3, #0
 8014656:	d0c6      	beq.n	80145e6 <_vfiprintf_r+0x156>
 8014658:	9105      	str	r1, [sp, #20]
 801465a:	e7c4      	b.n	80145e6 <_vfiprintf_r+0x156>
 801465c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014660:	4604      	mov	r4, r0
 8014662:	2301      	movs	r3, #1
 8014664:	e7f0      	b.n	8014648 <_vfiprintf_r+0x1b8>
 8014666:	ab03      	add	r3, sp, #12
 8014668:	9300      	str	r3, [sp, #0]
 801466a:	462a      	mov	r2, r5
 801466c:	4b12      	ldr	r3, [pc, #72]	@ (80146b8 <_vfiprintf_r+0x228>)
 801466e:	a904      	add	r1, sp, #16
 8014670:	4630      	mov	r0, r6
 8014672:	f3af 8000 	nop.w
 8014676:	4607      	mov	r7, r0
 8014678:	1c78      	adds	r0, r7, #1
 801467a:	d1d6      	bne.n	801462a <_vfiprintf_r+0x19a>
 801467c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801467e:	07d9      	lsls	r1, r3, #31
 8014680:	d405      	bmi.n	801468e <_vfiprintf_r+0x1fe>
 8014682:	89ab      	ldrh	r3, [r5, #12]
 8014684:	059a      	lsls	r2, r3, #22
 8014686:	d402      	bmi.n	801468e <_vfiprintf_r+0x1fe>
 8014688:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801468a:	f7ff fea9 	bl	80143e0 <__retarget_lock_release_recursive>
 801468e:	89ab      	ldrh	r3, [r5, #12]
 8014690:	065b      	lsls	r3, r3, #25
 8014692:	f53f af1f 	bmi.w	80144d4 <_vfiprintf_r+0x44>
 8014696:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014698:	e71e      	b.n	80144d8 <_vfiprintf_r+0x48>
 801469a:	ab03      	add	r3, sp, #12
 801469c:	9300      	str	r3, [sp, #0]
 801469e:	462a      	mov	r2, r5
 80146a0:	4b05      	ldr	r3, [pc, #20]	@ (80146b8 <_vfiprintf_r+0x228>)
 80146a2:	a904      	add	r1, sp, #16
 80146a4:	4630      	mov	r0, r6
 80146a6:	f000 f923 	bl	80148f0 <_printf_i>
 80146aa:	e7e4      	b.n	8014676 <_vfiprintf_r+0x1e6>
 80146ac:	08015786 	.word	0x08015786
 80146b0:	08015790 	.word	0x08015790
 80146b4:	00000000 	.word	0x00000000
 80146b8:	0801446b 	.word	0x0801446b
 80146bc:	0801578c 	.word	0x0801578c

080146c0 <malloc>:
 80146c0:	4b02      	ldr	r3, [pc, #8]	@ (80146cc <malloc+0xc>)
 80146c2:	4601      	mov	r1, r0
 80146c4:	6818      	ldr	r0, [r3, #0]
 80146c6:	f000 b825 	b.w	8014714 <_malloc_r>
 80146ca:	bf00      	nop
 80146cc:	200000a8 	.word	0x200000a8

080146d0 <sbrk_aligned>:
 80146d0:	b570      	push	{r4, r5, r6, lr}
 80146d2:	4e0f      	ldr	r6, [pc, #60]	@ (8014710 <sbrk_aligned+0x40>)
 80146d4:	460c      	mov	r4, r1
 80146d6:	6831      	ldr	r1, [r6, #0]
 80146d8:	4605      	mov	r5, r0
 80146da:	b911      	cbnz	r1, 80146e2 <sbrk_aligned+0x12>
 80146dc:	f000 fc82 	bl	8014fe4 <_sbrk_r>
 80146e0:	6030      	str	r0, [r6, #0]
 80146e2:	4621      	mov	r1, r4
 80146e4:	4628      	mov	r0, r5
 80146e6:	f000 fc7d 	bl	8014fe4 <_sbrk_r>
 80146ea:	1c43      	adds	r3, r0, #1
 80146ec:	d103      	bne.n	80146f6 <sbrk_aligned+0x26>
 80146ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80146f2:	4620      	mov	r0, r4
 80146f4:	bd70      	pop	{r4, r5, r6, pc}
 80146f6:	1cc4      	adds	r4, r0, #3
 80146f8:	f024 0403 	bic.w	r4, r4, #3
 80146fc:	42a0      	cmp	r0, r4
 80146fe:	d0f8      	beq.n	80146f2 <sbrk_aligned+0x22>
 8014700:	1a21      	subs	r1, r4, r0
 8014702:	4628      	mov	r0, r5
 8014704:	f000 fc6e 	bl	8014fe4 <_sbrk_r>
 8014708:	3001      	adds	r0, #1
 801470a:	d1f2      	bne.n	80146f2 <sbrk_aligned+0x22>
 801470c:	e7ef      	b.n	80146ee <sbrk_aligned+0x1e>
 801470e:	bf00      	nop
 8014710:	2000b560 	.word	0x2000b560

08014714 <_malloc_r>:
 8014714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014718:	1ccd      	adds	r5, r1, #3
 801471a:	f025 0503 	bic.w	r5, r5, #3
 801471e:	3508      	adds	r5, #8
 8014720:	2d0c      	cmp	r5, #12
 8014722:	bf38      	it	cc
 8014724:	250c      	movcc	r5, #12
 8014726:	2d00      	cmp	r5, #0
 8014728:	4606      	mov	r6, r0
 801472a:	db01      	blt.n	8014730 <_malloc_r+0x1c>
 801472c:	42a9      	cmp	r1, r5
 801472e:	d904      	bls.n	801473a <_malloc_r+0x26>
 8014730:	230c      	movs	r3, #12
 8014732:	6033      	str	r3, [r6, #0]
 8014734:	2000      	movs	r0, #0
 8014736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801473a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014810 <_malloc_r+0xfc>
 801473e:	f000 faa3 	bl	8014c88 <__malloc_lock>
 8014742:	f8d8 3000 	ldr.w	r3, [r8]
 8014746:	461c      	mov	r4, r3
 8014748:	bb44      	cbnz	r4, 801479c <_malloc_r+0x88>
 801474a:	4629      	mov	r1, r5
 801474c:	4630      	mov	r0, r6
 801474e:	f7ff ffbf 	bl	80146d0 <sbrk_aligned>
 8014752:	1c43      	adds	r3, r0, #1
 8014754:	4604      	mov	r4, r0
 8014756:	d158      	bne.n	801480a <_malloc_r+0xf6>
 8014758:	f8d8 4000 	ldr.w	r4, [r8]
 801475c:	4627      	mov	r7, r4
 801475e:	2f00      	cmp	r7, #0
 8014760:	d143      	bne.n	80147ea <_malloc_r+0xd6>
 8014762:	2c00      	cmp	r4, #0
 8014764:	d04b      	beq.n	80147fe <_malloc_r+0xea>
 8014766:	6823      	ldr	r3, [r4, #0]
 8014768:	4639      	mov	r1, r7
 801476a:	4630      	mov	r0, r6
 801476c:	eb04 0903 	add.w	r9, r4, r3
 8014770:	f000 fc38 	bl	8014fe4 <_sbrk_r>
 8014774:	4581      	cmp	r9, r0
 8014776:	d142      	bne.n	80147fe <_malloc_r+0xea>
 8014778:	6821      	ldr	r1, [r4, #0]
 801477a:	1a6d      	subs	r5, r5, r1
 801477c:	4629      	mov	r1, r5
 801477e:	4630      	mov	r0, r6
 8014780:	f7ff ffa6 	bl	80146d0 <sbrk_aligned>
 8014784:	3001      	adds	r0, #1
 8014786:	d03a      	beq.n	80147fe <_malloc_r+0xea>
 8014788:	6823      	ldr	r3, [r4, #0]
 801478a:	442b      	add	r3, r5
 801478c:	6023      	str	r3, [r4, #0]
 801478e:	f8d8 3000 	ldr.w	r3, [r8]
 8014792:	685a      	ldr	r2, [r3, #4]
 8014794:	bb62      	cbnz	r2, 80147f0 <_malloc_r+0xdc>
 8014796:	f8c8 7000 	str.w	r7, [r8]
 801479a:	e00f      	b.n	80147bc <_malloc_r+0xa8>
 801479c:	6822      	ldr	r2, [r4, #0]
 801479e:	1b52      	subs	r2, r2, r5
 80147a0:	d420      	bmi.n	80147e4 <_malloc_r+0xd0>
 80147a2:	2a0b      	cmp	r2, #11
 80147a4:	d917      	bls.n	80147d6 <_malloc_r+0xc2>
 80147a6:	1961      	adds	r1, r4, r5
 80147a8:	42a3      	cmp	r3, r4
 80147aa:	6025      	str	r5, [r4, #0]
 80147ac:	bf18      	it	ne
 80147ae:	6059      	strne	r1, [r3, #4]
 80147b0:	6863      	ldr	r3, [r4, #4]
 80147b2:	bf08      	it	eq
 80147b4:	f8c8 1000 	streq.w	r1, [r8]
 80147b8:	5162      	str	r2, [r4, r5]
 80147ba:	604b      	str	r3, [r1, #4]
 80147bc:	4630      	mov	r0, r6
 80147be:	f000 fa69 	bl	8014c94 <__malloc_unlock>
 80147c2:	f104 000b 	add.w	r0, r4, #11
 80147c6:	1d23      	adds	r3, r4, #4
 80147c8:	f020 0007 	bic.w	r0, r0, #7
 80147cc:	1ac2      	subs	r2, r0, r3
 80147ce:	bf1c      	itt	ne
 80147d0:	1a1b      	subne	r3, r3, r0
 80147d2:	50a3      	strne	r3, [r4, r2]
 80147d4:	e7af      	b.n	8014736 <_malloc_r+0x22>
 80147d6:	6862      	ldr	r2, [r4, #4]
 80147d8:	42a3      	cmp	r3, r4
 80147da:	bf0c      	ite	eq
 80147dc:	f8c8 2000 	streq.w	r2, [r8]
 80147e0:	605a      	strne	r2, [r3, #4]
 80147e2:	e7eb      	b.n	80147bc <_malloc_r+0xa8>
 80147e4:	4623      	mov	r3, r4
 80147e6:	6864      	ldr	r4, [r4, #4]
 80147e8:	e7ae      	b.n	8014748 <_malloc_r+0x34>
 80147ea:	463c      	mov	r4, r7
 80147ec:	687f      	ldr	r7, [r7, #4]
 80147ee:	e7b6      	b.n	801475e <_malloc_r+0x4a>
 80147f0:	461a      	mov	r2, r3
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	42a3      	cmp	r3, r4
 80147f6:	d1fb      	bne.n	80147f0 <_malloc_r+0xdc>
 80147f8:	2300      	movs	r3, #0
 80147fa:	6053      	str	r3, [r2, #4]
 80147fc:	e7de      	b.n	80147bc <_malloc_r+0xa8>
 80147fe:	230c      	movs	r3, #12
 8014800:	6033      	str	r3, [r6, #0]
 8014802:	4630      	mov	r0, r6
 8014804:	f000 fa46 	bl	8014c94 <__malloc_unlock>
 8014808:	e794      	b.n	8014734 <_malloc_r+0x20>
 801480a:	6005      	str	r5, [r0, #0]
 801480c:	e7d6      	b.n	80147bc <_malloc_r+0xa8>
 801480e:	bf00      	nop
 8014810:	2000b564 	.word	0x2000b564

08014814 <_printf_common>:
 8014814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014818:	4616      	mov	r6, r2
 801481a:	4698      	mov	r8, r3
 801481c:	688a      	ldr	r2, [r1, #8]
 801481e:	690b      	ldr	r3, [r1, #16]
 8014820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014824:	4293      	cmp	r3, r2
 8014826:	bfb8      	it	lt
 8014828:	4613      	movlt	r3, r2
 801482a:	6033      	str	r3, [r6, #0]
 801482c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014830:	4607      	mov	r7, r0
 8014832:	460c      	mov	r4, r1
 8014834:	b10a      	cbz	r2, 801483a <_printf_common+0x26>
 8014836:	3301      	adds	r3, #1
 8014838:	6033      	str	r3, [r6, #0]
 801483a:	6823      	ldr	r3, [r4, #0]
 801483c:	0699      	lsls	r1, r3, #26
 801483e:	bf42      	ittt	mi
 8014840:	6833      	ldrmi	r3, [r6, #0]
 8014842:	3302      	addmi	r3, #2
 8014844:	6033      	strmi	r3, [r6, #0]
 8014846:	6825      	ldr	r5, [r4, #0]
 8014848:	f015 0506 	ands.w	r5, r5, #6
 801484c:	d106      	bne.n	801485c <_printf_common+0x48>
 801484e:	f104 0a19 	add.w	sl, r4, #25
 8014852:	68e3      	ldr	r3, [r4, #12]
 8014854:	6832      	ldr	r2, [r6, #0]
 8014856:	1a9b      	subs	r3, r3, r2
 8014858:	42ab      	cmp	r3, r5
 801485a:	dc26      	bgt.n	80148aa <_printf_common+0x96>
 801485c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014860:	6822      	ldr	r2, [r4, #0]
 8014862:	3b00      	subs	r3, #0
 8014864:	bf18      	it	ne
 8014866:	2301      	movne	r3, #1
 8014868:	0692      	lsls	r2, r2, #26
 801486a:	d42b      	bmi.n	80148c4 <_printf_common+0xb0>
 801486c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014870:	4641      	mov	r1, r8
 8014872:	4638      	mov	r0, r7
 8014874:	47c8      	blx	r9
 8014876:	3001      	adds	r0, #1
 8014878:	d01e      	beq.n	80148b8 <_printf_common+0xa4>
 801487a:	6823      	ldr	r3, [r4, #0]
 801487c:	6922      	ldr	r2, [r4, #16]
 801487e:	f003 0306 	and.w	r3, r3, #6
 8014882:	2b04      	cmp	r3, #4
 8014884:	bf02      	ittt	eq
 8014886:	68e5      	ldreq	r5, [r4, #12]
 8014888:	6833      	ldreq	r3, [r6, #0]
 801488a:	1aed      	subeq	r5, r5, r3
 801488c:	68a3      	ldr	r3, [r4, #8]
 801488e:	bf0c      	ite	eq
 8014890:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014894:	2500      	movne	r5, #0
 8014896:	4293      	cmp	r3, r2
 8014898:	bfc4      	itt	gt
 801489a:	1a9b      	subgt	r3, r3, r2
 801489c:	18ed      	addgt	r5, r5, r3
 801489e:	2600      	movs	r6, #0
 80148a0:	341a      	adds	r4, #26
 80148a2:	42b5      	cmp	r5, r6
 80148a4:	d11a      	bne.n	80148dc <_printf_common+0xc8>
 80148a6:	2000      	movs	r0, #0
 80148a8:	e008      	b.n	80148bc <_printf_common+0xa8>
 80148aa:	2301      	movs	r3, #1
 80148ac:	4652      	mov	r2, sl
 80148ae:	4641      	mov	r1, r8
 80148b0:	4638      	mov	r0, r7
 80148b2:	47c8      	blx	r9
 80148b4:	3001      	adds	r0, #1
 80148b6:	d103      	bne.n	80148c0 <_printf_common+0xac>
 80148b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80148bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148c0:	3501      	adds	r5, #1
 80148c2:	e7c6      	b.n	8014852 <_printf_common+0x3e>
 80148c4:	18e1      	adds	r1, r4, r3
 80148c6:	1c5a      	adds	r2, r3, #1
 80148c8:	2030      	movs	r0, #48	@ 0x30
 80148ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80148ce:	4422      	add	r2, r4
 80148d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80148d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80148d8:	3302      	adds	r3, #2
 80148da:	e7c7      	b.n	801486c <_printf_common+0x58>
 80148dc:	2301      	movs	r3, #1
 80148de:	4622      	mov	r2, r4
 80148e0:	4641      	mov	r1, r8
 80148e2:	4638      	mov	r0, r7
 80148e4:	47c8      	blx	r9
 80148e6:	3001      	adds	r0, #1
 80148e8:	d0e6      	beq.n	80148b8 <_printf_common+0xa4>
 80148ea:	3601      	adds	r6, #1
 80148ec:	e7d9      	b.n	80148a2 <_printf_common+0x8e>
	...

080148f0 <_printf_i>:
 80148f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80148f4:	7e0f      	ldrb	r7, [r1, #24]
 80148f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80148f8:	2f78      	cmp	r7, #120	@ 0x78
 80148fa:	4691      	mov	r9, r2
 80148fc:	4680      	mov	r8, r0
 80148fe:	460c      	mov	r4, r1
 8014900:	469a      	mov	sl, r3
 8014902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014906:	d807      	bhi.n	8014918 <_printf_i+0x28>
 8014908:	2f62      	cmp	r7, #98	@ 0x62
 801490a:	d80a      	bhi.n	8014922 <_printf_i+0x32>
 801490c:	2f00      	cmp	r7, #0
 801490e:	f000 80d2 	beq.w	8014ab6 <_printf_i+0x1c6>
 8014912:	2f58      	cmp	r7, #88	@ 0x58
 8014914:	f000 80b9 	beq.w	8014a8a <_printf_i+0x19a>
 8014918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801491c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014920:	e03a      	b.n	8014998 <_printf_i+0xa8>
 8014922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014926:	2b15      	cmp	r3, #21
 8014928:	d8f6      	bhi.n	8014918 <_printf_i+0x28>
 801492a:	a101      	add	r1, pc, #4	@ (adr r1, 8014930 <_printf_i+0x40>)
 801492c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014930:	08014989 	.word	0x08014989
 8014934:	0801499d 	.word	0x0801499d
 8014938:	08014919 	.word	0x08014919
 801493c:	08014919 	.word	0x08014919
 8014940:	08014919 	.word	0x08014919
 8014944:	08014919 	.word	0x08014919
 8014948:	0801499d 	.word	0x0801499d
 801494c:	08014919 	.word	0x08014919
 8014950:	08014919 	.word	0x08014919
 8014954:	08014919 	.word	0x08014919
 8014958:	08014919 	.word	0x08014919
 801495c:	08014a9d 	.word	0x08014a9d
 8014960:	080149c7 	.word	0x080149c7
 8014964:	08014a57 	.word	0x08014a57
 8014968:	08014919 	.word	0x08014919
 801496c:	08014919 	.word	0x08014919
 8014970:	08014abf 	.word	0x08014abf
 8014974:	08014919 	.word	0x08014919
 8014978:	080149c7 	.word	0x080149c7
 801497c:	08014919 	.word	0x08014919
 8014980:	08014919 	.word	0x08014919
 8014984:	08014a5f 	.word	0x08014a5f
 8014988:	6833      	ldr	r3, [r6, #0]
 801498a:	1d1a      	adds	r2, r3, #4
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	6032      	str	r2, [r6, #0]
 8014990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014998:	2301      	movs	r3, #1
 801499a:	e09d      	b.n	8014ad8 <_printf_i+0x1e8>
 801499c:	6833      	ldr	r3, [r6, #0]
 801499e:	6820      	ldr	r0, [r4, #0]
 80149a0:	1d19      	adds	r1, r3, #4
 80149a2:	6031      	str	r1, [r6, #0]
 80149a4:	0606      	lsls	r6, r0, #24
 80149a6:	d501      	bpl.n	80149ac <_printf_i+0xbc>
 80149a8:	681d      	ldr	r5, [r3, #0]
 80149aa:	e003      	b.n	80149b4 <_printf_i+0xc4>
 80149ac:	0645      	lsls	r5, r0, #25
 80149ae:	d5fb      	bpl.n	80149a8 <_printf_i+0xb8>
 80149b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80149b4:	2d00      	cmp	r5, #0
 80149b6:	da03      	bge.n	80149c0 <_printf_i+0xd0>
 80149b8:	232d      	movs	r3, #45	@ 0x2d
 80149ba:	426d      	negs	r5, r5
 80149bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80149c0:	4859      	ldr	r0, [pc, #356]	@ (8014b28 <_printf_i+0x238>)
 80149c2:	230a      	movs	r3, #10
 80149c4:	e011      	b.n	80149ea <_printf_i+0xfa>
 80149c6:	6821      	ldr	r1, [r4, #0]
 80149c8:	6833      	ldr	r3, [r6, #0]
 80149ca:	0608      	lsls	r0, r1, #24
 80149cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80149d0:	d402      	bmi.n	80149d8 <_printf_i+0xe8>
 80149d2:	0649      	lsls	r1, r1, #25
 80149d4:	bf48      	it	mi
 80149d6:	b2ad      	uxthmi	r5, r5
 80149d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80149da:	4853      	ldr	r0, [pc, #332]	@ (8014b28 <_printf_i+0x238>)
 80149dc:	6033      	str	r3, [r6, #0]
 80149de:	bf14      	ite	ne
 80149e0:	230a      	movne	r3, #10
 80149e2:	2308      	moveq	r3, #8
 80149e4:	2100      	movs	r1, #0
 80149e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80149ea:	6866      	ldr	r6, [r4, #4]
 80149ec:	60a6      	str	r6, [r4, #8]
 80149ee:	2e00      	cmp	r6, #0
 80149f0:	bfa2      	ittt	ge
 80149f2:	6821      	ldrge	r1, [r4, #0]
 80149f4:	f021 0104 	bicge.w	r1, r1, #4
 80149f8:	6021      	strge	r1, [r4, #0]
 80149fa:	b90d      	cbnz	r5, 8014a00 <_printf_i+0x110>
 80149fc:	2e00      	cmp	r6, #0
 80149fe:	d04b      	beq.n	8014a98 <_printf_i+0x1a8>
 8014a00:	4616      	mov	r6, r2
 8014a02:	fbb5 f1f3 	udiv	r1, r5, r3
 8014a06:	fb03 5711 	mls	r7, r3, r1, r5
 8014a0a:	5dc7      	ldrb	r7, [r0, r7]
 8014a0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014a10:	462f      	mov	r7, r5
 8014a12:	42bb      	cmp	r3, r7
 8014a14:	460d      	mov	r5, r1
 8014a16:	d9f4      	bls.n	8014a02 <_printf_i+0x112>
 8014a18:	2b08      	cmp	r3, #8
 8014a1a:	d10b      	bne.n	8014a34 <_printf_i+0x144>
 8014a1c:	6823      	ldr	r3, [r4, #0]
 8014a1e:	07df      	lsls	r7, r3, #31
 8014a20:	d508      	bpl.n	8014a34 <_printf_i+0x144>
 8014a22:	6923      	ldr	r3, [r4, #16]
 8014a24:	6861      	ldr	r1, [r4, #4]
 8014a26:	4299      	cmp	r1, r3
 8014a28:	bfde      	ittt	le
 8014a2a:	2330      	movle	r3, #48	@ 0x30
 8014a2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014a30:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8014a34:	1b92      	subs	r2, r2, r6
 8014a36:	6122      	str	r2, [r4, #16]
 8014a38:	f8cd a000 	str.w	sl, [sp]
 8014a3c:	464b      	mov	r3, r9
 8014a3e:	aa03      	add	r2, sp, #12
 8014a40:	4621      	mov	r1, r4
 8014a42:	4640      	mov	r0, r8
 8014a44:	f7ff fee6 	bl	8014814 <_printf_common>
 8014a48:	3001      	adds	r0, #1
 8014a4a:	d14a      	bne.n	8014ae2 <_printf_i+0x1f2>
 8014a4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014a50:	b004      	add	sp, #16
 8014a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a56:	6823      	ldr	r3, [r4, #0]
 8014a58:	f043 0320 	orr.w	r3, r3, #32
 8014a5c:	6023      	str	r3, [r4, #0]
 8014a5e:	4833      	ldr	r0, [pc, #204]	@ (8014b2c <_printf_i+0x23c>)
 8014a60:	2778      	movs	r7, #120	@ 0x78
 8014a62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014a66:	6823      	ldr	r3, [r4, #0]
 8014a68:	6831      	ldr	r1, [r6, #0]
 8014a6a:	061f      	lsls	r7, r3, #24
 8014a6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8014a70:	d402      	bmi.n	8014a78 <_printf_i+0x188>
 8014a72:	065f      	lsls	r7, r3, #25
 8014a74:	bf48      	it	mi
 8014a76:	b2ad      	uxthmi	r5, r5
 8014a78:	6031      	str	r1, [r6, #0]
 8014a7a:	07d9      	lsls	r1, r3, #31
 8014a7c:	bf44      	itt	mi
 8014a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8014a82:	6023      	strmi	r3, [r4, #0]
 8014a84:	b11d      	cbz	r5, 8014a8e <_printf_i+0x19e>
 8014a86:	2310      	movs	r3, #16
 8014a88:	e7ac      	b.n	80149e4 <_printf_i+0xf4>
 8014a8a:	4827      	ldr	r0, [pc, #156]	@ (8014b28 <_printf_i+0x238>)
 8014a8c:	e7e9      	b.n	8014a62 <_printf_i+0x172>
 8014a8e:	6823      	ldr	r3, [r4, #0]
 8014a90:	f023 0320 	bic.w	r3, r3, #32
 8014a94:	6023      	str	r3, [r4, #0]
 8014a96:	e7f6      	b.n	8014a86 <_printf_i+0x196>
 8014a98:	4616      	mov	r6, r2
 8014a9a:	e7bd      	b.n	8014a18 <_printf_i+0x128>
 8014a9c:	6833      	ldr	r3, [r6, #0]
 8014a9e:	6825      	ldr	r5, [r4, #0]
 8014aa0:	6961      	ldr	r1, [r4, #20]
 8014aa2:	1d18      	adds	r0, r3, #4
 8014aa4:	6030      	str	r0, [r6, #0]
 8014aa6:	062e      	lsls	r6, r5, #24
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	d501      	bpl.n	8014ab0 <_printf_i+0x1c0>
 8014aac:	6019      	str	r1, [r3, #0]
 8014aae:	e002      	b.n	8014ab6 <_printf_i+0x1c6>
 8014ab0:	0668      	lsls	r0, r5, #25
 8014ab2:	d5fb      	bpl.n	8014aac <_printf_i+0x1bc>
 8014ab4:	8019      	strh	r1, [r3, #0]
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	6123      	str	r3, [r4, #16]
 8014aba:	4616      	mov	r6, r2
 8014abc:	e7bc      	b.n	8014a38 <_printf_i+0x148>
 8014abe:	6833      	ldr	r3, [r6, #0]
 8014ac0:	1d1a      	adds	r2, r3, #4
 8014ac2:	6032      	str	r2, [r6, #0]
 8014ac4:	681e      	ldr	r6, [r3, #0]
 8014ac6:	6862      	ldr	r2, [r4, #4]
 8014ac8:	2100      	movs	r1, #0
 8014aca:	4630      	mov	r0, r6
 8014acc:	f7eb fcb8 	bl	8000440 <memchr>
 8014ad0:	b108      	cbz	r0, 8014ad6 <_printf_i+0x1e6>
 8014ad2:	1b80      	subs	r0, r0, r6
 8014ad4:	6060      	str	r0, [r4, #4]
 8014ad6:	6863      	ldr	r3, [r4, #4]
 8014ad8:	6123      	str	r3, [r4, #16]
 8014ada:	2300      	movs	r3, #0
 8014adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014ae0:	e7aa      	b.n	8014a38 <_printf_i+0x148>
 8014ae2:	6923      	ldr	r3, [r4, #16]
 8014ae4:	4632      	mov	r2, r6
 8014ae6:	4649      	mov	r1, r9
 8014ae8:	4640      	mov	r0, r8
 8014aea:	47d0      	blx	sl
 8014aec:	3001      	adds	r0, #1
 8014aee:	d0ad      	beq.n	8014a4c <_printf_i+0x15c>
 8014af0:	6823      	ldr	r3, [r4, #0]
 8014af2:	079b      	lsls	r3, r3, #30
 8014af4:	d413      	bmi.n	8014b1e <_printf_i+0x22e>
 8014af6:	68e0      	ldr	r0, [r4, #12]
 8014af8:	9b03      	ldr	r3, [sp, #12]
 8014afa:	4298      	cmp	r0, r3
 8014afc:	bfb8      	it	lt
 8014afe:	4618      	movlt	r0, r3
 8014b00:	e7a6      	b.n	8014a50 <_printf_i+0x160>
 8014b02:	2301      	movs	r3, #1
 8014b04:	4632      	mov	r2, r6
 8014b06:	4649      	mov	r1, r9
 8014b08:	4640      	mov	r0, r8
 8014b0a:	47d0      	blx	sl
 8014b0c:	3001      	adds	r0, #1
 8014b0e:	d09d      	beq.n	8014a4c <_printf_i+0x15c>
 8014b10:	3501      	adds	r5, #1
 8014b12:	68e3      	ldr	r3, [r4, #12]
 8014b14:	9903      	ldr	r1, [sp, #12]
 8014b16:	1a5b      	subs	r3, r3, r1
 8014b18:	42ab      	cmp	r3, r5
 8014b1a:	dcf2      	bgt.n	8014b02 <_printf_i+0x212>
 8014b1c:	e7eb      	b.n	8014af6 <_printf_i+0x206>
 8014b1e:	2500      	movs	r5, #0
 8014b20:	f104 0619 	add.w	r6, r4, #25
 8014b24:	e7f5      	b.n	8014b12 <_printf_i+0x222>
 8014b26:	bf00      	nop
 8014b28:	08015797 	.word	0x08015797
 8014b2c:	080157a8 	.word	0x080157a8

08014b30 <__sflush_r>:
 8014b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b38:	0716      	lsls	r6, r2, #28
 8014b3a:	4605      	mov	r5, r0
 8014b3c:	460c      	mov	r4, r1
 8014b3e:	d454      	bmi.n	8014bea <__sflush_r+0xba>
 8014b40:	684b      	ldr	r3, [r1, #4]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	dc02      	bgt.n	8014b4c <__sflush_r+0x1c>
 8014b46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	dd48      	ble.n	8014bde <__sflush_r+0xae>
 8014b4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014b4e:	2e00      	cmp	r6, #0
 8014b50:	d045      	beq.n	8014bde <__sflush_r+0xae>
 8014b52:	2300      	movs	r3, #0
 8014b54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014b58:	682f      	ldr	r7, [r5, #0]
 8014b5a:	6a21      	ldr	r1, [r4, #32]
 8014b5c:	602b      	str	r3, [r5, #0]
 8014b5e:	d030      	beq.n	8014bc2 <__sflush_r+0x92>
 8014b60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014b62:	89a3      	ldrh	r3, [r4, #12]
 8014b64:	0759      	lsls	r1, r3, #29
 8014b66:	d505      	bpl.n	8014b74 <__sflush_r+0x44>
 8014b68:	6863      	ldr	r3, [r4, #4]
 8014b6a:	1ad2      	subs	r2, r2, r3
 8014b6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014b6e:	b10b      	cbz	r3, 8014b74 <__sflush_r+0x44>
 8014b70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014b72:	1ad2      	subs	r2, r2, r3
 8014b74:	2300      	movs	r3, #0
 8014b76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014b78:	6a21      	ldr	r1, [r4, #32]
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	47b0      	blx	r6
 8014b7e:	1c43      	adds	r3, r0, #1
 8014b80:	89a3      	ldrh	r3, [r4, #12]
 8014b82:	d106      	bne.n	8014b92 <__sflush_r+0x62>
 8014b84:	6829      	ldr	r1, [r5, #0]
 8014b86:	291d      	cmp	r1, #29
 8014b88:	d82b      	bhi.n	8014be2 <__sflush_r+0xb2>
 8014b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8014c34 <__sflush_r+0x104>)
 8014b8c:	410a      	asrs	r2, r1
 8014b8e:	07d6      	lsls	r6, r2, #31
 8014b90:	d427      	bmi.n	8014be2 <__sflush_r+0xb2>
 8014b92:	2200      	movs	r2, #0
 8014b94:	6062      	str	r2, [r4, #4]
 8014b96:	04d9      	lsls	r1, r3, #19
 8014b98:	6922      	ldr	r2, [r4, #16]
 8014b9a:	6022      	str	r2, [r4, #0]
 8014b9c:	d504      	bpl.n	8014ba8 <__sflush_r+0x78>
 8014b9e:	1c42      	adds	r2, r0, #1
 8014ba0:	d101      	bne.n	8014ba6 <__sflush_r+0x76>
 8014ba2:	682b      	ldr	r3, [r5, #0]
 8014ba4:	b903      	cbnz	r3, 8014ba8 <__sflush_r+0x78>
 8014ba6:	6560      	str	r0, [r4, #84]	@ 0x54
 8014ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014baa:	602f      	str	r7, [r5, #0]
 8014bac:	b1b9      	cbz	r1, 8014bde <__sflush_r+0xae>
 8014bae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014bb2:	4299      	cmp	r1, r3
 8014bb4:	d002      	beq.n	8014bbc <__sflush_r+0x8c>
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	f000 fa3e 	bl	8015038 <_free_r>
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8014bc0:	e00d      	b.n	8014bde <__sflush_r+0xae>
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	47b0      	blx	r6
 8014bc8:	4602      	mov	r2, r0
 8014bca:	1c50      	adds	r0, r2, #1
 8014bcc:	d1c9      	bne.n	8014b62 <__sflush_r+0x32>
 8014bce:	682b      	ldr	r3, [r5, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d0c6      	beq.n	8014b62 <__sflush_r+0x32>
 8014bd4:	2b1d      	cmp	r3, #29
 8014bd6:	d001      	beq.n	8014bdc <__sflush_r+0xac>
 8014bd8:	2b16      	cmp	r3, #22
 8014bda:	d11e      	bne.n	8014c1a <__sflush_r+0xea>
 8014bdc:	602f      	str	r7, [r5, #0]
 8014bde:	2000      	movs	r0, #0
 8014be0:	e022      	b.n	8014c28 <__sflush_r+0xf8>
 8014be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014be6:	b21b      	sxth	r3, r3
 8014be8:	e01b      	b.n	8014c22 <__sflush_r+0xf2>
 8014bea:	690f      	ldr	r7, [r1, #16]
 8014bec:	2f00      	cmp	r7, #0
 8014bee:	d0f6      	beq.n	8014bde <__sflush_r+0xae>
 8014bf0:	0793      	lsls	r3, r2, #30
 8014bf2:	680e      	ldr	r6, [r1, #0]
 8014bf4:	bf08      	it	eq
 8014bf6:	694b      	ldreq	r3, [r1, #20]
 8014bf8:	600f      	str	r7, [r1, #0]
 8014bfa:	bf18      	it	ne
 8014bfc:	2300      	movne	r3, #0
 8014bfe:	eba6 0807 	sub.w	r8, r6, r7
 8014c02:	608b      	str	r3, [r1, #8]
 8014c04:	f1b8 0f00 	cmp.w	r8, #0
 8014c08:	dde9      	ble.n	8014bde <__sflush_r+0xae>
 8014c0a:	6a21      	ldr	r1, [r4, #32]
 8014c0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014c0e:	4643      	mov	r3, r8
 8014c10:	463a      	mov	r2, r7
 8014c12:	4628      	mov	r0, r5
 8014c14:	47b0      	blx	r6
 8014c16:	2800      	cmp	r0, #0
 8014c18:	dc08      	bgt.n	8014c2c <__sflush_r+0xfc>
 8014c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014c22:	81a3      	strh	r3, [r4, #12]
 8014c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c2c:	4407      	add	r7, r0
 8014c2e:	eba8 0800 	sub.w	r8, r8, r0
 8014c32:	e7e7      	b.n	8014c04 <__sflush_r+0xd4>
 8014c34:	dfbffffe 	.word	0xdfbffffe

08014c38 <_fflush_r>:
 8014c38:	b538      	push	{r3, r4, r5, lr}
 8014c3a:	690b      	ldr	r3, [r1, #16]
 8014c3c:	4605      	mov	r5, r0
 8014c3e:	460c      	mov	r4, r1
 8014c40:	b913      	cbnz	r3, 8014c48 <_fflush_r+0x10>
 8014c42:	2500      	movs	r5, #0
 8014c44:	4628      	mov	r0, r5
 8014c46:	bd38      	pop	{r3, r4, r5, pc}
 8014c48:	b118      	cbz	r0, 8014c52 <_fflush_r+0x1a>
 8014c4a:	6a03      	ldr	r3, [r0, #32]
 8014c4c:	b90b      	cbnz	r3, 8014c52 <_fflush_r+0x1a>
 8014c4e:	f7ff f9f3 	bl	8014038 <__sinit>
 8014c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d0f3      	beq.n	8014c42 <_fflush_r+0xa>
 8014c5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014c5c:	07d0      	lsls	r0, r2, #31
 8014c5e:	d404      	bmi.n	8014c6a <_fflush_r+0x32>
 8014c60:	0599      	lsls	r1, r3, #22
 8014c62:	d402      	bmi.n	8014c6a <_fflush_r+0x32>
 8014c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c66:	f7ff fbba 	bl	80143de <__retarget_lock_acquire_recursive>
 8014c6a:	4628      	mov	r0, r5
 8014c6c:	4621      	mov	r1, r4
 8014c6e:	f7ff ff5f 	bl	8014b30 <__sflush_r>
 8014c72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014c74:	07da      	lsls	r2, r3, #31
 8014c76:	4605      	mov	r5, r0
 8014c78:	d4e4      	bmi.n	8014c44 <_fflush_r+0xc>
 8014c7a:	89a3      	ldrh	r3, [r4, #12]
 8014c7c:	059b      	lsls	r3, r3, #22
 8014c7e:	d4e1      	bmi.n	8014c44 <_fflush_r+0xc>
 8014c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014c82:	f7ff fbad 	bl	80143e0 <__retarget_lock_release_recursive>
 8014c86:	e7dd      	b.n	8014c44 <_fflush_r+0xc>

08014c88 <__malloc_lock>:
 8014c88:	4801      	ldr	r0, [pc, #4]	@ (8014c90 <__malloc_lock+0x8>)
 8014c8a:	f7ff bba8 	b.w	80143de <__retarget_lock_acquire_recursive>
 8014c8e:	bf00      	nop
 8014c90:	2000b55c 	.word	0x2000b55c

08014c94 <__malloc_unlock>:
 8014c94:	4801      	ldr	r0, [pc, #4]	@ (8014c9c <__malloc_unlock+0x8>)
 8014c96:	f7ff bba3 	b.w	80143e0 <__retarget_lock_release_recursive>
 8014c9a:	bf00      	nop
 8014c9c:	2000b55c 	.word	0x2000b55c

08014ca0 <__sread>:
 8014ca0:	b510      	push	{r4, lr}
 8014ca2:	460c      	mov	r4, r1
 8014ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ca8:	f000 f98a 	bl	8014fc0 <_read_r>
 8014cac:	2800      	cmp	r0, #0
 8014cae:	bfab      	itete	ge
 8014cb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8014cb4:	181b      	addge	r3, r3, r0
 8014cb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014cba:	bfac      	ite	ge
 8014cbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014cbe:	81a3      	strhlt	r3, [r4, #12]
 8014cc0:	bd10      	pop	{r4, pc}

08014cc2 <__swrite>:
 8014cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014cc6:	461f      	mov	r7, r3
 8014cc8:	898b      	ldrh	r3, [r1, #12]
 8014cca:	05db      	lsls	r3, r3, #23
 8014ccc:	4605      	mov	r5, r0
 8014cce:	460c      	mov	r4, r1
 8014cd0:	4616      	mov	r6, r2
 8014cd2:	d505      	bpl.n	8014ce0 <__swrite+0x1e>
 8014cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014cd8:	2302      	movs	r3, #2
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f000 f95e 	bl	8014f9c <_lseek_r>
 8014ce0:	89a3      	ldrh	r3, [r4, #12]
 8014ce2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014ce6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014cea:	81a3      	strh	r3, [r4, #12]
 8014cec:	4632      	mov	r2, r6
 8014cee:	463b      	mov	r3, r7
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014cf6:	f000 b985 	b.w	8015004 <_write_r>

08014cfa <__sseek>:
 8014cfa:	b510      	push	{r4, lr}
 8014cfc:	460c      	mov	r4, r1
 8014cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d02:	f000 f94b 	bl	8014f9c <_lseek_r>
 8014d06:	1c43      	adds	r3, r0, #1
 8014d08:	89a3      	ldrh	r3, [r4, #12]
 8014d0a:	bf15      	itete	ne
 8014d0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014d0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014d12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014d16:	81a3      	strheq	r3, [r4, #12]
 8014d18:	bf18      	it	ne
 8014d1a:	81a3      	strhne	r3, [r4, #12]
 8014d1c:	bd10      	pop	{r4, pc}

08014d1e <__sclose>:
 8014d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d22:	f000 b909 	b.w	8014f38 <_close_r>
	...

08014d28 <fiprintf>:
 8014d28:	b40e      	push	{r1, r2, r3}
 8014d2a:	b503      	push	{r0, r1, lr}
 8014d2c:	4601      	mov	r1, r0
 8014d2e:	ab03      	add	r3, sp, #12
 8014d30:	4805      	ldr	r0, [pc, #20]	@ (8014d48 <fiprintf+0x20>)
 8014d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d36:	6800      	ldr	r0, [r0, #0]
 8014d38:	9301      	str	r3, [sp, #4]
 8014d3a:	f7ff fba9 	bl	8014490 <_vfiprintf_r>
 8014d3e:	b002      	add	sp, #8
 8014d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d44:	b003      	add	sp, #12
 8014d46:	4770      	bx	lr
 8014d48:	200000a8 	.word	0x200000a8

08014d4c <__swbuf_r>:
 8014d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d4e:	460e      	mov	r6, r1
 8014d50:	4614      	mov	r4, r2
 8014d52:	4605      	mov	r5, r0
 8014d54:	b118      	cbz	r0, 8014d5e <__swbuf_r+0x12>
 8014d56:	6a03      	ldr	r3, [r0, #32]
 8014d58:	b90b      	cbnz	r3, 8014d5e <__swbuf_r+0x12>
 8014d5a:	f7ff f96d 	bl	8014038 <__sinit>
 8014d5e:	69a3      	ldr	r3, [r4, #24]
 8014d60:	60a3      	str	r3, [r4, #8]
 8014d62:	89a3      	ldrh	r3, [r4, #12]
 8014d64:	071a      	lsls	r2, r3, #28
 8014d66:	d501      	bpl.n	8014d6c <__swbuf_r+0x20>
 8014d68:	6923      	ldr	r3, [r4, #16]
 8014d6a:	b943      	cbnz	r3, 8014d7e <__swbuf_r+0x32>
 8014d6c:	4621      	mov	r1, r4
 8014d6e:	4628      	mov	r0, r5
 8014d70:	f000 f82a 	bl	8014dc8 <__swsetup_r>
 8014d74:	b118      	cbz	r0, 8014d7e <__swbuf_r+0x32>
 8014d76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014d7e:	6823      	ldr	r3, [r4, #0]
 8014d80:	6922      	ldr	r2, [r4, #16]
 8014d82:	1a98      	subs	r0, r3, r2
 8014d84:	6963      	ldr	r3, [r4, #20]
 8014d86:	b2f6      	uxtb	r6, r6
 8014d88:	4283      	cmp	r3, r0
 8014d8a:	4637      	mov	r7, r6
 8014d8c:	dc05      	bgt.n	8014d9a <__swbuf_r+0x4e>
 8014d8e:	4621      	mov	r1, r4
 8014d90:	4628      	mov	r0, r5
 8014d92:	f7ff ff51 	bl	8014c38 <_fflush_r>
 8014d96:	2800      	cmp	r0, #0
 8014d98:	d1ed      	bne.n	8014d76 <__swbuf_r+0x2a>
 8014d9a:	68a3      	ldr	r3, [r4, #8]
 8014d9c:	3b01      	subs	r3, #1
 8014d9e:	60a3      	str	r3, [r4, #8]
 8014da0:	6823      	ldr	r3, [r4, #0]
 8014da2:	1c5a      	adds	r2, r3, #1
 8014da4:	6022      	str	r2, [r4, #0]
 8014da6:	701e      	strb	r6, [r3, #0]
 8014da8:	6962      	ldr	r2, [r4, #20]
 8014daa:	1c43      	adds	r3, r0, #1
 8014dac:	429a      	cmp	r2, r3
 8014dae:	d004      	beq.n	8014dba <__swbuf_r+0x6e>
 8014db0:	89a3      	ldrh	r3, [r4, #12]
 8014db2:	07db      	lsls	r3, r3, #31
 8014db4:	d5e1      	bpl.n	8014d7a <__swbuf_r+0x2e>
 8014db6:	2e0a      	cmp	r6, #10
 8014db8:	d1df      	bne.n	8014d7a <__swbuf_r+0x2e>
 8014dba:	4621      	mov	r1, r4
 8014dbc:	4628      	mov	r0, r5
 8014dbe:	f7ff ff3b 	bl	8014c38 <_fflush_r>
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	d0d9      	beq.n	8014d7a <__swbuf_r+0x2e>
 8014dc6:	e7d6      	b.n	8014d76 <__swbuf_r+0x2a>

08014dc8 <__swsetup_r>:
 8014dc8:	b538      	push	{r3, r4, r5, lr}
 8014dca:	4b29      	ldr	r3, [pc, #164]	@ (8014e70 <__swsetup_r+0xa8>)
 8014dcc:	4605      	mov	r5, r0
 8014dce:	6818      	ldr	r0, [r3, #0]
 8014dd0:	460c      	mov	r4, r1
 8014dd2:	b118      	cbz	r0, 8014ddc <__swsetup_r+0x14>
 8014dd4:	6a03      	ldr	r3, [r0, #32]
 8014dd6:	b90b      	cbnz	r3, 8014ddc <__swsetup_r+0x14>
 8014dd8:	f7ff f92e 	bl	8014038 <__sinit>
 8014ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014de0:	0719      	lsls	r1, r3, #28
 8014de2:	d422      	bmi.n	8014e2a <__swsetup_r+0x62>
 8014de4:	06da      	lsls	r2, r3, #27
 8014de6:	d407      	bmi.n	8014df8 <__swsetup_r+0x30>
 8014de8:	2209      	movs	r2, #9
 8014dea:	602a      	str	r2, [r5, #0]
 8014dec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014df0:	81a3      	strh	r3, [r4, #12]
 8014df2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014df6:	e033      	b.n	8014e60 <__swsetup_r+0x98>
 8014df8:	0758      	lsls	r0, r3, #29
 8014dfa:	d512      	bpl.n	8014e22 <__swsetup_r+0x5a>
 8014dfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014dfe:	b141      	cbz	r1, 8014e12 <__swsetup_r+0x4a>
 8014e00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e04:	4299      	cmp	r1, r3
 8014e06:	d002      	beq.n	8014e0e <__swsetup_r+0x46>
 8014e08:	4628      	mov	r0, r5
 8014e0a:	f000 f915 	bl	8015038 <_free_r>
 8014e0e:	2300      	movs	r3, #0
 8014e10:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e12:	89a3      	ldrh	r3, [r4, #12]
 8014e14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014e18:	81a3      	strh	r3, [r4, #12]
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	6063      	str	r3, [r4, #4]
 8014e1e:	6923      	ldr	r3, [r4, #16]
 8014e20:	6023      	str	r3, [r4, #0]
 8014e22:	89a3      	ldrh	r3, [r4, #12]
 8014e24:	f043 0308 	orr.w	r3, r3, #8
 8014e28:	81a3      	strh	r3, [r4, #12]
 8014e2a:	6923      	ldr	r3, [r4, #16]
 8014e2c:	b94b      	cbnz	r3, 8014e42 <__swsetup_r+0x7a>
 8014e2e:	89a3      	ldrh	r3, [r4, #12]
 8014e30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e38:	d003      	beq.n	8014e42 <__swsetup_r+0x7a>
 8014e3a:	4621      	mov	r1, r4
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	f000 f83f 	bl	8014ec0 <__smakebuf_r>
 8014e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e46:	f013 0201 	ands.w	r2, r3, #1
 8014e4a:	d00a      	beq.n	8014e62 <__swsetup_r+0x9a>
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	60a2      	str	r2, [r4, #8]
 8014e50:	6962      	ldr	r2, [r4, #20]
 8014e52:	4252      	negs	r2, r2
 8014e54:	61a2      	str	r2, [r4, #24]
 8014e56:	6922      	ldr	r2, [r4, #16]
 8014e58:	b942      	cbnz	r2, 8014e6c <__swsetup_r+0xa4>
 8014e5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014e5e:	d1c5      	bne.n	8014dec <__swsetup_r+0x24>
 8014e60:	bd38      	pop	{r3, r4, r5, pc}
 8014e62:	0799      	lsls	r1, r3, #30
 8014e64:	bf58      	it	pl
 8014e66:	6962      	ldrpl	r2, [r4, #20]
 8014e68:	60a2      	str	r2, [r4, #8]
 8014e6a:	e7f4      	b.n	8014e56 <__swsetup_r+0x8e>
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	e7f7      	b.n	8014e60 <__swsetup_r+0x98>
 8014e70:	200000a8 	.word	0x200000a8

08014e74 <__swhatbuf_r>:
 8014e74:	b570      	push	{r4, r5, r6, lr}
 8014e76:	460c      	mov	r4, r1
 8014e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e7c:	2900      	cmp	r1, #0
 8014e7e:	b096      	sub	sp, #88	@ 0x58
 8014e80:	4615      	mov	r5, r2
 8014e82:	461e      	mov	r6, r3
 8014e84:	da0d      	bge.n	8014ea2 <__swhatbuf_r+0x2e>
 8014e86:	89a3      	ldrh	r3, [r4, #12]
 8014e88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014e8c:	f04f 0100 	mov.w	r1, #0
 8014e90:	bf14      	ite	ne
 8014e92:	2340      	movne	r3, #64	@ 0x40
 8014e94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014e98:	2000      	movs	r0, #0
 8014e9a:	6031      	str	r1, [r6, #0]
 8014e9c:	602b      	str	r3, [r5, #0]
 8014e9e:	b016      	add	sp, #88	@ 0x58
 8014ea0:	bd70      	pop	{r4, r5, r6, pc}
 8014ea2:	466a      	mov	r2, sp
 8014ea4:	f000 f858 	bl	8014f58 <_fstat_r>
 8014ea8:	2800      	cmp	r0, #0
 8014eaa:	dbec      	blt.n	8014e86 <__swhatbuf_r+0x12>
 8014eac:	9901      	ldr	r1, [sp, #4]
 8014eae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014eb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014eb6:	4259      	negs	r1, r3
 8014eb8:	4159      	adcs	r1, r3
 8014eba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ebe:	e7eb      	b.n	8014e98 <__swhatbuf_r+0x24>

08014ec0 <__smakebuf_r>:
 8014ec0:	898b      	ldrh	r3, [r1, #12]
 8014ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014ec4:	079d      	lsls	r5, r3, #30
 8014ec6:	4606      	mov	r6, r0
 8014ec8:	460c      	mov	r4, r1
 8014eca:	d507      	bpl.n	8014edc <__smakebuf_r+0x1c>
 8014ecc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ed0:	6023      	str	r3, [r4, #0]
 8014ed2:	6123      	str	r3, [r4, #16]
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	6163      	str	r3, [r4, #20]
 8014ed8:	b003      	add	sp, #12
 8014eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014edc:	ab01      	add	r3, sp, #4
 8014ede:	466a      	mov	r2, sp
 8014ee0:	f7ff ffc8 	bl	8014e74 <__swhatbuf_r>
 8014ee4:	9f00      	ldr	r7, [sp, #0]
 8014ee6:	4605      	mov	r5, r0
 8014ee8:	4639      	mov	r1, r7
 8014eea:	4630      	mov	r0, r6
 8014eec:	f7ff fc12 	bl	8014714 <_malloc_r>
 8014ef0:	b948      	cbnz	r0, 8014f06 <__smakebuf_r+0x46>
 8014ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ef6:	059a      	lsls	r2, r3, #22
 8014ef8:	d4ee      	bmi.n	8014ed8 <__smakebuf_r+0x18>
 8014efa:	f023 0303 	bic.w	r3, r3, #3
 8014efe:	f043 0302 	orr.w	r3, r3, #2
 8014f02:	81a3      	strh	r3, [r4, #12]
 8014f04:	e7e2      	b.n	8014ecc <__smakebuf_r+0xc>
 8014f06:	89a3      	ldrh	r3, [r4, #12]
 8014f08:	6020      	str	r0, [r4, #0]
 8014f0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f0e:	81a3      	strh	r3, [r4, #12]
 8014f10:	9b01      	ldr	r3, [sp, #4]
 8014f12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014f16:	b15b      	cbz	r3, 8014f30 <__smakebuf_r+0x70>
 8014f18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f1c:	4630      	mov	r0, r6
 8014f1e:	f000 f82d 	bl	8014f7c <_isatty_r>
 8014f22:	b128      	cbz	r0, 8014f30 <__smakebuf_r+0x70>
 8014f24:	89a3      	ldrh	r3, [r4, #12]
 8014f26:	f023 0303 	bic.w	r3, r3, #3
 8014f2a:	f043 0301 	orr.w	r3, r3, #1
 8014f2e:	81a3      	strh	r3, [r4, #12]
 8014f30:	89a3      	ldrh	r3, [r4, #12]
 8014f32:	431d      	orrs	r5, r3
 8014f34:	81a5      	strh	r5, [r4, #12]
 8014f36:	e7cf      	b.n	8014ed8 <__smakebuf_r+0x18>

08014f38 <_close_r>:
 8014f38:	b538      	push	{r3, r4, r5, lr}
 8014f3a:	4d06      	ldr	r5, [pc, #24]	@ (8014f54 <_close_r+0x1c>)
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	4604      	mov	r4, r0
 8014f40:	4608      	mov	r0, r1
 8014f42:	602b      	str	r3, [r5, #0]
 8014f44:	f7ec fc8e 	bl	8001864 <_close>
 8014f48:	1c43      	adds	r3, r0, #1
 8014f4a:	d102      	bne.n	8014f52 <_close_r+0x1a>
 8014f4c:	682b      	ldr	r3, [r5, #0]
 8014f4e:	b103      	cbz	r3, 8014f52 <_close_r+0x1a>
 8014f50:	6023      	str	r3, [r4, #0]
 8014f52:	bd38      	pop	{r3, r4, r5, pc}
 8014f54:	2000b568 	.word	0x2000b568

08014f58 <_fstat_r>:
 8014f58:	b538      	push	{r3, r4, r5, lr}
 8014f5a:	4d07      	ldr	r5, [pc, #28]	@ (8014f78 <_fstat_r+0x20>)
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	4604      	mov	r4, r0
 8014f60:	4608      	mov	r0, r1
 8014f62:	4611      	mov	r1, r2
 8014f64:	602b      	str	r3, [r5, #0]
 8014f66:	f7ec fc89 	bl	800187c <_fstat>
 8014f6a:	1c43      	adds	r3, r0, #1
 8014f6c:	d102      	bne.n	8014f74 <_fstat_r+0x1c>
 8014f6e:	682b      	ldr	r3, [r5, #0]
 8014f70:	b103      	cbz	r3, 8014f74 <_fstat_r+0x1c>
 8014f72:	6023      	str	r3, [r4, #0]
 8014f74:	bd38      	pop	{r3, r4, r5, pc}
 8014f76:	bf00      	nop
 8014f78:	2000b568 	.word	0x2000b568

08014f7c <_isatty_r>:
 8014f7c:	b538      	push	{r3, r4, r5, lr}
 8014f7e:	4d06      	ldr	r5, [pc, #24]	@ (8014f98 <_isatty_r+0x1c>)
 8014f80:	2300      	movs	r3, #0
 8014f82:	4604      	mov	r4, r0
 8014f84:	4608      	mov	r0, r1
 8014f86:	602b      	str	r3, [r5, #0]
 8014f88:	f7ec fc88 	bl	800189c <_isatty>
 8014f8c:	1c43      	adds	r3, r0, #1
 8014f8e:	d102      	bne.n	8014f96 <_isatty_r+0x1a>
 8014f90:	682b      	ldr	r3, [r5, #0]
 8014f92:	b103      	cbz	r3, 8014f96 <_isatty_r+0x1a>
 8014f94:	6023      	str	r3, [r4, #0]
 8014f96:	bd38      	pop	{r3, r4, r5, pc}
 8014f98:	2000b568 	.word	0x2000b568

08014f9c <_lseek_r>:
 8014f9c:	b538      	push	{r3, r4, r5, lr}
 8014f9e:	4d07      	ldr	r5, [pc, #28]	@ (8014fbc <_lseek_r+0x20>)
 8014fa0:	4604      	mov	r4, r0
 8014fa2:	4608      	mov	r0, r1
 8014fa4:	4611      	mov	r1, r2
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	602a      	str	r2, [r5, #0]
 8014faa:	461a      	mov	r2, r3
 8014fac:	f7ec fc81 	bl	80018b2 <_lseek>
 8014fb0:	1c43      	adds	r3, r0, #1
 8014fb2:	d102      	bne.n	8014fba <_lseek_r+0x1e>
 8014fb4:	682b      	ldr	r3, [r5, #0]
 8014fb6:	b103      	cbz	r3, 8014fba <_lseek_r+0x1e>
 8014fb8:	6023      	str	r3, [r4, #0]
 8014fba:	bd38      	pop	{r3, r4, r5, pc}
 8014fbc:	2000b568 	.word	0x2000b568

08014fc0 <_read_r>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	4d07      	ldr	r5, [pc, #28]	@ (8014fe0 <_read_r+0x20>)
 8014fc4:	4604      	mov	r4, r0
 8014fc6:	4608      	mov	r0, r1
 8014fc8:	4611      	mov	r1, r2
 8014fca:	2200      	movs	r2, #0
 8014fcc:	602a      	str	r2, [r5, #0]
 8014fce:	461a      	mov	r2, r3
 8014fd0:	f7ec fc0f 	bl	80017f2 <_read>
 8014fd4:	1c43      	adds	r3, r0, #1
 8014fd6:	d102      	bne.n	8014fde <_read_r+0x1e>
 8014fd8:	682b      	ldr	r3, [r5, #0]
 8014fda:	b103      	cbz	r3, 8014fde <_read_r+0x1e>
 8014fdc:	6023      	str	r3, [r4, #0]
 8014fde:	bd38      	pop	{r3, r4, r5, pc}
 8014fe0:	2000b568 	.word	0x2000b568

08014fe4 <_sbrk_r>:
 8014fe4:	b538      	push	{r3, r4, r5, lr}
 8014fe6:	4d06      	ldr	r5, [pc, #24]	@ (8015000 <_sbrk_r+0x1c>)
 8014fe8:	2300      	movs	r3, #0
 8014fea:	4604      	mov	r4, r0
 8014fec:	4608      	mov	r0, r1
 8014fee:	602b      	str	r3, [r5, #0]
 8014ff0:	f7ec fc6c 	bl	80018cc <_sbrk>
 8014ff4:	1c43      	adds	r3, r0, #1
 8014ff6:	d102      	bne.n	8014ffe <_sbrk_r+0x1a>
 8014ff8:	682b      	ldr	r3, [r5, #0]
 8014ffa:	b103      	cbz	r3, 8014ffe <_sbrk_r+0x1a>
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	bd38      	pop	{r3, r4, r5, pc}
 8015000:	2000b568 	.word	0x2000b568

08015004 <_write_r>:
 8015004:	b538      	push	{r3, r4, r5, lr}
 8015006:	4d07      	ldr	r5, [pc, #28]	@ (8015024 <_write_r+0x20>)
 8015008:	4604      	mov	r4, r0
 801500a:	4608      	mov	r0, r1
 801500c:	4611      	mov	r1, r2
 801500e:	2200      	movs	r2, #0
 8015010:	602a      	str	r2, [r5, #0]
 8015012:	461a      	mov	r2, r3
 8015014:	f7ec fc0a 	bl	800182c <_write>
 8015018:	1c43      	adds	r3, r0, #1
 801501a:	d102      	bne.n	8015022 <_write_r+0x1e>
 801501c:	682b      	ldr	r3, [r5, #0]
 801501e:	b103      	cbz	r3, 8015022 <_write_r+0x1e>
 8015020:	6023      	str	r3, [r4, #0]
 8015022:	bd38      	pop	{r3, r4, r5, pc}
 8015024:	2000b568 	.word	0x2000b568

08015028 <abort>:
 8015028:	b508      	push	{r3, lr}
 801502a:	2006      	movs	r0, #6
 801502c:	f000 f876 	bl	801511c <raise>
 8015030:	2001      	movs	r0, #1
 8015032:	f7ec fbd3 	bl	80017dc <_exit>
	...

08015038 <_free_r>:
 8015038:	b538      	push	{r3, r4, r5, lr}
 801503a:	4605      	mov	r5, r0
 801503c:	2900      	cmp	r1, #0
 801503e:	d041      	beq.n	80150c4 <_free_r+0x8c>
 8015040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015044:	1f0c      	subs	r4, r1, #4
 8015046:	2b00      	cmp	r3, #0
 8015048:	bfb8      	it	lt
 801504a:	18e4      	addlt	r4, r4, r3
 801504c:	f7ff fe1c 	bl	8014c88 <__malloc_lock>
 8015050:	4a1d      	ldr	r2, [pc, #116]	@ (80150c8 <_free_r+0x90>)
 8015052:	6813      	ldr	r3, [r2, #0]
 8015054:	b933      	cbnz	r3, 8015064 <_free_r+0x2c>
 8015056:	6063      	str	r3, [r4, #4]
 8015058:	6014      	str	r4, [r2, #0]
 801505a:	4628      	mov	r0, r5
 801505c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015060:	f7ff be18 	b.w	8014c94 <__malloc_unlock>
 8015064:	42a3      	cmp	r3, r4
 8015066:	d908      	bls.n	801507a <_free_r+0x42>
 8015068:	6820      	ldr	r0, [r4, #0]
 801506a:	1821      	adds	r1, r4, r0
 801506c:	428b      	cmp	r3, r1
 801506e:	bf01      	itttt	eq
 8015070:	6819      	ldreq	r1, [r3, #0]
 8015072:	685b      	ldreq	r3, [r3, #4]
 8015074:	1809      	addeq	r1, r1, r0
 8015076:	6021      	streq	r1, [r4, #0]
 8015078:	e7ed      	b.n	8015056 <_free_r+0x1e>
 801507a:	461a      	mov	r2, r3
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	b10b      	cbz	r3, 8015084 <_free_r+0x4c>
 8015080:	42a3      	cmp	r3, r4
 8015082:	d9fa      	bls.n	801507a <_free_r+0x42>
 8015084:	6811      	ldr	r1, [r2, #0]
 8015086:	1850      	adds	r0, r2, r1
 8015088:	42a0      	cmp	r0, r4
 801508a:	d10b      	bne.n	80150a4 <_free_r+0x6c>
 801508c:	6820      	ldr	r0, [r4, #0]
 801508e:	4401      	add	r1, r0
 8015090:	1850      	adds	r0, r2, r1
 8015092:	4283      	cmp	r3, r0
 8015094:	6011      	str	r1, [r2, #0]
 8015096:	d1e0      	bne.n	801505a <_free_r+0x22>
 8015098:	6818      	ldr	r0, [r3, #0]
 801509a:	685b      	ldr	r3, [r3, #4]
 801509c:	6053      	str	r3, [r2, #4]
 801509e:	4408      	add	r0, r1
 80150a0:	6010      	str	r0, [r2, #0]
 80150a2:	e7da      	b.n	801505a <_free_r+0x22>
 80150a4:	d902      	bls.n	80150ac <_free_r+0x74>
 80150a6:	230c      	movs	r3, #12
 80150a8:	602b      	str	r3, [r5, #0]
 80150aa:	e7d6      	b.n	801505a <_free_r+0x22>
 80150ac:	6820      	ldr	r0, [r4, #0]
 80150ae:	1821      	adds	r1, r4, r0
 80150b0:	428b      	cmp	r3, r1
 80150b2:	bf04      	itt	eq
 80150b4:	6819      	ldreq	r1, [r3, #0]
 80150b6:	685b      	ldreq	r3, [r3, #4]
 80150b8:	6063      	str	r3, [r4, #4]
 80150ba:	bf04      	itt	eq
 80150bc:	1809      	addeq	r1, r1, r0
 80150be:	6021      	streq	r1, [r4, #0]
 80150c0:	6054      	str	r4, [r2, #4]
 80150c2:	e7ca      	b.n	801505a <_free_r+0x22>
 80150c4:	bd38      	pop	{r3, r4, r5, pc}
 80150c6:	bf00      	nop
 80150c8:	2000b564 	.word	0x2000b564

080150cc <_raise_r>:
 80150cc:	291f      	cmp	r1, #31
 80150ce:	b538      	push	{r3, r4, r5, lr}
 80150d0:	4605      	mov	r5, r0
 80150d2:	460c      	mov	r4, r1
 80150d4:	d904      	bls.n	80150e0 <_raise_r+0x14>
 80150d6:	2316      	movs	r3, #22
 80150d8:	6003      	str	r3, [r0, #0]
 80150da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80150de:	bd38      	pop	{r3, r4, r5, pc}
 80150e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80150e2:	b112      	cbz	r2, 80150ea <_raise_r+0x1e>
 80150e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150e8:	b94b      	cbnz	r3, 80150fe <_raise_r+0x32>
 80150ea:	4628      	mov	r0, r5
 80150ec:	f000 f830 	bl	8015150 <_getpid_r>
 80150f0:	4622      	mov	r2, r4
 80150f2:	4601      	mov	r1, r0
 80150f4:	4628      	mov	r0, r5
 80150f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150fa:	f000 b817 	b.w	801512c <_kill_r>
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d00a      	beq.n	8015118 <_raise_r+0x4c>
 8015102:	1c59      	adds	r1, r3, #1
 8015104:	d103      	bne.n	801510e <_raise_r+0x42>
 8015106:	2316      	movs	r3, #22
 8015108:	6003      	str	r3, [r0, #0]
 801510a:	2001      	movs	r0, #1
 801510c:	e7e7      	b.n	80150de <_raise_r+0x12>
 801510e:	2100      	movs	r1, #0
 8015110:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015114:	4620      	mov	r0, r4
 8015116:	4798      	blx	r3
 8015118:	2000      	movs	r0, #0
 801511a:	e7e0      	b.n	80150de <_raise_r+0x12>

0801511c <raise>:
 801511c:	4b02      	ldr	r3, [pc, #8]	@ (8015128 <raise+0xc>)
 801511e:	4601      	mov	r1, r0
 8015120:	6818      	ldr	r0, [r3, #0]
 8015122:	f7ff bfd3 	b.w	80150cc <_raise_r>
 8015126:	bf00      	nop
 8015128:	200000a8 	.word	0x200000a8

0801512c <_kill_r>:
 801512c:	b538      	push	{r3, r4, r5, lr}
 801512e:	4d07      	ldr	r5, [pc, #28]	@ (801514c <_kill_r+0x20>)
 8015130:	2300      	movs	r3, #0
 8015132:	4604      	mov	r4, r0
 8015134:	4608      	mov	r0, r1
 8015136:	4611      	mov	r1, r2
 8015138:	602b      	str	r3, [r5, #0]
 801513a:	f7ec fb3f 	bl	80017bc <_kill>
 801513e:	1c43      	adds	r3, r0, #1
 8015140:	d102      	bne.n	8015148 <_kill_r+0x1c>
 8015142:	682b      	ldr	r3, [r5, #0]
 8015144:	b103      	cbz	r3, 8015148 <_kill_r+0x1c>
 8015146:	6023      	str	r3, [r4, #0]
 8015148:	bd38      	pop	{r3, r4, r5, pc}
 801514a:	bf00      	nop
 801514c:	2000b568 	.word	0x2000b568

08015150 <_getpid_r>:
 8015150:	f7ec bb2c 	b.w	80017ac <_getpid>

08015154 <_init>:
 8015154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015156:	bf00      	nop
 8015158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801515a:	bc08      	pop	{r3}
 801515c:	469e      	mov	lr, r3
 801515e:	4770      	bx	lr

08015160 <_fini>:
 8015160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015162:	bf00      	nop
 8015164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015166:	bc08      	pop	{r3}
 8015168:	469e      	mov	lr, r3
 801516a:	4770      	bx	lr
